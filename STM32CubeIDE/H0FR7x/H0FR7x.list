
H0FR7x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018094  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a14  08018150  08018150  00028150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bb64  0801bb64  00030a88  2**0
                  CONTENTS
  4 .ARM          00000008  0801bb64  0801bb64  0002bb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bb6c  0801bb6c  00030a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801bb6c  0801bb6c  0002bb6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bb74  0801bb74  0002bb74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000000c  20000000  0801bb78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a78  20000010  0801bb84  00030010  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006358  20000a88  0801c5fc  00030a88  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20006de0  0801c5fc  00036de0  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a88  2**0
                  CONTENTS, READONLY
 13 .debug_info   00057611  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000097af  00000000  00000000  000880c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b8c1  00000000  00000000  00091870  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001b28  00000000  00000000  000ad138  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003008  00000000  00000000  000aec60  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00018180  00000000  00000000  000b1c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000ac08  00000000  00000000  000c9de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d49f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006654  00000000  00000000  000d4a6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a88 	.word	0x20000a88
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08018138 	.word	0x08018138

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a8c 	.word	0x20000a8c
 8000100:	08018138 	.word	0x08018138

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fd9b 	bl	8001f88 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fcf3 	bl	8001e48 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fd8d 	bl	8001f88 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd83 	bl	8001f88 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd15 	bl	8001ec0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd0b 	bl	8001ec0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fafd 	bl	8000ac0 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fa7f 	bl	80009d4 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 faef 	bl	8000ac0 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fae5 	bl	8000ac0 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fa8d 	bl	8000a24 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fa83 	bl	8000a24 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fdbb 	bl	800114c <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fbf1 	bl	8000dc4 <__aeabi_fsub>
 80005e2:	f000 fdb3 	bl	800114c <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 fafd 	bl	8002c04 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 ff92 	bl	800253c <__aeabi_dsub>
 8000618:	f002 faf4 	bl	8002c04 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fc71 	bl	8002f30 <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fc6c 	bl	8002f30 <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__aeabi_fdiv>:
 80007b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b2:	4657      	mov	r7, sl
 80007b4:	464e      	mov	r6, r9
 80007b6:	4645      	mov	r5, r8
 80007b8:	46de      	mov	lr, fp
 80007ba:	0244      	lsls	r4, r0, #9
 80007bc:	b5e0      	push	{r5, r6, r7, lr}
 80007be:	0046      	lsls	r6, r0, #1
 80007c0:	4688      	mov	r8, r1
 80007c2:	0a64      	lsrs	r4, r4, #9
 80007c4:	0e36      	lsrs	r6, r6, #24
 80007c6:	0fc7      	lsrs	r7, r0, #31
 80007c8:	2e00      	cmp	r6, #0
 80007ca:	d063      	beq.n	8000894 <__aeabi_fdiv+0xe4>
 80007cc:	2eff      	cmp	r6, #255	; 0xff
 80007ce:	d024      	beq.n	800081a <__aeabi_fdiv+0x6a>
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	00e4      	lsls	r4, r4, #3
 80007d4:	04db      	lsls	r3, r3, #19
 80007d6:	431c      	orrs	r4, r3
 80007d8:	2300      	movs	r3, #0
 80007da:	4699      	mov	r9, r3
 80007dc:	469b      	mov	fp, r3
 80007de:	3e7f      	subs	r6, #127	; 0x7f
 80007e0:	4643      	mov	r3, r8
 80007e2:	4642      	mov	r2, r8
 80007e4:	025d      	lsls	r5, r3, #9
 80007e6:	0fd2      	lsrs	r2, r2, #31
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	0a6d      	lsrs	r5, r5, #9
 80007ec:	0e1b      	lsrs	r3, r3, #24
 80007ee:	4690      	mov	r8, r2
 80007f0:	4692      	mov	sl, r2
 80007f2:	d065      	beq.n	80008c0 <__aeabi_fdiv+0x110>
 80007f4:	2bff      	cmp	r3, #255	; 0xff
 80007f6:	d055      	beq.n	80008a4 <__aeabi_fdiv+0xf4>
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	2100      	movs	r1, #0
 80007fc:	00ed      	lsls	r5, r5, #3
 80007fe:	04d2      	lsls	r2, r2, #19
 8000800:	3b7f      	subs	r3, #127	; 0x7f
 8000802:	4315      	orrs	r5, r2
 8000804:	1af6      	subs	r6, r6, r3
 8000806:	4643      	mov	r3, r8
 8000808:	464a      	mov	r2, r9
 800080a:	407b      	eors	r3, r7
 800080c:	2a0f      	cmp	r2, #15
 800080e:	d900      	bls.n	8000812 <__aeabi_fdiv+0x62>
 8000810:	e08d      	b.n	800092e <__aeabi_fdiv+0x17e>
 8000812:	486d      	ldr	r0, [pc, #436]	; (80009c8 <__aeabi_fdiv+0x218>)
 8000814:	0092      	lsls	r2, r2, #2
 8000816:	5882      	ldr	r2, [r0, r2]
 8000818:	4697      	mov	pc, r2
 800081a:	2c00      	cmp	r4, #0
 800081c:	d154      	bne.n	80008c8 <__aeabi_fdiv+0x118>
 800081e:	2308      	movs	r3, #8
 8000820:	4699      	mov	r9, r3
 8000822:	3b06      	subs	r3, #6
 8000824:	26ff      	movs	r6, #255	; 0xff
 8000826:	469b      	mov	fp, r3
 8000828:	e7da      	b.n	80007e0 <__aeabi_fdiv+0x30>
 800082a:	2500      	movs	r5, #0
 800082c:	4653      	mov	r3, sl
 800082e:	2902      	cmp	r1, #2
 8000830:	d01b      	beq.n	800086a <__aeabi_fdiv+0xba>
 8000832:	2903      	cmp	r1, #3
 8000834:	d100      	bne.n	8000838 <__aeabi_fdiv+0x88>
 8000836:	e0bf      	b.n	80009b8 <__aeabi_fdiv+0x208>
 8000838:	2901      	cmp	r1, #1
 800083a:	d028      	beq.n	800088e <__aeabi_fdiv+0xde>
 800083c:	0030      	movs	r0, r6
 800083e:	307f      	adds	r0, #127	; 0x7f
 8000840:	2800      	cmp	r0, #0
 8000842:	dd20      	ble.n	8000886 <__aeabi_fdiv+0xd6>
 8000844:	076a      	lsls	r2, r5, #29
 8000846:	d004      	beq.n	8000852 <__aeabi_fdiv+0xa2>
 8000848:	220f      	movs	r2, #15
 800084a:	402a      	ands	r2, r5
 800084c:	2a04      	cmp	r2, #4
 800084e:	d000      	beq.n	8000852 <__aeabi_fdiv+0xa2>
 8000850:	3504      	adds	r5, #4
 8000852:	012a      	lsls	r2, r5, #4
 8000854:	d503      	bpl.n	800085e <__aeabi_fdiv+0xae>
 8000856:	0030      	movs	r0, r6
 8000858:	4a5c      	ldr	r2, [pc, #368]	; (80009cc <__aeabi_fdiv+0x21c>)
 800085a:	3080      	adds	r0, #128	; 0x80
 800085c:	4015      	ands	r5, r2
 800085e:	28fe      	cmp	r0, #254	; 0xfe
 8000860:	dc03      	bgt.n	800086a <__aeabi_fdiv+0xba>
 8000862:	01ac      	lsls	r4, r5, #6
 8000864:	0a64      	lsrs	r4, r4, #9
 8000866:	b2c2      	uxtb	r2, r0
 8000868:	e001      	b.n	800086e <__aeabi_fdiv+0xbe>
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	2400      	movs	r4, #0
 800086e:	0264      	lsls	r4, r4, #9
 8000870:	05d2      	lsls	r2, r2, #23
 8000872:	0a60      	lsrs	r0, r4, #9
 8000874:	07db      	lsls	r3, r3, #31
 8000876:	4310      	orrs	r0, r2
 8000878:	4318      	orrs	r0, r3
 800087a:	bc3c      	pop	{r2, r3, r4, r5}
 800087c:	4690      	mov	r8, r2
 800087e:	4699      	mov	r9, r3
 8000880:	46a2      	mov	sl, r4
 8000882:	46ab      	mov	fp, r5
 8000884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000886:	2201      	movs	r2, #1
 8000888:	1a10      	subs	r0, r2, r0
 800088a:	281b      	cmp	r0, #27
 800088c:	dd7c      	ble.n	8000988 <__aeabi_fdiv+0x1d8>
 800088e:	2200      	movs	r2, #0
 8000890:	2400      	movs	r4, #0
 8000892:	e7ec      	b.n	800086e <__aeabi_fdiv+0xbe>
 8000894:	2c00      	cmp	r4, #0
 8000896:	d11d      	bne.n	80008d4 <__aeabi_fdiv+0x124>
 8000898:	2304      	movs	r3, #4
 800089a:	4699      	mov	r9, r3
 800089c:	3b03      	subs	r3, #3
 800089e:	2600      	movs	r6, #0
 80008a0:	469b      	mov	fp, r3
 80008a2:	e79d      	b.n	80007e0 <__aeabi_fdiv+0x30>
 80008a4:	3eff      	subs	r6, #255	; 0xff
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d120      	bne.n	80008ec <__aeabi_fdiv+0x13c>
 80008aa:	2102      	movs	r1, #2
 80008ac:	4643      	mov	r3, r8
 80008ae:	464a      	mov	r2, r9
 80008b0:	407b      	eors	r3, r7
 80008b2:	430a      	orrs	r2, r1
 80008b4:	2a0f      	cmp	r2, #15
 80008b6:	d8d8      	bhi.n	800086a <__aeabi_fdiv+0xba>
 80008b8:	4845      	ldr	r0, [pc, #276]	; (80009d0 <__aeabi_fdiv+0x220>)
 80008ba:	0092      	lsls	r2, r2, #2
 80008bc:	5882      	ldr	r2, [r0, r2]
 80008be:	4697      	mov	pc, r2
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d119      	bne.n	80008f8 <__aeabi_fdiv+0x148>
 80008c4:	2101      	movs	r1, #1
 80008c6:	e7f1      	b.n	80008ac <__aeabi_fdiv+0xfc>
 80008c8:	230c      	movs	r3, #12
 80008ca:	4699      	mov	r9, r3
 80008cc:	3b09      	subs	r3, #9
 80008ce:	26ff      	movs	r6, #255	; 0xff
 80008d0:	469b      	mov	fp, r3
 80008d2:	e785      	b.n	80007e0 <__aeabi_fdiv+0x30>
 80008d4:	0020      	movs	r0, r4
 80008d6:	f002 fb0d 	bl	8002ef4 <__clzsi2>
 80008da:	2676      	movs	r6, #118	; 0x76
 80008dc:	1f43      	subs	r3, r0, #5
 80008de:	409c      	lsls	r4, r3
 80008e0:	2300      	movs	r3, #0
 80008e2:	4276      	negs	r6, r6
 80008e4:	1a36      	subs	r6, r6, r0
 80008e6:	4699      	mov	r9, r3
 80008e8:	469b      	mov	fp, r3
 80008ea:	e779      	b.n	80007e0 <__aeabi_fdiv+0x30>
 80008ec:	464a      	mov	r2, r9
 80008ee:	2303      	movs	r3, #3
 80008f0:	431a      	orrs	r2, r3
 80008f2:	4691      	mov	r9, r2
 80008f4:	2103      	movs	r1, #3
 80008f6:	e786      	b.n	8000806 <__aeabi_fdiv+0x56>
 80008f8:	0028      	movs	r0, r5
 80008fa:	f002 fafb 	bl	8002ef4 <__clzsi2>
 80008fe:	1f43      	subs	r3, r0, #5
 8000900:	1836      	adds	r6, r6, r0
 8000902:	409d      	lsls	r5, r3
 8000904:	3676      	adds	r6, #118	; 0x76
 8000906:	2100      	movs	r1, #0
 8000908:	e77d      	b.n	8000806 <__aeabi_fdiv+0x56>
 800090a:	2480      	movs	r4, #128	; 0x80
 800090c:	2300      	movs	r3, #0
 800090e:	03e4      	lsls	r4, r4, #15
 8000910:	22ff      	movs	r2, #255	; 0xff
 8000912:	e7ac      	b.n	800086e <__aeabi_fdiv+0xbe>
 8000914:	2500      	movs	r5, #0
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	03db      	lsls	r3, r3, #15
 800091a:	421c      	tst	r4, r3
 800091c:	d028      	beq.n	8000970 <__aeabi_fdiv+0x1c0>
 800091e:	421d      	tst	r5, r3
 8000920:	d126      	bne.n	8000970 <__aeabi_fdiv+0x1c0>
 8000922:	432b      	orrs	r3, r5
 8000924:	025c      	lsls	r4, r3, #9
 8000926:	0a64      	lsrs	r4, r4, #9
 8000928:	4643      	mov	r3, r8
 800092a:	22ff      	movs	r2, #255	; 0xff
 800092c:	e79f      	b.n	800086e <__aeabi_fdiv+0xbe>
 800092e:	0162      	lsls	r2, r4, #5
 8000930:	016c      	lsls	r4, r5, #5
 8000932:	42a2      	cmp	r2, r4
 8000934:	d224      	bcs.n	8000980 <__aeabi_fdiv+0x1d0>
 8000936:	211b      	movs	r1, #27
 8000938:	2500      	movs	r5, #0
 800093a:	3e01      	subs	r6, #1
 800093c:	2701      	movs	r7, #1
 800093e:	0010      	movs	r0, r2
 8000940:	006d      	lsls	r5, r5, #1
 8000942:	0052      	lsls	r2, r2, #1
 8000944:	2800      	cmp	r0, #0
 8000946:	db01      	blt.n	800094c <__aeabi_fdiv+0x19c>
 8000948:	4294      	cmp	r4, r2
 800094a:	d801      	bhi.n	8000950 <__aeabi_fdiv+0x1a0>
 800094c:	1b12      	subs	r2, r2, r4
 800094e:	433d      	orrs	r5, r7
 8000950:	3901      	subs	r1, #1
 8000952:	2900      	cmp	r1, #0
 8000954:	d1f3      	bne.n	800093e <__aeabi_fdiv+0x18e>
 8000956:	0014      	movs	r4, r2
 8000958:	1e62      	subs	r2, r4, #1
 800095a:	4194      	sbcs	r4, r2
 800095c:	4325      	orrs	r5, r4
 800095e:	e76d      	b.n	800083c <__aeabi_fdiv+0x8c>
 8000960:	46ba      	mov	sl, r7
 8000962:	4659      	mov	r1, fp
 8000964:	0025      	movs	r5, r4
 8000966:	4653      	mov	r3, sl
 8000968:	2902      	cmp	r1, #2
 800096a:	d000      	beq.n	800096e <__aeabi_fdiv+0x1be>
 800096c:	e761      	b.n	8000832 <__aeabi_fdiv+0x82>
 800096e:	e77c      	b.n	800086a <__aeabi_fdiv+0xba>
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	03db      	lsls	r3, r3, #15
 8000974:	431c      	orrs	r4, r3
 8000976:	0264      	lsls	r4, r4, #9
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	003b      	movs	r3, r7
 800097c:	22ff      	movs	r2, #255	; 0xff
 800097e:	e776      	b.n	800086e <__aeabi_fdiv+0xbe>
 8000980:	1b12      	subs	r2, r2, r4
 8000982:	211a      	movs	r1, #26
 8000984:	2501      	movs	r5, #1
 8000986:	e7d9      	b.n	800093c <__aeabi_fdiv+0x18c>
 8000988:	369e      	adds	r6, #158	; 0x9e
 800098a:	002a      	movs	r2, r5
 800098c:	40b5      	lsls	r5, r6
 800098e:	002c      	movs	r4, r5
 8000990:	40c2      	lsrs	r2, r0
 8000992:	1e65      	subs	r5, r4, #1
 8000994:	41ac      	sbcs	r4, r5
 8000996:	4314      	orrs	r4, r2
 8000998:	0762      	lsls	r2, r4, #29
 800099a:	d004      	beq.n	80009a6 <__aeabi_fdiv+0x1f6>
 800099c:	220f      	movs	r2, #15
 800099e:	4022      	ands	r2, r4
 80009a0:	2a04      	cmp	r2, #4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fdiv+0x1f6>
 80009a4:	3404      	adds	r4, #4
 80009a6:	0162      	lsls	r2, r4, #5
 80009a8:	d403      	bmi.n	80009b2 <__aeabi_fdiv+0x202>
 80009aa:	01a4      	lsls	r4, r4, #6
 80009ac:	0a64      	lsrs	r4, r4, #9
 80009ae:	2200      	movs	r2, #0
 80009b0:	e75d      	b.n	800086e <__aeabi_fdiv+0xbe>
 80009b2:	2201      	movs	r2, #1
 80009b4:	2400      	movs	r4, #0
 80009b6:	e75a      	b.n	800086e <__aeabi_fdiv+0xbe>
 80009b8:	2480      	movs	r4, #128	; 0x80
 80009ba:	03e4      	lsls	r4, r4, #15
 80009bc:	432c      	orrs	r4, r5
 80009be:	0264      	lsls	r4, r4, #9
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	22ff      	movs	r2, #255	; 0xff
 80009c4:	e753      	b.n	800086e <__aeabi_fdiv+0xbe>
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	08018898 	.word	0x08018898
 80009cc:	f7ffffff 	.word	0xf7ffffff
 80009d0:	080188d8 	.word	0x080188d8

080009d4 <__eqsf2>:
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	0042      	lsls	r2, r0, #1
 80009d8:	024e      	lsls	r6, r1, #9
 80009da:	004c      	lsls	r4, r1, #1
 80009dc:	0245      	lsls	r5, r0, #9
 80009de:	0a6d      	lsrs	r5, r5, #9
 80009e0:	0e12      	lsrs	r2, r2, #24
 80009e2:	0fc3      	lsrs	r3, r0, #31
 80009e4:	0a76      	lsrs	r6, r6, #9
 80009e6:	0e24      	lsrs	r4, r4, #24
 80009e8:	0fc9      	lsrs	r1, r1, #31
 80009ea:	2aff      	cmp	r2, #255	; 0xff
 80009ec:	d00f      	beq.n	8000a0e <__eqsf2+0x3a>
 80009ee:	2cff      	cmp	r4, #255	; 0xff
 80009f0:	d011      	beq.n	8000a16 <__eqsf2+0x42>
 80009f2:	2001      	movs	r0, #1
 80009f4:	42a2      	cmp	r2, r4
 80009f6:	d000      	beq.n	80009fa <__eqsf2+0x26>
 80009f8:	bd70      	pop	{r4, r5, r6, pc}
 80009fa:	42b5      	cmp	r5, r6
 80009fc:	d1fc      	bne.n	80009f8 <__eqsf2+0x24>
 80009fe:	428b      	cmp	r3, r1
 8000a00:	d00d      	beq.n	8000a1e <__eqsf2+0x4a>
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d1f8      	bne.n	80009f8 <__eqsf2+0x24>
 8000a06:	0028      	movs	r0, r5
 8000a08:	1e45      	subs	r5, r0, #1
 8000a0a:	41a8      	sbcs	r0, r5
 8000a0c:	e7f4      	b.n	80009f8 <__eqsf2+0x24>
 8000a0e:	2001      	movs	r0, #1
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d1f1      	bne.n	80009f8 <__eqsf2+0x24>
 8000a14:	e7eb      	b.n	80009ee <__eqsf2+0x1a>
 8000a16:	2001      	movs	r0, #1
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	d1ed      	bne.n	80009f8 <__eqsf2+0x24>
 8000a1c:	e7e9      	b.n	80009f2 <__eqsf2+0x1e>
 8000a1e:	2000      	movs	r0, #0
 8000a20:	e7ea      	b.n	80009f8 <__eqsf2+0x24>
 8000a22:	46c0      	nop			; (mov r8, r8)

08000a24 <__gesf2>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	004a      	lsls	r2, r1, #1
 8000a28:	024e      	lsls	r6, r1, #9
 8000a2a:	0245      	lsls	r5, r0, #9
 8000a2c:	0044      	lsls	r4, r0, #1
 8000a2e:	0a6d      	lsrs	r5, r5, #9
 8000a30:	0e24      	lsrs	r4, r4, #24
 8000a32:	0fc3      	lsrs	r3, r0, #31
 8000a34:	0a76      	lsrs	r6, r6, #9
 8000a36:	0e12      	lsrs	r2, r2, #24
 8000a38:	0fc9      	lsrs	r1, r1, #31
 8000a3a:	2cff      	cmp	r4, #255	; 0xff
 8000a3c:	d015      	beq.n	8000a6a <__gesf2+0x46>
 8000a3e:	2aff      	cmp	r2, #255	; 0xff
 8000a40:	d00e      	beq.n	8000a60 <__gesf2+0x3c>
 8000a42:	2c00      	cmp	r4, #0
 8000a44:	d115      	bne.n	8000a72 <__gesf2+0x4e>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d101      	bne.n	8000a4e <__gesf2+0x2a>
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d01c      	beq.n	8000a88 <__gesf2+0x64>
 8000a4e:	2d00      	cmp	r5, #0
 8000a50:	d014      	beq.n	8000a7c <__gesf2+0x58>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d027      	beq.n	8000aa6 <__gesf2+0x82>
 8000a56:	2002      	movs	r0, #2
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	4018      	ands	r0, r3
 8000a5c:	3801      	subs	r0, #1
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	2e00      	cmp	r6, #0
 8000a62:	d0ee      	beq.n	8000a42 <__gesf2+0x1e>
 8000a64:	2002      	movs	r0, #2
 8000a66:	4240      	negs	r0, r0
 8000a68:	e7f9      	b.n	8000a5e <__gesf2+0x3a>
 8000a6a:	2d00      	cmp	r5, #0
 8000a6c:	d1fa      	bne.n	8000a64 <__gesf2+0x40>
 8000a6e:	2aff      	cmp	r2, #255	; 0xff
 8000a70:	d00e      	beq.n	8000a90 <__gesf2+0x6c>
 8000a72:	2a00      	cmp	r2, #0
 8000a74:	d10e      	bne.n	8000a94 <__gesf2+0x70>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d0ed      	beq.n	8000a56 <__gesf2+0x32>
 8000a7a:	e00b      	b.n	8000a94 <__gesf2+0x70>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	3901      	subs	r1, #1
 8000a80:	4399      	bics	r1, r3
 8000a82:	0008      	movs	r0, r1
 8000a84:	3001      	adds	r0, #1
 8000a86:	e7ea      	b.n	8000a5e <__gesf2+0x3a>
 8000a88:	2000      	movs	r0, #0
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	d0e7      	beq.n	8000a5e <__gesf2+0x3a>
 8000a8e:	e7e2      	b.n	8000a56 <__gesf2+0x32>
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d1e7      	bne.n	8000a64 <__gesf2+0x40>
 8000a94:	428b      	cmp	r3, r1
 8000a96:	d1de      	bne.n	8000a56 <__gesf2+0x32>
 8000a98:	4294      	cmp	r4, r2
 8000a9a:	dd05      	ble.n	8000aa8 <__gesf2+0x84>
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	1e58      	subs	r0, r3, #1
 8000aa0:	4008      	ands	r0, r1
 8000aa2:	3801      	subs	r0, #1
 8000aa4:	e7db      	b.n	8000a5e <__gesf2+0x3a>
 8000aa6:	2400      	movs	r4, #0
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	dc04      	bgt.n	8000ab6 <__gesf2+0x92>
 8000aac:	42b5      	cmp	r5, r6
 8000aae:	d8d2      	bhi.n	8000a56 <__gesf2+0x32>
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	42b5      	cmp	r5, r6
 8000ab4:	d2d3      	bcs.n	8000a5e <__gesf2+0x3a>
 8000ab6:	1e58      	subs	r0, r3, #1
 8000ab8:	2301      	movs	r3, #1
 8000aba:	4398      	bics	r0, r3
 8000abc:	3001      	adds	r0, #1
 8000abe:	e7ce      	b.n	8000a5e <__gesf2+0x3a>

08000ac0 <__lesf2>:
 8000ac0:	b530      	push	{r4, r5, lr}
 8000ac2:	0042      	lsls	r2, r0, #1
 8000ac4:	0244      	lsls	r4, r0, #9
 8000ac6:	024d      	lsls	r5, r1, #9
 8000ac8:	0fc3      	lsrs	r3, r0, #31
 8000aca:	0048      	lsls	r0, r1, #1
 8000acc:	0a64      	lsrs	r4, r4, #9
 8000ace:	0e12      	lsrs	r2, r2, #24
 8000ad0:	0a6d      	lsrs	r5, r5, #9
 8000ad2:	0e00      	lsrs	r0, r0, #24
 8000ad4:	0fc9      	lsrs	r1, r1, #31
 8000ad6:	2aff      	cmp	r2, #255	; 0xff
 8000ad8:	d012      	beq.n	8000b00 <__lesf2+0x40>
 8000ada:	28ff      	cmp	r0, #255	; 0xff
 8000adc:	d00c      	beq.n	8000af8 <__lesf2+0x38>
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	d112      	bne.n	8000b08 <__lesf2+0x48>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d119      	bne.n	8000b1a <__lesf2+0x5a>
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	d117      	bne.n	8000b1a <__lesf2+0x5a>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d02b      	beq.n	8000b46 <__lesf2+0x86>
 8000aee:	2002      	movs	r0, #2
 8000af0:	3b01      	subs	r3, #1
 8000af2:	4018      	ands	r0, r3
 8000af4:	3801      	subs	r0, #1
 8000af6:	e026      	b.n	8000b46 <__lesf2+0x86>
 8000af8:	2d00      	cmp	r5, #0
 8000afa:	d0f0      	beq.n	8000ade <__lesf2+0x1e>
 8000afc:	2002      	movs	r0, #2
 8000afe:	e022      	b.n	8000b46 <__lesf2+0x86>
 8000b00:	2c00      	cmp	r4, #0
 8000b02:	d1fb      	bne.n	8000afc <__lesf2+0x3c>
 8000b04:	28ff      	cmp	r0, #255	; 0xff
 8000b06:	d01f      	beq.n	8000b48 <__lesf2+0x88>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d11f      	bne.n	8000b4c <__lesf2+0x8c>
 8000b0c:	2d00      	cmp	r5, #0
 8000b0e:	d11d      	bne.n	8000b4c <__lesf2+0x8c>
 8000b10:	2002      	movs	r0, #2
 8000b12:	3b01      	subs	r3, #1
 8000b14:	4018      	ands	r0, r3
 8000b16:	3801      	subs	r0, #1
 8000b18:	e015      	b.n	8000b46 <__lesf2+0x86>
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d00e      	beq.n	8000b3c <__lesf2+0x7c>
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d1e5      	bne.n	8000aee <__lesf2+0x2e>
 8000b22:	2200      	movs	r2, #0
 8000b24:	4290      	cmp	r0, r2
 8000b26:	dc04      	bgt.n	8000b32 <__lesf2+0x72>
 8000b28:	42ac      	cmp	r4, r5
 8000b2a:	d8e0      	bhi.n	8000aee <__lesf2+0x2e>
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	42ac      	cmp	r4, r5
 8000b30:	d209      	bcs.n	8000b46 <__lesf2+0x86>
 8000b32:	1e58      	subs	r0, r3, #1
 8000b34:	2301      	movs	r3, #1
 8000b36:	4398      	bics	r0, r3
 8000b38:	3001      	adds	r0, #1
 8000b3a:	e004      	b.n	8000b46 <__lesf2+0x86>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	3901      	subs	r1, #1
 8000b40:	4399      	bics	r1, r3
 8000b42:	0008      	movs	r0, r1
 8000b44:	3001      	adds	r0, #1
 8000b46:	bd30      	pop	{r4, r5, pc}
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d1d7      	bne.n	8000afc <__lesf2+0x3c>
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d1ce      	bne.n	8000aee <__lesf2+0x2e>
 8000b50:	4282      	cmp	r2, r0
 8000b52:	dde7      	ble.n	8000b24 <__lesf2+0x64>
 8000b54:	2102      	movs	r1, #2
 8000b56:	1e58      	subs	r0, r3, #1
 8000b58:	4008      	ands	r0, r1
 8000b5a:	3801      	subs	r0, #1
 8000b5c:	e7f3      	b.n	8000b46 <__lesf2+0x86>
 8000b5e:	46c0      	nop			; (mov r8, r8)

08000b60 <__aeabi_fmul>:
 8000b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b62:	464e      	mov	r6, r9
 8000b64:	4657      	mov	r7, sl
 8000b66:	4645      	mov	r5, r8
 8000b68:	46de      	mov	lr, fp
 8000b6a:	b5e0      	push	{r5, r6, r7, lr}
 8000b6c:	0243      	lsls	r3, r0, #9
 8000b6e:	0a5b      	lsrs	r3, r3, #9
 8000b70:	0045      	lsls	r5, r0, #1
 8000b72:	b083      	sub	sp, #12
 8000b74:	1c0f      	adds	r7, r1, #0
 8000b76:	4699      	mov	r9, r3
 8000b78:	0e2d      	lsrs	r5, r5, #24
 8000b7a:	0fc6      	lsrs	r6, r0, #31
 8000b7c:	2d00      	cmp	r5, #0
 8000b7e:	d057      	beq.n	8000c30 <__aeabi_fmul+0xd0>
 8000b80:	2dff      	cmp	r5, #255	; 0xff
 8000b82:	d024      	beq.n	8000bce <__aeabi_fmul+0x6e>
 8000b84:	2080      	movs	r0, #128	; 0x80
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	04c0      	lsls	r0, r0, #19
 8000b8a:	4318      	orrs	r0, r3
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	4681      	mov	r9, r0
 8000b90:	469a      	mov	sl, r3
 8000b92:	469b      	mov	fp, r3
 8000b94:	3d7f      	subs	r5, #127	; 0x7f
 8000b96:	027c      	lsls	r4, r7, #9
 8000b98:	007a      	lsls	r2, r7, #1
 8000b9a:	0ffb      	lsrs	r3, r7, #31
 8000b9c:	0a64      	lsrs	r4, r4, #9
 8000b9e:	0e12      	lsrs	r2, r2, #24
 8000ba0:	4698      	mov	r8, r3
 8000ba2:	d023      	beq.n	8000bec <__aeabi_fmul+0x8c>
 8000ba4:	2aff      	cmp	r2, #255	; 0xff
 8000ba6:	d04b      	beq.n	8000c40 <__aeabi_fmul+0xe0>
 8000ba8:	00e3      	lsls	r3, r4, #3
 8000baa:	2480      	movs	r4, #128	; 0x80
 8000bac:	2000      	movs	r0, #0
 8000bae:	04e4      	lsls	r4, r4, #19
 8000bb0:	3a7f      	subs	r2, #127	; 0x7f
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	18ad      	adds	r5, r5, r2
 8000bb6:	1c6b      	adds	r3, r5, #1
 8000bb8:	4647      	mov	r7, r8
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	4653      	mov	r3, sl
 8000bbe:	4077      	eors	r7, r6
 8000bc0:	003a      	movs	r2, r7
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	d848      	bhi.n	8000c58 <__aeabi_fmul+0xf8>
 8000bc6:	497d      	ldr	r1, [pc, #500]	; (8000dbc <__aeabi_fmul+0x25c>)
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	58cb      	ldr	r3, [r1, r3]
 8000bcc:	469f      	mov	pc, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d000      	beq.n	8000bd4 <__aeabi_fmul+0x74>
 8000bd2:	e085      	b.n	8000ce0 <__aeabi_fmul+0x180>
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	469a      	mov	sl, r3
 8000bd8:	3b06      	subs	r3, #6
 8000bda:	469b      	mov	fp, r3
 8000bdc:	027c      	lsls	r4, r7, #9
 8000bde:	007a      	lsls	r2, r7, #1
 8000be0:	0ffb      	lsrs	r3, r7, #31
 8000be2:	25ff      	movs	r5, #255	; 0xff
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e12      	lsrs	r2, r2, #24
 8000be8:	4698      	mov	r8, r3
 8000bea:	d1db      	bne.n	8000ba4 <__aeabi_fmul+0x44>
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_fmul+0x92>
 8000bf0:	e090      	b.n	8000d14 <__aeabi_fmul+0x1b4>
 8000bf2:	4652      	mov	r2, sl
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	4692      	mov	sl, r2
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	e7db      	b.n	8000bb6 <__aeabi_fmul+0x56>
 8000bfe:	464c      	mov	r4, r9
 8000c00:	4658      	mov	r0, fp
 8000c02:	0017      	movs	r7, r2
 8000c04:	2802      	cmp	r0, #2
 8000c06:	d024      	beq.n	8000c52 <__aeabi_fmul+0xf2>
 8000c08:	2803      	cmp	r0, #3
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fmul+0xae>
 8000c0c:	e0cf      	b.n	8000dae <__aeabi_fmul+0x24e>
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	2801      	cmp	r0, #1
 8000c14:	d14d      	bne.n	8000cb2 <__aeabi_fmul+0x152>
 8000c16:	0258      	lsls	r0, r3, #9
 8000c18:	05d2      	lsls	r2, r2, #23
 8000c1a:	0a40      	lsrs	r0, r0, #9
 8000c1c:	07ff      	lsls	r7, r7, #31
 8000c1e:	4310      	orrs	r0, r2
 8000c20:	4338      	orrs	r0, r7
 8000c22:	b003      	add	sp, #12
 8000c24:	bc3c      	pop	{r2, r3, r4, r5}
 8000c26:	4690      	mov	r8, r2
 8000c28:	4699      	mov	r9, r3
 8000c2a:	46a2      	mov	sl, r4
 8000c2c:	46ab      	mov	fp, r5
 8000c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d15b      	bne.n	8000cec <__aeabi_fmul+0x18c>
 8000c34:	2304      	movs	r3, #4
 8000c36:	469a      	mov	sl, r3
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	2500      	movs	r5, #0
 8000c3c:	469b      	mov	fp, r3
 8000c3e:	e7aa      	b.n	8000b96 <__aeabi_fmul+0x36>
 8000c40:	35ff      	adds	r5, #255	; 0xff
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d160      	bne.n	8000d08 <__aeabi_fmul+0x1a8>
 8000c46:	4652      	mov	r2, sl
 8000c48:	2302      	movs	r3, #2
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	4692      	mov	sl, r2
 8000c4e:	2002      	movs	r0, #2
 8000c50:	e7b1      	b.n	8000bb6 <__aeabi_fmul+0x56>
 8000c52:	22ff      	movs	r2, #255	; 0xff
 8000c54:	2300      	movs	r3, #0
 8000c56:	e7de      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000c58:	464b      	mov	r3, r9
 8000c5a:	0c1b      	lsrs	r3, r3, #16
 8000c5c:	469c      	mov	ip, r3
 8000c5e:	464b      	mov	r3, r9
 8000c60:	0426      	lsls	r6, r4, #16
 8000c62:	0c36      	lsrs	r6, r6, #16
 8000c64:	0418      	lsls	r0, r3, #16
 8000c66:	4661      	mov	r1, ip
 8000c68:	0033      	movs	r3, r6
 8000c6a:	0c22      	lsrs	r2, r4, #16
 8000c6c:	4664      	mov	r4, ip
 8000c6e:	0c00      	lsrs	r0, r0, #16
 8000c70:	4343      	muls	r3, r0
 8000c72:	434e      	muls	r6, r1
 8000c74:	4350      	muls	r0, r2
 8000c76:	4354      	muls	r4, r2
 8000c78:	1980      	adds	r0, r0, r6
 8000c7a:	0c1a      	lsrs	r2, r3, #16
 8000c7c:	1812      	adds	r2, r2, r0
 8000c7e:	4296      	cmp	r6, r2
 8000c80:	d903      	bls.n	8000c8a <__aeabi_fmul+0x12a>
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	0249      	lsls	r1, r1, #9
 8000c86:	468c      	mov	ip, r1
 8000c88:	4464      	add	r4, ip
 8000c8a:	041b      	lsls	r3, r3, #16
 8000c8c:	0c1b      	lsrs	r3, r3, #16
 8000c8e:	0410      	lsls	r0, r2, #16
 8000c90:	18c0      	adds	r0, r0, r3
 8000c92:	0183      	lsls	r3, r0, #6
 8000c94:	1e5e      	subs	r6, r3, #1
 8000c96:	41b3      	sbcs	r3, r6
 8000c98:	0e80      	lsrs	r0, r0, #26
 8000c9a:	4318      	orrs	r0, r3
 8000c9c:	0c13      	lsrs	r3, r2, #16
 8000c9e:	191b      	adds	r3, r3, r4
 8000ca0:	019b      	lsls	r3, r3, #6
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	001c      	movs	r4, r3
 8000ca6:	0123      	lsls	r3, r4, #4
 8000ca8:	d579      	bpl.n	8000d9e <__aeabi_fmul+0x23e>
 8000caa:	2301      	movs	r3, #1
 8000cac:	0862      	lsrs	r2, r4, #1
 8000cae:	401c      	ands	r4, r3
 8000cb0:	4314      	orrs	r4, r2
 8000cb2:	9a01      	ldr	r2, [sp, #4]
 8000cb4:	327f      	adds	r2, #127	; 0x7f
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	dd4d      	ble.n	8000d56 <__aeabi_fmul+0x1f6>
 8000cba:	0763      	lsls	r3, r4, #29
 8000cbc:	d004      	beq.n	8000cc8 <__aeabi_fmul+0x168>
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	4023      	ands	r3, r4
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	d000      	beq.n	8000cc8 <__aeabi_fmul+0x168>
 8000cc6:	3404      	adds	r4, #4
 8000cc8:	0123      	lsls	r3, r4, #4
 8000cca:	d503      	bpl.n	8000cd4 <__aeabi_fmul+0x174>
 8000ccc:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <__aeabi_fmul+0x260>)
 8000cce:	9a01      	ldr	r2, [sp, #4]
 8000cd0:	401c      	ands	r4, r3
 8000cd2:	3280      	adds	r2, #128	; 0x80
 8000cd4:	2afe      	cmp	r2, #254	; 0xfe
 8000cd6:	dcbc      	bgt.n	8000c52 <__aeabi_fmul+0xf2>
 8000cd8:	01a3      	lsls	r3, r4, #6
 8000cda:	0a5b      	lsrs	r3, r3, #9
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	e79a      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	469a      	mov	sl, r3
 8000ce4:	3b09      	subs	r3, #9
 8000ce6:	25ff      	movs	r5, #255	; 0xff
 8000ce8:	469b      	mov	fp, r3
 8000cea:	e754      	b.n	8000b96 <__aeabi_fmul+0x36>
 8000cec:	0018      	movs	r0, r3
 8000cee:	f002 f901 	bl	8002ef4 <__clzsi2>
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	1f43      	subs	r3, r0, #5
 8000cf6:	2576      	movs	r5, #118	; 0x76
 8000cf8:	409a      	lsls	r2, r3
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	426d      	negs	r5, r5
 8000cfe:	4691      	mov	r9, r2
 8000d00:	1a2d      	subs	r5, r5, r0
 8000d02:	469a      	mov	sl, r3
 8000d04:	469b      	mov	fp, r3
 8000d06:	e746      	b.n	8000b96 <__aeabi_fmul+0x36>
 8000d08:	4652      	mov	r2, sl
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	4692      	mov	sl, r2
 8000d10:	2003      	movs	r0, #3
 8000d12:	e750      	b.n	8000bb6 <__aeabi_fmul+0x56>
 8000d14:	0020      	movs	r0, r4
 8000d16:	f002 f8ed 	bl	8002ef4 <__clzsi2>
 8000d1a:	1f43      	subs	r3, r0, #5
 8000d1c:	1a2d      	subs	r5, r5, r0
 8000d1e:	409c      	lsls	r4, r3
 8000d20:	3d76      	subs	r5, #118	; 0x76
 8000d22:	2000      	movs	r0, #0
 8000d24:	e747      	b.n	8000bb6 <__aeabi_fmul+0x56>
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	2700      	movs	r7, #0
 8000d2a:	03db      	lsls	r3, r3, #15
 8000d2c:	22ff      	movs	r2, #255	; 0xff
 8000d2e:	e772      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000d30:	4642      	mov	r2, r8
 8000d32:	e766      	b.n	8000c02 <__aeabi_fmul+0xa2>
 8000d34:	464c      	mov	r4, r9
 8000d36:	0032      	movs	r2, r6
 8000d38:	4658      	mov	r0, fp
 8000d3a:	e762      	b.n	8000c02 <__aeabi_fmul+0xa2>
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	464a      	mov	r2, r9
 8000d40:	03db      	lsls	r3, r3, #15
 8000d42:	421a      	tst	r2, r3
 8000d44:	d022      	beq.n	8000d8c <__aeabi_fmul+0x22c>
 8000d46:	421c      	tst	r4, r3
 8000d48:	d120      	bne.n	8000d8c <__aeabi_fmul+0x22c>
 8000d4a:	4323      	orrs	r3, r4
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	4647      	mov	r7, r8
 8000d52:	22ff      	movs	r2, #255	; 0xff
 8000d54:	e75f      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000d56:	2301      	movs	r3, #1
 8000d58:	1a9a      	subs	r2, r3, r2
 8000d5a:	2a1b      	cmp	r2, #27
 8000d5c:	dc21      	bgt.n	8000da2 <__aeabi_fmul+0x242>
 8000d5e:	0023      	movs	r3, r4
 8000d60:	9901      	ldr	r1, [sp, #4]
 8000d62:	40d3      	lsrs	r3, r2
 8000d64:	319e      	adds	r1, #158	; 0x9e
 8000d66:	408c      	lsls	r4, r1
 8000d68:	001a      	movs	r2, r3
 8000d6a:	0023      	movs	r3, r4
 8000d6c:	1e5c      	subs	r4, r3, #1
 8000d6e:	41a3      	sbcs	r3, r4
 8000d70:	4313      	orrs	r3, r2
 8000d72:	075a      	lsls	r2, r3, #29
 8000d74:	d004      	beq.n	8000d80 <__aeabi_fmul+0x220>
 8000d76:	220f      	movs	r2, #15
 8000d78:	401a      	ands	r2, r3
 8000d7a:	2a04      	cmp	r2, #4
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_fmul+0x220>
 8000d7e:	3304      	adds	r3, #4
 8000d80:	015a      	lsls	r2, r3, #5
 8000d82:	d411      	bmi.n	8000da8 <__aeabi_fmul+0x248>
 8000d84:	019b      	lsls	r3, r3, #6
 8000d86:	0a5b      	lsrs	r3, r3, #9
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e744      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	464a      	mov	r2, r9
 8000d90:	03db      	lsls	r3, r3, #15
 8000d92:	4313      	orrs	r3, r2
 8000d94:	025b      	lsls	r3, r3, #9
 8000d96:	0a5b      	lsrs	r3, r3, #9
 8000d98:	0037      	movs	r7, r6
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	e73b      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000d9e:	9501      	str	r5, [sp, #4]
 8000da0:	e787      	b.n	8000cb2 <__aeabi_fmul+0x152>
 8000da2:	2200      	movs	r2, #0
 8000da4:	2300      	movs	r3, #0
 8000da6:	e736      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000da8:	2201      	movs	r2, #1
 8000daa:	2300      	movs	r3, #0
 8000dac:	e733      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	03db      	lsls	r3, r3, #15
 8000db2:	4323      	orrs	r3, r4
 8000db4:	025b      	lsls	r3, r3, #9
 8000db6:	0a5b      	lsrs	r3, r3, #9
 8000db8:	22ff      	movs	r2, #255	; 0xff
 8000dba:	e72c      	b.n	8000c16 <__aeabi_fmul+0xb6>
 8000dbc:	08018918 	.word	0x08018918
 8000dc0:	f7ffffff 	.word	0xf7ffffff

08000dc4 <__aeabi_fsub>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	4647      	mov	r7, r8
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	0044      	lsls	r4, r0, #1
 8000dcc:	0fc2      	lsrs	r2, r0, #31
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	0247      	lsls	r7, r0, #9
 8000dd2:	0248      	lsls	r0, r1, #9
 8000dd4:	0a40      	lsrs	r0, r0, #9
 8000dd6:	4684      	mov	ip, r0
 8000dd8:	4666      	mov	r6, ip
 8000dda:	0048      	lsls	r0, r1, #1
 8000ddc:	0a7f      	lsrs	r7, r7, #9
 8000dde:	0e24      	lsrs	r4, r4, #24
 8000de0:	00f6      	lsls	r6, r6, #3
 8000de2:	0025      	movs	r5, r4
 8000de4:	4690      	mov	r8, r2
 8000de6:	00fb      	lsls	r3, r7, #3
 8000de8:	0e00      	lsrs	r0, r0, #24
 8000dea:	0fc9      	lsrs	r1, r1, #31
 8000dec:	46b1      	mov	r9, r6
 8000dee:	28ff      	cmp	r0, #255	; 0xff
 8000df0:	d100      	bne.n	8000df4 <__aeabi_fsub+0x30>
 8000df2:	e085      	b.n	8000f00 <__aeabi_fsub+0x13c>
 8000df4:	2601      	movs	r6, #1
 8000df6:	4071      	eors	r1, r6
 8000df8:	1a26      	subs	r6, r4, r0
 8000dfa:	4291      	cmp	r1, r2
 8000dfc:	d057      	beq.n	8000eae <__aeabi_fsub+0xea>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	dd43      	ble.n	8000e8a <__aeabi_fsub+0xc6>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d000      	beq.n	8000e08 <__aeabi_fsub+0x44>
 8000e06:	e07f      	b.n	8000f08 <__aeabi_fsub+0x144>
 8000e08:	4649      	mov	r1, r9
 8000e0a:	2900      	cmp	r1, #0
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_fsub+0x4c>
 8000e0e:	e0aa      	b.n	8000f66 <__aeabi_fsub+0x1a2>
 8000e10:	3e01      	subs	r6, #1
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	d000      	beq.n	8000e18 <__aeabi_fsub+0x54>
 8000e16:	e0f7      	b.n	8001008 <__aeabi_fsub+0x244>
 8000e18:	1a5b      	subs	r3, r3, r1
 8000e1a:	015a      	lsls	r2, r3, #5
 8000e1c:	d400      	bmi.n	8000e20 <__aeabi_fsub+0x5c>
 8000e1e:	e08b      	b.n	8000f38 <__aeabi_fsub+0x174>
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	099c      	lsrs	r4, r3, #6
 8000e24:	0020      	movs	r0, r4
 8000e26:	f002 f865 	bl	8002ef4 <__clzsi2>
 8000e2a:	3805      	subs	r0, #5
 8000e2c:	4084      	lsls	r4, r0
 8000e2e:	4285      	cmp	r5, r0
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_fsub+0x70>
 8000e32:	e0d3      	b.n	8000fdc <__aeabi_fsub+0x218>
 8000e34:	1b45      	subs	r5, r0, r5
 8000e36:	0023      	movs	r3, r4
 8000e38:	2020      	movs	r0, #32
 8000e3a:	3501      	adds	r5, #1
 8000e3c:	40eb      	lsrs	r3, r5
 8000e3e:	1b45      	subs	r5, r0, r5
 8000e40:	40ac      	lsls	r4, r5
 8000e42:	1e62      	subs	r2, r4, #1
 8000e44:	4194      	sbcs	r4, r2
 8000e46:	4323      	orrs	r3, r4
 8000e48:	2407      	movs	r4, #7
 8000e4a:	2500      	movs	r5, #0
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4641      	mov	r1, r8
 8000e52:	400a      	ands	r2, r1
 8000e54:	2c00      	cmp	r4, #0
 8000e56:	d004      	beq.n	8000e62 <__aeabi_fsub+0x9e>
 8000e58:	210f      	movs	r1, #15
 8000e5a:	4019      	ands	r1, r3
 8000e5c:	2904      	cmp	r1, #4
 8000e5e:	d000      	beq.n	8000e62 <__aeabi_fsub+0x9e>
 8000e60:	3304      	adds	r3, #4
 8000e62:	0159      	lsls	r1, r3, #5
 8000e64:	d400      	bmi.n	8000e68 <__aeabi_fsub+0xa4>
 8000e66:	e080      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8000e68:	3501      	adds	r5, #1
 8000e6a:	b2ec      	uxtb	r4, r5
 8000e6c:	2dff      	cmp	r5, #255	; 0xff
 8000e6e:	d000      	beq.n	8000e72 <__aeabi_fsub+0xae>
 8000e70:	e0a3      	b.n	8000fba <__aeabi_fsub+0x1f6>
 8000e72:	24ff      	movs	r4, #255	; 0xff
 8000e74:	2300      	movs	r3, #0
 8000e76:	025b      	lsls	r3, r3, #9
 8000e78:	05e4      	lsls	r4, r4, #23
 8000e7a:	0a58      	lsrs	r0, r3, #9
 8000e7c:	07d2      	lsls	r2, r2, #31
 8000e7e:	4320      	orrs	r0, r4
 8000e80:	4310      	orrs	r0, r2
 8000e82:	bc0c      	pop	{r2, r3}
 8000e84:	4690      	mov	r8, r2
 8000e86:	4699      	mov	r9, r3
 8000e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d174      	bne.n	8000f78 <__aeabi_fsub+0x1b4>
 8000e8e:	1c60      	adds	r0, r4, #1
 8000e90:	b2c0      	uxtb	r0, r0
 8000e92:	2801      	cmp	r0, #1
 8000e94:	dc00      	bgt.n	8000e98 <__aeabi_fsub+0xd4>
 8000e96:	e0a7      	b.n	8000fe8 <__aeabi_fsub+0x224>
 8000e98:	464a      	mov	r2, r9
 8000e9a:	1a9c      	subs	r4, r3, r2
 8000e9c:	0162      	lsls	r2, r4, #5
 8000e9e:	d500      	bpl.n	8000ea2 <__aeabi_fsub+0xde>
 8000ea0:	e0b6      	b.n	8001010 <__aeabi_fsub+0x24c>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d1be      	bne.n	8000e24 <__aeabi_fsub+0x60>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e7e3      	b.n	8000e76 <__aeabi_fsub+0xb2>
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	dc00      	bgt.n	8000eb4 <__aeabi_fsub+0xf0>
 8000eb2:	e085      	b.n	8000fc0 <__aeabi_fsub+0x1fc>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d046      	beq.n	8000f46 <__aeabi_fsub+0x182>
 8000eb8:	2cff      	cmp	r4, #255	; 0xff
 8000eba:	d049      	beq.n	8000f50 <__aeabi_fsub+0x18c>
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	4648      	mov	r0, r9
 8000ec0:	04d2      	lsls	r2, r2, #19
 8000ec2:	4310      	orrs	r0, r2
 8000ec4:	4681      	mov	r9, r0
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2e1b      	cmp	r6, #27
 8000eca:	dc09      	bgt.n	8000ee0 <__aeabi_fsub+0x11c>
 8000ecc:	2020      	movs	r0, #32
 8000ece:	464c      	mov	r4, r9
 8000ed0:	1b80      	subs	r0, r0, r6
 8000ed2:	4084      	lsls	r4, r0
 8000ed4:	464a      	mov	r2, r9
 8000ed6:	0020      	movs	r0, r4
 8000ed8:	40f2      	lsrs	r2, r6
 8000eda:	1e44      	subs	r4, r0, #1
 8000edc:	41a0      	sbcs	r0, r4
 8000ede:	4302      	orrs	r2, r0
 8000ee0:	189b      	adds	r3, r3, r2
 8000ee2:	015a      	lsls	r2, r3, #5
 8000ee4:	d528      	bpl.n	8000f38 <__aeabi_fsub+0x174>
 8000ee6:	3501      	adds	r5, #1
 8000ee8:	2dff      	cmp	r5, #255	; 0xff
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x12a>
 8000eec:	e0a8      	b.n	8001040 <__aeabi_fsub+0x27c>
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2407      	movs	r4, #7
 8000ef2:	4994      	ldr	r1, [pc, #592]	; (8001144 <__aeabi_fsub+0x380>)
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	085b      	lsrs	r3, r3, #1
 8000ef8:	400b      	ands	r3, r1
 8000efa:	4313      	orrs	r3, r2
 8000efc:	401c      	ands	r4, r3
 8000efe:	e7a6      	b.n	8000e4e <__aeabi_fsub+0x8a>
 8000f00:	2e00      	cmp	r6, #0
 8000f02:	d000      	beq.n	8000f06 <__aeabi_fsub+0x142>
 8000f04:	e778      	b.n	8000df8 <__aeabi_fsub+0x34>
 8000f06:	e775      	b.n	8000df4 <__aeabi_fsub+0x30>
 8000f08:	2cff      	cmp	r4, #255	; 0xff
 8000f0a:	d054      	beq.n	8000fb6 <__aeabi_fsub+0x1f2>
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	4649      	mov	r1, r9
 8000f10:	04d2      	lsls	r2, r2, #19
 8000f12:	4311      	orrs	r1, r2
 8000f14:	4689      	mov	r9, r1
 8000f16:	2201      	movs	r2, #1
 8000f18:	2e1b      	cmp	r6, #27
 8000f1a:	dc09      	bgt.n	8000f30 <__aeabi_fsub+0x16c>
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	4648      	mov	r0, r9
 8000f20:	1b89      	subs	r1, r1, r6
 8000f22:	4088      	lsls	r0, r1
 8000f24:	464a      	mov	r2, r9
 8000f26:	0001      	movs	r1, r0
 8000f28:	40f2      	lsrs	r2, r6
 8000f2a:	1e48      	subs	r0, r1, #1
 8000f2c:	4181      	sbcs	r1, r0
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	1a9b      	subs	r3, r3, r2
 8000f32:	015a      	lsls	r2, r3, #5
 8000f34:	d500      	bpl.n	8000f38 <__aeabi_fsub+0x174>
 8000f36:	e773      	b.n	8000e20 <__aeabi_fsub+0x5c>
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4641      	mov	r1, r8
 8000f3c:	400a      	ands	r2, r1
 8000f3e:	0759      	lsls	r1, r3, #29
 8000f40:	d000      	beq.n	8000f44 <__aeabi_fsub+0x180>
 8000f42:	e789      	b.n	8000e58 <__aeabi_fsub+0x94>
 8000f44:	e011      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8000f46:	4648      	mov	r0, r9
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d158      	bne.n	8000ffe <__aeabi_fsub+0x23a>
 8000f4c:	2cff      	cmp	r4, #255	; 0xff
 8000f4e:	d10c      	bne.n	8000f6a <__aeabi_fsub+0x1a6>
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d100      	bne.n	8000f58 <__aeabi_fsub+0x194>
 8000f56:	e78c      	b.n	8000e72 <__aeabi_fsub+0xae>
 8000f58:	2080      	movs	r0, #128	; 0x80
 8000f5a:	03c0      	lsls	r0, r0, #15
 8000f5c:	4303      	orrs	r3, r0
 8000f5e:	025b      	lsls	r3, r3, #9
 8000f60:	0a5b      	lsrs	r3, r3, #9
 8000f62:	24ff      	movs	r4, #255	; 0xff
 8000f64:	e787      	b.n	8000e76 <__aeabi_fsub+0xb2>
 8000f66:	2cff      	cmp	r4, #255	; 0xff
 8000f68:	d025      	beq.n	8000fb6 <__aeabi_fsub+0x1f2>
 8000f6a:	08db      	lsrs	r3, r3, #3
 8000f6c:	2dff      	cmp	r5, #255	; 0xff
 8000f6e:	d0f0      	beq.n	8000f52 <__aeabi_fsub+0x18e>
 8000f70:	025b      	lsls	r3, r3, #9
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	b2ec      	uxtb	r4, r5
 8000f76:	e77e      	b.n	8000e76 <__aeabi_fsub+0xb2>
 8000f78:	2c00      	cmp	r4, #0
 8000f7a:	d04d      	beq.n	8001018 <__aeabi_fsub+0x254>
 8000f7c:	28ff      	cmp	r0, #255	; 0xff
 8000f7e:	d018      	beq.n	8000fb2 <__aeabi_fsub+0x1ee>
 8000f80:	2480      	movs	r4, #128	; 0x80
 8000f82:	04e4      	lsls	r4, r4, #19
 8000f84:	4272      	negs	r2, r6
 8000f86:	4323      	orrs	r3, r4
 8000f88:	2a1b      	cmp	r2, #27
 8000f8a:	dd00      	ble.n	8000f8e <__aeabi_fsub+0x1ca>
 8000f8c:	e0c4      	b.n	8001118 <__aeabi_fsub+0x354>
 8000f8e:	001c      	movs	r4, r3
 8000f90:	2520      	movs	r5, #32
 8000f92:	40d4      	lsrs	r4, r2
 8000f94:	1aaa      	subs	r2, r5, r2
 8000f96:	4093      	lsls	r3, r2
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	4193      	sbcs	r3, r2
 8000f9c:	4323      	orrs	r3, r4
 8000f9e:	464a      	mov	r2, r9
 8000fa0:	0005      	movs	r5, r0
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	4688      	mov	r8, r1
 8000fa6:	e738      	b.n	8000e1a <__aeabi_fsub+0x56>
 8000fa8:	1c72      	adds	r2, r6, #1
 8000faa:	d0f8      	beq.n	8000f9e <__aeabi_fsub+0x1da>
 8000fac:	43f2      	mvns	r2, r6
 8000fae:	28ff      	cmp	r0, #255	; 0xff
 8000fb0:	d1ea      	bne.n	8000f88 <__aeabi_fsub+0x1c4>
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	25ff      	movs	r5, #255	; 0xff
 8000fb8:	e7d7      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8000fba:	019b      	lsls	r3, r3, #6
 8000fbc:	0a5b      	lsrs	r3, r3, #9
 8000fbe:	e75a      	b.n	8000e76 <__aeabi_fsub+0xb2>
 8000fc0:	2e00      	cmp	r6, #0
 8000fc2:	d141      	bne.n	8001048 <__aeabi_fsub+0x284>
 8000fc4:	1c65      	adds	r5, r4, #1
 8000fc6:	b2e9      	uxtb	r1, r5
 8000fc8:	2901      	cmp	r1, #1
 8000fca:	dd45      	ble.n	8001058 <__aeabi_fsub+0x294>
 8000fcc:	2dff      	cmp	r5, #255	; 0xff
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_fsub+0x20e>
 8000fd0:	e74f      	b.n	8000e72 <__aeabi_fsub+0xae>
 8000fd2:	2407      	movs	r4, #7
 8000fd4:	444b      	add	r3, r9
 8000fd6:	085b      	lsrs	r3, r3, #1
 8000fd8:	401c      	ands	r4, r3
 8000fda:	e738      	b.n	8000e4e <__aeabi_fsub+0x8a>
 8000fdc:	2207      	movs	r2, #7
 8000fde:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <__aeabi_fsub+0x384>)
 8000fe0:	1a2d      	subs	r5, r5, r0
 8000fe2:	4023      	ands	r3, r4
 8000fe4:	4014      	ands	r4, r2
 8000fe6:	e732      	b.n	8000e4e <__aeabi_fsub+0x8a>
 8000fe8:	2c00      	cmp	r4, #0
 8000fea:	d11d      	bne.n	8001028 <__aeabi_fsub+0x264>
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d17a      	bne.n	80010e6 <__aeabi_fsub+0x322>
 8000ff0:	464b      	mov	r3, r9
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0x234>
 8000ff6:	e091      	b.n	800111c <__aeabi_fsub+0x358>
 8000ff8:	000a      	movs	r2, r1
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	e7b5      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8000ffe:	3e01      	subs	r6, #1
 8001000:	2e00      	cmp	r6, #0
 8001002:	d119      	bne.n	8001038 <__aeabi_fsub+0x274>
 8001004:	444b      	add	r3, r9
 8001006:	e76c      	b.n	8000ee2 <__aeabi_fsub+0x11e>
 8001008:	2cff      	cmp	r4, #255	; 0xff
 800100a:	d184      	bne.n	8000f16 <__aeabi_fsub+0x152>
 800100c:	25ff      	movs	r5, #255	; 0xff
 800100e:	e7ac      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8001010:	464a      	mov	r2, r9
 8001012:	4688      	mov	r8, r1
 8001014:	1ad4      	subs	r4, r2, r3
 8001016:	e705      	b.n	8000e24 <__aeabi_fsub+0x60>
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1c5      	bne.n	8000fa8 <__aeabi_fsub+0x1e4>
 800101c:	000a      	movs	r2, r1
 800101e:	28ff      	cmp	r0, #255	; 0xff
 8001020:	d0c8      	beq.n	8000fb4 <__aeabi_fsub+0x1f0>
 8001022:	0005      	movs	r5, r0
 8001024:	464b      	mov	r3, r9
 8001026:	e7a0      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8001028:	2b00      	cmp	r3, #0
 800102a:	d149      	bne.n	80010c0 <__aeabi_fsub+0x2fc>
 800102c:	464b      	mov	r3, r9
 800102e:	2b00      	cmp	r3, #0
 8001030:	d077      	beq.n	8001122 <__aeabi_fsub+0x35e>
 8001032:	000a      	movs	r2, r1
 8001034:	25ff      	movs	r5, #255	; 0xff
 8001036:	e798      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8001038:	2cff      	cmp	r4, #255	; 0xff
 800103a:	d000      	beq.n	800103e <__aeabi_fsub+0x27a>
 800103c:	e743      	b.n	8000ec6 <__aeabi_fsub+0x102>
 800103e:	e787      	b.n	8000f50 <__aeabi_fsub+0x18c>
 8001040:	000a      	movs	r2, r1
 8001042:	24ff      	movs	r4, #255	; 0xff
 8001044:	2300      	movs	r3, #0
 8001046:	e716      	b.n	8000e76 <__aeabi_fsub+0xb2>
 8001048:	2c00      	cmp	r4, #0
 800104a:	d115      	bne.n	8001078 <__aeabi_fsub+0x2b4>
 800104c:	2b00      	cmp	r3, #0
 800104e:	d157      	bne.n	8001100 <__aeabi_fsub+0x33c>
 8001050:	28ff      	cmp	r0, #255	; 0xff
 8001052:	d1e6      	bne.n	8001022 <__aeabi_fsub+0x25e>
 8001054:	464b      	mov	r3, r9
 8001056:	e77b      	b.n	8000f50 <__aeabi_fsub+0x18c>
 8001058:	2c00      	cmp	r4, #0
 800105a:	d120      	bne.n	800109e <__aeabi_fsub+0x2da>
 800105c:	2b00      	cmp	r3, #0
 800105e:	d057      	beq.n	8001110 <__aeabi_fsub+0x34c>
 8001060:	4649      	mov	r1, r9
 8001062:	2900      	cmp	r1, #0
 8001064:	d053      	beq.n	800110e <__aeabi_fsub+0x34a>
 8001066:	444b      	add	r3, r9
 8001068:	015a      	lsls	r2, r3, #5
 800106a:	d568      	bpl.n	800113e <__aeabi_fsub+0x37a>
 800106c:	2407      	movs	r4, #7
 800106e:	4a36      	ldr	r2, [pc, #216]	; (8001148 <__aeabi_fsub+0x384>)
 8001070:	401c      	ands	r4, r3
 8001072:	2501      	movs	r5, #1
 8001074:	4013      	ands	r3, r2
 8001076:	e6ea      	b.n	8000e4e <__aeabi_fsub+0x8a>
 8001078:	28ff      	cmp	r0, #255	; 0xff
 800107a:	d0eb      	beq.n	8001054 <__aeabi_fsub+0x290>
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	04d2      	lsls	r2, r2, #19
 8001080:	4276      	negs	r6, r6
 8001082:	4313      	orrs	r3, r2
 8001084:	2e1b      	cmp	r6, #27
 8001086:	dc53      	bgt.n	8001130 <__aeabi_fsub+0x36c>
 8001088:	2520      	movs	r5, #32
 800108a:	1bad      	subs	r5, r5, r6
 800108c:	001a      	movs	r2, r3
 800108e:	40ab      	lsls	r3, r5
 8001090:	40f2      	lsrs	r2, r6
 8001092:	1e5c      	subs	r4, r3, #1
 8001094:	41a3      	sbcs	r3, r4
 8001096:	4313      	orrs	r3, r2
 8001098:	444b      	add	r3, r9
 800109a:	0005      	movs	r5, r0
 800109c:	e721      	b.n	8000ee2 <__aeabi_fsub+0x11e>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0d8      	beq.n	8001054 <__aeabi_fsub+0x290>
 80010a2:	4649      	mov	r1, r9
 80010a4:	2900      	cmp	r1, #0
 80010a6:	d100      	bne.n	80010aa <__aeabi_fsub+0x2e6>
 80010a8:	e752      	b.n	8000f50 <__aeabi_fsub+0x18c>
 80010aa:	2180      	movs	r1, #128	; 0x80
 80010ac:	03c9      	lsls	r1, r1, #15
 80010ae:	420f      	tst	r7, r1
 80010b0:	d100      	bne.n	80010b4 <__aeabi_fsub+0x2f0>
 80010b2:	e74d      	b.n	8000f50 <__aeabi_fsub+0x18c>
 80010b4:	4660      	mov	r0, ip
 80010b6:	4208      	tst	r0, r1
 80010b8:	d000      	beq.n	80010bc <__aeabi_fsub+0x2f8>
 80010ba:	e749      	b.n	8000f50 <__aeabi_fsub+0x18c>
 80010bc:	464b      	mov	r3, r9
 80010be:	e747      	b.n	8000f50 <__aeabi_fsub+0x18c>
 80010c0:	4648      	mov	r0, r9
 80010c2:	25ff      	movs	r5, #255	; 0xff
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_fsub+0x306>
 80010c8:	e74f      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	03d2      	lsls	r2, r2, #15
 80010ce:	4217      	tst	r7, r2
 80010d0:	d004      	beq.n	80010dc <__aeabi_fsub+0x318>
 80010d2:	4660      	mov	r0, ip
 80010d4:	4210      	tst	r0, r2
 80010d6:	d101      	bne.n	80010dc <__aeabi_fsub+0x318>
 80010d8:	464b      	mov	r3, r9
 80010da:	4688      	mov	r8, r1
 80010dc:	2201      	movs	r2, #1
 80010de:	4641      	mov	r1, r8
 80010e0:	25ff      	movs	r5, #255	; 0xff
 80010e2:	400a      	ands	r2, r1
 80010e4:	e741      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 80010e6:	4648      	mov	r0, r9
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d01f      	beq.n	800112c <__aeabi_fsub+0x368>
 80010ec:	1a1a      	subs	r2, r3, r0
 80010ee:	0150      	lsls	r0, r2, #5
 80010f0:	d520      	bpl.n	8001134 <__aeabi_fsub+0x370>
 80010f2:	464a      	mov	r2, r9
 80010f4:	2407      	movs	r4, #7
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	401c      	ands	r4, r3
 80010fa:	4688      	mov	r8, r1
 80010fc:	2500      	movs	r5, #0
 80010fe:	e6a6      	b.n	8000e4e <__aeabi_fsub+0x8a>
 8001100:	1c74      	adds	r4, r6, #1
 8001102:	d0c9      	beq.n	8001098 <__aeabi_fsub+0x2d4>
 8001104:	43f6      	mvns	r6, r6
 8001106:	28ff      	cmp	r0, #255	; 0xff
 8001108:	d1bc      	bne.n	8001084 <__aeabi_fsub+0x2c0>
 800110a:	464b      	mov	r3, r9
 800110c:	e720      	b.n	8000f50 <__aeabi_fsub+0x18c>
 800110e:	4699      	mov	r9, r3
 8001110:	464b      	mov	r3, r9
 8001112:	2500      	movs	r5, #0
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	e72b      	b.n	8000f70 <__aeabi_fsub+0x1ac>
 8001118:	2301      	movs	r3, #1
 800111a:	e740      	b.n	8000f9e <__aeabi_fsub+0x1da>
 800111c:	2200      	movs	r2, #0
 800111e:	2300      	movs	r3, #0
 8001120:	e6a9      	b.n	8000e76 <__aeabi_fsub+0xb2>
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	2200      	movs	r2, #0
 8001126:	03db      	lsls	r3, r3, #15
 8001128:	24ff      	movs	r4, #255	; 0xff
 800112a:	e6a4      	b.n	8000e76 <__aeabi_fsub+0xb2>
 800112c:	2500      	movs	r5, #0
 800112e:	e71c      	b.n	8000f6a <__aeabi_fsub+0x1a6>
 8001130:	2301      	movs	r3, #1
 8001132:	e7b1      	b.n	8001098 <__aeabi_fsub+0x2d4>
 8001134:	2a00      	cmp	r2, #0
 8001136:	d0f1      	beq.n	800111c <__aeabi_fsub+0x358>
 8001138:	0013      	movs	r3, r2
 800113a:	2500      	movs	r5, #0
 800113c:	e6fc      	b.n	8000f38 <__aeabi_fsub+0x174>
 800113e:	2500      	movs	r5, #0
 8001140:	e6fa      	b.n	8000f38 <__aeabi_fsub+0x174>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	7dffffff 	.word	0x7dffffff
 8001148:	fbffffff 	.word	0xfbffffff

0800114c <__aeabi_f2iz>:
 800114c:	0241      	lsls	r1, r0, #9
 800114e:	0042      	lsls	r2, r0, #1
 8001150:	0fc3      	lsrs	r3, r0, #31
 8001152:	0a49      	lsrs	r1, r1, #9
 8001154:	0e12      	lsrs	r2, r2, #24
 8001156:	2000      	movs	r0, #0
 8001158:	2a7e      	cmp	r2, #126	; 0x7e
 800115a:	d90d      	bls.n	8001178 <__aeabi_f2iz+0x2c>
 800115c:	2a9d      	cmp	r2, #157	; 0x9d
 800115e:	d80c      	bhi.n	800117a <__aeabi_f2iz+0x2e>
 8001160:	2080      	movs	r0, #128	; 0x80
 8001162:	0400      	lsls	r0, r0, #16
 8001164:	4301      	orrs	r1, r0
 8001166:	2a95      	cmp	r2, #149	; 0x95
 8001168:	dc0a      	bgt.n	8001180 <__aeabi_f2iz+0x34>
 800116a:	2096      	movs	r0, #150	; 0x96
 800116c:	1a82      	subs	r2, r0, r2
 800116e:	40d1      	lsrs	r1, r2
 8001170:	4248      	negs	r0, r1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_f2iz+0x2c>
 8001176:	0008      	movs	r0, r1
 8001178:	4770      	bx	lr
 800117a:	4a03      	ldr	r2, [pc, #12]	; (8001188 <__aeabi_f2iz+0x3c>)
 800117c:	1898      	adds	r0, r3, r2
 800117e:	e7fb      	b.n	8001178 <__aeabi_f2iz+0x2c>
 8001180:	3a96      	subs	r2, #150	; 0x96
 8001182:	4091      	lsls	r1, r2
 8001184:	e7f4      	b.n	8001170 <__aeabi_f2iz+0x24>
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	7fffffff 	.word	0x7fffffff

0800118c <__aeabi_ui2f>:
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	1e04      	subs	r4, r0, #0
 8001190:	d034      	beq.n	80011fc <__aeabi_ui2f+0x70>
 8001192:	f001 feaf 	bl	8002ef4 <__clzsi2>
 8001196:	229e      	movs	r2, #158	; 0x9e
 8001198:	1a12      	subs	r2, r2, r0
 800119a:	2a96      	cmp	r2, #150	; 0x96
 800119c:	dc07      	bgt.n	80011ae <__aeabi_ui2f+0x22>
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	2808      	cmp	r0, #8
 80011a2:	dd2e      	ble.n	8001202 <__aeabi_ui2f+0x76>
 80011a4:	3808      	subs	r0, #8
 80011a6:	4084      	lsls	r4, r0
 80011a8:	0260      	lsls	r0, r4, #9
 80011aa:	0a40      	lsrs	r0, r0, #9
 80011ac:	e021      	b.n	80011f2 <__aeabi_ui2f+0x66>
 80011ae:	2a99      	cmp	r2, #153	; 0x99
 80011b0:	dd09      	ble.n	80011c6 <__aeabi_ui2f+0x3a>
 80011b2:	0003      	movs	r3, r0
 80011b4:	0021      	movs	r1, r4
 80011b6:	331b      	adds	r3, #27
 80011b8:	4099      	lsls	r1, r3
 80011ba:	1e4b      	subs	r3, r1, #1
 80011bc:	4199      	sbcs	r1, r3
 80011be:	2305      	movs	r3, #5
 80011c0:	1a1b      	subs	r3, r3, r0
 80011c2:	40dc      	lsrs	r4, r3
 80011c4:	430c      	orrs	r4, r1
 80011c6:	2805      	cmp	r0, #5
 80011c8:	dd01      	ble.n	80011ce <__aeabi_ui2f+0x42>
 80011ca:	1f43      	subs	r3, r0, #5
 80011cc:	409c      	lsls	r4, r3
 80011ce:	0023      	movs	r3, r4
 80011d0:	490d      	ldr	r1, [pc, #52]	; (8001208 <__aeabi_ui2f+0x7c>)
 80011d2:	400b      	ands	r3, r1
 80011d4:	0765      	lsls	r5, r4, #29
 80011d6:	d009      	beq.n	80011ec <__aeabi_ui2f+0x60>
 80011d8:	250f      	movs	r5, #15
 80011da:	402c      	ands	r4, r5
 80011dc:	2c04      	cmp	r4, #4
 80011de:	d005      	beq.n	80011ec <__aeabi_ui2f+0x60>
 80011e0:	3304      	adds	r3, #4
 80011e2:	015c      	lsls	r4, r3, #5
 80011e4:	d502      	bpl.n	80011ec <__aeabi_ui2f+0x60>
 80011e6:	229f      	movs	r2, #159	; 0x9f
 80011e8:	400b      	ands	r3, r1
 80011ea:	1a12      	subs	r2, r2, r0
 80011ec:	019b      	lsls	r3, r3, #6
 80011ee:	0a58      	lsrs	r0, r3, #9
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	0240      	lsls	r0, r0, #9
 80011f4:	05d2      	lsls	r2, r2, #23
 80011f6:	0a40      	lsrs	r0, r0, #9
 80011f8:	4310      	orrs	r0, r2
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
 80011fc:	2200      	movs	r2, #0
 80011fe:	2000      	movs	r0, #0
 8001200:	e7f7      	b.n	80011f2 <__aeabi_ui2f+0x66>
 8001202:	0260      	lsls	r0, r4, #9
 8001204:	0a40      	lsrs	r0, r0, #9
 8001206:	e7f4      	b.n	80011f2 <__aeabi_ui2f+0x66>
 8001208:	fbffffff 	.word	0xfbffffff

0800120c <__aeabi_dadd>:
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120e:	464f      	mov	r7, r9
 8001210:	4646      	mov	r6, r8
 8001212:	46d6      	mov	lr, sl
 8001214:	000c      	movs	r4, r1
 8001216:	0309      	lsls	r1, r1, #12
 8001218:	b5c0      	push	{r6, r7, lr}
 800121a:	0a49      	lsrs	r1, r1, #9
 800121c:	0f47      	lsrs	r7, r0, #29
 800121e:	005e      	lsls	r6, r3, #1
 8001220:	4339      	orrs	r1, r7
 8001222:	031f      	lsls	r7, r3, #12
 8001224:	0fdb      	lsrs	r3, r3, #31
 8001226:	469c      	mov	ip, r3
 8001228:	0065      	lsls	r5, r4, #1
 800122a:	0a7b      	lsrs	r3, r7, #9
 800122c:	0f57      	lsrs	r7, r2, #29
 800122e:	431f      	orrs	r7, r3
 8001230:	0d6d      	lsrs	r5, r5, #21
 8001232:	0fe4      	lsrs	r4, r4, #31
 8001234:	0d76      	lsrs	r6, r6, #21
 8001236:	46a1      	mov	r9, r4
 8001238:	00c0      	lsls	r0, r0, #3
 800123a:	46b8      	mov	r8, r7
 800123c:	00d2      	lsls	r2, r2, #3
 800123e:	1bab      	subs	r3, r5, r6
 8001240:	4564      	cmp	r4, ip
 8001242:	d07b      	beq.n	800133c <__aeabi_dadd+0x130>
 8001244:	2b00      	cmp	r3, #0
 8001246:	dd5f      	ble.n	8001308 <__aeabi_dadd+0xfc>
 8001248:	2e00      	cmp	r6, #0
 800124a:	d000      	beq.n	800124e <__aeabi_dadd+0x42>
 800124c:	e0a4      	b.n	8001398 <__aeabi_dadd+0x18c>
 800124e:	003e      	movs	r6, r7
 8001250:	4316      	orrs	r6, r2
 8001252:	d100      	bne.n	8001256 <__aeabi_dadd+0x4a>
 8001254:	e112      	b.n	800147c <__aeabi_dadd+0x270>
 8001256:	1e5e      	subs	r6, r3, #1
 8001258:	2e00      	cmp	r6, #0
 800125a:	d000      	beq.n	800125e <__aeabi_dadd+0x52>
 800125c:	e19e      	b.n	800159c <__aeabi_dadd+0x390>
 800125e:	1a87      	subs	r7, r0, r2
 8001260:	4643      	mov	r3, r8
 8001262:	42b8      	cmp	r0, r7
 8001264:	4180      	sbcs	r0, r0
 8001266:	2501      	movs	r5, #1
 8001268:	1ac9      	subs	r1, r1, r3
 800126a:	4240      	negs	r0, r0
 800126c:	1a09      	subs	r1, r1, r0
 800126e:	020b      	lsls	r3, r1, #8
 8001270:	d400      	bmi.n	8001274 <__aeabi_dadd+0x68>
 8001272:	e131      	b.n	80014d8 <__aeabi_dadd+0x2cc>
 8001274:	0249      	lsls	r1, r1, #9
 8001276:	0a4e      	lsrs	r6, r1, #9
 8001278:	2e00      	cmp	r6, #0
 800127a:	d100      	bne.n	800127e <__aeabi_dadd+0x72>
 800127c:	e16e      	b.n	800155c <__aeabi_dadd+0x350>
 800127e:	0030      	movs	r0, r6
 8001280:	f001 fe38 	bl	8002ef4 <__clzsi2>
 8001284:	0003      	movs	r3, r0
 8001286:	3b08      	subs	r3, #8
 8001288:	2b1f      	cmp	r3, #31
 800128a:	dd00      	ble.n	800128e <__aeabi_dadd+0x82>
 800128c:	e161      	b.n	8001552 <__aeabi_dadd+0x346>
 800128e:	2220      	movs	r2, #32
 8001290:	0039      	movs	r1, r7
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	409e      	lsls	r6, r3
 8001296:	40d1      	lsrs	r1, r2
 8001298:	409f      	lsls	r7, r3
 800129a:	430e      	orrs	r6, r1
 800129c:	429d      	cmp	r5, r3
 800129e:	dd00      	ble.n	80012a2 <__aeabi_dadd+0x96>
 80012a0:	e151      	b.n	8001546 <__aeabi_dadd+0x33a>
 80012a2:	1b5d      	subs	r5, r3, r5
 80012a4:	1c6b      	adds	r3, r5, #1
 80012a6:	2b1f      	cmp	r3, #31
 80012a8:	dd00      	ble.n	80012ac <__aeabi_dadd+0xa0>
 80012aa:	e17c      	b.n	80015a6 <__aeabi_dadd+0x39a>
 80012ac:	2120      	movs	r1, #32
 80012ae:	1ac9      	subs	r1, r1, r3
 80012b0:	003d      	movs	r5, r7
 80012b2:	0030      	movs	r0, r6
 80012b4:	408f      	lsls	r7, r1
 80012b6:	4088      	lsls	r0, r1
 80012b8:	40dd      	lsrs	r5, r3
 80012ba:	1e79      	subs	r1, r7, #1
 80012bc:	418f      	sbcs	r7, r1
 80012be:	0031      	movs	r1, r6
 80012c0:	2207      	movs	r2, #7
 80012c2:	4328      	orrs	r0, r5
 80012c4:	40d9      	lsrs	r1, r3
 80012c6:	2500      	movs	r5, #0
 80012c8:	4307      	orrs	r7, r0
 80012ca:	403a      	ands	r2, r7
 80012cc:	2a00      	cmp	r2, #0
 80012ce:	d009      	beq.n	80012e4 <__aeabi_dadd+0xd8>
 80012d0:	230f      	movs	r3, #15
 80012d2:	403b      	ands	r3, r7
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d005      	beq.n	80012e4 <__aeabi_dadd+0xd8>
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	42bb      	cmp	r3, r7
 80012dc:	41bf      	sbcs	r7, r7
 80012de:	427f      	negs	r7, r7
 80012e0:	19c9      	adds	r1, r1, r7
 80012e2:	001f      	movs	r7, r3
 80012e4:	020b      	lsls	r3, r1, #8
 80012e6:	d400      	bmi.n	80012ea <__aeabi_dadd+0xde>
 80012e8:	e226      	b.n	8001738 <__aeabi_dadd+0x52c>
 80012ea:	1c6a      	adds	r2, r5, #1
 80012ec:	4bc6      	ldr	r3, [pc, #792]	; (8001608 <__aeabi_dadd+0x3fc>)
 80012ee:	0555      	lsls	r5, r2, #21
 80012f0:	0d6d      	lsrs	r5, r5, #21
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dadd+0xec>
 80012f6:	e106      	b.n	8001506 <__aeabi_dadd+0x2fa>
 80012f8:	4ac4      	ldr	r2, [pc, #784]	; (800160c <__aeabi_dadd+0x400>)
 80012fa:	08ff      	lsrs	r7, r7, #3
 80012fc:	400a      	ands	r2, r1
 80012fe:	0753      	lsls	r3, r2, #29
 8001300:	0252      	lsls	r2, r2, #9
 8001302:	433b      	orrs	r3, r7
 8001304:	0b12      	lsrs	r2, r2, #12
 8001306:	e08e      	b.n	8001426 <__aeabi_dadd+0x21a>
 8001308:	2b00      	cmp	r3, #0
 800130a:	d000      	beq.n	800130e <__aeabi_dadd+0x102>
 800130c:	e0b8      	b.n	8001480 <__aeabi_dadd+0x274>
 800130e:	1c6b      	adds	r3, r5, #1
 8001310:	055b      	lsls	r3, r3, #21
 8001312:	0d5b      	lsrs	r3, r3, #21
 8001314:	2b01      	cmp	r3, #1
 8001316:	dc00      	bgt.n	800131a <__aeabi_dadd+0x10e>
 8001318:	e130      	b.n	800157c <__aeabi_dadd+0x370>
 800131a:	1a87      	subs	r7, r0, r2
 800131c:	4643      	mov	r3, r8
 800131e:	42b8      	cmp	r0, r7
 8001320:	41b6      	sbcs	r6, r6
 8001322:	1acb      	subs	r3, r1, r3
 8001324:	4276      	negs	r6, r6
 8001326:	1b9e      	subs	r6, r3, r6
 8001328:	0233      	lsls	r3, r6, #8
 800132a:	d500      	bpl.n	800132e <__aeabi_dadd+0x122>
 800132c:	e14c      	b.n	80015c8 <__aeabi_dadd+0x3bc>
 800132e:	003b      	movs	r3, r7
 8001330:	4333      	orrs	r3, r6
 8001332:	d1a1      	bne.n	8001278 <__aeabi_dadd+0x6c>
 8001334:	2200      	movs	r2, #0
 8001336:	2400      	movs	r4, #0
 8001338:	2500      	movs	r5, #0
 800133a:	e070      	b.n	800141e <__aeabi_dadd+0x212>
 800133c:	2b00      	cmp	r3, #0
 800133e:	dc00      	bgt.n	8001342 <__aeabi_dadd+0x136>
 8001340:	e0e5      	b.n	800150e <__aeabi_dadd+0x302>
 8001342:	2e00      	cmp	r6, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_dadd+0x13c>
 8001346:	e083      	b.n	8001450 <__aeabi_dadd+0x244>
 8001348:	4eaf      	ldr	r6, [pc, #700]	; (8001608 <__aeabi_dadd+0x3fc>)
 800134a:	42b5      	cmp	r5, r6
 800134c:	d060      	beq.n	8001410 <__aeabi_dadd+0x204>
 800134e:	2680      	movs	r6, #128	; 0x80
 8001350:	0436      	lsls	r6, r6, #16
 8001352:	4337      	orrs	r7, r6
 8001354:	46b8      	mov	r8, r7
 8001356:	2b38      	cmp	r3, #56	; 0x38
 8001358:	dc00      	bgt.n	800135c <__aeabi_dadd+0x150>
 800135a:	e13e      	b.n	80015da <__aeabi_dadd+0x3ce>
 800135c:	4643      	mov	r3, r8
 800135e:	4313      	orrs	r3, r2
 8001360:	001f      	movs	r7, r3
 8001362:	1e7a      	subs	r2, r7, #1
 8001364:	4197      	sbcs	r7, r2
 8001366:	183f      	adds	r7, r7, r0
 8001368:	4287      	cmp	r7, r0
 800136a:	4180      	sbcs	r0, r0
 800136c:	4240      	negs	r0, r0
 800136e:	1809      	adds	r1, r1, r0
 8001370:	020b      	lsls	r3, r1, #8
 8001372:	d400      	bmi.n	8001376 <__aeabi_dadd+0x16a>
 8001374:	e0b0      	b.n	80014d8 <__aeabi_dadd+0x2cc>
 8001376:	4ba4      	ldr	r3, [pc, #656]	; (8001608 <__aeabi_dadd+0x3fc>)
 8001378:	3501      	adds	r5, #1
 800137a:	429d      	cmp	r5, r3
 800137c:	d100      	bne.n	8001380 <__aeabi_dadd+0x174>
 800137e:	e0c3      	b.n	8001508 <__aeabi_dadd+0x2fc>
 8001380:	4aa2      	ldr	r2, [pc, #648]	; (800160c <__aeabi_dadd+0x400>)
 8001382:	087b      	lsrs	r3, r7, #1
 8001384:	400a      	ands	r2, r1
 8001386:	2101      	movs	r1, #1
 8001388:	400f      	ands	r7, r1
 800138a:	431f      	orrs	r7, r3
 800138c:	0851      	lsrs	r1, r2, #1
 800138e:	07d3      	lsls	r3, r2, #31
 8001390:	2207      	movs	r2, #7
 8001392:	431f      	orrs	r7, r3
 8001394:	403a      	ands	r2, r7
 8001396:	e799      	b.n	80012cc <__aeabi_dadd+0xc0>
 8001398:	4e9b      	ldr	r6, [pc, #620]	; (8001608 <__aeabi_dadd+0x3fc>)
 800139a:	42b5      	cmp	r5, r6
 800139c:	d038      	beq.n	8001410 <__aeabi_dadd+0x204>
 800139e:	2680      	movs	r6, #128	; 0x80
 80013a0:	0436      	lsls	r6, r6, #16
 80013a2:	4337      	orrs	r7, r6
 80013a4:	46b8      	mov	r8, r7
 80013a6:	2b38      	cmp	r3, #56	; 0x38
 80013a8:	dd00      	ble.n	80013ac <__aeabi_dadd+0x1a0>
 80013aa:	e0dc      	b.n	8001566 <__aeabi_dadd+0x35a>
 80013ac:	2b1f      	cmp	r3, #31
 80013ae:	dc00      	bgt.n	80013b2 <__aeabi_dadd+0x1a6>
 80013b0:	e130      	b.n	8001614 <__aeabi_dadd+0x408>
 80013b2:	001e      	movs	r6, r3
 80013b4:	4647      	mov	r7, r8
 80013b6:	3e20      	subs	r6, #32
 80013b8:	40f7      	lsrs	r7, r6
 80013ba:	46bc      	mov	ip, r7
 80013bc:	2b20      	cmp	r3, #32
 80013be:	d004      	beq.n	80013ca <__aeabi_dadd+0x1be>
 80013c0:	2640      	movs	r6, #64	; 0x40
 80013c2:	1af3      	subs	r3, r6, r3
 80013c4:	4646      	mov	r6, r8
 80013c6:	409e      	lsls	r6, r3
 80013c8:	4332      	orrs	r2, r6
 80013ca:	0017      	movs	r7, r2
 80013cc:	4663      	mov	r3, ip
 80013ce:	1e7a      	subs	r2, r7, #1
 80013d0:	4197      	sbcs	r7, r2
 80013d2:	431f      	orrs	r7, r3
 80013d4:	e0cc      	b.n	8001570 <__aeabi_dadd+0x364>
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x1d0>
 80013da:	e204      	b.n	80017e6 <__aeabi_dadd+0x5da>
 80013dc:	4643      	mov	r3, r8
 80013de:	4313      	orrs	r3, r2
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dadd+0x1d8>
 80013e2:	e159      	b.n	8001698 <__aeabi_dadd+0x48c>
 80013e4:	074b      	lsls	r3, r1, #29
 80013e6:	08c0      	lsrs	r0, r0, #3
 80013e8:	4318      	orrs	r0, r3
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	08c9      	lsrs	r1, r1, #3
 80013ee:	031b      	lsls	r3, r3, #12
 80013f0:	4219      	tst	r1, r3
 80013f2:	d008      	beq.n	8001406 <__aeabi_dadd+0x1fa>
 80013f4:	4645      	mov	r5, r8
 80013f6:	08ed      	lsrs	r5, r5, #3
 80013f8:	421d      	tst	r5, r3
 80013fa:	d104      	bne.n	8001406 <__aeabi_dadd+0x1fa>
 80013fc:	4643      	mov	r3, r8
 80013fe:	08d0      	lsrs	r0, r2, #3
 8001400:	0759      	lsls	r1, r3, #29
 8001402:	4308      	orrs	r0, r1
 8001404:	0029      	movs	r1, r5
 8001406:	0f42      	lsrs	r2, r0, #29
 8001408:	00c9      	lsls	r1, r1, #3
 800140a:	4d7f      	ldr	r5, [pc, #508]	; (8001608 <__aeabi_dadd+0x3fc>)
 800140c:	4311      	orrs	r1, r2
 800140e:	00c0      	lsls	r0, r0, #3
 8001410:	074b      	lsls	r3, r1, #29
 8001412:	08ca      	lsrs	r2, r1, #3
 8001414:	497c      	ldr	r1, [pc, #496]	; (8001608 <__aeabi_dadd+0x3fc>)
 8001416:	08c0      	lsrs	r0, r0, #3
 8001418:	4303      	orrs	r3, r0
 800141a:	428d      	cmp	r5, r1
 800141c:	d068      	beq.n	80014f0 <__aeabi_dadd+0x2e4>
 800141e:	0312      	lsls	r2, r2, #12
 8001420:	056d      	lsls	r5, r5, #21
 8001422:	0b12      	lsrs	r2, r2, #12
 8001424:	0d6d      	lsrs	r5, r5, #21
 8001426:	2100      	movs	r1, #0
 8001428:	0312      	lsls	r2, r2, #12
 800142a:	0018      	movs	r0, r3
 800142c:	0b13      	lsrs	r3, r2, #12
 800142e:	0d0a      	lsrs	r2, r1, #20
 8001430:	0512      	lsls	r2, r2, #20
 8001432:	431a      	orrs	r2, r3
 8001434:	4b76      	ldr	r3, [pc, #472]	; (8001610 <__aeabi_dadd+0x404>)
 8001436:	052d      	lsls	r5, r5, #20
 8001438:	4013      	ands	r3, r2
 800143a:	432b      	orrs	r3, r5
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	07e4      	lsls	r4, r4, #31
 8001440:	085b      	lsrs	r3, r3, #1
 8001442:	4323      	orrs	r3, r4
 8001444:	0019      	movs	r1, r3
 8001446:	bc1c      	pop	{r2, r3, r4}
 8001448:	4690      	mov	r8, r2
 800144a:	4699      	mov	r9, r3
 800144c:	46a2      	mov	sl, r4
 800144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001450:	003e      	movs	r6, r7
 8001452:	4316      	orrs	r6, r2
 8001454:	d012      	beq.n	800147c <__aeabi_dadd+0x270>
 8001456:	1e5e      	subs	r6, r3, #1
 8001458:	2e00      	cmp	r6, #0
 800145a:	d000      	beq.n	800145e <__aeabi_dadd+0x252>
 800145c:	e100      	b.n	8001660 <__aeabi_dadd+0x454>
 800145e:	1887      	adds	r7, r0, r2
 8001460:	4287      	cmp	r7, r0
 8001462:	4180      	sbcs	r0, r0
 8001464:	4441      	add	r1, r8
 8001466:	4240      	negs	r0, r0
 8001468:	1809      	adds	r1, r1, r0
 800146a:	2501      	movs	r5, #1
 800146c:	020b      	lsls	r3, r1, #8
 800146e:	d533      	bpl.n	80014d8 <__aeabi_dadd+0x2cc>
 8001470:	2502      	movs	r5, #2
 8001472:	e785      	b.n	8001380 <__aeabi_dadd+0x174>
 8001474:	4664      	mov	r4, ip
 8001476:	0033      	movs	r3, r6
 8001478:	4641      	mov	r1, r8
 800147a:	0010      	movs	r0, r2
 800147c:	001d      	movs	r5, r3
 800147e:	e7c7      	b.n	8001410 <__aeabi_dadd+0x204>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d000      	beq.n	8001486 <__aeabi_dadd+0x27a>
 8001484:	e0da      	b.n	800163c <__aeabi_dadd+0x430>
 8001486:	000c      	movs	r4, r1
 8001488:	4304      	orrs	r4, r0
 800148a:	d0f3      	beq.n	8001474 <__aeabi_dadd+0x268>
 800148c:	1c5c      	adds	r4, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x286>
 8001490:	e19f      	b.n	80017d2 <__aeabi_dadd+0x5c6>
 8001492:	4c5d      	ldr	r4, [pc, #372]	; (8001608 <__aeabi_dadd+0x3fc>)
 8001494:	42a6      	cmp	r6, r4
 8001496:	d100      	bne.n	800149a <__aeabi_dadd+0x28e>
 8001498:	e12f      	b.n	80016fa <__aeabi_dadd+0x4ee>
 800149a:	43db      	mvns	r3, r3
 800149c:	2b38      	cmp	r3, #56	; 0x38
 800149e:	dd00      	ble.n	80014a2 <__aeabi_dadd+0x296>
 80014a0:	e166      	b.n	8001770 <__aeabi_dadd+0x564>
 80014a2:	2b1f      	cmp	r3, #31
 80014a4:	dd00      	ble.n	80014a8 <__aeabi_dadd+0x29c>
 80014a6:	e183      	b.n	80017b0 <__aeabi_dadd+0x5a4>
 80014a8:	2420      	movs	r4, #32
 80014aa:	0005      	movs	r5, r0
 80014ac:	1ae4      	subs	r4, r4, r3
 80014ae:	000f      	movs	r7, r1
 80014b0:	40dd      	lsrs	r5, r3
 80014b2:	40d9      	lsrs	r1, r3
 80014b4:	40a0      	lsls	r0, r4
 80014b6:	4643      	mov	r3, r8
 80014b8:	40a7      	lsls	r7, r4
 80014ba:	1a5b      	subs	r3, r3, r1
 80014bc:	1e44      	subs	r4, r0, #1
 80014be:	41a0      	sbcs	r0, r4
 80014c0:	4698      	mov	r8, r3
 80014c2:	432f      	orrs	r7, r5
 80014c4:	4338      	orrs	r0, r7
 80014c6:	1a17      	subs	r7, r2, r0
 80014c8:	42ba      	cmp	r2, r7
 80014ca:	4192      	sbcs	r2, r2
 80014cc:	4643      	mov	r3, r8
 80014ce:	4252      	negs	r2, r2
 80014d0:	1a99      	subs	r1, r3, r2
 80014d2:	4664      	mov	r4, ip
 80014d4:	0035      	movs	r5, r6
 80014d6:	e6ca      	b.n	800126e <__aeabi_dadd+0x62>
 80014d8:	2207      	movs	r2, #7
 80014da:	403a      	ands	r2, r7
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d000      	beq.n	80014e2 <__aeabi_dadd+0x2d6>
 80014e0:	e6f6      	b.n	80012d0 <__aeabi_dadd+0xc4>
 80014e2:	074b      	lsls	r3, r1, #29
 80014e4:	08ca      	lsrs	r2, r1, #3
 80014e6:	4948      	ldr	r1, [pc, #288]	; (8001608 <__aeabi_dadd+0x3fc>)
 80014e8:	08ff      	lsrs	r7, r7, #3
 80014ea:	433b      	orrs	r3, r7
 80014ec:	428d      	cmp	r5, r1
 80014ee:	d196      	bne.n	800141e <__aeabi_dadd+0x212>
 80014f0:	0019      	movs	r1, r3
 80014f2:	4311      	orrs	r1, r2
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x2ec>
 80014f6:	e19e      	b.n	8001836 <__aeabi_dadd+0x62a>
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	0309      	lsls	r1, r1, #12
 80014fc:	430a      	orrs	r2, r1
 80014fe:	0312      	lsls	r2, r2, #12
 8001500:	0b12      	lsrs	r2, r2, #12
 8001502:	4d41      	ldr	r5, [pc, #260]	; (8001608 <__aeabi_dadd+0x3fc>)
 8001504:	e78f      	b.n	8001426 <__aeabi_dadd+0x21a>
 8001506:	0015      	movs	r5, r2
 8001508:	2200      	movs	r2, #0
 800150a:	2300      	movs	r3, #0
 800150c:	e78b      	b.n	8001426 <__aeabi_dadd+0x21a>
 800150e:	2b00      	cmp	r3, #0
 8001510:	d000      	beq.n	8001514 <__aeabi_dadd+0x308>
 8001512:	e0c7      	b.n	80016a4 <__aeabi_dadd+0x498>
 8001514:	1c6b      	adds	r3, r5, #1
 8001516:	055f      	lsls	r7, r3, #21
 8001518:	0d7f      	lsrs	r7, r7, #21
 800151a:	2f01      	cmp	r7, #1
 800151c:	dc00      	bgt.n	8001520 <__aeabi_dadd+0x314>
 800151e:	e0f1      	b.n	8001704 <__aeabi_dadd+0x4f8>
 8001520:	4d39      	ldr	r5, [pc, #228]	; (8001608 <__aeabi_dadd+0x3fc>)
 8001522:	42ab      	cmp	r3, r5
 8001524:	d100      	bne.n	8001528 <__aeabi_dadd+0x31c>
 8001526:	e0b9      	b.n	800169c <__aeabi_dadd+0x490>
 8001528:	1885      	adds	r5, r0, r2
 800152a:	000a      	movs	r2, r1
 800152c:	4285      	cmp	r5, r0
 800152e:	4189      	sbcs	r1, r1
 8001530:	4442      	add	r2, r8
 8001532:	4249      	negs	r1, r1
 8001534:	1851      	adds	r1, r2, r1
 8001536:	2207      	movs	r2, #7
 8001538:	07cf      	lsls	r7, r1, #31
 800153a:	086d      	lsrs	r5, r5, #1
 800153c:	432f      	orrs	r7, r5
 800153e:	0849      	lsrs	r1, r1, #1
 8001540:	403a      	ands	r2, r7
 8001542:	001d      	movs	r5, r3
 8001544:	e6c2      	b.n	80012cc <__aeabi_dadd+0xc0>
 8001546:	2207      	movs	r2, #7
 8001548:	4930      	ldr	r1, [pc, #192]	; (800160c <__aeabi_dadd+0x400>)
 800154a:	1aed      	subs	r5, r5, r3
 800154c:	4031      	ands	r1, r6
 800154e:	403a      	ands	r2, r7
 8001550:	e6bc      	b.n	80012cc <__aeabi_dadd+0xc0>
 8001552:	003e      	movs	r6, r7
 8001554:	3828      	subs	r0, #40	; 0x28
 8001556:	4086      	lsls	r6, r0
 8001558:	2700      	movs	r7, #0
 800155a:	e69f      	b.n	800129c <__aeabi_dadd+0x90>
 800155c:	0038      	movs	r0, r7
 800155e:	f001 fcc9 	bl	8002ef4 <__clzsi2>
 8001562:	3020      	adds	r0, #32
 8001564:	e68e      	b.n	8001284 <__aeabi_dadd+0x78>
 8001566:	4643      	mov	r3, r8
 8001568:	4313      	orrs	r3, r2
 800156a:	001f      	movs	r7, r3
 800156c:	1e7a      	subs	r2, r7, #1
 800156e:	4197      	sbcs	r7, r2
 8001570:	1bc7      	subs	r7, r0, r7
 8001572:	42b8      	cmp	r0, r7
 8001574:	4180      	sbcs	r0, r0
 8001576:	4240      	negs	r0, r0
 8001578:	1a09      	subs	r1, r1, r0
 800157a:	e678      	b.n	800126e <__aeabi_dadd+0x62>
 800157c:	000e      	movs	r6, r1
 800157e:	003b      	movs	r3, r7
 8001580:	4306      	orrs	r6, r0
 8001582:	4313      	orrs	r3, r2
 8001584:	2d00      	cmp	r5, #0
 8001586:	d161      	bne.n	800164c <__aeabi_dadd+0x440>
 8001588:	2e00      	cmp	r6, #0
 800158a:	d000      	beq.n	800158e <__aeabi_dadd+0x382>
 800158c:	e0f4      	b.n	8001778 <__aeabi_dadd+0x56c>
 800158e:	2b00      	cmp	r3, #0
 8001590:	d100      	bne.n	8001594 <__aeabi_dadd+0x388>
 8001592:	e11b      	b.n	80017cc <__aeabi_dadd+0x5c0>
 8001594:	4664      	mov	r4, ip
 8001596:	0039      	movs	r1, r7
 8001598:	0010      	movs	r0, r2
 800159a:	e739      	b.n	8001410 <__aeabi_dadd+0x204>
 800159c:	4f1a      	ldr	r7, [pc, #104]	; (8001608 <__aeabi_dadd+0x3fc>)
 800159e:	42bb      	cmp	r3, r7
 80015a0:	d07a      	beq.n	8001698 <__aeabi_dadd+0x48c>
 80015a2:	0033      	movs	r3, r6
 80015a4:	e6ff      	b.n	80013a6 <__aeabi_dadd+0x19a>
 80015a6:	0030      	movs	r0, r6
 80015a8:	3d1f      	subs	r5, #31
 80015aa:	40e8      	lsrs	r0, r5
 80015ac:	2b20      	cmp	r3, #32
 80015ae:	d003      	beq.n	80015b8 <__aeabi_dadd+0x3ac>
 80015b0:	2140      	movs	r1, #64	; 0x40
 80015b2:	1acb      	subs	r3, r1, r3
 80015b4:	409e      	lsls	r6, r3
 80015b6:	4337      	orrs	r7, r6
 80015b8:	1e7b      	subs	r3, r7, #1
 80015ba:	419f      	sbcs	r7, r3
 80015bc:	2207      	movs	r2, #7
 80015be:	4307      	orrs	r7, r0
 80015c0:	403a      	ands	r2, r7
 80015c2:	2100      	movs	r1, #0
 80015c4:	2500      	movs	r5, #0
 80015c6:	e789      	b.n	80014dc <__aeabi_dadd+0x2d0>
 80015c8:	1a17      	subs	r7, r2, r0
 80015ca:	4643      	mov	r3, r8
 80015cc:	42ba      	cmp	r2, r7
 80015ce:	41b6      	sbcs	r6, r6
 80015d0:	1a59      	subs	r1, r3, r1
 80015d2:	4276      	negs	r6, r6
 80015d4:	1b8e      	subs	r6, r1, r6
 80015d6:	4664      	mov	r4, ip
 80015d8:	e64e      	b.n	8001278 <__aeabi_dadd+0x6c>
 80015da:	2b1f      	cmp	r3, #31
 80015dc:	dd00      	ble.n	80015e0 <__aeabi_dadd+0x3d4>
 80015de:	e0ad      	b.n	800173c <__aeabi_dadd+0x530>
 80015e0:	2620      	movs	r6, #32
 80015e2:	4647      	mov	r7, r8
 80015e4:	1af6      	subs	r6, r6, r3
 80015e6:	40b7      	lsls	r7, r6
 80015e8:	46b9      	mov	r9, r7
 80015ea:	0017      	movs	r7, r2
 80015ec:	46b2      	mov	sl, r6
 80015ee:	40df      	lsrs	r7, r3
 80015f0:	464e      	mov	r6, r9
 80015f2:	433e      	orrs	r6, r7
 80015f4:	0037      	movs	r7, r6
 80015f6:	4656      	mov	r6, sl
 80015f8:	40b2      	lsls	r2, r6
 80015fa:	1e56      	subs	r6, r2, #1
 80015fc:	41b2      	sbcs	r2, r6
 80015fe:	4317      	orrs	r7, r2
 8001600:	4642      	mov	r2, r8
 8001602:	40da      	lsrs	r2, r3
 8001604:	1889      	adds	r1, r1, r2
 8001606:	e6ae      	b.n	8001366 <__aeabi_dadd+0x15a>
 8001608:	000007ff 	.word	0x000007ff
 800160c:	ff7fffff 	.word	0xff7fffff
 8001610:	800fffff 	.word	0x800fffff
 8001614:	2620      	movs	r6, #32
 8001616:	4647      	mov	r7, r8
 8001618:	1af6      	subs	r6, r6, r3
 800161a:	40b7      	lsls	r7, r6
 800161c:	46b9      	mov	r9, r7
 800161e:	0017      	movs	r7, r2
 8001620:	46b2      	mov	sl, r6
 8001622:	40df      	lsrs	r7, r3
 8001624:	464e      	mov	r6, r9
 8001626:	433e      	orrs	r6, r7
 8001628:	0037      	movs	r7, r6
 800162a:	4656      	mov	r6, sl
 800162c:	40b2      	lsls	r2, r6
 800162e:	1e56      	subs	r6, r2, #1
 8001630:	41b2      	sbcs	r2, r6
 8001632:	4317      	orrs	r7, r2
 8001634:	4642      	mov	r2, r8
 8001636:	40da      	lsrs	r2, r3
 8001638:	1a89      	subs	r1, r1, r2
 800163a:	e799      	b.n	8001570 <__aeabi_dadd+0x364>
 800163c:	4c7f      	ldr	r4, [pc, #508]	; (800183c <__aeabi_dadd+0x630>)
 800163e:	42a6      	cmp	r6, r4
 8001640:	d05b      	beq.n	80016fa <__aeabi_dadd+0x4ee>
 8001642:	2480      	movs	r4, #128	; 0x80
 8001644:	0424      	lsls	r4, r4, #16
 8001646:	425b      	negs	r3, r3
 8001648:	4321      	orrs	r1, r4
 800164a:	e727      	b.n	800149c <__aeabi_dadd+0x290>
 800164c:	2e00      	cmp	r6, #0
 800164e:	d10c      	bne.n	800166a <__aeabi_dadd+0x45e>
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_dadd+0x44a>
 8001654:	e0cb      	b.n	80017ee <__aeabi_dadd+0x5e2>
 8001656:	4664      	mov	r4, ip
 8001658:	0039      	movs	r1, r7
 800165a:	0010      	movs	r0, r2
 800165c:	4d77      	ldr	r5, [pc, #476]	; (800183c <__aeabi_dadd+0x630>)
 800165e:	e6d7      	b.n	8001410 <__aeabi_dadd+0x204>
 8001660:	4f76      	ldr	r7, [pc, #472]	; (800183c <__aeabi_dadd+0x630>)
 8001662:	42bb      	cmp	r3, r7
 8001664:	d018      	beq.n	8001698 <__aeabi_dadd+0x48c>
 8001666:	0033      	movs	r3, r6
 8001668:	e675      	b.n	8001356 <__aeabi_dadd+0x14a>
 800166a:	2b00      	cmp	r3, #0
 800166c:	d014      	beq.n	8001698 <__aeabi_dadd+0x48c>
 800166e:	074b      	lsls	r3, r1, #29
 8001670:	08c0      	lsrs	r0, r0, #3
 8001672:	4318      	orrs	r0, r3
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	08c9      	lsrs	r1, r1, #3
 8001678:	031b      	lsls	r3, r3, #12
 800167a:	4219      	tst	r1, r3
 800167c:	d007      	beq.n	800168e <__aeabi_dadd+0x482>
 800167e:	08fc      	lsrs	r4, r7, #3
 8001680:	421c      	tst	r4, r3
 8001682:	d104      	bne.n	800168e <__aeabi_dadd+0x482>
 8001684:	0779      	lsls	r1, r7, #29
 8001686:	08d0      	lsrs	r0, r2, #3
 8001688:	4308      	orrs	r0, r1
 800168a:	46e1      	mov	r9, ip
 800168c:	0021      	movs	r1, r4
 800168e:	464c      	mov	r4, r9
 8001690:	0f42      	lsrs	r2, r0, #29
 8001692:	00c9      	lsls	r1, r1, #3
 8001694:	4311      	orrs	r1, r2
 8001696:	00c0      	lsls	r0, r0, #3
 8001698:	4d68      	ldr	r5, [pc, #416]	; (800183c <__aeabi_dadd+0x630>)
 800169a:	e6b9      	b.n	8001410 <__aeabi_dadd+0x204>
 800169c:	001d      	movs	r5, r3
 800169e:	2200      	movs	r2, #0
 80016a0:	2300      	movs	r3, #0
 80016a2:	e6c0      	b.n	8001426 <__aeabi_dadd+0x21a>
 80016a4:	2d00      	cmp	r5, #0
 80016a6:	d15b      	bne.n	8001760 <__aeabi_dadd+0x554>
 80016a8:	000d      	movs	r5, r1
 80016aa:	4305      	orrs	r5, r0
 80016ac:	d100      	bne.n	80016b0 <__aeabi_dadd+0x4a4>
 80016ae:	e6e2      	b.n	8001476 <__aeabi_dadd+0x26a>
 80016b0:	1c5d      	adds	r5, r3, #1
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dadd+0x4aa>
 80016b4:	e0b0      	b.n	8001818 <__aeabi_dadd+0x60c>
 80016b6:	4d61      	ldr	r5, [pc, #388]	; (800183c <__aeabi_dadd+0x630>)
 80016b8:	42ae      	cmp	r6, r5
 80016ba:	d01f      	beq.n	80016fc <__aeabi_dadd+0x4f0>
 80016bc:	43db      	mvns	r3, r3
 80016be:	2b38      	cmp	r3, #56	; 0x38
 80016c0:	dc71      	bgt.n	80017a6 <__aeabi_dadd+0x59a>
 80016c2:	2b1f      	cmp	r3, #31
 80016c4:	dd00      	ble.n	80016c8 <__aeabi_dadd+0x4bc>
 80016c6:	e096      	b.n	80017f6 <__aeabi_dadd+0x5ea>
 80016c8:	2520      	movs	r5, #32
 80016ca:	000f      	movs	r7, r1
 80016cc:	1aed      	subs	r5, r5, r3
 80016ce:	40af      	lsls	r7, r5
 80016d0:	46b9      	mov	r9, r7
 80016d2:	0007      	movs	r7, r0
 80016d4:	46aa      	mov	sl, r5
 80016d6:	40df      	lsrs	r7, r3
 80016d8:	464d      	mov	r5, r9
 80016da:	433d      	orrs	r5, r7
 80016dc:	002f      	movs	r7, r5
 80016de:	4655      	mov	r5, sl
 80016e0:	40a8      	lsls	r0, r5
 80016e2:	40d9      	lsrs	r1, r3
 80016e4:	1e45      	subs	r5, r0, #1
 80016e6:	41a8      	sbcs	r0, r5
 80016e8:	4488      	add	r8, r1
 80016ea:	4307      	orrs	r7, r0
 80016ec:	18bf      	adds	r7, r7, r2
 80016ee:	4297      	cmp	r7, r2
 80016f0:	4192      	sbcs	r2, r2
 80016f2:	4251      	negs	r1, r2
 80016f4:	4441      	add	r1, r8
 80016f6:	0035      	movs	r5, r6
 80016f8:	e63a      	b.n	8001370 <__aeabi_dadd+0x164>
 80016fa:	4664      	mov	r4, ip
 80016fc:	0035      	movs	r5, r6
 80016fe:	4641      	mov	r1, r8
 8001700:	0010      	movs	r0, r2
 8001702:	e685      	b.n	8001410 <__aeabi_dadd+0x204>
 8001704:	000b      	movs	r3, r1
 8001706:	4303      	orrs	r3, r0
 8001708:	2d00      	cmp	r5, #0
 800170a:	d000      	beq.n	800170e <__aeabi_dadd+0x502>
 800170c:	e663      	b.n	80013d6 <__aeabi_dadd+0x1ca>
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f5      	beq.n	80016fe <__aeabi_dadd+0x4f2>
 8001712:	4643      	mov	r3, r8
 8001714:	4313      	orrs	r3, r2
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x50e>
 8001718:	e67a      	b.n	8001410 <__aeabi_dadd+0x204>
 800171a:	1887      	adds	r7, r0, r2
 800171c:	4287      	cmp	r7, r0
 800171e:	4180      	sbcs	r0, r0
 8001720:	2207      	movs	r2, #7
 8001722:	4441      	add	r1, r8
 8001724:	4240      	negs	r0, r0
 8001726:	1809      	adds	r1, r1, r0
 8001728:	403a      	ands	r2, r7
 800172a:	020b      	lsls	r3, r1, #8
 800172c:	d400      	bmi.n	8001730 <__aeabi_dadd+0x524>
 800172e:	e6d5      	b.n	80014dc <__aeabi_dadd+0x2d0>
 8001730:	4b43      	ldr	r3, [pc, #268]	; (8001840 <__aeabi_dadd+0x634>)
 8001732:	3501      	adds	r5, #1
 8001734:	4019      	ands	r1, r3
 8001736:	e5c9      	b.n	80012cc <__aeabi_dadd+0xc0>
 8001738:	0038      	movs	r0, r7
 800173a:	e669      	b.n	8001410 <__aeabi_dadd+0x204>
 800173c:	001e      	movs	r6, r3
 800173e:	4647      	mov	r7, r8
 8001740:	3e20      	subs	r6, #32
 8001742:	40f7      	lsrs	r7, r6
 8001744:	46bc      	mov	ip, r7
 8001746:	2b20      	cmp	r3, #32
 8001748:	d004      	beq.n	8001754 <__aeabi_dadd+0x548>
 800174a:	2640      	movs	r6, #64	; 0x40
 800174c:	1af3      	subs	r3, r6, r3
 800174e:	4646      	mov	r6, r8
 8001750:	409e      	lsls	r6, r3
 8001752:	4332      	orrs	r2, r6
 8001754:	0017      	movs	r7, r2
 8001756:	4663      	mov	r3, ip
 8001758:	1e7a      	subs	r2, r7, #1
 800175a:	4197      	sbcs	r7, r2
 800175c:	431f      	orrs	r7, r3
 800175e:	e602      	b.n	8001366 <__aeabi_dadd+0x15a>
 8001760:	4d36      	ldr	r5, [pc, #216]	; (800183c <__aeabi_dadd+0x630>)
 8001762:	42ae      	cmp	r6, r5
 8001764:	d0ca      	beq.n	80016fc <__aeabi_dadd+0x4f0>
 8001766:	2580      	movs	r5, #128	; 0x80
 8001768:	042d      	lsls	r5, r5, #16
 800176a:	425b      	negs	r3, r3
 800176c:	4329      	orrs	r1, r5
 800176e:	e7a6      	b.n	80016be <__aeabi_dadd+0x4b2>
 8001770:	4308      	orrs	r0, r1
 8001772:	1e41      	subs	r1, r0, #1
 8001774:	4188      	sbcs	r0, r1
 8001776:	e6a6      	b.n	80014c6 <__aeabi_dadd+0x2ba>
 8001778:	2b00      	cmp	r3, #0
 800177a:	d100      	bne.n	800177e <__aeabi_dadd+0x572>
 800177c:	e648      	b.n	8001410 <__aeabi_dadd+0x204>
 800177e:	1a87      	subs	r7, r0, r2
 8001780:	4643      	mov	r3, r8
 8001782:	42b8      	cmp	r0, r7
 8001784:	41b6      	sbcs	r6, r6
 8001786:	1acb      	subs	r3, r1, r3
 8001788:	4276      	negs	r6, r6
 800178a:	1b9e      	subs	r6, r3, r6
 800178c:	0233      	lsls	r3, r6, #8
 800178e:	d54b      	bpl.n	8001828 <__aeabi_dadd+0x61c>
 8001790:	1a17      	subs	r7, r2, r0
 8001792:	4643      	mov	r3, r8
 8001794:	42ba      	cmp	r2, r7
 8001796:	4192      	sbcs	r2, r2
 8001798:	1a59      	subs	r1, r3, r1
 800179a:	4252      	negs	r2, r2
 800179c:	1a89      	subs	r1, r1, r2
 800179e:	2207      	movs	r2, #7
 80017a0:	4664      	mov	r4, ip
 80017a2:	403a      	ands	r2, r7
 80017a4:	e592      	b.n	80012cc <__aeabi_dadd+0xc0>
 80017a6:	4301      	orrs	r1, r0
 80017a8:	000f      	movs	r7, r1
 80017aa:	1e79      	subs	r1, r7, #1
 80017ac:	418f      	sbcs	r7, r1
 80017ae:	e79d      	b.n	80016ec <__aeabi_dadd+0x4e0>
 80017b0:	001c      	movs	r4, r3
 80017b2:	000f      	movs	r7, r1
 80017b4:	3c20      	subs	r4, #32
 80017b6:	40e7      	lsrs	r7, r4
 80017b8:	2b20      	cmp	r3, #32
 80017ba:	d003      	beq.n	80017c4 <__aeabi_dadd+0x5b8>
 80017bc:	2440      	movs	r4, #64	; 0x40
 80017be:	1ae3      	subs	r3, r4, r3
 80017c0:	4099      	lsls	r1, r3
 80017c2:	4308      	orrs	r0, r1
 80017c4:	1e41      	subs	r1, r0, #1
 80017c6:	4188      	sbcs	r0, r1
 80017c8:	4338      	orrs	r0, r7
 80017ca:	e67c      	b.n	80014c6 <__aeabi_dadd+0x2ba>
 80017cc:	2200      	movs	r2, #0
 80017ce:	2400      	movs	r4, #0
 80017d0:	e625      	b.n	800141e <__aeabi_dadd+0x212>
 80017d2:	1a17      	subs	r7, r2, r0
 80017d4:	4643      	mov	r3, r8
 80017d6:	42ba      	cmp	r2, r7
 80017d8:	4192      	sbcs	r2, r2
 80017da:	1a59      	subs	r1, r3, r1
 80017dc:	4252      	negs	r2, r2
 80017de:	1a89      	subs	r1, r1, r2
 80017e0:	4664      	mov	r4, ip
 80017e2:	0035      	movs	r5, r6
 80017e4:	e543      	b.n	800126e <__aeabi_dadd+0x62>
 80017e6:	4641      	mov	r1, r8
 80017e8:	0010      	movs	r0, r2
 80017ea:	4d14      	ldr	r5, [pc, #80]	; (800183c <__aeabi_dadd+0x630>)
 80017ec:	e610      	b.n	8001410 <__aeabi_dadd+0x204>
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	2400      	movs	r4, #0
 80017f2:	0312      	lsls	r2, r2, #12
 80017f4:	e680      	b.n	80014f8 <__aeabi_dadd+0x2ec>
 80017f6:	001d      	movs	r5, r3
 80017f8:	000f      	movs	r7, r1
 80017fa:	3d20      	subs	r5, #32
 80017fc:	40ef      	lsrs	r7, r5
 80017fe:	46bc      	mov	ip, r7
 8001800:	2b20      	cmp	r3, #32
 8001802:	d003      	beq.n	800180c <__aeabi_dadd+0x600>
 8001804:	2540      	movs	r5, #64	; 0x40
 8001806:	1aeb      	subs	r3, r5, r3
 8001808:	4099      	lsls	r1, r3
 800180a:	4308      	orrs	r0, r1
 800180c:	0007      	movs	r7, r0
 800180e:	4663      	mov	r3, ip
 8001810:	1e78      	subs	r0, r7, #1
 8001812:	4187      	sbcs	r7, r0
 8001814:	431f      	orrs	r7, r3
 8001816:	e769      	b.n	80016ec <__aeabi_dadd+0x4e0>
 8001818:	1887      	adds	r7, r0, r2
 800181a:	4297      	cmp	r7, r2
 800181c:	419b      	sbcs	r3, r3
 800181e:	4441      	add	r1, r8
 8001820:	425b      	negs	r3, r3
 8001822:	18c9      	adds	r1, r1, r3
 8001824:	0035      	movs	r5, r6
 8001826:	e5a3      	b.n	8001370 <__aeabi_dadd+0x164>
 8001828:	003b      	movs	r3, r7
 800182a:	4333      	orrs	r3, r6
 800182c:	d0ce      	beq.n	80017cc <__aeabi_dadd+0x5c0>
 800182e:	2207      	movs	r2, #7
 8001830:	0031      	movs	r1, r6
 8001832:	403a      	ands	r2, r7
 8001834:	e652      	b.n	80014dc <__aeabi_dadd+0x2d0>
 8001836:	2300      	movs	r3, #0
 8001838:	001a      	movs	r2, r3
 800183a:	e5f4      	b.n	8001426 <__aeabi_dadd+0x21a>
 800183c:	000007ff 	.word	0x000007ff
 8001840:	ff7fffff 	.word	0xff7fffff

08001844 <__aeabi_ddiv>:
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001846:	4657      	mov	r7, sl
 8001848:	46de      	mov	lr, fp
 800184a:	464e      	mov	r6, r9
 800184c:	4645      	mov	r5, r8
 800184e:	b5e0      	push	{r5, r6, r7, lr}
 8001850:	4683      	mov	fp, r0
 8001852:	0007      	movs	r7, r0
 8001854:	030e      	lsls	r6, r1, #12
 8001856:	0048      	lsls	r0, r1, #1
 8001858:	b085      	sub	sp, #20
 800185a:	4692      	mov	sl, r2
 800185c:	001c      	movs	r4, r3
 800185e:	0b36      	lsrs	r6, r6, #12
 8001860:	0d40      	lsrs	r0, r0, #21
 8001862:	0fcd      	lsrs	r5, r1, #31
 8001864:	2800      	cmp	r0, #0
 8001866:	d100      	bne.n	800186a <__aeabi_ddiv+0x26>
 8001868:	e09d      	b.n	80019a6 <__aeabi_ddiv+0x162>
 800186a:	4b95      	ldr	r3, [pc, #596]	; (8001ac0 <__aeabi_ddiv+0x27c>)
 800186c:	4298      	cmp	r0, r3
 800186e:	d039      	beq.n	80018e4 <__aeabi_ddiv+0xa0>
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	00f6      	lsls	r6, r6, #3
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	431e      	orrs	r6, r3
 8001878:	4a92      	ldr	r2, [pc, #584]	; (8001ac4 <__aeabi_ddiv+0x280>)
 800187a:	0f7b      	lsrs	r3, r7, #29
 800187c:	4333      	orrs	r3, r6
 800187e:	4699      	mov	r9, r3
 8001880:	4694      	mov	ip, r2
 8001882:	0003      	movs	r3, r0
 8001884:	4463      	add	r3, ip
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	2600      	movs	r6, #0
 800188c:	00ff      	lsls	r7, r7, #3
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	0323      	lsls	r3, r4, #12
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	4698      	mov	r8, r3
 8001896:	0063      	lsls	r3, r4, #1
 8001898:	0fe4      	lsrs	r4, r4, #31
 800189a:	4652      	mov	r2, sl
 800189c:	0d5b      	lsrs	r3, r3, #21
 800189e:	9401      	str	r4, [sp, #4]
 80018a0:	d100      	bne.n	80018a4 <__aeabi_ddiv+0x60>
 80018a2:	e0b3      	b.n	8001a0c <__aeabi_ddiv+0x1c8>
 80018a4:	4986      	ldr	r1, [pc, #536]	; (8001ac0 <__aeabi_ddiv+0x27c>)
 80018a6:	428b      	cmp	r3, r1
 80018a8:	d100      	bne.n	80018ac <__aeabi_ddiv+0x68>
 80018aa:	e09e      	b.n	80019ea <__aeabi_ddiv+0x1a6>
 80018ac:	4642      	mov	r2, r8
 80018ae:	00d1      	lsls	r1, r2, #3
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	0412      	lsls	r2, r2, #16
 80018b4:	430a      	orrs	r2, r1
 80018b6:	4651      	mov	r1, sl
 80018b8:	0f49      	lsrs	r1, r1, #29
 80018ba:	4311      	orrs	r1, r2
 80018bc:	468b      	mov	fp, r1
 80018be:	4981      	ldr	r1, [pc, #516]	; (8001ac4 <__aeabi_ddiv+0x280>)
 80018c0:	4652      	mov	r2, sl
 80018c2:	468c      	mov	ip, r1
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	4463      	add	r3, ip
 80018c8:	1acb      	subs	r3, r1, r3
 80018ca:	2100      	movs	r1, #0
 80018cc:	00d2      	lsls	r2, r2, #3
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	002b      	movs	r3, r5
 80018d2:	4063      	eors	r3, r4
 80018d4:	469a      	mov	sl, r3
 80018d6:	2e0f      	cmp	r6, #15
 80018d8:	d900      	bls.n	80018dc <__aeabi_ddiv+0x98>
 80018da:	e105      	b.n	8001ae8 <__aeabi_ddiv+0x2a4>
 80018dc:	4b7a      	ldr	r3, [pc, #488]	; (8001ac8 <__aeabi_ddiv+0x284>)
 80018de:	00b6      	lsls	r6, r6, #2
 80018e0:	599b      	ldr	r3, [r3, r6]
 80018e2:	469f      	mov	pc, r3
 80018e4:	465b      	mov	r3, fp
 80018e6:	4333      	orrs	r3, r6
 80018e8:	4699      	mov	r9, r3
 80018ea:	d000      	beq.n	80018ee <__aeabi_ddiv+0xaa>
 80018ec:	e0b8      	b.n	8001a60 <__aeabi_ddiv+0x21c>
 80018ee:	2302      	movs	r3, #2
 80018f0:	2608      	movs	r6, #8
 80018f2:	2700      	movs	r7, #0
 80018f4:	9000      	str	r0, [sp, #0]
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	e7ca      	b.n	8001890 <__aeabi_ddiv+0x4c>
 80018fa:	46cb      	mov	fp, r9
 80018fc:	003a      	movs	r2, r7
 80018fe:	9902      	ldr	r1, [sp, #8]
 8001900:	9501      	str	r5, [sp, #4]
 8001902:	9b01      	ldr	r3, [sp, #4]
 8001904:	469a      	mov	sl, r3
 8001906:	2902      	cmp	r1, #2
 8001908:	d027      	beq.n	800195a <__aeabi_ddiv+0x116>
 800190a:	2903      	cmp	r1, #3
 800190c:	d100      	bne.n	8001910 <__aeabi_ddiv+0xcc>
 800190e:	e280      	b.n	8001e12 <__aeabi_ddiv+0x5ce>
 8001910:	2901      	cmp	r1, #1
 8001912:	d044      	beq.n	800199e <__aeabi_ddiv+0x15a>
 8001914:	496d      	ldr	r1, [pc, #436]	; (8001acc <__aeabi_ddiv+0x288>)
 8001916:	9b00      	ldr	r3, [sp, #0]
 8001918:	468c      	mov	ip, r1
 800191a:	4463      	add	r3, ip
 800191c:	001c      	movs	r4, r3
 800191e:	2c00      	cmp	r4, #0
 8001920:	dd38      	ble.n	8001994 <__aeabi_ddiv+0x150>
 8001922:	0753      	lsls	r3, r2, #29
 8001924:	d000      	beq.n	8001928 <__aeabi_ddiv+0xe4>
 8001926:	e213      	b.n	8001d50 <__aeabi_ddiv+0x50c>
 8001928:	08d2      	lsrs	r2, r2, #3
 800192a:	465b      	mov	r3, fp
 800192c:	01db      	lsls	r3, r3, #7
 800192e:	d509      	bpl.n	8001944 <__aeabi_ddiv+0x100>
 8001930:	4659      	mov	r1, fp
 8001932:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <__aeabi_ddiv+0x28c>)
 8001934:	4019      	ands	r1, r3
 8001936:	468b      	mov	fp, r1
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	00c9      	lsls	r1, r1, #3
 800193c:	468c      	mov	ip, r1
 800193e:	9b00      	ldr	r3, [sp, #0]
 8001940:	4463      	add	r3, ip
 8001942:	001c      	movs	r4, r3
 8001944:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <__aeabi_ddiv+0x290>)
 8001946:	429c      	cmp	r4, r3
 8001948:	dc07      	bgt.n	800195a <__aeabi_ddiv+0x116>
 800194a:	465b      	mov	r3, fp
 800194c:	0564      	lsls	r4, r4, #21
 800194e:	075f      	lsls	r7, r3, #29
 8001950:	025b      	lsls	r3, r3, #9
 8001952:	4317      	orrs	r7, r2
 8001954:	0b1b      	lsrs	r3, r3, #12
 8001956:	0d62      	lsrs	r2, r4, #21
 8001958:	e002      	b.n	8001960 <__aeabi_ddiv+0x11c>
 800195a:	2300      	movs	r3, #0
 800195c:	2700      	movs	r7, #0
 800195e:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <__aeabi_ddiv+0x27c>)
 8001960:	2100      	movs	r1, #0
 8001962:	031b      	lsls	r3, r3, #12
 8001964:	0b1c      	lsrs	r4, r3, #12
 8001966:	0d0b      	lsrs	r3, r1, #20
 8001968:	051b      	lsls	r3, r3, #20
 800196a:	4323      	orrs	r3, r4
 800196c:	0514      	lsls	r4, r2, #20
 800196e:	4a5a      	ldr	r2, [pc, #360]	; (8001ad8 <__aeabi_ddiv+0x294>)
 8001970:	0038      	movs	r0, r7
 8001972:	4013      	ands	r3, r2
 8001974:	431c      	orrs	r4, r3
 8001976:	4653      	mov	r3, sl
 8001978:	0064      	lsls	r4, r4, #1
 800197a:	07db      	lsls	r3, r3, #31
 800197c:	0864      	lsrs	r4, r4, #1
 800197e:	431c      	orrs	r4, r3
 8001980:	0021      	movs	r1, r4
 8001982:	b005      	add	sp, #20
 8001984:	bc3c      	pop	{r2, r3, r4, r5}
 8001986:	4690      	mov	r8, r2
 8001988:	4699      	mov	r9, r3
 800198a:	46a2      	mov	sl, r4
 800198c:	46ab      	mov	fp, r5
 800198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001990:	2201      	movs	r2, #1
 8001992:	4252      	negs	r2, r2
 8001994:	2301      	movs	r3, #1
 8001996:	1b1b      	subs	r3, r3, r4
 8001998:	2b38      	cmp	r3, #56	; 0x38
 800199a:	dc00      	bgt.n	800199e <__aeabi_ddiv+0x15a>
 800199c:	e1ad      	b.n	8001cfa <__aeabi_ddiv+0x4b6>
 800199e:	2200      	movs	r2, #0
 80019a0:	2300      	movs	r3, #0
 80019a2:	2700      	movs	r7, #0
 80019a4:	e7dc      	b.n	8001960 <__aeabi_ddiv+0x11c>
 80019a6:	465b      	mov	r3, fp
 80019a8:	4333      	orrs	r3, r6
 80019aa:	4699      	mov	r9, r3
 80019ac:	d05e      	beq.n	8001a6c <__aeabi_ddiv+0x228>
 80019ae:	2e00      	cmp	r6, #0
 80019b0:	d100      	bne.n	80019b4 <__aeabi_ddiv+0x170>
 80019b2:	e18a      	b.n	8001cca <__aeabi_ddiv+0x486>
 80019b4:	0030      	movs	r0, r6
 80019b6:	f001 fa9d 	bl	8002ef4 <__clzsi2>
 80019ba:	0003      	movs	r3, r0
 80019bc:	3b0b      	subs	r3, #11
 80019be:	2b1c      	cmp	r3, #28
 80019c0:	dd00      	ble.n	80019c4 <__aeabi_ddiv+0x180>
 80019c2:	e17b      	b.n	8001cbc <__aeabi_ddiv+0x478>
 80019c4:	221d      	movs	r2, #29
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	465a      	mov	r2, fp
 80019ca:	0001      	movs	r1, r0
 80019cc:	40da      	lsrs	r2, r3
 80019ce:	3908      	subs	r1, #8
 80019d0:	408e      	lsls	r6, r1
 80019d2:	0013      	movs	r3, r2
 80019d4:	465f      	mov	r7, fp
 80019d6:	4333      	orrs	r3, r6
 80019d8:	4699      	mov	r9, r3
 80019da:	408f      	lsls	r7, r1
 80019dc:	4b3f      	ldr	r3, [pc, #252]	; (8001adc <__aeabi_ddiv+0x298>)
 80019de:	2600      	movs	r6, #0
 80019e0:	1a1b      	subs	r3, r3, r0
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	e752      	b.n	8001890 <__aeabi_ddiv+0x4c>
 80019ea:	4641      	mov	r1, r8
 80019ec:	4653      	mov	r3, sl
 80019ee:	430b      	orrs	r3, r1
 80019f0:	493b      	ldr	r1, [pc, #236]	; (8001ae0 <__aeabi_ddiv+0x29c>)
 80019f2:	469b      	mov	fp, r3
 80019f4:	468c      	mov	ip, r1
 80019f6:	9b00      	ldr	r3, [sp, #0]
 80019f8:	4463      	add	r3, ip
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	465b      	mov	r3, fp
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d13b      	bne.n	8001a7a <__aeabi_ddiv+0x236>
 8001a02:	2302      	movs	r3, #2
 8001a04:	2200      	movs	r2, #0
 8001a06:	431e      	orrs	r6, r3
 8001a08:	2102      	movs	r1, #2
 8001a0a:	e761      	b.n	80018d0 <__aeabi_ddiv+0x8c>
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	469b      	mov	fp, r3
 8001a12:	d037      	beq.n	8001a84 <__aeabi_ddiv+0x240>
 8001a14:	4643      	mov	r3, r8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d100      	bne.n	8001a1c <__aeabi_ddiv+0x1d8>
 8001a1a:	e162      	b.n	8001ce2 <__aeabi_ddiv+0x49e>
 8001a1c:	4640      	mov	r0, r8
 8001a1e:	f001 fa69 	bl	8002ef4 <__clzsi2>
 8001a22:	0003      	movs	r3, r0
 8001a24:	3b0b      	subs	r3, #11
 8001a26:	2b1c      	cmp	r3, #28
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_ddiv+0x1e8>
 8001a2a:	e153      	b.n	8001cd4 <__aeabi_ddiv+0x490>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	4641      	mov	r1, r8
 8001a30:	3a08      	subs	r2, #8
 8001a32:	4091      	lsls	r1, r2
 8001a34:	4688      	mov	r8, r1
 8001a36:	211d      	movs	r1, #29
 8001a38:	1acb      	subs	r3, r1, r3
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	40d9      	lsrs	r1, r3
 8001a3e:	000b      	movs	r3, r1
 8001a40:	4641      	mov	r1, r8
 8001a42:	430b      	orrs	r3, r1
 8001a44:	469b      	mov	fp, r3
 8001a46:	4653      	mov	r3, sl
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	9b00      	ldr	r3, [sp, #0]
 8001a4e:	4925      	ldr	r1, [pc, #148]	; (8001ae4 <__aeabi_ddiv+0x2a0>)
 8001a50:	469c      	mov	ip, r3
 8001a52:	4460      	add	r0, ip
 8001a54:	0003      	movs	r3, r0
 8001a56:	468c      	mov	ip, r1
 8001a58:	4463      	add	r3, ip
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	e737      	b.n	80018d0 <__aeabi_ddiv+0x8c>
 8001a60:	2303      	movs	r3, #3
 8001a62:	46b1      	mov	r9, r6
 8001a64:	9000      	str	r0, [sp, #0]
 8001a66:	260c      	movs	r6, #12
 8001a68:	9302      	str	r3, [sp, #8]
 8001a6a:	e711      	b.n	8001890 <__aeabi_ddiv+0x4c>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	2604      	movs	r6, #4
 8001a74:	2700      	movs	r7, #0
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	e70a      	b.n	8001890 <__aeabi_ddiv+0x4c>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	46c3      	mov	fp, r8
 8001a7e:	431e      	orrs	r6, r3
 8001a80:	2103      	movs	r1, #3
 8001a82:	e725      	b.n	80018d0 <__aeabi_ddiv+0x8c>
 8001a84:	3301      	adds	r3, #1
 8001a86:	431e      	orrs	r6, r3
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	e720      	b.n	80018d0 <__aeabi_ddiv+0x8c>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	469a      	mov	sl, r3
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	2700      	movs	r7, #0
 8001a96:	031b      	lsls	r3, r3, #12
 8001a98:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <__aeabi_ddiv+0x27c>)
 8001a9a:	e761      	b.n	8001960 <__aeabi_ddiv+0x11c>
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	031b      	lsls	r3, r3, #12
 8001aa2:	4219      	tst	r1, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_ddiv+0x264>
 8001aa6:	e0e2      	b.n	8001c6e <__aeabi_ddiv+0x42a>
 8001aa8:	4659      	mov	r1, fp
 8001aaa:	4219      	tst	r1, r3
 8001aac:	d000      	beq.n	8001ab0 <__aeabi_ddiv+0x26c>
 8001aae:	e0de      	b.n	8001c6e <__aeabi_ddiv+0x42a>
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	031b      	lsls	r3, r3, #12
 8001ab4:	0017      	movs	r7, r2
 8001ab6:	0b1b      	lsrs	r3, r3, #12
 8001ab8:	46a2      	mov	sl, r4
 8001aba:	4a01      	ldr	r2, [pc, #4]	; (8001ac0 <__aeabi_ddiv+0x27c>)
 8001abc:	e750      	b.n	8001960 <__aeabi_ddiv+0x11c>
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	000007ff 	.word	0x000007ff
 8001ac4:	fffffc01 	.word	0xfffffc01
 8001ac8:	08018958 	.word	0x08018958
 8001acc:	000003ff 	.word	0x000003ff
 8001ad0:	feffffff 	.word	0xfeffffff
 8001ad4:	000007fe 	.word	0x000007fe
 8001ad8:	800fffff 	.word	0x800fffff
 8001adc:	fffffc0d 	.word	0xfffffc0d
 8001ae0:	fffff801 	.word	0xfffff801
 8001ae4:	000003f3 	.word	0x000003f3
 8001ae8:	45d9      	cmp	r9, fp
 8001aea:	d900      	bls.n	8001aee <__aeabi_ddiv+0x2aa>
 8001aec:	e0cb      	b.n	8001c86 <__aeabi_ddiv+0x442>
 8001aee:	d100      	bne.n	8001af2 <__aeabi_ddiv+0x2ae>
 8001af0:	e0c6      	b.n	8001c80 <__aeabi_ddiv+0x43c>
 8001af2:	003c      	movs	r4, r7
 8001af4:	4648      	mov	r0, r9
 8001af6:	2700      	movs	r7, #0
 8001af8:	9b00      	ldr	r3, [sp, #0]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	465b      	mov	r3, fp
 8001b00:	0e16      	lsrs	r6, r2, #24
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	431e      	orrs	r6, r3
 8001b06:	0213      	lsls	r3, r2, #8
 8001b08:	4698      	mov	r8, r3
 8001b0a:	0433      	lsls	r3, r6, #16
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	4699      	mov	r9, r3
 8001b10:	0c31      	lsrs	r1, r6, #16
 8001b12:	9101      	str	r1, [sp, #4]
 8001b14:	f7fe fba2 	bl	800025c <__aeabi_uidivmod>
 8001b18:	464a      	mov	r2, r9
 8001b1a:	4342      	muls	r2, r0
 8001b1c:	040b      	lsls	r3, r1, #16
 8001b1e:	0c21      	lsrs	r1, r4, #16
 8001b20:	0005      	movs	r5, r0
 8001b22:	4319      	orrs	r1, r3
 8001b24:	428a      	cmp	r2, r1
 8001b26:	d907      	bls.n	8001b38 <__aeabi_ddiv+0x2f4>
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	3d01      	subs	r5, #1
 8001b2c:	428e      	cmp	r6, r1
 8001b2e:	d803      	bhi.n	8001b38 <__aeabi_ddiv+0x2f4>
 8001b30:	428a      	cmp	r2, r1
 8001b32:	d901      	bls.n	8001b38 <__aeabi_ddiv+0x2f4>
 8001b34:	1e85      	subs	r5, r0, #2
 8001b36:	1989      	adds	r1, r1, r6
 8001b38:	1a88      	subs	r0, r1, r2
 8001b3a:	9901      	ldr	r1, [sp, #4]
 8001b3c:	f7fe fb8e 	bl	800025c <__aeabi_uidivmod>
 8001b40:	0409      	lsls	r1, r1, #16
 8001b42:	468c      	mov	ip, r1
 8001b44:	464a      	mov	r2, r9
 8001b46:	0421      	lsls	r1, r4, #16
 8001b48:	4664      	mov	r4, ip
 8001b4a:	4342      	muls	r2, r0
 8001b4c:	0c09      	lsrs	r1, r1, #16
 8001b4e:	0003      	movs	r3, r0
 8001b50:	4321      	orrs	r1, r4
 8001b52:	428a      	cmp	r2, r1
 8001b54:	d904      	bls.n	8001b60 <__aeabi_ddiv+0x31c>
 8001b56:	1989      	adds	r1, r1, r6
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	428e      	cmp	r6, r1
 8001b5c:	d800      	bhi.n	8001b60 <__aeabi_ddiv+0x31c>
 8001b5e:	e0f1      	b.n	8001d44 <__aeabi_ddiv+0x500>
 8001b60:	042d      	lsls	r5, r5, #16
 8001b62:	431d      	orrs	r5, r3
 8001b64:	46ab      	mov	fp, r5
 8001b66:	4643      	mov	r3, r8
 8001b68:	1a89      	subs	r1, r1, r2
 8001b6a:	4642      	mov	r2, r8
 8001b6c:	0c28      	lsrs	r0, r5, #16
 8001b6e:	0412      	lsls	r2, r2, #16
 8001b70:	0c1d      	lsrs	r5, r3, #16
 8001b72:	465b      	mov	r3, fp
 8001b74:	0c14      	lsrs	r4, r2, #16
 8001b76:	0022      	movs	r2, r4
 8001b78:	041b      	lsls	r3, r3, #16
 8001b7a:	0c1b      	lsrs	r3, r3, #16
 8001b7c:	435a      	muls	r2, r3
 8001b7e:	9403      	str	r4, [sp, #12]
 8001b80:	436b      	muls	r3, r5
 8001b82:	4344      	muls	r4, r0
 8001b84:	9502      	str	r5, [sp, #8]
 8001b86:	4368      	muls	r0, r5
 8001b88:	191b      	adds	r3, r3, r4
 8001b8a:	0c15      	lsrs	r5, r2, #16
 8001b8c:	18eb      	adds	r3, r5, r3
 8001b8e:	429c      	cmp	r4, r3
 8001b90:	d903      	bls.n	8001b9a <__aeabi_ddiv+0x356>
 8001b92:	2480      	movs	r4, #128	; 0x80
 8001b94:	0264      	lsls	r4, r4, #9
 8001b96:	46a4      	mov	ip, r4
 8001b98:	4460      	add	r0, ip
 8001b9a:	0c1c      	lsrs	r4, r3, #16
 8001b9c:	0415      	lsls	r5, r2, #16
 8001b9e:	041b      	lsls	r3, r3, #16
 8001ba0:	0c2d      	lsrs	r5, r5, #16
 8001ba2:	1820      	adds	r0, r4, r0
 8001ba4:	195d      	adds	r5, r3, r5
 8001ba6:	4281      	cmp	r1, r0
 8001ba8:	d377      	bcc.n	8001c9a <__aeabi_ddiv+0x456>
 8001baa:	d073      	beq.n	8001c94 <__aeabi_ddiv+0x450>
 8001bac:	1a0c      	subs	r4, r1, r0
 8001bae:	4aa2      	ldr	r2, [pc, #648]	; (8001e38 <__aeabi_ddiv+0x5f4>)
 8001bb0:	1b7d      	subs	r5, r7, r5
 8001bb2:	42af      	cmp	r7, r5
 8001bb4:	41bf      	sbcs	r7, r7
 8001bb6:	4694      	mov	ip, r2
 8001bb8:	9b00      	ldr	r3, [sp, #0]
 8001bba:	427f      	negs	r7, r7
 8001bbc:	4463      	add	r3, ip
 8001bbe:	1be0      	subs	r0, r4, r7
 8001bc0:	001c      	movs	r4, r3
 8001bc2:	4286      	cmp	r6, r0
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_ddiv+0x384>
 8001bc6:	e0db      	b.n	8001d80 <__aeabi_ddiv+0x53c>
 8001bc8:	9901      	ldr	r1, [sp, #4]
 8001bca:	f7fe fb47 	bl	800025c <__aeabi_uidivmod>
 8001bce:	464a      	mov	r2, r9
 8001bd0:	4342      	muls	r2, r0
 8001bd2:	040b      	lsls	r3, r1, #16
 8001bd4:	0c29      	lsrs	r1, r5, #16
 8001bd6:	0007      	movs	r7, r0
 8001bd8:	4319      	orrs	r1, r3
 8001bda:	428a      	cmp	r2, r1
 8001bdc:	d907      	bls.n	8001bee <__aeabi_ddiv+0x3aa>
 8001bde:	1989      	adds	r1, r1, r6
 8001be0:	3f01      	subs	r7, #1
 8001be2:	428e      	cmp	r6, r1
 8001be4:	d803      	bhi.n	8001bee <__aeabi_ddiv+0x3aa>
 8001be6:	428a      	cmp	r2, r1
 8001be8:	d901      	bls.n	8001bee <__aeabi_ddiv+0x3aa>
 8001bea:	1e87      	subs	r7, r0, #2
 8001bec:	1989      	adds	r1, r1, r6
 8001bee:	1a88      	subs	r0, r1, r2
 8001bf0:	9901      	ldr	r1, [sp, #4]
 8001bf2:	f7fe fb33 	bl	800025c <__aeabi_uidivmod>
 8001bf6:	0409      	lsls	r1, r1, #16
 8001bf8:	464a      	mov	r2, r9
 8001bfa:	4689      	mov	r9, r1
 8001bfc:	0429      	lsls	r1, r5, #16
 8001bfe:	464d      	mov	r5, r9
 8001c00:	4342      	muls	r2, r0
 8001c02:	0c09      	lsrs	r1, r1, #16
 8001c04:	0003      	movs	r3, r0
 8001c06:	4329      	orrs	r1, r5
 8001c08:	428a      	cmp	r2, r1
 8001c0a:	d907      	bls.n	8001c1c <__aeabi_ddiv+0x3d8>
 8001c0c:	1989      	adds	r1, r1, r6
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	428e      	cmp	r6, r1
 8001c12:	d803      	bhi.n	8001c1c <__aeabi_ddiv+0x3d8>
 8001c14:	428a      	cmp	r2, r1
 8001c16:	d901      	bls.n	8001c1c <__aeabi_ddiv+0x3d8>
 8001c18:	1e83      	subs	r3, r0, #2
 8001c1a:	1989      	adds	r1, r1, r6
 8001c1c:	043f      	lsls	r7, r7, #16
 8001c1e:	1a89      	subs	r1, r1, r2
 8001c20:	003a      	movs	r2, r7
 8001c22:	9f03      	ldr	r7, [sp, #12]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	0038      	movs	r0, r7
 8001c28:	0413      	lsls	r3, r2, #16
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	4358      	muls	r0, r3
 8001c2e:	4681      	mov	r9, r0
 8001c30:	9802      	ldr	r0, [sp, #8]
 8001c32:	0c15      	lsrs	r5, r2, #16
 8001c34:	436f      	muls	r7, r5
 8001c36:	4343      	muls	r3, r0
 8001c38:	4345      	muls	r5, r0
 8001c3a:	4648      	mov	r0, r9
 8001c3c:	0c00      	lsrs	r0, r0, #16
 8001c3e:	4684      	mov	ip, r0
 8001c40:	19db      	adds	r3, r3, r7
 8001c42:	4463      	add	r3, ip
 8001c44:	429f      	cmp	r7, r3
 8001c46:	d903      	bls.n	8001c50 <__aeabi_ddiv+0x40c>
 8001c48:	2080      	movs	r0, #128	; 0x80
 8001c4a:	0240      	lsls	r0, r0, #9
 8001c4c:	4684      	mov	ip, r0
 8001c4e:	4465      	add	r5, ip
 8001c50:	4648      	mov	r0, r9
 8001c52:	0c1f      	lsrs	r7, r3, #16
 8001c54:	0400      	lsls	r0, r0, #16
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	0c00      	lsrs	r0, r0, #16
 8001c5a:	197d      	adds	r5, r7, r5
 8001c5c:	1818      	adds	r0, r3, r0
 8001c5e:	42a9      	cmp	r1, r5
 8001c60:	d200      	bcs.n	8001c64 <__aeabi_ddiv+0x420>
 8001c62:	e084      	b.n	8001d6e <__aeabi_ddiv+0x52a>
 8001c64:	d100      	bne.n	8001c68 <__aeabi_ddiv+0x424>
 8001c66:	e07f      	b.n	8001d68 <__aeabi_ddiv+0x524>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	e657      	b.n	800191e <__aeabi_ddiv+0xda>
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	464a      	mov	r2, r9
 8001c72:	031b      	lsls	r3, r3, #12
 8001c74:	4313      	orrs	r3, r2
 8001c76:	031b      	lsls	r3, r3, #12
 8001c78:	0b1b      	lsrs	r3, r3, #12
 8001c7a:	46aa      	mov	sl, r5
 8001c7c:	4a6f      	ldr	r2, [pc, #444]	; (8001e3c <__aeabi_ddiv+0x5f8>)
 8001c7e:	e66f      	b.n	8001960 <__aeabi_ddiv+0x11c>
 8001c80:	42ba      	cmp	r2, r7
 8001c82:	d900      	bls.n	8001c86 <__aeabi_ddiv+0x442>
 8001c84:	e735      	b.n	8001af2 <__aeabi_ddiv+0x2ae>
 8001c86:	464b      	mov	r3, r9
 8001c88:	07dc      	lsls	r4, r3, #31
 8001c8a:	0858      	lsrs	r0, r3, #1
 8001c8c:	087b      	lsrs	r3, r7, #1
 8001c8e:	431c      	orrs	r4, r3
 8001c90:	07ff      	lsls	r7, r7, #31
 8001c92:	e734      	b.n	8001afe <__aeabi_ddiv+0x2ba>
 8001c94:	2400      	movs	r4, #0
 8001c96:	42af      	cmp	r7, r5
 8001c98:	d289      	bcs.n	8001bae <__aeabi_ddiv+0x36a>
 8001c9a:	4447      	add	r7, r8
 8001c9c:	4547      	cmp	r7, r8
 8001c9e:	41a4      	sbcs	r4, r4
 8001ca0:	465b      	mov	r3, fp
 8001ca2:	4264      	negs	r4, r4
 8001ca4:	19a4      	adds	r4, r4, r6
 8001ca6:	1864      	adds	r4, r4, r1
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	42a6      	cmp	r6, r4
 8001cac:	d21e      	bcs.n	8001cec <__aeabi_ddiv+0x4a8>
 8001cae:	42a0      	cmp	r0, r4
 8001cb0:	d86d      	bhi.n	8001d8e <__aeabi_ddiv+0x54a>
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_ddiv+0x472>
 8001cb4:	e0b6      	b.n	8001e24 <__aeabi_ddiv+0x5e0>
 8001cb6:	1a24      	subs	r4, r4, r0
 8001cb8:	469b      	mov	fp, r3
 8001cba:	e778      	b.n	8001bae <__aeabi_ddiv+0x36a>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	465a      	mov	r2, fp
 8001cc0:	3b28      	subs	r3, #40	; 0x28
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	2700      	movs	r7, #0
 8001cc6:	4691      	mov	r9, r2
 8001cc8:	e688      	b.n	80019dc <__aeabi_ddiv+0x198>
 8001cca:	4658      	mov	r0, fp
 8001ccc:	f001 f912 	bl	8002ef4 <__clzsi2>
 8001cd0:	3020      	adds	r0, #32
 8001cd2:	e672      	b.n	80019ba <__aeabi_ddiv+0x176>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	4652      	mov	r2, sl
 8001cd8:	3b28      	subs	r3, #40	; 0x28
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	4693      	mov	fp, r2
 8001cde:	2200      	movs	r2, #0
 8001ce0:	e6b4      	b.n	8001a4c <__aeabi_ddiv+0x208>
 8001ce2:	4650      	mov	r0, sl
 8001ce4:	f001 f906 	bl	8002ef4 <__clzsi2>
 8001ce8:	3020      	adds	r0, #32
 8001cea:	e69a      	b.n	8001a22 <__aeabi_ddiv+0x1de>
 8001cec:	42a6      	cmp	r6, r4
 8001cee:	d1e2      	bne.n	8001cb6 <__aeabi_ddiv+0x472>
 8001cf0:	45b8      	cmp	r8, r7
 8001cf2:	d9dc      	bls.n	8001cae <__aeabi_ddiv+0x46a>
 8001cf4:	1a34      	subs	r4, r6, r0
 8001cf6:	469b      	mov	fp, r3
 8001cf8:	e759      	b.n	8001bae <__aeabi_ddiv+0x36a>
 8001cfa:	2b1f      	cmp	r3, #31
 8001cfc:	dc65      	bgt.n	8001dca <__aeabi_ddiv+0x586>
 8001cfe:	4c50      	ldr	r4, [pc, #320]	; (8001e40 <__aeabi_ddiv+0x5fc>)
 8001d00:	9900      	ldr	r1, [sp, #0]
 8001d02:	46a4      	mov	ip, r4
 8001d04:	465c      	mov	r4, fp
 8001d06:	4461      	add	r1, ip
 8001d08:	0008      	movs	r0, r1
 8001d0a:	408c      	lsls	r4, r1
 8001d0c:	0011      	movs	r1, r2
 8001d0e:	4082      	lsls	r2, r0
 8001d10:	40d9      	lsrs	r1, r3
 8001d12:	1e50      	subs	r0, r2, #1
 8001d14:	4182      	sbcs	r2, r0
 8001d16:	430c      	orrs	r4, r1
 8001d18:	4314      	orrs	r4, r2
 8001d1a:	465a      	mov	r2, fp
 8001d1c:	40da      	lsrs	r2, r3
 8001d1e:	0013      	movs	r3, r2
 8001d20:	0762      	lsls	r2, r4, #29
 8001d22:	d009      	beq.n	8001d38 <__aeabi_ddiv+0x4f4>
 8001d24:	220f      	movs	r2, #15
 8001d26:	4022      	ands	r2, r4
 8001d28:	2a04      	cmp	r2, #4
 8001d2a:	d005      	beq.n	8001d38 <__aeabi_ddiv+0x4f4>
 8001d2c:	0022      	movs	r2, r4
 8001d2e:	1d14      	adds	r4, r2, #4
 8001d30:	4294      	cmp	r4, r2
 8001d32:	4189      	sbcs	r1, r1
 8001d34:	4249      	negs	r1, r1
 8001d36:	185b      	adds	r3, r3, r1
 8001d38:	021a      	lsls	r2, r3, #8
 8001d3a:	d562      	bpl.n	8001e02 <__aeabi_ddiv+0x5be>
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2700      	movs	r7, #0
 8001d42:	e60d      	b.n	8001960 <__aeabi_ddiv+0x11c>
 8001d44:	428a      	cmp	r2, r1
 8001d46:	d800      	bhi.n	8001d4a <__aeabi_ddiv+0x506>
 8001d48:	e70a      	b.n	8001b60 <__aeabi_ddiv+0x31c>
 8001d4a:	1e83      	subs	r3, r0, #2
 8001d4c:	1989      	adds	r1, r1, r6
 8001d4e:	e707      	b.n	8001b60 <__aeabi_ddiv+0x31c>
 8001d50:	230f      	movs	r3, #15
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d100      	bne.n	8001d5a <__aeabi_ddiv+0x516>
 8001d58:	e5e6      	b.n	8001928 <__aeabi_ddiv+0xe4>
 8001d5a:	1d17      	adds	r7, r2, #4
 8001d5c:	4297      	cmp	r7, r2
 8001d5e:	4192      	sbcs	r2, r2
 8001d60:	4253      	negs	r3, r2
 8001d62:	449b      	add	fp, r3
 8001d64:	08fa      	lsrs	r2, r7, #3
 8001d66:	e5e0      	b.n	800192a <__aeabi_ddiv+0xe6>
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_ddiv+0x52a>
 8001d6c:	e5d7      	b.n	800191e <__aeabi_ddiv+0xda>
 8001d6e:	1871      	adds	r1, r6, r1
 8001d70:	1e53      	subs	r3, r2, #1
 8001d72:	42b1      	cmp	r1, r6
 8001d74:	d327      	bcc.n	8001dc6 <__aeabi_ddiv+0x582>
 8001d76:	42a9      	cmp	r1, r5
 8001d78:	d315      	bcc.n	8001da6 <__aeabi_ddiv+0x562>
 8001d7a:	d058      	beq.n	8001e2e <__aeabi_ddiv+0x5ea>
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	e773      	b.n	8001c68 <__aeabi_ddiv+0x424>
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_ddiv+0x542>
 8001d84:	e604      	b.n	8001990 <__aeabi_ddiv+0x14c>
 8001d86:	2301      	movs	r3, #1
 8001d88:	2200      	movs	r2, #0
 8001d8a:	449b      	add	fp, r3
 8001d8c:	e5cd      	b.n	800192a <__aeabi_ddiv+0xe6>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	4447      	add	r7, r8
 8001d92:	4547      	cmp	r7, r8
 8001d94:	4189      	sbcs	r1, r1
 8001d96:	425b      	negs	r3, r3
 8001d98:	469c      	mov	ip, r3
 8001d9a:	4249      	negs	r1, r1
 8001d9c:	1989      	adds	r1, r1, r6
 8001d9e:	190c      	adds	r4, r1, r4
 8001da0:	44e3      	add	fp, ip
 8001da2:	1a24      	subs	r4, r4, r0
 8001da4:	e703      	b.n	8001bae <__aeabi_ddiv+0x36a>
 8001da6:	4643      	mov	r3, r8
 8001da8:	005f      	lsls	r7, r3, #1
 8001daa:	4547      	cmp	r7, r8
 8001dac:	419b      	sbcs	r3, r3
 8001dae:	46b8      	mov	r8, r7
 8001db0:	425b      	negs	r3, r3
 8001db2:	199e      	adds	r6, r3, r6
 8001db4:	3a02      	subs	r2, #2
 8001db6:	1989      	adds	r1, r1, r6
 8001db8:	42a9      	cmp	r1, r5
 8001dba:	d000      	beq.n	8001dbe <__aeabi_ddiv+0x57a>
 8001dbc:	e754      	b.n	8001c68 <__aeabi_ddiv+0x424>
 8001dbe:	4540      	cmp	r0, r8
 8001dc0:	d000      	beq.n	8001dc4 <__aeabi_ddiv+0x580>
 8001dc2:	e751      	b.n	8001c68 <__aeabi_ddiv+0x424>
 8001dc4:	e5ab      	b.n	800191e <__aeabi_ddiv+0xda>
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	e7f6      	b.n	8001db8 <__aeabi_ddiv+0x574>
 8001dca:	211f      	movs	r1, #31
 8001dcc:	465f      	mov	r7, fp
 8001dce:	4249      	negs	r1, r1
 8001dd0:	1b0c      	subs	r4, r1, r4
 8001dd2:	40e7      	lsrs	r7, r4
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d007      	beq.n	8001de8 <__aeabi_ddiv+0x5a4>
 8001dd8:	491a      	ldr	r1, [pc, #104]	; (8001e44 <__aeabi_ddiv+0x600>)
 8001dda:	9b00      	ldr	r3, [sp, #0]
 8001ddc:	468c      	mov	ip, r1
 8001dde:	4463      	add	r3, ip
 8001de0:	0018      	movs	r0, r3
 8001de2:	465b      	mov	r3, fp
 8001de4:	4083      	lsls	r3, r0
 8001de6:	431a      	orrs	r2, r3
 8001de8:	1e50      	subs	r0, r2, #1
 8001dea:	4182      	sbcs	r2, r0
 8001dec:	433a      	orrs	r2, r7
 8001dee:	2707      	movs	r7, #7
 8001df0:	2300      	movs	r3, #0
 8001df2:	4017      	ands	r7, r2
 8001df4:	d009      	beq.n	8001e0a <__aeabi_ddiv+0x5c6>
 8001df6:	210f      	movs	r1, #15
 8001df8:	2300      	movs	r3, #0
 8001dfa:	4011      	ands	r1, r2
 8001dfc:	0014      	movs	r4, r2
 8001dfe:	2904      	cmp	r1, #4
 8001e00:	d195      	bne.n	8001d2e <__aeabi_ddiv+0x4ea>
 8001e02:	0022      	movs	r2, r4
 8001e04:	075f      	lsls	r7, r3, #29
 8001e06:	025b      	lsls	r3, r3, #9
 8001e08:	0b1b      	lsrs	r3, r3, #12
 8001e0a:	08d2      	lsrs	r2, r2, #3
 8001e0c:	4317      	orrs	r7, r2
 8001e0e:	2200      	movs	r2, #0
 8001e10:	e5a6      	b.n	8001960 <__aeabi_ddiv+0x11c>
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	4659      	mov	r1, fp
 8001e16:	031b      	lsls	r3, r3, #12
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	031b      	lsls	r3, r3, #12
 8001e1c:	0017      	movs	r7, r2
 8001e1e:	0b1b      	lsrs	r3, r3, #12
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <__aeabi_ddiv+0x5f8>)
 8001e22:	e59d      	b.n	8001960 <__aeabi_ddiv+0x11c>
 8001e24:	42bd      	cmp	r5, r7
 8001e26:	d8b2      	bhi.n	8001d8e <__aeabi_ddiv+0x54a>
 8001e28:	469b      	mov	fp, r3
 8001e2a:	2400      	movs	r4, #0
 8001e2c:	e6bf      	b.n	8001bae <__aeabi_ddiv+0x36a>
 8001e2e:	4580      	cmp	r8, r0
 8001e30:	d3b9      	bcc.n	8001da6 <__aeabi_ddiv+0x562>
 8001e32:	001a      	movs	r2, r3
 8001e34:	e7c3      	b.n	8001dbe <__aeabi_ddiv+0x57a>
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	000003ff 	.word	0x000003ff
 8001e3c:	000007ff 	.word	0x000007ff
 8001e40:	0000041e 	.word	0x0000041e
 8001e44:	0000043e 	.word	0x0000043e

08001e48 <__eqdf2>:
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	464f      	mov	r7, r9
 8001e4c:	4646      	mov	r6, r8
 8001e4e:	46d6      	mov	lr, sl
 8001e50:	4684      	mov	ip, r0
 8001e52:	b5c0      	push	{r6, r7, lr}
 8001e54:	4680      	mov	r8, r0
 8001e56:	4e19      	ldr	r6, [pc, #100]	; (8001ebc <__eqdf2+0x74>)
 8001e58:	0318      	lsls	r0, r3, #12
 8001e5a:	030f      	lsls	r7, r1, #12
 8001e5c:	004d      	lsls	r5, r1, #1
 8001e5e:	0b00      	lsrs	r0, r0, #12
 8001e60:	005c      	lsls	r4, r3, #1
 8001e62:	4682      	mov	sl, r0
 8001e64:	0b3f      	lsrs	r7, r7, #12
 8001e66:	0d6d      	lsrs	r5, r5, #21
 8001e68:	0fc9      	lsrs	r1, r1, #31
 8001e6a:	4691      	mov	r9, r2
 8001e6c:	0d64      	lsrs	r4, r4, #21
 8001e6e:	0fdb      	lsrs	r3, r3, #31
 8001e70:	2001      	movs	r0, #1
 8001e72:	42b5      	cmp	r5, r6
 8001e74:	d00a      	beq.n	8001e8c <__eqdf2+0x44>
 8001e76:	42b4      	cmp	r4, r6
 8001e78:	d003      	beq.n	8001e82 <__eqdf2+0x3a>
 8001e7a:	42a5      	cmp	r5, r4
 8001e7c:	d101      	bne.n	8001e82 <__eqdf2+0x3a>
 8001e7e:	4557      	cmp	r7, sl
 8001e80:	d00c      	beq.n	8001e9c <__eqdf2+0x54>
 8001e82:	bc1c      	pop	{r2, r3, r4}
 8001e84:	4690      	mov	r8, r2
 8001e86:	4699      	mov	r9, r3
 8001e88:	46a2      	mov	sl, r4
 8001e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8c:	4666      	mov	r6, ip
 8001e8e:	433e      	orrs	r6, r7
 8001e90:	d1f7      	bne.n	8001e82 <__eqdf2+0x3a>
 8001e92:	42ac      	cmp	r4, r5
 8001e94:	d1f5      	bne.n	8001e82 <__eqdf2+0x3a>
 8001e96:	4654      	mov	r4, sl
 8001e98:	4314      	orrs	r4, r2
 8001e9a:	d1f2      	bne.n	8001e82 <__eqdf2+0x3a>
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	45c8      	cmp	r8, r9
 8001ea0:	d1ef      	bne.n	8001e82 <__eqdf2+0x3a>
 8001ea2:	4299      	cmp	r1, r3
 8001ea4:	d007      	beq.n	8001eb6 <__eqdf2+0x6e>
 8001ea6:	2d00      	cmp	r5, #0
 8001ea8:	d1eb      	bne.n	8001e82 <__eqdf2+0x3a>
 8001eaa:	4663      	mov	r3, ip
 8001eac:	431f      	orrs	r7, r3
 8001eae:	0038      	movs	r0, r7
 8001eb0:	1e47      	subs	r7, r0, #1
 8001eb2:	41b8      	sbcs	r0, r7
 8001eb4:	e7e5      	b.n	8001e82 <__eqdf2+0x3a>
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	e7e3      	b.n	8001e82 <__eqdf2+0x3a>
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	000007ff 	.word	0x000007ff

08001ec0 <__gedf2>:
 8001ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec2:	464f      	mov	r7, r9
 8001ec4:	4646      	mov	r6, r8
 8001ec6:	46d6      	mov	lr, sl
 8001ec8:	004d      	lsls	r5, r1, #1
 8001eca:	b5c0      	push	{r6, r7, lr}
 8001ecc:	030e      	lsls	r6, r1, #12
 8001ece:	0fc9      	lsrs	r1, r1, #31
 8001ed0:	468a      	mov	sl, r1
 8001ed2:	492c      	ldr	r1, [pc, #176]	; (8001f84 <__gedf2+0xc4>)
 8001ed4:	031f      	lsls	r7, r3, #12
 8001ed6:	005c      	lsls	r4, r3, #1
 8001ed8:	4680      	mov	r8, r0
 8001eda:	0b36      	lsrs	r6, r6, #12
 8001edc:	0d6d      	lsrs	r5, r5, #21
 8001ede:	4691      	mov	r9, r2
 8001ee0:	0b3f      	lsrs	r7, r7, #12
 8001ee2:	0d64      	lsrs	r4, r4, #21
 8001ee4:	0fdb      	lsrs	r3, r3, #31
 8001ee6:	428d      	cmp	r5, r1
 8001ee8:	d01e      	beq.n	8001f28 <__gedf2+0x68>
 8001eea:	428c      	cmp	r4, r1
 8001eec:	d016      	beq.n	8001f1c <__gedf2+0x5c>
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	d11e      	bne.n	8001f30 <__gedf2+0x70>
 8001ef2:	4330      	orrs	r0, r6
 8001ef4:	4684      	mov	ip, r0
 8001ef6:	2c00      	cmp	r4, #0
 8001ef8:	d101      	bne.n	8001efe <__gedf2+0x3e>
 8001efa:	433a      	orrs	r2, r7
 8001efc:	d023      	beq.n	8001f46 <__gedf2+0x86>
 8001efe:	4662      	mov	r2, ip
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	d01a      	beq.n	8001f3a <__gedf2+0x7a>
 8001f04:	459a      	cmp	sl, r3
 8001f06:	d029      	beq.n	8001f5c <__gedf2+0x9c>
 8001f08:	4651      	mov	r1, sl
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	3901      	subs	r1, #1
 8001f0e:	4008      	ands	r0, r1
 8001f10:	3801      	subs	r0, #1
 8001f12:	bc1c      	pop	{r2, r3, r4}
 8001f14:	4690      	mov	r8, r2
 8001f16:	4699      	mov	r9, r3
 8001f18:	46a2      	mov	sl, r4
 8001f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1c:	0039      	movs	r1, r7
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	d0e5      	beq.n	8001eee <__gedf2+0x2e>
 8001f22:	2002      	movs	r0, #2
 8001f24:	4240      	negs	r0, r0
 8001f26:	e7f4      	b.n	8001f12 <__gedf2+0x52>
 8001f28:	4330      	orrs	r0, r6
 8001f2a:	d1fa      	bne.n	8001f22 <__gedf2+0x62>
 8001f2c:	42ac      	cmp	r4, r5
 8001f2e:	d00f      	beq.n	8001f50 <__gedf2+0x90>
 8001f30:	2c00      	cmp	r4, #0
 8001f32:	d10f      	bne.n	8001f54 <__gedf2+0x94>
 8001f34:	433a      	orrs	r2, r7
 8001f36:	d0e7      	beq.n	8001f08 <__gedf2+0x48>
 8001f38:	e00c      	b.n	8001f54 <__gedf2+0x94>
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	4393      	bics	r3, r2
 8001f40:	0018      	movs	r0, r3
 8001f42:	3001      	adds	r0, #1
 8001f44:	e7e5      	b.n	8001f12 <__gedf2+0x52>
 8001f46:	4663      	mov	r3, ip
 8001f48:	2000      	movs	r0, #0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0e1      	beq.n	8001f12 <__gedf2+0x52>
 8001f4e:	e7db      	b.n	8001f08 <__gedf2+0x48>
 8001f50:	433a      	orrs	r2, r7
 8001f52:	d1e6      	bne.n	8001f22 <__gedf2+0x62>
 8001f54:	459a      	cmp	sl, r3
 8001f56:	d1d7      	bne.n	8001f08 <__gedf2+0x48>
 8001f58:	42a5      	cmp	r5, r4
 8001f5a:	dcd5      	bgt.n	8001f08 <__gedf2+0x48>
 8001f5c:	42a5      	cmp	r5, r4
 8001f5e:	db05      	blt.n	8001f6c <__gedf2+0xac>
 8001f60:	42be      	cmp	r6, r7
 8001f62:	d8d1      	bhi.n	8001f08 <__gedf2+0x48>
 8001f64:	d008      	beq.n	8001f78 <__gedf2+0xb8>
 8001f66:	2000      	movs	r0, #0
 8001f68:	42be      	cmp	r6, r7
 8001f6a:	d2d2      	bcs.n	8001f12 <__gedf2+0x52>
 8001f6c:	4650      	mov	r0, sl
 8001f6e:	2301      	movs	r3, #1
 8001f70:	3801      	subs	r0, #1
 8001f72:	4398      	bics	r0, r3
 8001f74:	3001      	adds	r0, #1
 8001f76:	e7cc      	b.n	8001f12 <__gedf2+0x52>
 8001f78:	45c8      	cmp	r8, r9
 8001f7a:	d8c5      	bhi.n	8001f08 <__gedf2+0x48>
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	45c8      	cmp	r8, r9
 8001f80:	d3f4      	bcc.n	8001f6c <__gedf2+0xac>
 8001f82:	e7c6      	b.n	8001f12 <__gedf2+0x52>
 8001f84:	000007ff 	.word	0x000007ff

08001f88 <__ledf2>:
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	464f      	mov	r7, r9
 8001f8c:	4646      	mov	r6, r8
 8001f8e:	46d6      	mov	lr, sl
 8001f90:	004d      	lsls	r5, r1, #1
 8001f92:	b5c0      	push	{r6, r7, lr}
 8001f94:	030e      	lsls	r6, r1, #12
 8001f96:	0fc9      	lsrs	r1, r1, #31
 8001f98:	468a      	mov	sl, r1
 8001f9a:	492e      	ldr	r1, [pc, #184]	; (8002054 <__ledf2+0xcc>)
 8001f9c:	031f      	lsls	r7, r3, #12
 8001f9e:	005c      	lsls	r4, r3, #1
 8001fa0:	4680      	mov	r8, r0
 8001fa2:	0b36      	lsrs	r6, r6, #12
 8001fa4:	0d6d      	lsrs	r5, r5, #21
 8001fa6:	4691      	mov	r9, r2
 8001fa8:	0b3f      	lsrs	r7, r7, #12
 8001faa:	0d64      	lsrs	r4, r4, #21
 8001fac:	0fdb      	lsrs	r3, r3, #31
 8001fae:	428d      	cmp	r5, r1
 8001fb0:	d018      	beq.n	8001fe4 <__ledf2+0x5c>
 8001fb2:	428c      	cmp	r4, r1
 8001fb4:	d011      	beq.n	8001fda <__ledf2+0x52>
 8001fb6:	2d00      	cmp	r5, #0
 8001fb8:	d118      	bne.n	8001fec <__ledf2+0x64>
 8001fba:	4330      	orrs	r0, r6
 8001fbc:	4684      	mov	ip, r0
 8001fbe:	2c00      	cmp	r4, #0
 8001fc0:	d11e      	bne.n	8002000 <__ledf2+0x78>
 8001fc2:	433a      	orrs	r2, r7
 8001fc4:	d11c      	bne.n	8002000 <__ledf2+0x78>
 8001fc6:	4663      	mov	r3, ip
 8001fc8:	2000      	movs	r0, #0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d030      	beq.n	8002030 <__ledf2+0xa8>
 8001fce:	4651      	mov	r1, sl
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	3901      	subs	r1, #1
 8001fd4:	4008      	ands	r0, r1
 8001fd6:	3801      	subs	r0, #1
 8001fd8:	e02a      	b.n	8002030 <__ledf2+0xa8>
 8001fda:	0039      	movs	r1, r7
 8001fdc:	4311      	orrs	r1, r2
 8001fde:	d0ea      	beq.n	8001fb6 <__ledf2+0x2e>
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	e025      	b.n	8002030 <__ledf2+0xa8>
 8001fe4:	4330      	orrs	r0, r6
 8001fe6:	d1fb      	bne.n	8001fe0 <__ledf2+0x58>
 8001fe8:	42ac      	cmp	r4, r5
 8001fea:	d026      	beq.n	800203a <__ledf2+0xb2>
 8001fec:	2c00      	cmp	r4, #0
 8001fee:	d126      	bne.n	800203e <__ledf2+0xb6>
 8001ff0:	433a      	orrs	r2, r7
 8001ff2:	d124      	bne.n	800203e <__ledf2+0xb6>
 8001ff4:	4651      	mov	r1, sl
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	3901      	subs	r1, #1
 8001ffa:	4008      	ands	r0, r1
 8001ffc:	3801      	subs	r0, #1
 8001ffe:	e017      	b.n	8002030 <__ledf2+0xa8>
 8002000:	4662      	mov	r2, ip
 8002002:	2a00      	cmp	r2, #0
 8002004:	d00f      	beq.n	8002026 <__ledf2+0x9e>
 8002006:	459a      	cmp	sl, r3
 8002008:	d1e1      	bne.n	8001fce <__ledf2+0x46>
 800200a:	42a5      	cmp	r5, r4
 800200c:	db05      	blt.n	800201a <__ledf2+0x92>
 800200e:	42be      	cmp	r6, r7
 8002010:	d8dd      	bhi.n	8001fce <__ledf2+0x46>
 8002012:	d019      	beq.n	8002048 <__ledf2+0xc0>
 8002014:	2000      	movs	r0, #0
 8002016:	42be      	cmp	r6, r7
 8002018:	d20a      	bcs.n	8002030 <__ledf2+0xa8>
 800201a:	4650      	mov	r0, sl
 800201c:	2301      	movs	r3, #1
 800201e:	3801      	subs	r0, #1
 8002020:	4398      	bics	r0, r3
 8002022:	3001      	adds	r0, #1
 8002024:	e004      	b.n	8002030 <__ledf2+0xa8>
 8002026:	2201      	movs	r2, #1
 8002028:	3b01      	subs	r3, #1
 800202a:	4393      	bics	r3, r2
 800202c:	0018      	movs	r0, r3
 800202e:	3001      	adds	r0, #1
 8002030:	bc1c      	pop	{r2, r3, r4}
 8002032:	4690      	mov	r8, r2
 8002034:	4699      	mov	r9, r3
 8002036:	46a2      	mov	sl, r4
 8002038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800203a:	433a      	orrs	r2, r7
 800203c:	d1d0      	bne.n	8001fe0 <__ledf2+0x58>
 800203e:	459a      	cmp	sl, r3
 8002040:	d1c5      	bne.n	8001fce <__ledf2+0x46>
 8002042:	42a5      	cmp	r5, r4
 8002044:	dcc3      	bgt.n	8001fce <__ledf2+0x46>
 8002046:	e7e0      	b.n	800200a <__ledf2+0x82>
 8002048:	45c8      	cmp	r8, r9
 800204a:	d8c0      	bhi.n	8001fce <__ledf2+0x46>
 800204c:	2000      	movs	r0, #0
 800204e:	45c8      	cmp	r8, r9
 8002050:	d3e3      	bcc.n	800201a <__ledf2+0x92>
 8002052:	e7ed      	b.n	8002030 <__ledf2+0xa8>
 8002054:	000007ff 	.word	0x000007ff

08002058 <__aeabi_dmul>:
 8002058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205a:	4657      	mov	r7, sl
 800205c:	46de      	mov	lr, fp
 800205e:	464e      	mov	r6, r9
 8002060:	4645      	mov	r5, r8
 8002062:	b5e0      	push	{r5, r6, r7, lr}
 8002064:	4683      	mov	fp, r0
 8002066:	0006      	movs	r6, r0
 8002068:	030f      	lsls	r7, r1, #12
 800206a:	0048      	lsls	r0, r1, #1
 800206c:	b087      	sub	sp, #28
 800206e:	4692      	mov	sl, r2
 8002070:	001d      	movs	r5, r3
 8002072:	0b3f      	lsrs	r7, r7, #12
 8002074:	0d40      	lsrs	r0, r0, #21
 8002076:	0fcc      	lsrs	r4, r1, #31
 8002078:	2800      	cmp	r0, #0
 800207a:	d100      	bne.n	800207e <__aeabi_dmul+0x26>
 800207c:	e06f      	b.n	800215e <__aeabi_dmul+0x106>
 800207e:	4bde      	ldr	r3, [pc, #888]	; (80023f8 <__aeabi_dmul+0x3a0>)
 8002080:	4298      	cmp	r0, r3
 8002082:	d038      	beq.n	80020f6 <__aeabi_dmul+0x9e>
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	00ff      	lsls	r7, r7, #3
 8002088:	041b      	lsls	r3, r3, #16
 800208a:	431f      	orrs	r7, r3
 800208c:	0f73      	lsrs	r3, r6, #29
 800208e:	433b      	orrs	r3, r7
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	4bda      	ldr	r3, [pc, #872]	; (80023fc <__aeabi_dmul+0x3a4>)
 8002094:	2700      	movs	r7, #0
 8002096:	4699      	mov	r9, r3
 8002098:	2300      	movs	r3, #0
 800209a:	469b      	mov	fp, r3
 800209c:	00f6      	lsls	r6, r6, #3
 800209e:	4481      	add	r9, r0
 80020a0:	032b      	lsls	r3, r5, #12
 80020a2:	0069      	lsls	r1, r5, #1
 80020a4:	0b1b      	lsrs	r3, r3, #12
 80020a6:	4652      	mov	r2, sl
 80020a8:	4698      	mov	r8, r3
 80020aa:	0d49      	lsrs	r1, r1, #21
 80020ac:	0fed      	lsrs	r5, r5, #31
 80020ae:	2900      	cmp	r1, #0
 80020b0:	d100      	bne.n	80020b4 <__aeabi_dmul+0x5c>
 80020b2:	e085      	b.n	80021c0 <__aeabi_dmul+0x168>
 80020b4:	4bd0      	ldr	r3, [pc, #832]	; (80023f8 <__aeabi_dmul+0x3a0>)
 80020b6:	4299      	cmp	r1, r3
 80020b8:	d100      	bne.n	80020bc <__aeabi_dmul+0x64>
 80020ba:	e073      	b.n	80021a4 <__aeabi_dmul+0x14c>
 80020bc:	4643      	mov	r3, r8
 80020be:	00da      	lsls	r2, r3, #3
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	041b      	lsls	r3, r3, #16
 80020c4:	4313      	orrs	r3, r2
 80020c6:	4652      	mov	r2, sl
 80020c8:	48cc      	ldr	r0, [pc, #816]	; (80023fc <__aeabi_dmul+0x3a4>)
 80020ca:	0f52      	lsrs	r2, r2, #29
 80020cc:	4684      	mov	ip, r0
 80020ce:	4313      	orrs	r3, r2
 80020d0:	4652      	mov	r2, sl
 80020d2:	2000      	movs	r0, #0
 80020d4:	4461      	add	r1, ip
 80020d6:	00d2      	lsls	r2, r2, #3
 80020d8:	4489      	add	r9, r1
 80020da:	0021      	movs	r1, r4
 80020dc:	4069      	eors	r1, r5
 80020de:	9100      	str	r1, [sp, #0]
 80020e0:	468c      	mov	ip, r1
 80020e2:	2101      	movs	r1, #1
 80020e4:	4449      	add	r1, r9
 80020e6:	468a      	mov	sl, r1
 80020e8:	2f0f      	cmp	r7, #15
 80020ea:	d900      	bls.n	80020ee <__aeabi_dmul+0x96>
 80020ec:	e090      	b.n	8002210 <__aeabi_dmul+0x1b8>
 80020ee:	49c4      	ldr	r1, [pc, #784]	; (8002400 <__aeabi_dmul+0x3a8>)
 80020f0:	00bf      	lsls	r7, r7, #2
 80020f2:	59cf      	ldr	r7, [r1, r7]
 80020f4:	46bf      	mov	pc, r7
 80020f6:	465b      	mov	r3, fp
 80020f8:	433b      	orrs	r3, r7
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	d000      	beq.n	8002100 <__aeabi_dmul+0xa8>
 80020fe:	e16a      	b.n	80023d6 <__aeabi_dmul+0x37e>
 8002100:	2302      	movs	r3, #2
 8002102:	2708      	movs	r7, #8
 8002104:	2600      	movs	r6, #0
 8002106:	4681      	mov	r9, r0
 8002108:	469b      	mov	fp, r3
 800210a:	e7c9      	b.n	80020a0 <__aeabi_dmul+0x48>
 800210c:	0032      	movs	r2, r6
 800210e:	4658      	mov	r0, fp
 8002110:	9b01      	ldr	r3, [sp, #4]
 8002112:	4661      	mov	r1, ip
 8002114:	9100      	str	r1, [sp, #0]
 8002116:	2802      	cmp	r0, #2
 8002118:	d100      	bne.n	800211c <__aeabi_dmul+0xc4>
 800211a:	e075      	b.n	8002208 <__aeabi_dmul+0x1b0>
 800211c:	2803      	cmp	r0, #3
 800211e:	d100      	bne.n	8002122 <__aeabi_dmul+0xca>
 8002120:	e1fe      	b.n	8002520 <__aeabi_dmul+0x4c8>
 8002122:	2801      	cmp	r0, #1
 8002124:	d000      	beq.n	8002128 <__aeabi_dmul+0xd0>
 8002126:	e12c      	b.n	8002382 <__aeabi_dmul+0x32a>
 8002128:	2300      	movs	r3, #0
 800212a:	2700      	movs	r7, #0
 800212c:	2600      	movs	r6, #0
 800212e:	2500      	movs	r5, #0
 8002130:	033f      	lsls	r7, r7, #12
 8002132:	0d2a      	lsrs	r2, r5, #20
 8002134:	0b3f      	lsrs	r7, r7, #12
 8002136:	48b3      	ldr	r0, [pc, #716]	; (8002404 <__aeabi_dmul+0x3ac>)
 8002138:	0512      	lsls	r2, r2, #20
 800213a:	433a      	orrs	r2, r7
 800213c:	4002      	ands	r2, r0
 800213e:	051b      	lsls	r3, r3, #20
 8002140:	4313      	orrs	r3, r2
 8002142:	9a00      	ldr	r2, [sp, #0]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	07d1      	lsls	r1, r2, #31
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	430b      	orrs	r3, r1
 800214c:	0030      	movs	r0, r6
 800214e:	0019      	movs	r1, r3
 8002150:	b007      	add	sp, #28
 8002152:	bc3c      	pop	{r2, r3, r4, r5}
 8002154:	4690      	mov	r8, r2
 8002156:	4699      	mov	r9, r3
 8002158:	46a2      	mov	sl, r4
 800215a:	46ab      	mov	fp, r5
 800215c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800215e:	465b      	mov	r3, fp
 8002160:	433b      	orrs	r3, r7
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	d100      	bne.n	8002168 <__aeabi_dmul+0x110>
 8002166:	e12f      	b.n	80023c8 <__aeabi_dmul+0x370>
 8002168:	2f00      	cmp	r7, #0
 800216a:	d100      	bne.n	800216e <__aeabi_dmul+0x116>
 800216c:	e1a5      	b.n	80024ba <__aeabi_dmul+0x462>
 800216e:	0038      	movs	r0, r7
 8002170:	f000 fec0 	bl	8002ef4 <__clzsi2>
 8002174:	0003      	movs	r3, r0
 8002176:	3b0b      	subs	r3, #11
 8002178:	2b1c      	cmp	r3, #28
 800217a:	dd00      	ble.n	800217e <__aeabi_dmul+0x126>
 800217c:	e196      	b.n	80024ac <__aeabi_dmul+0x454>
 800217e:	221d      	movs	r2, #29
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	465a      	mov	r2, fp
 8002184:	0001      	movs	r1, r0
 8002186:	40da      	lsrs	r2, r3
 8002188:	465e      	mov	r6, fp
 800218a:	3908      	subs	r1, #8
 800218c:	408f      	lsls	r7, r1
 800218e:	0013      	movs	r3, r2
 8002190:	408e      	lsls	r6, r1
 8002192:	433b      	orrs	r3, r7
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	4b9c      	ldr	r3, [pc, #624]	; (8002408 <__aeabi_dmul+0x3b0>)
 8002198:	2700      	movs	r7, #0
 800219a:	1a1b      	subs	r3, r3, r0
 800219c:	4699      	mov	r9, r3
 800219e:	2300      	movs	r3, #0
 80021a0:	469b      	mov	fp, r3
 80021a2:	e77d      	b.n	80020a0 <__aeabi_dmul+0x48>
 80021a4:	4641      	mov	r1, r8
 80021a6:	4653      	mov	r3, sl
 80021a8:	430b      	orrs	r3, r1
 80021aa:	4993      	ldr	r1, [pc, #588]	; (80023f8 <__aeabi_dmul+0x3a0>)
 80021ac:	468c      	mov	ip, r1
 80021ae:	44e1      	add	r9, ip
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d000      	beq.n	80021b6 <__aeabi_dmul+0x15e>
 80021b4:	e11a      	b.n	80023ec <__aeabi_dmul+0x394>
 80021b6:	2202      	movs	r2, #2
 80021b8:	2002      	movs	r0, #2
 80021ba:	4317      	orrs	r7, r2
 80021bc:	2200      	movs	r2, #0
 80021be:	e78c      	b.n	80020da <__aeabi_dmul+0x82>
 80021c0:	4313      	orrs	r3, r2
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dmul+0x16e>
 80021c4:	e10d      	b.n	80023e2 <__aeabi_dmul+0x38a>
 80021c6:	4643      	mov	r3, r8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d100      	bne.n	80021ce <__aeabi_dmul+0x176>
 80021cc:	e181      	b.n	80024d2 <__aeabi_dmul+0x47a>
 80021ce:	4640      	mov	r0, r8
 80021d0:	f000 fe90 	bl	8002ef4 <__clzsi2>
 80021d4:	0002      	movs	r2, r0
 80021d6:	3a0b      	subs	r2, #11
 80021d8:	2a1c      	cmp	r2, #28
 80021da:	dd00      	ble.n	80021de <__aeabi_dmul+0x186>
 80021dc:	e172      	b.n	80024c4 <__aeabi_dmul+0x46c>
 80021de:	0001      	movs	r1, r0
 80021e0:	4643      	mov	r3, r8
 80021e2:	3908      	subs	r1, #8
 80021e4:	408b      	lsls	r3, r1
 80021e6:	4698      	mov	r8, r3
 80021e8:	231d      	movs	r3, #29
 80021ea:	1a9a      	subs	r2, r3, r2
 80021ec:	4653      	mov	r3, sl
 80021ee:	40d3      	lsrs	r3, r2
 80021f0:	001a      	movs	r2, r3
 80021f2:	4643      	mov	r3, r8
 80021f4:	4313      	orrs	r3, r2
 80021f6:	4652      	mov	r2, sl
 80021f8:	408a      	lsls	r2, r1
 80021fa:	4649      	mov	r1, r9
 80021fc:	1a08      	subs	r0, r1, r0
 80021fe:	4982      	ldr	r1, [pc, #520]	; (8002408 <__aeabi_dmul+0x3b0>)
 8002200:	4689      	mov	r9, r1
 8002202:	4481      	add	r9, r0
 8002204:	2000      	movs	r0, #0
 8002206:	e768      	b.n	80020da <__aeabi_dmul+0x82>
 8002208:	4b7b      	ldr	r3, [pc, #492]	; (80023f8 <__aeabi_dmul+0x3a0>)
 800220a:	2700      	movs	r7, #0
 800220c:	2600      	movs	r6, #0
 800220e:	e78e      	b.n	800212e <__aeabi_dmul+0xd6>
 8002210:	0c14      	lsrs	r4, r2, #16
 8002212:	0412      	lsls	r2, r2, #16
 8002214:	0c12      	lsrs	r2, r2, #16
 8002216:	0011      	movs	r1, r2
 8002218:	0c37      	lsrs	r7, r6, #16
 800221a:	0436      	lsls	r6, r6, #16
 800221c:	0c35      	lsrs	r5, r6, #16
 800221e:	4379      	muls	r1, r7
 8002220:	0028      	movs	r0, r5
 8002222:	468c      	mov	ip, r1
 8002224:	002e      	movs	r6, r5
 8002226:	4360      	muls	r0, r4
 8002228:	4460      	add	r0, ip
 800222a:	4683      	mov	fp, r0
 800222c:	4356      	muls	r6, r2
 800222e:	0021      	movs	r1, r4
 8002230:	0c30      	lsrs	r0, r6, #16
 8002232:	4680      	mov	r8, r0
 8002234:	4658      	mov	r0, fp
 8002236:	4379      	muls	r1, r7
 8002238:	4440      	add	r0, r8
 800223a:	9102      	str	r1, [sp, #8]
 800223c:	4584      	cmp	ip, r0
 800223e:	d906      	bls.n	800224e <__aeabi_dmul+0x1f6>
 8002240:	4688      	mov	r8, r1
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	0249      	lsls	r1, r1, #9
 8002246:	468c      	mov	ip, r1
 8002248:	44e0      	add	r8, ip
 800224a:	4641      	mov	r1, r8
 800224c:	9102      	str	r1, [sp, #8]
 800224e:	0436      	lsls	r6, r6, #16
 8002250:	0c01      	lsrs	r1, r0, #16
 8002252:	0c36      	lsrs	r6, r6, #16
 8002254:	0400      	lsls	r0, r0, #16
 8002256:	468b      	mov	fp, r1
 8002258:	1981      	adds	r1, r0, r6
 800225a:	0c1e      	lsrs	r6, r3, #16
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	9103      	str	r1, [sp, #12]
 8002262:	0019      	movs	r1, r3
 8002264:	4379      	muls	r1, r7
 8002266:	468c      	mov	ip, r1
 8002268:	0028      	movs	r0, r5
 800226a:	4375      	muls	r5, r6
 800226c:	4465      	add	r5, ip
 800226e:	46a8      	mov	r8, r5
 8002270:	4358      	muls	r0, r3
 8002272:	0c05      	lsrs	r5, r0, #16
 8002274:	4445      	add	r5, r8
 8002276:	4377      	muls	r7, r6
 8002278:	42a9      	cmp	r1, r5
 800227a:	d903      	bls.n	8002284 <__aeabi_dmul+0x22c>
 800227c:	2180      	movs	r1, #128	; 0x80
 800227e:	0249      	lsls	r1, r1, #9
 8002280:	468c      	mov	ip, r1
 8002282:	4467      	add	r7, ip
 8002284:	0c29      	lsrs	r1, r5, #16
 8002286:	468c      	mov	ip, r1
 8002288:	0039      	movs	r1, r7
 800228a:	0400      	lsls	r0, r0, #16
 800228c:	0c00      	lsrs	r0, r0, #16
 800228e:	042d      	lsls	r5, r5, #16
 8002290:	182d      	adds	r5, r5, r0
 8002292:	4461      	add	r1, ip
 8002294:	44ab      	add	fp, r5
 8002296:	9105      	str	r1, [sp, #20]
 8002298:	4659      	mov	r1, fp
 800229a:	9104      	str	r1, [sp, #16]
 800229c:	9901      	ldr	r1, [sp, #4]
 800229e:	040f      	lsls	r7, r1, #16
 80022a0:	0c3f      	lsrs	r7, r7, #16
 80022a2:	0c08      	lsrs	r0, r1, #16
 80022a4:	0039      	movs	r1, r7
 80022a6:	4351      	muls	r1, r2
 80022a8:	4342      	muls	r2, r0
 80022aa:	4690      	mov	r8, r2
 80022ac:	0002      	movs	r2, r0
 80022ae:	468c      	mov	ip, r1
 80022b0:	0c09      	lsrs	r1, r1, #16
 80022b2:	468b      	mov	fp, r1
 80022b4:	4362      	muls	r2, r4
 80022b6:	437c      	muls	r4, r7
 80022b8:	4444      	add	r4, r8
 80022ba:	445c      	add	r4, fp
 80022bc:	45a0      	cmp	r8, r4
 80022be:	d903      	bls.n	80022c8 <__aeabi_dmul+0x270>
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	0249      	lsls	r1, r1, #9
 80022c4:	4688      	mov	r8, r1
 80022c6:	4442      	add	r2, r8
 80022c8:	0c21      	lsrs	r1, r4, #16
 80022ca:	4688      	mov	r8, r1
 80022cc:	4661      	mov	r1, ip
 80022ce:	0409      	lsls	r1, r1, #16
 80022d0:	0c09      	lsrs	r1, r1, #16
 80022d2:	468c      	mov	ip, r1
 80022d4:	0039      	movs	r1, r7
 80022d6:	4359      	muls	r1, r3
 80022d8:	4343      	muls	r3, r0
 80022da:	4370      	muls	r0, r6
 80022dc:	437e      	muls	r6, r7
 80022de:	0c0f      	lsrs	r7, r1, #16
 80022e0:	18f6      	adds	r6, r6, r3
 80022e2:	0424      	lsls	r4, r4, #16
 80022e4:	19be      	adds	r6, r7, r6
 80022e6:	4464      	add	r4, ip
 80022e8:	4442      	add	r2, r8
 80022ea:	468c      	mov	ip, r1
 80022ec:	42b3      	cmp	r3, r6
 80022ee:	d903      	bls.n	80022f8 <__aeabi_dmul+0x2a0>
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	025b      	lsls	r3, r3, #9
 80022f4:	4698      	mov	r8, r3
 80022f6:	4440      	add	r0, r8
 80022f8:	9b02      	ldr	r3, [sp, #8]
 80022fa:	4661      	mov	r1, ip
 80022fc:	4698      	mov	r8, r3
 80022fe:	9b04      	ldr	r3, [sp, #16]
 8002300:	0437      	lsls	r7, r6, #16
 8002302:	4443      	add	r3, r8
 8002304:	469b      	mov	fp, r3
 8002306:	45ab      	cmp	fp, r5
 8002308:	41ad      	sbcs	r5, r5
 800230a:	426b      	negs	r3, r5
 800230c:	040d      	lsls	r5, r1, #16
 800230e:	9905      	ldr	r1, [sp, #20]
 8002310:	0c2d      	lsrs	r5, r5, #16
 8002312:	468c      	mov	ip, r1
 8002314:	197f      	adds	r7, r7, r5
 8002316:	4467      	add	r7, ip
 8002318:	18fd      	adds	r5, r7, r3
 800231a:	46a8      	mov	r8, r5
 800231c:	465d      	mov	r5, fp
 800231e:	192d      	adds	r5, r5, r4
 8002320:	42a5      	cmp	r5, r4
 8002322:	41a4      	sbcs	r4, r4
 8002324:	4693      	mov	fp, r2
 8002326:	4264      	negs	r4, r4
 8002328:	46a4      	mov	ip, r4
 800232a:	44c3      	add	fp, r8
 800232c:	44dc      	add	ip, fp
 800232e:	428f      	cmp	r7, r1
 8002330:	41bf      	sbcs	r7, r7
 8002332:	4598      	cmp	r8, r3
 8002334:	419b      	sbcs	r3, r3
 8002336:	4593      	cmp	fp, r2
 8002338:	4192      	sbcs	r2, r2
 800233a:	45a4      	cmp	ip, r4
 800233c:	41a4      	sbcs	r4, r4
 800233e:	425b      	negs	r3, r3
 8002340:	427f      	negs	r7, r7
 8002342:	431f      	orrs	r7, r3
 8002344:	0c36      	lsrs	r6, r6, #16
 8002346:	4252      	negs	r2, r2
 8002348:	4264      	negs	r4, r4
 800234a:	19bf      	adds	r7, r7, r6
 800234c:	4322      	orrs	r2, r4
 800234e:	18bf      	adds	r7, r7, r2
 8002350:	4662      	mov	r2, ip
 8002352:	1838      	adds	r0, r7, r0
 8002354:	0243      	lsls	r3, r0, #9
 8002356:	0dd2      	lsrs	r2, r2, #23
 8002358:	9903      	ldr	r1, [sp, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	026a      	lsls	r2, r5, #9
 800235e:	430a      	orrs	r2, r1
 8002360:	1e50      	subs	r0, r2, #1
 8002362:	4182      	sbcs	r2, r0
 8002364:	4661      	mov	r1, ip
 8002366:	0ded      	lsrs	r5, r5, #23
 8002368:	432a      	orrs	r2, r5
 800236a:	024e      	lsls	r6, r1, #9
 800236c:	4332      	orrs	r2, r6
 800236e:	01d9      	lsls	r1, r3, #7
 8002370:	d400      	bmi.n	8002374 <__aeabi_dmul+0x31c>
 8002372:	e0b3      	b.n	80024dc <__aeabi_dmul+0x484>
 8002374:	2601      	movs	r6, #1
 8002376:	0850      	lsrs	r0, r2, #1
 8002378:	4032      	ands	r2, r6
 800237a:	4302      	orrs	r2, r0
 800237c:	07de      	lsls	r6, r3, #31
 800237e:	4332      	orrs	r2, r6
 8002380:	085b      	lsrs	r3, r3, #1
 8002382:	4c22      	ldr	r4, [pc, #136]	; (800240c <__aeabi_dmul+0x3b4>)
 8002384:	4454      	add	r4, sl
 8002386:	2c00      	cmp	r4, #0
 8002388:	dd62      	ble.n	8002450 <__aeabi_dmul+0x3f8>
 800238a:	0751      	lsls	r1, r2, #29
 800238c:	d009      	beq.n	80023a2 <__aeabi_dmul+0x34a>
 800238e:	200f      	movs	r0, #15
 8002390:	4010      	ands	r0, r2
 8002392:	2804      	cmp	r0, #4
 8002394:	d005      	beq.n	80023a2 <__aeabi_dmul+0x34a>
 8002396:	1d10      	adds	r0, r2, #4
 8002398:	4290      	cmp	r0, r2
 800239a:	4192      	sbcs	r2, r2
 800239c:	4252      	negs	r2, r2
 800239e:	189b      	adds	r3, r3, r2
 80023a0:	0002      	movs	r2, r0
 80023a2:	01d9      	lsls	r1, r3, #7
 80023a4:	d504      	bpl.n	80023b0 <__aeabi_dmul+0x358>
 80023a6:	2480      	movs	r4, #128	; 0x80
 80023a8:	4819      	ldr	r0, [pc, #100]	; (8002410 <__aeabi_dmul+0x3b8>)
 80023aa:	00e4      	lsls	r4, r4, #3
 80023ac:	4003      	ands	r3, r0
 80023ae:	4454      	add	r4, sl
 80023b0:	4818      	ldr	r0, [pc, #96]	; (8002414 <__aeabi_dmul+0x3bc>)
 80023b2:	4284      	cmp	r4, r0
 80023b4:	dd00      	ble.n	80023b8 <__aeabi_dmul+0x360>
 80023b6:	e727      	b.n	8002208 <__aeabi_dmul+0x1b0>
 80023b8:	075e      	lsls	r6, r3, #29
 80023ba:	025b      	lsls	r3, r3, #9
 80023bc:	08d2      	lsrs	r2, r2, #3
 80023be:	0b1f      	lsrs	r7, r3, #12
 80023c0:	0563      	lsls	r3, r4, #21
 80023c2:	4316      	orrs	r6, r2
 80023c4:	0d5b      	lsrs	r3, r3, #21
 80023c6:	e6b2      	b.n	800212e <__aeabi_dmul+0xd6>
 80023c8:	2300      	movs	r3, #0
 80023ca:	4699      	mov	r9, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	2704      	movs	r7, #4
 80023d0:	2600      	movs	r6, #0
 80023d2:	469b      	mov	fp, r3
 80023d4:	e664      	b.n	80020a0 <__aeabi_dmul+0x48>
 80023d6:	2303      	movs	r3, #3
 80023d8:	9701      	str	r7, [sp, #4]
 80023da:	4681      	mov	r9, r0
 80023dc:	270c      	movs	r7, #12
 80023de:	469b      	mov	fp, r3
 80023e0:	e65e      	b.n	80020a0 <__aeabi_dmul+0x48>
 80023e2:	2201      	movs	r2, #1
 80023e4:	2001      	movs	r0, #1
 80023e6:	4317      	orrs	r7, r2
 80023e8:	2200      	movs	r2, #0
 80023ea:	e676      	b.n	80020da <__aeabi_dmul+0x82>
 80023ec:	2303      	movs	r3, #3
 80023ee:	2003      	movs	r0, #3
 80023f0:	431f      	orrs	r7, r3
 80023f2:	4643      	mov	r3, r8
 80023f4:	e671      	b.n	80020da <__aeabi_dmul+0x82>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	000007ff 	.word	0x000007ff
 80023fc:	fffffc01 	.word	0xfffffc01
 8002400:	08018998 	.word	0x08018998
 8002404:	800fffff 	.word	0x800fffff
 8002408:	fffffc0d 	.word	0xfffffc0d
 800240c:	000003ff 	.word	0x000003ff
 8002410:	feffffff 	.word	0xfeffffff
 8002414:	000007fe 	.word	0x000007fe
 8002418:	2300      	movs	r3, #0
 800241a:	2780      	movs	r7, #128	; 0x80
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	033f      	lsls	r7, r7, #12
 8002420:	2600      	movs	r6, #0
 8002422:	4b43      	ldr	r3, [pc, #268]	; (8002530 <__aeabi_dmul+0x4d8>)
 8002424:	e683      	b.n	800212e <__aeabi_dmul+0xd6>
 8002426:	9b01      	ldr	r3, [sp, #4]
 8002428:	0032      	movs	r2, r6
 800242a:	46a4      	mov	ip, r4
 800242c:	4658      	mov	r0, fp
 800242e:	e670      	b.n	8002112 <__aeabi_dmul+0xba>
 8002430:	46ac      	mov	ip, r5
 8002432:	e66e      	b.n	8002112 <__aeabi_dmul+0xba>
 8002434:	2780      	movs	r7, #128	; 0x80
 8002436:	9901      	ldr	r1, [sp, #4]
 8002438:	033f      	lsls	r7, r7, #12
 800243a:	4239      	tst	r1, r7
 800243c:	d02d      	beq.n	800249a <__aeabi_dmul+0x442>
 800243e:	423b      	tst	r3, r7
 8002440:	d12b      	bne.n	800249a <__aeabi_dmul+0x442>
 8002442:	431f      	orrs	r7, r3
 8002444:	033f      	lsls	r7, r7, #12
 8002446:	0b3f      	lsrs	r7, r7, #12
 8002448:	9500      	str	r5, [sp, #0]
 800244a:	0016      	movs	r6, r2
 800244c:	4b38      	ldr	r3, [pc, #224]	; (8002530 <__aeabi_dmul+0x4d8>)
 800244e:	e66e      	b.n	800212e <__aeabi_dmul+0xd6>
 8002450:	2501      	movs	r5, #1
 8002452:	1b2d      	subs	r5, r5, r4
 8002454:	2d38      	cmp	r5, #56	; 0x38
 8002456:	dd00      	ble.n	800245a <__aeabi_dmul+0x402>
 8002458:	e666      	b.n	8002128 <__aeabi_dmul+0xd0>
 800245a:	2d1f      	cmp	r5, #31
 800245c:	dc40      	bgt.n	80024e0 <__aeabi_dmul+0x488>
 800245e:	4835      	ldr	r0, [pc, #212]	; (8002534 <__aeabi_dmul+0x4dc>)
 8002460:	001c      	movs	r4, r3
 8002462:	4450      	add	r0, sl
 8002464:	0016      	movs	r6, r2
 8002466:	4082      	lsls	r2, r0
 8002468:	4084      	lsls	r4, r0
 800246a:	40ee      	lsrs	r6, r5
 800246c:	1e50      	subs	r0, r2, #1
 800246e:	4182      	sbcs	r2, r0
 8002470:	4334      	orrs	r4, r6
 8002472:	4314      	orrs	r4, r2
 8002474:	40eb      	lsrs	r3, r5
 8002476:	0762      	lsls	r2, r4, #29
 8002478:	d009      	beq.n	800248e <__aeabi_dmul+0x436>
 800247a:	220f      	movs	r2, #15
 800247c:	4022      	ands	r2, r4
 800247e:	2a04      	cmp	r2, #4
 8002480:	d005      	beq.n	800248e <__aeabi_dmul+0x436>
 8002482:	0022      	movs	r2, r4
 8002484:	1d14      	adds	r4, r2, #4
 8002486:	4294      	cmp	r4, r2
 8002488:	4180      	sbcs	r0, r0
 800248a:	4240      	negs	r0, r0
 800248c:	181b      	adds	r3, r3, r0
 800248e:	021a      	lsls	r2, r3, #8
 8002490:	d53e      	bpl.n	8002510 <__aeabi_dmul+0x4b8>
 8002492:	2301      	movs	r3, #1
 8002494:	2700      	movs	r7, #0
 8002496:	2600      	movs	r6, #0
 8002498:	e649      	b.n	800212e <__aeabi_dmul+0xd6>
 800249a:	2780      	movs	r7, #128	; 0x80
 800249c:	9b01      	ldr	r3, [sp, #4]
 800249e:	033f      	lsls	r7, r7, #12
 80024a0:	431f      	orrs	r7, r3
 80024a2:	033f      	lsls	r7, r7, #12
 80024a4:	0b3f      	lsrs	r7, r7, #12
 80024a6:	9400      	str	r4, [sp, #0]
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <__aeabi_dmul+0x4d8>)
 80024aa:	e640      	b.n	800212e <__aeabi_dmul+0xd6>
 80024ac:	0003      	movs	r3, r0
 80024ae:	465a      	mov	r2, fp
 80024b0:	3b28      	subs	r3, #40	; 0x28
 80024b2:	409a      	lsls	r2, r3
 80024b4:	2600      	movs	r6, #0
 80024b6:	9201      	str	r2, [sp, #4]
 80024b8:	e66d      	b.n	8002196 <__aeabi_dmul+0x13e>
 80024ba:	4658      	mov	r0, fp
 80024bc:	f000 fd1a 	bl	8002ef4 <__clzsi2>
 80024c0:	3020      	adds	r0, #32
 80024c2:	e657      	b.n	8002174 <__aeabi_dmul+0x11c>
 80024c4:	0003      	movs	r3, r0
 80024c6:	4652      	mov	r2, sl
 80024c8:	3b28      	subs	r3, #40	; 0x28
 80024ca:	409a      	lsls	r2, r3
 80024cc:	0013      	movs	r3, r2
 80024ce:	2200      	movs	r2, #0
 80024d0:	e693      	b.n	80021fa <__aeabi_dmul+0x1a2>
 80024d2:	4650      	mov	r0, sl
 80024d4:	f000 fd0e 	bl	8002ef4 <__clzsi2>
 80024d8:	3020      	adds	r0, #32
 80024da:	e67b      	b.n	80021d4 <__aeabi_dmul+0x17c>
 80024dc:	46ca      	mov	sl, r9
 80024de:	e750      	b.n	8002382 <__aeabi_dmul+0x32a>
 80024e0:	201f      	movs	r0, #31
 80024e2:	001e      	movs	r6, r3
 80024e4:	4240      	negs	r0, r0
 80024e6:	1b04      	subs	r4, r0, r4
 80024e8:	40e6      	lsrs	r6, r4
 80024ea:	2d20      	cmp	r5, #32
 80024ec:	d003      	beq.n	80024f6 <__aeabi_dmul+0x49e>
 80024ee:	4c12      	ldr	r4, [pc, #72]	; (8002538 <__aeabi_dmul+0x4e0>)
 80024f0:	4454      	add	r4, sl
 80024f2:	40a3      	lsls	r3, r4
 80024f4:	431a      	orrs	r2, r3
 80024f6:	1e50      	subs	r0, r2, #1
 80024f8:	4182      	sbcs	r2, r0
 80024fa:	4332      	orrs	r2, r6
 80024fc:	2607      	movs	r6, #7
 80024fe:	2700      	movs	r7, #0
 8002500:	4016      	ands	r6, r2
 8002502:	d009      	beq.n	8002518 <__aeabi_dmul+0x4c0>
 8002504:	200f      	movs	r0, #15
 8002506:	2300      	movs	r3, #0
 8002508:	4010      	ands	r0, r2
 800250a:	0014      	movs	r4, r2
 800250c:	2804      	cmp	r0, #4
 800250e:	d1b9      	bne.n	8002484 <__aeabi_dmul+0x42c>
 8002510:	0022      	movs	r2, r4
 8002512:	075e      	lsls	r6, r3, #29
 8002514:	025b      	lsls	r3, r3, #9
 8002516:	0b1f      	lsrs	r7, r3, #12
 8002518:	08d2      	lsrs	r2, r2, #3
 800251a:	4316      	orrs	r6, r2
 800251c:	2300      	movs	r3, #0
 800251e:	e606      	b.n	800212e <__aeabi_dmul+0xd6>
 8002520:	2780      	movs	r7, #128	; 0x80
 8002522:	033f      	lsls	r7, r7, #12
 8002524:	431f      	orrs	r7, r3
 8002526:	033f      	lsls	r7, r7, #12
 8002528:	0b3f      	lsrs	r7, r7, #12
 800252a:	0016      	movs	r6, r2
 800252c:	4b00      	ldr	r3, [pc, #0]	; (8002530 <__aeabi_dmul+0x4d8>)
 800252e:	e5fe      	b.n	800212e <__aeabi_dmul+0xd6>
 8002530:	000007ff 	.word	0x000007ff
 8002534:	0000041e 	.word	0x0000041e
 8002538:	0000043e 	.word	0x0000043e

0800253c <__aeabi_dsub>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	4657      	mov	r7, sl
 8002540:	464e      	mov	r6, r9
 8002542:	4645      	mov	r5, r8
 8002544:	46de      	mov	lr, fp
 8002546:	000c      	movs	r4, r1
 8002548:	0309      	lsls	r1, r1, #12
 800254a:	b5e0      	push	{r5, r6, r7, lr}
 800254c:	0a49      	lsrs	r1, r1, #9
 800254e:	0f46      	lsrs	r6, r0, #29
 8002550:	005f      	lsls	r7, r3, #1
 8002552:	4331      	orrs	r1, r6
 8002554:	031e      	lsls	r6, r3, #12
 8002556:	0fdb      	lsrs	r3, r3, #31
 8002558:	0a76      	lsrs	r6, r6, #9
 800255a:	469b      	mov	fp, r3
 800255c:	0f53      	lsrs	r3, r2, #29
 800255e:	4333      	orrs	r3, r6
 8002560:	4ec8      	ldr	r6, [pc, #800]	; (8002884 <__aeabi_dsub+0x348>)
 8002562:	0065      	lsls	r5, r4, #1
 8002564:	00c0      	lsls	r0, r0, #3
 8002566:	0fe4      	lsrs	r4, r4, #31
 8002568:	00d2      	lsls	r2, r2, #3
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	46a2      	mov	sl, r4
 800256e:	4681      	mov	r9, r0
 8002570:	0d7f      	lsrs	r7, r7, #21
 8002572:	469c      	mov	ip, r3
 8002574:	4690      	mov	r8, r2
 8002576:	42b7      	cmp	r7, r6
 8002578:	d100      	bne.n	800257c <__aeabi_dsub+0x40>
 800257a:	e0b9      	b.n	80026f0 <__aeabi_dsub+0x1b4>
 800257c:	465b      	mov	r3, fp
 800257e:	2601      	movs	r6, #1
 8002580:	4073      	eors	r3, r6
 8002582:	469b      	mov	fp, r3
 8002584:	1bee      	subs	r6, r5, r7
 8002586:	45a3      	cmp	fp, r4
 8002588:	d100      	bne.n	800258c <__aeabi_dsub+0x50>
 800258a:	e083      	b.n	8002694 <__aeabi_dsub+0x158>
 800258c:	2e00      	cmp	r6, #0
 800258e:	dd63      	ble.n	8002658 <__aeabi_dsub+0x11c>
 8002590:	2f00      	cmp	r7, #0
 8002592:	d000      	beq.n	8002596 <__aeabi_dsub+0x5a>
 8002594:	e0b1      	b.n	80026fa <__aeabi_dsub+0x1be>
 8002596:	4663      	mov	r3, ip
 8002598:	4313      	orrs	r3, r2
 800259a:	d100      	bne.n	800259e <__aeabi_dsub+0x62>
 800259c:	e123      	b.n	80027e6 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x6a>
 80025a4:	e1ba      	b.n	800291c <__aeabi_dsub+0x3e0>
 80025a6:	1a86      	subs	r6, r0, r2
 80025a8:	4663      	mov	r3, ip
 80025aa:	42b0      	cmp	r0, r6
 80025ac:	4180      	sbcs	r0, r0
 80025ae:	2501      	movs	r5, #1
 80025b0:	1ac9      	subs	r1, r1, r3
 80025b2:	4240      	negs	r0, r0
 80025b4:	1a09      	subs	r1, r1, r0
 80025b6:	020b      	lsls	r3, r1, #8
 80025b8:	d400      	bmi.n	80025bc <__aeabi_dsub+0x80>
 80025ba:	e147      	b.n	800284c <__aeabi_dsub+0x310>
 80025bc:	0249      	lsls	r1, r1, #9
 80025be:	0a4b      	lsrs	r3, r1, #9
 80025c0:	4698      	mov	r8, r3
 80025c2:	4643      	mov	r3, r8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d100      	bne.n	80025ca <__aeabi_dsub+0x8e>
 80025c8:	e189      	b.n	80028de <__aeabi_dsub+0x3a2>
 80025ca:	4640      	mov	r0, r8
 80025cc:	f000 fc92 	bl	8002ef4 <__clzsi2>
 80025d0:	0003      	movs	r3, r0
 80025d2:	3b08      	subs	r3, #8
 80025d4:	2b1f      	cmp	r3, #31
 80025d6:	dd00      	ble.n	80025da <__aeabi_dsub+0x9e>
 80025d8:	e17c      	b.n	80028d4 <__aeabi_dsub+0x398>
 80025da:	2220      	movs	r2, #32
 80025dc:	0030      	movs	r0, r6
 80025de:	1ad2      	subs	r2, r2, r3
 80025e0:	4641      	mov	r1, r8
 80025e2:	40d0      	lsrs	r0, r2
 80025e4:	4099      	lsls	r1, r3
 80025e6:	0002      	movs	r2, r0
 80025e8:	409e      	lsls	r6, r3
 80025ea:	430a      	orrs	r2, r1
 80025ec:	429d      	cmp	r5, r3
 80025ee:	dd00      	ble.n	80025f2 <__aeabi_dsub+0xb6>
 80025f0:	e16a      	b.n	80028c8 <__aeabi_dsub+0x38c>
 80025f2:	1b5d      	subs	r5, r3, r5
 80025f4:	1c6b      	adds	r3, r5, #1
 80025f6:	2b1f      	cmp	r3, #31
 80025f8:	dd00      	ble.n	80025fc <__aeabi_dsub+0xc0>
 80025fa:	e194      	b.n	8002926 <__aeabi_dsub+0x3ea>
 80025fc:	2120      	movs	r1, #32
 80025fe:	0010      	movs	r0, r2
 8002600:	0035      	movs	r5, r6
 8002602:	1ac9      	subs	r1, r1, r3
 8002604:	408e      	lsls	r6, r1
 8002606:	40da      	lsrs	r2, r3
 8002608:	4088      	lsls	r0, r1
 800260a:	40dd      	lsrs	r5, r3
 800260c:	1e71      	subs	r1, r6, #1
 800260e:	418e      	sbcs	r6, r1
 8002610:	0011      	movs	r1, r2
 8002612:	2207      	movs	r2, #7
 8002614:	4328      	orrs	r0, r5
 8002616:	2500      	movs	r5, #0
 8002618:	4306      	orrs	r6, r0
 800261a:	4032      	ands	r2, r6
 800261c:	2a00      	cmp	r2, #0
 800261e:	d009      	beq.n	8002634 <__aeabi_dsub+0xf8>
 8002620:	230f      	movs	r3, #15
 8002622:	4033      	ands	r3, r6
 8002624:	2b04      	cmp	r3, #4
 8002626:	d005      	beq.n	8002634 <__aeabi_dsub+0xf8>
 8002628:	1d33      	adds	r3, r6, #4
 800262a:	42b3      	cmp	r3, r6
 800262c:	41b6      	sbcs	r6, r6
 800262e:	4276      	negs	r6, r6
 8002630:	1989      	adds	r1, r1, r6
 8002632:	001e      	movs	r6, r3
 8002634:	020b      	lsls	r3, r1, #8
 8002636:	d400      	bmi.n	800263a <__aeabi_dsub+0xfe>
 8002638:	e23d      	b.n	8002ab6 <__aeabi_dsub+0x57a>
 800263a:	1c6a      	adds	r2, r5, #1
 800263c:	4b91      	ldr	r3, [pc, #580]	; (8002884 <__aeabi_dsub+0x348>)
 800263e:	0555      	lsls	r5, r2, #21
 8002640:	0d6d      	lsrs	r5, r5, #21
 8002642:	429a      	cmp	r2, r3
 8002644:	d100      	bne.n	8002648 <__aeabi_dsub+0x10c>
 8002646:	e119      	b.n	800287c <__aeabi_dsub+0x340>
 8002648:	4a8f      	ldr	r2, [pc, #572]	; (8002888 <__aeabi_dsub+0x34c>)
 800264a:	08f6      	lsrs	r6, r6, #3
 800264c:	400a      	ands	r2, r1
 800264e:	0757      	lsls	r7, r2, #29
 8002650:	0252      	lsls	r2, r2, #9
 8002652:	4337      	orrs	r7, r6
 8002654:	0b12      	lsrs	r2, r2, #12
 8002656:	e09b      	b.n	8002790 <__aeabi_dsub+0x254>
 8002658:	2e00      	cmp	r6, #0
 800265a:	d000      	beq.n	800265e <__aeabi_dsub+0x122>
 800265c:	e0c5      	b.n	80027ea <__aeabi_dsub+0x2ae>
 800265e:	1c6e      	adds	r6, r5, #1
 8002660:	0576      	lsls	r6, r6, #21
 8002662:	0d76      	lsrs	r6, r6, #21
 8002664:	2e01      	cmp	r6, #1
 8002666:	dc00      	bgt.n	800266a <__aeabi_dsub+0x12e>
 8002668:	e148      	b.n	80028fc <__aeabi_dsub+0x3c0>
 800266a:	4667      	mov	r7, ip
 800266c:	1a86      	subs	r6, r0, r2
 800266e:	1bcb      	subs	r3, r1, r7
 8002670:	42b0      	cmp	r0, r6
 8002672:	41bf      	sbcs	r7, r7
 8002674:	427f      	negs	r7, r7
 8002676:	46b8      	mov	r8, r7
 8002678:	001f      	movs	r7, r3
 800267a:	4643      	mov	r3, r8
 800267c:	1aff      	subs	r7, r7, r3
 800267e:	003b      	movs	r3, r7
 8002680:	46b8      	mov	r8, r7
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	d500      	bpl.n	8002688 <__aeabi_dsub+0x14c>
 8002686:	e15f      	b.n	8002948 <__aeabi_dsub+0x40c>
 8002688:	4337      	orrs	r7, r6
 800268a:	d19a      	bne.n	80025c2 <__aeabi_dsub+0x86>
 800268c:	2200      	movs	r2, #0
 800268e:	2400      	movs	r4, #0
 8002690:	2500      	movs	r5, #0
 8002692:	e079      	b.n	8002788 <__aeabi_dsub+0x24c>
 8002694:	2e00      	cmp	r6, #0
 8002696:	dc00      	bgt.n	800269a <__aeabi_dsub+0x15e>
 8002698:	e0fa      	b.n	8002890 <__aeabi_dsub+0x354>
 800269a:	2f00      	cmp	r7, #0
 800269c:	d100      	bne.n	80026a0 <__aeabi_dsub+0x164>
 800269e:	e08d      	b.n	80027bc <__aeabi_dsub+0x280>
 80026a0:	4b78      	ldr	r3, [pc, #480]	; (8002884 <__aeabi_dsub+0x348>)
 80026a2:	429d      	cmp	r5, r3
 80026a4:	d067      	beq.n	8002776 <__aeabi_dsub+0x23a>
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	4667      	mov	r7, ip
 80026aa:	041b      	lsls	r3, r3, #16
 80026ac:	431f      	orrs	r7, r3
 80026ae:	46bc      	mov	ip, r7
 80026b0:	2e38      	cmp	r6, #56	; 0x38
 80026b2:	dc00      	bgt.n	80026b6 <__aeabi_dsub+0x17a>
 80026b4:	e152      	b.n	800295c <__aeabi_dsub+0x420>
 80026b6:	4663      	mov	r3, ip
 80026b8:	4313      	orrs	r3, r2
 80026ba:	1e5a      	subs	r2, r3, #1
 80026bc:	4193      	sbcs	r3, r2
 80026be:	181e      	adds	r6, r3, r0
 80026c0:	4286      	cmp	r6, r0
 80026c2:	4180      	sbcs	r0, r0
 80026c4:	4240      	negs	r0, r0
 80026c6:	1809      	adds	r1, r1, r0
 80026c8:	020b      	lsls	r3, r1, #8
 80026ca:	d400      	bmi.n	80026ce <__aeabi_dsub+0x192>
 80026cc:	e0be      	b.n	800284c <__aeabi_dsub+0x310>
 80026ce:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <__aeabi_dsub+0x348>)
 80026d0:	3501      	adds	r5, #1
 80026d2:	429d      	cmp	r5, r3
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dsub+0x19c>
 80026d6:	e0d2      	b.n	800287e <__aeabi_dsub+0x342>
 80026d8:	4a6b      	ldr	r2, [pc, #428]	; (8002888 <__aeabi_dsub+0x34c>)
 80026da:	0873      	lsrs	r3, r6, #1
 80026dc:	400a      	ands	r2, r1
 80026de:	2101      	movs	r1, #1
 80026e0:	400e      	ands	r6, r1
 80026e2:	431e      	orrs	r6, r3
 80026e4:	0851      	lsrs	r1, r2, #1
 80026e6:	07d3      	lsls	r3, r2, #31
 80026e8:	2207      	movs	r2, #7
 80026ea:	431e      	orrs	r6, r3
 80026ec:	4032      	ands	r2, r6
 80026ee:	e795      	b.n	800261c <__aeabi_dsub+0xe0>
 80026f0:	001e      	movs	r6, r3
 80026f2:	4316      	orrs	r6, r2
 80026f4:	d000      	beq.n	80026f8 <__aeabi_dsub+0x1bc>
 80026f6:	e745      	b.n	8002584 <__aeabi_dsub+0x48>
 80026f8:	e740      	b.n	800257c <__aeabi_dsub+0x40>
 80026fa:	4b62      	ldr	r3, [pc, #392]	; (8002884 <__aeabi_dsub+0x348>)
 80026fc:	429d      	cmp	r5, r3
 80026fe:	d03a      	beq.n	8002776 <__aeabi_dsub+0x23a>
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	4667      	mov	r7, ip
 8002704:	041b      	lsls	r3, r3, #16
 8002706:	431f      	orrs	r7, r3
 8002708:	46bc      	mov	ip, r7
 800270a:	2e38      	cmp	r6, #56	; 0x38
 800270c:	dd00      	ble.n	8002710 <__aeabi_dsub+0x1d4>
 800270e:	e0eb      	b.n	80028e8 <__aeabi_dsub+0x3ac>
 8002710:	2e1f      	cmp	r6, #31
 8002712:	dc00      	bgt.n	8002716 <__aeabi_dsub+0x1da>
 8002714:	e13a      	b.n	800298c <__aeabi_dsub+0x450>
 8002716:	0033      	movs	r3, r6
 8002718:	4667      	mov	r7, ip
 800271a:	3b20      	subs	r3, #32
 800271c:	40df      	lsrs	r7, r3
 800271e:	003b      	movs	r3, r7
 8002720:	2e20      	cmp	r6, #32
 8002722:	d005      	beq.n	8002730 <__aeabi_dsub+0x1f4>
 8002724:	2740      	movs	r7, #64	; 0x40
 8002726:	1bbf      	subs	r7, r7, r6
 8002728:	4666      	mov	r6, ip
 800272a:	40be      	lsls	r6, r7
 800272c:	4332      	orrs	r2, r6
 800272e:	4690      	mov	r8, r2
 8002730:	4646      	mov	r6, r8
 8002732:	1e72      	subs	r2, r6, #1
 8002734:	4196      	sbcs	r6, r2
 8002736:	4333      	orrs	r3, r6
 8002738:	e0da      	b.n	80028f0 <__aeabi_dsub+0x3b4>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x204>
 800273e:	e214      	b.n	8002b6a <__aeabi_dsub+0x62e>
 8002740:	4663      	mov	r3, ip
 8002742:	4313      	orrs	r3, r2
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x20c>
 8002746:	e168      	b.n	8002a1a <__aeabi_dsub+0x4de>
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	074e      	lsls	r6, r1, #29
 800274c:	08c0      	lsrs	r0, r0, #3
 800274e:	08c9      	lsrs	r1, r1, #3
 8002750:	031b      	lsls	r3, r3, #12
 8002752:	4306      	orrs	r6, r0
 8002754:	4219      	tst	r1, r3
 8002756:	d008      	beq.n	800276a <__aeabi_dsub+0x22e>
 8002758:	4660      	mov	r0, ip
 800275a:	08c0      	lsrs	r0, r0, #3
 800275c:	4218      	tst	r0, r3
 800275e:	d104      	bne.n	800276a <__aeabi_dsub+0x22e>
 8002760:	4663      	mov	r3, ip
 8002762:	0001      	movs	r1, r0
 8002764:	08d2      	lsrs	r2, r2, #3
 8002766:	075e      	lsls	r6, r3, #29
 8002768:	4316      	orrs	r6, r2
 800276a:	00f3      	lsls	r3, r6, #3
 800276c:	4699      	mov	r9, r3
 800276e:	00c9      	lsls	r1, r1, #3
 8002770:	0f72      	lsrs	r2, r6, #29
 8002772:	4d44      	ldr	r5, [pc, #272]	; (8002884 <__aeabi_dsub+0x348>)
 8002774:	4311      	orrs	r1, r2
 8002776:	464b      	mov	r3, r9
 8002778:	08de      	lsrs	r6, r3, #3
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <__aeabi_dsub+0x348>)
 800277c:	074f      	lsls	r7, r1, #29
 800277e:	4337      	orrs	r7, r6
 8002780:	08ca      	lsrs	r2, r1, #3
 8002782:	429d      	cmp	r5, r3
 8002784:	d100      	bne.n	8002788 <__aeabi_dsub+0x24c>
 8002786:	e06e      	b.n	8002866 <__aeabi_dsub+0x32a>
 8002788:	0312      	lsls	r2, r2, #12
 800278a:	056d      	lsls	r5, r5, #21
 800278c:	0b12      	lsrs	r2, r2, #12
 800278e:	0d6d      	lsrs	r5, r5, #21
 8002790:	2100      	movs	r1, #0
 8002792:	0312      	lsls	r2, r2, #12
 8002794:	0b13      	lsrs	r3, r2, #12
 8002796:	0d0a      	lsrs	r2, r1, #20
 8002798:	0512      	lsls	r2, r2, #20
 800279a:	431a      	orrs	r2, r3
 800279c:	4b3b      	ldr	r3, [pc, #236]	; (800288c <__aeabi_dsub+0x350>)
 800279e:	052d      	lsls	r5, r5, #20
 80027a0:	4013      	ands	r3, r2
 80027a2:	432b      	orrs	r3, r5
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	07e4      	lsls	r4, r4, #31
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	4323      	orrs	r3, r4
 80027ac:	0038      	movs	r0, r7
 80027ae:	0019      	movs	r1, r3
 80027b0:	bc3c      	pop	{r2, r3, r4, r5}
 80027b2:	4690      	mov	r8, r2
 80027b4:	4699      	mov	r9, r3
 80027b6:	46a2      	mov	sl, r4
 80027b8:	46ab      	mov	fp, r5
 80027ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027bc:	4663      	mov	r3, ip
 80027be:	4313      	orrs	r3, r2
 80027c0:	d011      	beq.n	80027e6 <__aeabi_dsub+0x2aa>
 80027c2:	1e73      	subs	r3, r6, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d000      	beq.n	80027ca <__aeabi_dsub+0x28e>
 80027c8:	e107      	b.n	80029da <__aeabi_dsub+0x49e>
 80027ca:	1886      	adds	r6, r0, r2
 80027cc:	4286      	cmp	r6, r0
 80027ce:	4180      	sbcs	r0, r0
 80027d0:	4461      	add	r1, ip
 80027d2:	4240      	negs	r0, r0
 80027d4:	1809      	adds	r1, r1, r0
 80027d6:	2501      	movs	r5, #1
 80027d8:	020b      	lsls	r3, r1, #8
 80027da:	d537      	bpl.n	800284c <__aeabi_dsub+0x310>
 80027dc:	2502      	movs	r5, #2
 80027de:	e77b      	b.n	80026d8 <__aeabi_dsub+0x19c>
 80027e0:	003e      	movs	r6, r7
 80027e2:	4661      	mov	r1, ip
 80027e4:	4691      	mov	r9, r2
 80027e6:	0035      	movs	r5, r6
 80027e8:	e7c5      	b.n	8002776 <__aeabi_dsub+0x23a>
 80027ea:	465c      	mov	r4, fp
 80027ec:	2d00      	cmp	r5, #0
 80027ee:	d000      	beq.n	80027f2 <__aeabi_dsub+0x2b6>
 80027f0:	e0e1      	b.n	80029b6 <__aeabi_dsub+0x47a>
 80027f2:	000b      	movs	r3, r1
 80027f4:	4303      	orrs	r3, r0
 80027f6:	d0f3      	beq.n	80027e0 <__aeabi_dsub+0x2a4>
 80027f8:	1c73      	adds	r3, r6, #1
 80027fa:	d100      	bne.n	80027fe <__aeabi_dsub+0x2c2>
 80027fc:	e1ac      	b.n	8002b58 <__aeabi_dsub+0x61c>
 80027fe:	4b21      	ldr	r3, [pc, #132]	; (8002884 <__aeabi_dsub+0x348>)
 8002800:	429f      	cmp	r7, r3
 8002802:	d100      	bne.n	8002806 <__aeabi_dsub+0x2ca>
 8002804:	e13a      	b.n	8002a7c <__aeabi_dsub+0x540>
 8002806:	43f3      	mvns	r3, r6
 8002808:	2b38      	cmp	r3, #56	; 0x38
 800280a:	dd00      	ble.n	800280e <__aeabi_dsub+0x2d2>
 800280c:	e16f      	b.n	8002aee <__aeabi_dsub+0x5b2>
 800280e:	2b1f      	cmp	r3, #31
 8002810:	dd00      	ble.n	8002814 <__aeabi_dsub+0x2d8>
 8002812:	e18c      	b.n	8002b2e <__aeabi_dsub+0x5f2>
 8002814:	2520      	movs	r5, #32
 8002816:	000e      	movs	r6, r1
 8002818:	1aed      	subs	r5, r5, r3
 800281a:	40ae      	lsls	r6, r5
 800281c:	46b0      	mov	r8, r6
 800281e:	0006      	movs	r6, r0
 8002820:	46aa      	mov	sl, r5
 8002822:	40de      	lsrs	r6, r3
 8002824:	4645      	mov	r5, r8
 8002826:	4335      	orrs	r5, r6
 8002828:	002e      	movs	r6, r5
 800282a:	4655      	mov	r5, sl
 800282c:	40d9      	lsrs	r1, r3
 800282e:	40a8      	lsls	r0, r5
 8002830:	4663      	mov	r3, ip
 8002832:	1e45      	subs	r5, r0, #1
 8002834:	41a8      	sbcs	r0, r5
 8002836:	1a5b      	subs	r3, r3, r1
 8002838:	469c      	mov	ip, r3
 800283a:	4330      	orrs	r0, r6
 800283c:	1a16      	subs	r6, r2, r0
 800283e:	42b2      	cmp	r2, r6
 8002840:	4192      	sbcs	r2, r2
 8002842:	4663      	mov	r3, ip
 8002844:	4252      	negs	r2, r2
 8002846:	1a99      	subs	r1, r3, r2
 8002848:	003d      	movs	r5, r7
 800284a:	e6b4      	b.n	80025b6 <__aeabi_dsub+0x7a>
 800284c:	2207      	movs	r2, #7
 800284e:	4032      	ands	r2, r6
 8002850:	2a00      	cmp	r2, #0
 8002852:	d000      	beq.n	8002856 <__aeabi_dsub+0x31a>
 8002854:	e6e4      	b.n	8002620 <__aeabi_dsub+0xe4>
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <__aeabi_dsub+0x348>)
 8002858:	08f6      	lsrs	r6, r6, #3
 800285a:	074f      	lsls	r7, r1, #29
 800285c:	4337      	orrs	r7, r6
 800285e:	08ca      	lsrs	r2, r1, #3
 8002860:	429d      	cmp	r5, r3
 8002862:	d000      	beq.n	8002866 <__aeabi_dsub+0x32a>
 8002864:	e790      	b.n	8002788 <__aeabi_dsub+0x24c>
 8002866:	003b      	movs	r3, r7
 8002868:	4313      	orrs	r3, r2
 800286a:	d100      	bne.n	800286e <__aeabi_dsub+0x332>
 800286c:	e1a6      	b.n	8002bbc <__aeabi_dsub+0x680>
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	031b      	lsls	r3, r3, #12
 8002872:	431a      	orrs	r2, r3
 8002874:	0312      	lsls	r2, r2, #12
 8002876:	0b12      	lsrs	r2, r2, #12
 8002878:	4d02      	ldr	r5, [pc, #8]	; (8002884 <__aeabi_dsub+0x348>)
 800287a:	e789      	b.n	8002790 <__aeabi_dsub+0x254>
 800287c:	0015      	movs	r5, r2
 800287e:	2200      	movs	r2, #0
 8002880:	2700      	movs	r7, #0
 8002882:	e785      	b.n	8002790 <__aeabi_dsub+0x254>
 8002884:	000007ff 	.word	0x000007ff
 8002888:	ff7fffff 	.word	0xff7fffff
 800288c:	800fffff 	.word	0x800fffff
 8002890:	2e00      	cmp	r6, #0
 8002892:	d000      	beq.n	8002896 <__aeabi_dsub+0x35a>
 8002894:	e0c7      	b.n	8002a26 <__aeabi_dsub+0x4ea>
 8002896:	1c6b      	adds	r3, r5, #1
 8002898:	055e      	lsls	r6, r3, #21
 800289a:	0d76      	lsrs	r6, r6, #21
 800289c:	2e01      	cmp	r6, #1
 800289e:	dc00      	bgt.n	80028a2 <__aeabi_dsub+0x366>
 80028a0:	e0f0      	b.n	8002a84 <__aeabi_dsub+0x548>
 80028a2:	4dc8      	ldr	r5, [pc, #800]	; (8002bc4 <__aeabi_dsub+0x688>)
 80028a4:	42ab      	cmp	r3, r5
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x36e>
 80028a8:	e0b9      	b.n	8002a1e <__aeabi_dsub+0x4e2>
 80028aa:	1885      	adds	r5, r0, r2
 80028ac:	000a      	movs	r2, r1
 80028ae:	4285      	cmp	r5, r0
 80028b0:	4189      	sbcs	r1, r1
 80028b2:	4462      	add	r2, ip
 80028b4:	4249      	negs	r1, r1
 80028b6:	1851      	adds	r1, r2, r1
 80028b8:	2207      	movs	r2, #7
 80028ba:	07ce      	lsls	r6, r1, #31
 80028bc:	086d      	lsrs	r5, r5, #1
 80028be:	432e      	orrs	r6, r5
 80028c0:	0849      	lsrs	r1, r1, #1
 80028c2:	4032      	ands	r2, r6
 80028c4:	001d      	movs	r5, r3
 80028c6:	e6a9      	b.n	800261c <__aeabi_dsub+0xe0>
 80028c8:	49bf      	ldr	r1, [pc, #764]	; (8002bc8 <__aeabi_dsub+0x68c>)
 80028ca:	1aed      	subs	r5, r5, r3
 80028cc:	4011      	ands	r1, r2
 80028ce:	2207      	movs	r2, #7
 80028d0:	4032      	ands	r2, r6
 80028d2:	e6a3      	b.n	800261c <__aeabi_dsub+0xe0>
 80028d4:	0032      	movs	r2, r6
 80028d6:	3828      	subs	r0, #40	; 0x28
 80028d8:	4082      	lsls	r2, r0
 80028da:	2600      	movs	r6, #0
 80028dc:	e686      	b.n	80025ec <__aeabi_dsub+0xb0>
 80028de:	0030      	movs	r0, r6
 80028e0:	f000 fb08 	bl	8002ef4 <__clzsi2>
 80028e4:	3020      	adds	r0, #32
 80028e6:	e673      	b.n	80025d0 <__aeabi_dsub+0x94>
 80028e8:	4663      	mov	r3, ip
 80028ea:	4313      	orrs	r3, r2
 80028ec:	1e5a      	subs	r2, r3, #1
 80028ee:	4193      	sbcs	r3, r2
 80028f0:	1ac6      	subs	r6, r0, r3
 80028f2:	42b0      	cmp	r0, r6
 80028f4:	4180      	sbcs	r0, r0
 80028f6:	4240      	negs	r0, r0
 80028f8:	1a09      	subs	r1, r1, r0
 80028fa:	e65c      	b.n	80025b6 <__aeabi_dsub+0x7a>
 80028fc:	000e      	movs	r6, r1
 80028fe:	4667      	mov	r7, ip
 8002900:	4306      	orrs	r6, r0
 8002902:	4317      	orrs	r7, r2
 8002904:	2d00      	cmp	r5, #0
 8002906:	d15e      	bne.n	80029c6 <__aeabi_dsub+0x48a>
 8002908:	2e00      	cmp	r6, #0
 800290a:	d000      	beq.n	800290e <__aeabi_dsub+0x3d2>
 800290c:	e0f3      	b.n	8002af6 <__aeabi_dsub+0x5ba>
 800290e:	2f00      	cmp	r7, #0
 8002910:	d100      	bne.n	8002914 <__aeabi_dsub+0x3d8>
 8002912:	e11e      	b.n	8002b52 <__aeabi_dsub+0x616>
 8002914:	465c      	mov	r4, fp
 8002916:	4661      	mov	r1, ip
 8002918:	4691      	mov	r9, r2
 800291a:	e72c      	b.n	8002776 <__aeabi_dsub+0x23a>
 800291c:	4fa9      	ldr	r7, [pc, #676]	; (8002bc4 <__aeabi_dsub+0x688>)
 800291e:	42be      	cmp	r6, r7
 8002920:	d07b      	beq.n	8002a1a <__aeabi_dsub+0x4de>
 8002922:	001e      	movs	r6, r3
 8002924:	e6f1      	b.n	800270a <__aeabi_dsub+0x1ce>
 8002926:	0010      	movs	r0, r2
 8002928:	3d1f      	subs	r5, #31
 800292a:	40e8      	lsrs	r0, r5
 800292c:	2b20      	cmp	r3, #32
 800292e:	d003      	beq.n	8002938 <__aeabi_dsub+0x3fc>
 8002930:	2140      	movs	r1, #64	; 0x40
 8002932:	1acb      	subs	r3, r1, r3
 8002934:	409a      	lsls	r2, r3
 8002936:	4316      	orrs	r6, r2
 8002938:	1e73      	subs	r3, r6, #1
 800293a:	419e      	sbcs	r6, r3
 800293c:	2207      	movs	r2, #7
 800293e:	4306      	orrs	r6, r0
 8002940:	4032      	ands	r2, r6
 8002942:	2100      	movs	r1, #0
 8002944:	2500      	movs	r5, #0
 8002946:	e783      	b.n	8002850 <__aeabi_dsub+0x314>
 8002948:	1a16      	subs	r6, r2, r0
 800294a:	4663      	mov	r3, ip
 800294c:	42b2      	cmp	r2, r6
 800294e:	4180      	sbcs	r0, r0
 8002950:	1a59      	subs	r1, r3, r1
 8002952:	4240      	negs	r0, r0
 8002954:	1a0b      	subs	r3, r1, r0
 8002956:	4698      	mov	r8, r3
 8002958:	465c      	mov	r4, fp
 800295a:	e632      	b.n	80025c2 <__aeabi_dsub+0x86>
 800295c:	2e1f      	cmp	r6, #31
 800295e:	dd00      	ble.n	8002962 <__aeabi_dsub+0x426>
 8002960:	e0ab      	b.n	8002aba <__aeabi_dsub+0x57e>
 8002962:	2720      	movs	r7, #32
 8002964:	1bbb      	subs	r3, r7, r6
 8002966:	469a      	mov	sl, r3
 8002968:	4663      	mov	r3, ip
 800296a:	4657      	mov	r7, sl
 800296c:	40bb      	lsls	r3, r7
 800296e:	4699      	mov	r9, r3
 8002970:	0013      	movs	r3, r2
 8002972:	464f      	mov	r7, r9
 8002974:	40f3      	lsrs	r3, r6
 8002976:	431f      	orrs	r7, r3
 8002978:	003b      	movs	r3, r7
 800297a:	4657      	mov	r7, sl
 800297c:	40ba      	lsls	r2, r7
 800297e:	1e57      	subs	r7, r2, #1
 8002980:	41ba      	sbcs	r2, r7
 8002982:	4313      	orrs	r3, r2
 8002984:	4662      	mov	r2, ip
 8002986:	40f2      	lsrs	r2, r6
 8002988:	1889      	adds	r1, r1, r2
 800298a:	e698      	b.n	80026be <__aeabi_dsub+0x182>
 800298c:	2720      	movs	r7, #32
 800298e:	1bbb      	subs	r3, r7, r6
 8002990:	469a      	mov	sl, r3
 8002992:	4663      	mov	r3, ip
 8002994:	4657      	mov	r7, sl
 8002996:	40bb      	lsls	r3, r7
 8002998:	4699      	mov	r9, r3
 800299a:	0013      	movs	r3, r2
 800299c:	464f      	mov	r7, r9
 800299e:	40f3      	lsrs	r3, r6
 80029a0:	431f      	orrs	r7, r3
 80029a2:	003b      	movs	r3, r7
 80029a4:	4657      	mov	r7, sl
 80029a6:	40ba      	lsls	r2, r7
 80029a8:	1e57      	subs	r7, r2, #1
 80029aa:	41ba      	sbcs	r2, r7
 80029ac:	4313      	orrs	r3, r2
 80029ae:	4662      	mov	r2, ip
 80029b0:	40f2      	lsrs	r2, r6
 80029b2:	1a89      	subs	r1, r1, r2
 80029b4:	e79c      	b.n	80028f0 <__aeabi_dsub+0x3b4>
 80029b6:	4b83      	ldr	r3, [pc, #524]	; (8002bc4 <__aeabi_dsub+0x688>)
 80029b8:	429f      	cmp	r7, r3
 80029ba:	d05f      	beq.n	8002a7c <__aeabi_dsub+0x540>
 80029bc:	2580      	movs	r5, #128	; 0x80
 80029be:	042d      	lsls	r5, r5, #16
 80029c0:	4273      	negs	r3, r6
 80029c2:	4329      	orrs	r1, r5
 80029c4:	e720      	b.n	8002808 <__aeabi_dsub+0x2cc>
 80029c6:	2e00      	cmp	r6, #0
 80029c8:	d10c      	bne.n	80029e4 <__aeabi_dsub+0x4a8>
 80029ca:	2f00      	cmp	r7, #0
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x494>
 80029ce:	e0d0      	b.n	8002b72 <__aeabi_dsub+0x636>
 80029d0:	465c      	mov	r4, fp
 80029d2:	4661      	mov	r1, ip
 80029d4:	4691      	mov	r9, r2
 80029d6:	4d7b      	ldr	r5, [pc, #492]	; (8002bc4 <__aeabi_dsub+0x688>)
 80029d8:	e6cd      	b.n	8002776 <__aeabi_dsub+0x23a>
 80029da:	4f7a      	ldr	r7, [pc, #488]	; (8002bc4 <__aeabi_dsub+0x688>)
 80029dc:	42be      	cmp	r6, r7
 80029de:	d01c      	beq.n	8002a1a <__aeabi_dsub+0x4de>
 80029e0:	001e      	movs	r6, r3
 80029e2:	e665      	b.n	80026b0 <__aeabi_dsub+0x174>
 80029e4:	2f00      	cmp	r7, #0
 80029e6:	d018      	beq.n	8002a1a <__aeabi_dsub+0x4de>
 80029e8:	08c0      	lsrs	r0, r0, #3
 80029ea:	074e      	lsls	r6, r1, #29
 80029ec:	4306      	orrs	r6, r0
 80029ee:	2080      	movs	r0, #128	; 0x80
 80029f0:	08c9      	lsrs	r1, r1, #3
 80029f2:	0300      	lsls	r0, r0, #12
 80029f4:	4201      	tst	r1, r0
 80029f6:	d008      	beq.n	8002a0a <__aeabi_dsub+0x4ce>
 80029f8:	4663      	mov	r3, ip
 80029fa:	08dc      	lsrs	r4, r3, #3
 80029fc:	4204      	tst	r4, r0
 80029fe:	d104      	bne.n	8002a0a <__aeabi_dsub+0x4ce>
 8002a00:	0021      	movs	r1, r4
 8002a02:	46da      	mov	sl, fp
 8002a04:	08d2      	lsrs	r2, r2, #3
 8002a06:	075e      	lsls	r6, r3, #29
 8002a08:	4316      	orrs	r6, r2
 8002a0a:	00f3      	lsls	r3, r6, #3
 8002a0c:	4699      	mov	r9, r3
 8002a0e:	2401      	movs	r4, #1
 8002a10:	4653      	mov	r3, sl
 8002a12:	00c9      	lsls	r1, r1, #3
 8002a14:	0f72      	lsrs	r2, r6, #29
 8002a16:	4311      	orrs	r1, r2
 8002a18:	401c      	ands	r4, r3
 8002a1a:	4d6a      	ldr	r5, [pc, #424]	; (8002bc4 <__aeabi_dsub+0x688>)
 8002a1c:	e6ab      	b.n	8002776 <__aeabi_dsub+0x23a>
 8002a1e:	001d      	movs	r5, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	2700      	movs	r7, #0
 8002a24:	e6b4      	b.n	8002790 <__aeabi_dsub+0x254>
 8002a26:	2d00      	cmp	r5, #0
 8002a28:	d159      	bne.n	8002ade <__aeabi_dsub+0x5a2>
 8002a2a:	000b      	movs	r3, r1
 8002a2c:	4303      	orrs	r3, r0
 8002a2e:	d100      	bne.n	8002a32 <__aeabi_dsub+0x4f6>
 8002a30:	e6d6      	b.n	80027e0 <__aeabi_dsub+0x2a4>
 8002a32:	1c73      	adds	r3, r6, #1
 8002a34:	d100      	bne.n	8002a38 <__aeabi_dsub+0x4fc>
 8002a36:	e0b2      	b.n	8002b9e <__aeabi_dsub+0x662>
 8002a38:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <__aeabi_dsub+0x688>)
 8002a3a:	429f      	cmp	r7, r3
 8002a3c:	d01e      	beq.n	8002a7c <__aeabi_dsub+0x540>
 8002a3e:	43f3      	mvns	r3, r6
 8002a40:	2b38      	cmp	r3, #56	; 0x38
 8002a42:	dc6f      	bgt.n	8002b24 <__aeabi_dsub+0x5e8>
 8002a44:	2b1f      	cmp	r3, #31
 8002a46:	dd00      	ble.n	8002a4a <__aeabi_dsub+0x50e>
 8002a48:	e097      	b.n	8002b7a <__aeabi_dsub+0x63e>
 8002a4a:	2520      	movs	r5, #32
 8002a4c:	000e      	movs	r6, r1
 8002a4e:	1aed      	subs	r5, r5, r3
 8002a50:	40ae      	lsls	r6, r5
 8002a52:	46b0      	mov	r8, r6
 8002a54:	0006      	movs	r6, r0
 8002a56:	46aa      	mov	sl, r5
 8002a58:	40de      	lsrs	r6, r3
 8002a5a:	4645      	mov	r5, r8
 8002a5c:	4335      	orrs	r5, r6
 8002a5e:	002e      	movs	r6, r5
 8002a60:	4655      	mov	r5, sl
 8002a62:	40a8      	lsls	r0, r5
 8002a64:	40d9      	lsrs	r1, r3
 8002a66:	1e45      	subs	r5, r0, #1
 8002a68:	41a8      	sbcs	r0, r5
 8002a6a:	448c      	add	ip, r1
 8002a6c:	4306      	orrs	r6, r0
 8002a6e:	18b6      	adds	r6, r6, r2
 8002a70:	4296      	cmp	r6, r2
 8002a72:	4192      	sbcs	r2, r2
 8002a74:	4251      	negs	r1, r2
 8002a76:	4461      	add	r1, ip
 8002a78:	003d      	movs	r5, r7
 8002a7a:	e625      	b.n	80026c8 <__aeabi_dsub+0x18c>
 8002a7c:	003d      	movs	r5, r7
 8002a7e:	4661      	mov	r1, ip
 8002a80:	4691      	mov	r9, r2
 8002a82:	e678      	b.n	8002776 <__aeabi_dsub+0x23a>
 8002a84:	000b      	movs	r3, r1
 8002a86:	4303      	orrs	r3, r0
 8002a88:	2d00      	cmp	r5, #0
 8002a8a:	d000      	beq.n	8002a8e <__aeabi_dsub+0x552>
 8002a8c:	e655      	b.n	800273a <__aeabi_dsub+0x1fe>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f5      	beq.n	8002a7e <__aeabi_dsub+0x542>
 8002a92:	4663      	mov	r3, ip
 8002a94:	4313      	orrs	r3, r2
 8002a96:	d100      	bne.n	8002a9a <__aeabi_dsub+0x55e>
 8002a98:	e66d      	b.n	8002776 <__aeabi_dsub+0x23a>
 8002a9a:	1886      	adds	r6, r0, r2
 8002a9c:	4286      	cmp	r6, r0
 8002a9e:	4180      	sbcs	r0, r0
 8002aa0:	4461      	add	r1, ip
 8002aa2:	4240      	negs	r0, r0
 8002aa4:	1809      	adds	r1, r1, r0
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	020b      	lsls	r3, r1, #8
 8002aaa:	d400      	bmi.n	8002aae <__aeabi_dsub+0x572>
 8002aac:	e6d0      	b.n	8002850 <__aeabi_dsub+0x314>
 8002aae:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <__aeabi_dsub+0x68c>)
 8002ab0:	3501      	adds	r5, #1
 8002ab2:	4019      	ands	r1, r3
 8002ab4:	e5b2      	b.n	800261c <__aeabi_dsub+0xe0>
 8002ab6:	46b1      	mov	r9, r6
 8002ab8:	e65d      	b.n	8002776 <__aeabi_dsub+0x23a>
 8002aba:	0033      	movs	r3, r6
 8002abc:	4667      	mov	r7, ip
 8002abe:	3b20      	subs	r3, #32
 8002ac0:	40df      	lsrs	r7, r3
 8002ac2:	003b      	movs	r3, r7
 8002ac4:	2e20      	cmp	r6, #32
 8002ac6:	d005      	beq.n	8002ad4 <__aeabi_dsub+0x598>
 8002ac8:	2740      	movs	r7, #64	; 0x40
 8002aca:	1bbf      	subs	r7, r7, r6
 8002acc:	4666      	mov	r6, ip
 8002ace:	40be      	lsls	r6, r7
 8002ad0:	4332      	orrs	r2, r6
 8002ad2:	4690      	mov	r8, r2
 8002ad4:	4646      	mov	r6, r8
 8002ad6:	1e72      	subs	r2, r6, #1
 8002ad8:	4196      	sbcs	r6, r2
 8002ada:	4333      	orrs	r3, r6
 8002adc:	e5ef      	b.n	80026be <__aeabi_dsub+0x182>
 8002ade:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <__aeabi_dsub+0x688>)
 8002ae0:	429f      	cmp	r7, r3
 8002ae2:	d0cb      	beq.n	8002a7c <__aeabi_dsub+0x540>
 8002ae4:	2580      	movs	r5, #128	; 0x80
 8002ae6:	042d      	lsls	r5, r5, #16
 8002ae8:	4273      	negs	r3, r6
 8002aea:	4329      	orrs	r1, r5
 8002aec:	e7a8      	b.n	8002a40 <__aeabi_dsub+0x504>
 8002aee:	4308      	orrs	r0, r1
 8002af0:	1e41      	subs	r1, r0, #1
 8002af2:	4188      	sbcs	r0, r1
 8002af4:	e6a2      	b.n	800283c <__aeabi_dsub+0x300>
 8002af6:	2f00      	cmp	r7, #0
 8002af8:	d100      	bne.n	8002afc <__aeabi_dsub+0x5c0>
 8002afa:	e63c      	b.n	8002776 <__aeabi_dsub+0x23a>
 8002afc:	4663      	mov	r3, ip
 8002afe:	1a86      	subs	r6, r0, r2
 8002b00:	1acf      	subs	r7, r1, r3
 8002b02:	42b0      	cmp	r0, r6
 8002b04:	419b      	sbcs	r3, r3
 8002b06:	425b      	negs	r3, r3
 8002b08:	1afb      	subs	r3, r7, r3
 8002b0a:	4698      	mov	r8, r3
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	d54e      	bpl.n	8002bae <__aeabi_dsub+0x672>
 8002b10:	1a16      	subs	r6, r2, r0
 8002b12:	4663      	mov	r3, ip
 8002b14:	42b2      	cmp	r2, r6
 8002b16:	4192      	sbcs	r2, r2
 8002b18:	1a59      	subs	r1, r3, r1
 8002b1a:	4252      	negs	r2, r2
 8002b1c:	1a89      	subs	r1, r1, r2
 8002b1e:	465c      	mov	r4, fp
 8002b20:	2200      	movs	r2, #0
 8002b22:	e57b      	b.n	800261c <__aeabi_dsub+0xe0>
 8002b24:	4301      	orrs	r1, r0
 8002b26:	000e      	movs	r6, r1
 8002b28:	1e71      	subs	r1, r6, #1
 8002b2a:	418e      	sbcs	r6, r1
 8002b2c:	e79f      	b.n	8002a6e <__aeabi_dsub+0x532>
 8002b2e:	001d      	movs	r5, r3
 8002b30:	000e      	movs	r6, r1
 8002b32:	3d20      	subs	r5, #32
 8002b34:	40ee      	lsrs	r6, r5
 8002b36:	46b0      	mov	r8, r6
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d004      	beq.n	8002b46 <__aeabi_dsub+0x60a>
 8002b3c:	2540      	movs	r5, #64	; 0x40
 8002b3e:	1aeb      	subs	r3, r5, r3
 8002b40:	4099      	lsls	r1, r3
 8002b42:	4308      	orrs	r0, r1
 8002b44:	4681      	mov	r9, r0
 8002b46:	4648      	mov	r0, r9
 8002b48:	4643      	mov	r3, r8
 8002b4a:	1e41      	subs	r1, r0, #1
 8002b4c:	4188      	sbcs	r0, r1
 8002b4e:	4318      	orrs	r0, r3
 8002b50:	e674      	b.n	800283c <__aeabi_dsub+0x300>
 8002b52:	2200      	movs	r2, #0
 8002b54:	2400      	movs	r4, #0
 8002b56:	e617      	b.n	8002788 <__aeabi_dsub+0x24c>
 8002b58:	1a16      	subs	r6, r2, r0
 8002b5a:	4663      	mov	r3, ip
 8002b5c:	42b2      	cmp	r2, r6
 8002b5e:	4192      	sbcs	r2, r2
 8002b60:	1a59      	subs	r1, r3, r1
 8002b62:	4252      	negs	r2, r2
 8002b64:	1a89      	subs	r1, r1, r2
 8002b66:	003d      	movs	r5, r7
 8002b68:	e525      	b.n	80025b6 <__aeabi_dsub+0x7a>
 8002b6a:	4661      	mov	r1, ip
 8002b6c:	4691      	mov	r9, r2
 8002b6e:	4d15      	ldr	r5, [pc, #84]	; (8002bc4 <__aeabi_dsub+0x688>)
 8002b70:	e601      	b.n	8002776 <__aeabi_dsub+0x23a>
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	2400      	movs	r4, #0
 8002b76:	0312      	lsls	r2, r2, #12
 8002b78:	e679      	b.n	800286e <__aeabi_dsub+0x332>
 8002b7a:	001d      	movs	r5, r3
 8002b7c:	000e      	movs	r6, r1
 8002b7e:	3d20      	subs	r5, #32
 8002b80:	40ee      	lsrs	r6, r5
 8002b82:	46b0      	mov	r8, r6
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d004      	beq.n	8002b92 <__aeabi_dsub+0x656>
 8002b88:	2540      	movs	r5, #64	; 0x40
 8002b8a:	1aeb      	subs	r3, r5, r3
 8002b8c:	4099      	lsls	r1, r3
 8002b8e:	4308      	orrs	r0, r1
 8002b90:	4681      	mov	r9, r0
 8002b92:	464e      	mov	r6, r9
 8002b94:	4643      	mov	r3, r8
 8002b96:	1e71      	subs	r1, r6, #1
 8002b98:	418e      	sbcs	r6, r1
 8002b9a:	431e      	orrs	r6, r3
 8002b9c:	e767      	b.n	8002a6e <__aeabi_dsub+0x532>
 8002b9e:	1886      	adds	r6, r0, r2
 8002ba0:	4296      	cmp	r6, r2
 8002ba2:	419b      	sbcs	r3, r3
 8002ba4:	4461      	add	r1, ip
 8002ba6:	425b      	negs	r3, r3
 8002ba8:	18c9      	adds	r1, r1, r3
 8002baa:	003d      	movs	r5, r7
 8002bac:	e58c      	b.n	80026c8 <__aeabi_dsub+0x18c>
 8002bae:	4647      	mov	r7, r8
 8002bb0:	4337      	orrs	r7, r6
 8002bb2:	d0ce      	beq.n	8002b52 <__aeabi_dsub+0x616>
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	4032      	ands	r2, r6
 8002bba:	e649      	b.n	8002850 <__aeabi_dsub+0x314>
 8002bbc:	2700      	movs	r7, #0
 8002bbe:	003a      	movs	r2, r7
 8002bc0:	e5e6      	b.n	8002790 <__aeabi_dsub+0x254>
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	ff7fffff 	.word	0xff7fffff

08002bcc <__aeabi_dcmpun>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	4e0c      	ldr	r6, [pc, #48]	; (8002c00 <__aeabi_dcmpun+0x34>)
 8002bd0:	030d      	lsls	r5, r1, #12
 8002bd2:	031c      	lsls	r4, r3, #12
 8002bd4:	0049      	lsls	r1, r1, #1
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	0b2d      	lsrs	r5, r5, #12
 8002bda:	0d49      	lsrs	r1, r1, #21
 8002bdc:	0b24      	lsrs	r4, r4, #12
 8002bde:	0d5b      	lsrs	r3, r3, #21
 8002be0:	42b1      	cmp	r1, r6
 8002be2:	d008      	beq.n	8002bf6 <__aeabi_dcmpun+0x2a>
 8002be4:	4906      	ldr	r1, [pc, #24]	; (8002c00 <__aeabi_dcmpun+0x34>)
 8002be6:	2000      	movs	r0, #0
 8002be8:	428b      	cmp	r3, r1
 8002bea:	d103      	bne.n	8002bf4 <__aeabi_dcmpun+0x28>
 8002bec:	4314      	orrs	r4, r2
 8002bee:	0020      	movs	r0, r4
 8002bf0:	1e44      	subs	r4, r0, #1
 8002bf2:	41a0      	sbcs	r0, r4
 8002bf4:	bd70      	pop	{r4, r5, r6, pc}
 8002bf6:	4305      	orrs	r5, r0
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	2d00      	cmp	r5, #0
 8002bfc:	d1fa      	bne.n	8002bf4 <__aeabi_dcmpun+0x28>
 8002bfe:	e7f1      	b.n	8002be4 <__aeabi_dcmpun+0x18>
 8002c00:	000007ff 	.word	0x000007ff

08002c04 <__aeabi_d2iz>:
 8002c04:	b530      	push	{r4, r5, lr}
 8002c06:	4d14      	ldr	r5, [pc, #80]	; (8002c58 <__aeabi_d2iz+0x54>)
 8002c08:	030a      	lsls	r2, r1, #12
 8002c0a:	004b      	lsls	r3, r1, #1
 8002c0c:	0b12      	lsrs	r2, r2, #12
 8002c0e:	0d5b      	lsrs	r3, r3, #21
 8002c10:	0fc9      	lsrs	r1, r1, #31
 8002c12:	2400      	movs	r4, #0
 8002c14:	42ab      	cmp	r3, r5
 8002c16:	dd11      	ble.n	8002c3c <__aeabi_d2iz+0x38>
 8002c18:	4c10      	ldr	r4, [pc, #64]	; (8002c5c <__aeabi_d2iz+0x58>)
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	dc10      	bgt.n	8002c40 <__aeabi_d2iz+0x3c>
 8002c1e:	2480      	movs	r4, #128	; 0x80
 8002c20:	0364      	lsls	r4, r4, #13
 8002c22:	4322      	orrs	r2, r4
 8002c24:	4c0e      	ldr	r4, [pc, #56]	; (8002c60 <__aeabi_d2iz+0x5c>)
 8002c26:	1ae4      	subs	r4, r4, r3
 8002c28:	2c1f      	cmp	r4, #31
 8002c2a:	dd0c      	ble.n	8002c46 <__aeabi_d2iz+0x42>
 8002c2c:	480d      	ldr	r0, [pc, #52]	; (8002c64 <__aeabi_d2iz+0x60>)
 8002c2e:	1ac3      	subs	r3, r0, r3
 8002c30:	40da      	lsrs	r2, r3
 8002c32:	0013      	movs	r3, r2
 8002c34:	425c      	negs	r4, r3
 8002c36:	2900      	cmp	r1, #0
 8002c38:	d100      	bne.n	8002c3c <__aeabi_d2iz+0x38>
 8002c3a:	001c      	movs	r4, r3
 8002c3c:	0020      	movs	r0, r4
 8002c3e:	bd30      	pop	{r4, r5, pc}
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <__aeabi_d2iz+0x64>)
 8002c42:	18cc      	adds	r4, r1, r3
 8002c44:	e7fa      	b.n	8002c3c <__aeabi_d2iz+0x38>
 8002c46:	4d09      	ldr	r5, [pc, #36]	; (8002c6c <__aeabi_d2iz+0x68>)
 8002c48:	40e0      	lsrs	r0, r4
 8002c4a:	46ac      	mov	ip, r5
 8002c4c:	4463      	add	r3, ip
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	0013      	movs	r3, r2
 8002c52:	4303      	orrs	r3, r0
 8002c54:	e7ee      	b.n	8002c34 <__aeabi_d2iz+0x30>
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	000003fe 	.word	0x000003fe
 8002c5c:	0000041d 	.word	0x0000041d
 8002c60:	00000433 	.word	0x00000433
 8002c64:	00000413 	.word	0x00000413
 8002c68:	7fffffff 	.word	0x7fffffff
 8002c6c:	fffffbed 	.word	0xfffffbed

08002c70 <__aeabi_i2d>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d02d      	beq.n	8002cd2 <__aeabi_i2d+0x62>
 8002c76:	17c3      	asrs	r3, r0, #31
 8002c78:	18c5      	adds	r5, r0, r3
 8002c7a:	405d      	eors	r5, r3
 8002c7c:	0fc4      	lsrs	r4, r0, #31
 8002c7e:	0028      	movs	r0, r5
 8002c80:	f000 f938 	bl	8002ef4 <__clzsi2>
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <__aeabi_i2d+0x6c>)
 8002c86:	1a1b      	subs	r3, r3, r0
 8002c88:	055b      	lsls	r3, r3, #21
 8002c8a:	0d5b      	lsrs	r3, r3, #21
 8002c8c:	280a      	cmp	r0, #10
 8002c8e:	dd15      	ble.n	8002cbc <__aeabi_i2d+0x4c>
 8002c90:	380b      	subs	r0, #11
 8002c92:	4085      	lsls	r5, r0
 8002c94:	2200      	movs	r2, #0
 8002c96:	032d      	lsls	r5, r5, #12
 8002c98:	0b2d      	lsrs	r5, r5, #12
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	0010      	movs	r0, r2
 8002c9e:	032d      	lsls	r5, r5, #12
 8002ca0:	0d0a      	lsrs	r2, r1, #20
 8002ca2:	0b2d      	lsrs	r5, r5, #12
 8002ca4:	0512      	lsls	r2, r2, #20
 8002ca6:	432a      	orrs	r2, r5
 8002ca8:	4d0d      	ldr	r5, [pc, #52]	; (8002ce0 <__aeabi_i2d+0x70>)
 8002caa:	051b      	lsls	r3, r3, #20
 8002cac:	402a      	ands	r2, r5
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	07e4      	lsls	r4, r4, #31
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	0019      	movs	r1, r3
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	0029      	movs	r1, r5
 8002cc0:	3215      	adds	r2, #21
 8002cc2:	4091      	lsls	r1, r2
 8002cc4:	000a      	movs	r2, r1
 8002cc6:	210b      	movs	r1, #11
 8002cc8:	1a08      	subs	r0, r1, r0
 8002cca:	40c5      	lsrs	r5, r0
 8002ccc:	032d      	lsls	r5, r5, #12
 8002cce:	0b2d      	lsrs	r5, r5, #12
 8002cd0:	e7e3      	b.n	8002c9a <__aeabi_i2d+0x2a>
 8002cd2:	2400      	movs	r4, #0
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2500      	movs	r5, #0
 8002cd8:	2200      	movs	r2, #0
 8002cda:	e7de      	b.n	8002c9a <__aeabi_i2d+0x2a>
 8002cdc:	0000041e 	.word	0x0000041e
 8002ce0:	800fffff 	.word	0x800fffff

08002ce4 <__aeabi_ui2d>:
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	1e04      	subs	r4, r0, #0
 8002ce8:	d025      	beq.n	8002d36 <__aeabi_ui2d+0x52>
 8002cea:	f000 f903 	bl	8002ef4 <__clzsi2>
 8002cee:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <__aeabi_ui2d+0x5c>)
 8002cf0:	1a1b      	subs	r3, r3, r0
 8002cf2:	055b      	lsls	r3, r3, #21
 8002cf4:	0d5b      	lsrs	r3, r3, #21
 8002cf6:	280a      	cmp	r0, #10
 8002cf8:	dd12      	ble.n	8002d20 <__aeabi_ui2d+0x3c>
 8002cfa:	380b      	subs	r0, #11
 8002cfc:	4084      	lsls	r4, r0
 8002cfe:	2200      	movs	r2, #0
 8002d00:	0324      	lsls	r4, r4, #12
 8002d02:	0b24      	lsrs	r4, r4, #12
 8002d04:	2100      	movs	r1, #0
 8002d06:	0010      	movs	r0, r2
 8002d08:	0324      	lsls	r4, r4, #12
 8002d0a:	0d0a      	lsrs	r2, r1, #20
 8002d0c:	0b24      	lsrs	r4, r4, #12
 8002d0e:	0512      	lsls	r2, r2, #20
 8002d10:	4322      	orrs	r2, r4
 8002d12:	4c0c      	ldr	r4, [pc, #48]	; (8002d44 <__aeabi_ui2d+0x60>)
 8002d14:	051b      	lsls	r3, r3, #20
 8002d16:	4022      	ands	r2, r4
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	0859      	lsrs	r1, r3, #1
 8002d1e:	bd10      	pop	{r4, pc}
 8002d20:	0002      	movs	r2, r0
 8002d22:	0021      	movs	r1, r4
 8002d24:	3215      	adds	r2, #21
 8002d26:	4091      	lsls	r1, r2
 8002d28:	000a      	movs	r2, r1
 8002d2a:	210b      	movs	r1, #11
 8002d2c:	1a08      	subs	r0, r1, r0
 8002d2e:	40c4      	lsrs	r4, r0
 8002d30:	0324      	lsls	r4, r4, #12
 8002d32:	0b24      	lsrs	r4, r4, #12
 8002d34:	e7e6      	b.n	8002d04 <__aeabi_ui2d+0x20>
 8002d36:	2300      	movs	r3, #0
 8002d38:	2400      	movs	r4, #0
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	e7e2      	b.n	8002d04 <__aeabi_ui2d+0x20>
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	0000041e 	.word	0x0000041e
 8002d44:	800fffff 	.word	0x800fffff

08002d48 <__aeabi_f2d>:
 8002d48:	0041      	lsls	r1, r0, #1
 8002d4a:	0e09      	lsrs	r1, r1, #24
 8002d4c:	1c4b      	adds	r3, r1, #1
 8002d4e:	b570      	push	{r4, r5, r6, lr}
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	0246      	lsls	r6, r0, #9
 8002d54:	0a75      	lsrs	r5, r6, #9
 8002d56:	0fc4      	lsrs	r4, r0, #31
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	dd14      	ble.n	8002d86 <__aeabi_f2d+0x3e>
 8002d5c:	23e0      	movs	r3, #224	; 0xe0
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	076d      	lsls	r5, r5, #29
 8002d62:	0b36      	lsrs	r6, r6, #12
 8002d64:	18cb      	adds	r3, r1, r3
 8002d66:	2100      	movs	r1, #0
 8002d68:	0d0a      	lsrs	r2, r1, #20
 8002d6a:	0028      	movs	r0, r5
 8002d6c:	0512      	lsls	r2, r2, #20
 8002d6e:	4d1c      	ldr	r5, [pc, #112]	; (8002de0 <__aeabi_f2d+0x98>)
 8002d70:	4332      	orrs	r2, r6
 8002d72:	055b      	lsls	r3, r3, #21
 8002d74:	402a      	ands	r2, r5
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	07e4      	lsls	r4, r4, #31
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	4323      	orrs	r3, r4
 8002d82:	0019      	movs	r1, r3
 8002d84:	bd70      	pop	{r4, r5, r6, pc}
 8002d86:	2900      	cmp	r1, #0
 8002d88:	d114      	bne.n	8002db4 <__aeabi_f2d+0x6c>
 8002d8a:	2d00      	cmp	r5, #0
 8002d8c:	d01e      	beq.n	8002dcc <__aeabi_f2d+0x84>
 8002d8e:	0028      	movs	r0, r5
 8002d90:	f000 f8b0 	bl	8002ef4 <__clzsi2>
 8002d94:	280a      	cmp	r0, #10
 8002d96:	dc1c      	bgt.n	8002dd2 <__aeabi_f2d+0x8a>
 8002d98:	230b      	movs	r3, #11
 8002d9a:	002a      	movs	r2, r5
 8002d9c:	1a1b      	subs	r3, r3, r0
 8002d9e:	40da      	lsrs	r2, r3
 8002da0:	0003      	movs	r3, r0
 8002da2:	3315      	adds	r3, #21
 8002da4:	409d      	lsls	r5, r3
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <__aeabi_f2d+0x9c>)
 8002da8:	0312      	lsls	r2, r2, #12
 8002daa:	1a1b      	subs	r3, r3, r0
 8002dac:	055b      	lsls	r3, r3, #21
 8002dae:	0b16      	lsrs	r6, r2, #12
 8002db0:	0d5b      	lsrs	r3, r3, #21
 8002db2:	e7d8      	b.n	8002d66 <__aeabi_f2d+0x1e>
 8002db4:	2d00      	cmp	r5, #0
 8002db6:	d006      	beq.n	8002dc6 <__aeabi_f2d+0x7e>
 8002db8:	0b32      	lsrs	r2, r6, #12
 8002dba:	2680      	movs	r6, #128	; 0x80
 8002dbc:	0336      	lsls	r6, r6, #12
 8002dbe:	076d      	lsls	r5, r5, #29
 8002dc0:	4316      	orrs	r6, r2
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <__aeabi_f2d+0xa0>)
 8002dc4:	e7cf      	b.n	8002d66 <__aeabi_f2d+0x1e>
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <__aeabi_f2d+0xa0>)
 8002dc8:	2600      	movs	r6, #0
 8002dca:	e7cc      	b.n	8002d66 <__aeabi_f2d+0x1e>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2600      	movs	r6, #0
 8002dd0:	e7c9      	b.n	8002d66 <__aeabi_f2d+0x1e>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	002a      	movs	r2, r5
 8002dd6:	3b0b      	subs	r3, #11
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	2500      	movs	r5, #0
 8002ddc:	e7e3      	b.n	8002da6 <__aeabi_f2d+0x5e>
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	800fffff 	.word	0x800fffff
 8002de4:	00000389 	.word	0x00000389
 8002de8:	000007ff 	.word	0x000007ff

08002dec <__aeabi_d2f>:
 8002dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dee:	004c      	lsls	r4, r1, #1
 8002df0:	0d64      	lsrs	r4, r4, #21
 8002df2:	030b      	lsls	r3, r1, #12
 8002df4:	1c62      	adds	r2, r4, #1
 8002df6:	0a5b      	lsrs	r3, r3, #9
 8002df8:	0f46      	lsrs	r6, r0, #29
 8002dfa:	0552      	lsls	r2, r2, #21
 8002dfc:	0fc9      	lsrs	r1, r1, #31
 8002dfe:	431e      	orrs	r6, r3
 8002e00:	00c5      	lsls	r5, r0, #3
 8002e02:	0d52      	lsrs	r2, r2, #21
 8002e04:	2a01      	cmp	r2, #1
 8002e06:	dd29      	ble.n	8002e5c <__aeabi_d2f+0x70>
 8002e08:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <__aeabi_d2f+0xfc>)
 8002e0a:	18e7      	adds	r7, r4, r3
 8002e0c:	2ffe      	cmp	r7, #254	; 0xfe
 8002e0e:	dc1c      	bgt.n	8002e4a <__aeabi_d2f+0x5e>
 8002e10:	2f00      	cmp	r7, #0
 8002e12:	dd3b      	ble.n	8002e8c <__aeabi_d2f+0xa0>
 8002e14:	0180      	lsls	r0, r0, #6
 8002e16:	1e43      	subs	r3, r0, #1
 8002e18:	4198      	sbcs	r0, r3
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	00f3      	lsls	r3, r6, #3
 8002e1e:	0f6d      	lsrs	r5, r5, #29
 8002e20:	4303      	orrs	r3, r0
 8002e22:	432b      	orrs	r3, r5
 8002e24:	401a      	ands	r2, r3
 8002e26:	2a00      	cmp	r2, #0
 8002e28:	d004      	beq.n	8002e34 <__aeabi_d2f+0x48>
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	2a04      	cmp	r2, #4
 8002e30:	d000      	beq.n	8002e34 <__aeabi_d2f+0x48>
 8002e32:	3304      	adds	r3, #4
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	04d2      	lsls	r2, r2, #19
 8002e38:	401a      	ands	r2, r3
 8002e3a:	d024      	beq.n	8002e86 <__aeabi_d2f+0x9a>
 8002e3c:	3701      	adds	r7, #1
 8002e3e:	b2fa      	uxtb	r2, r7
 8002e40:	2fff      	cmp	r7, #255	; 0xff
 8002e42:	d002      	beq.n	8002e4a <__aeabi_d2f+0x5e>
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	0a58      	lsrs	r0, r3, #9
 8002e48:	e001      	b.n	8002e4e <__aeabi_d2f+0x62>
 8002e4a:	22ff      	movs	r2, #255	; 0xff
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	0240      	lsls	r0, r0, #9
 8002e50:	05d2      	lsls	r2, r2, #23
 8002e52:	0a40      	lsrs	r0, r0, #9
 8002e54:	07c9      	lsls	r1, r1, #31
 8002e56:	4310      	orrs	r0, r2
 8002e58:	4308      	orrs	r0, r1
 8002e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5c:	4335      	orrs	r5, r6
 8002e5e:	2c00      	cmp	r4, #0
 8002e60:	d104      	bne.n	8002e6c <__aeabi_d2f+0x80>
 8002e62:	2d00      	cmp	r5, #0
 8002e64:	d10a      	bne.n	8002e7c <__aeabi_d2f+0x90>
 8002e66:	2200      	movs	r2, #0
 8002e68:	2000      	movs	r0, #0
 8002e6a:	e7f0      	b.n	8002e4e <__aeabi_d2f+0x62>
 8002e6c:	2d00      	cmp	r5, #0
 8002e6e:	d0ec      	beq.n	8002e4a <__aeabi_d2f+0x5e>
 8002e70:	2080      	movs	r0, #128	; 0x80
 8002e72:	03c0      	lsls	r0, r0, #15
 8002e74:	4330      	orrs	r0, r6
 8002e76:	22ff      	movs	r2, #255	; 0xff
 8002e78:	e7e9      	b.n	8002e4e <__aeabi_d2f+0x62>
 8002e7a:	2400      	movs	r4, #0
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	025b      	lsls	r3, r3, #9
 8002e80:	0a58      	lsrs	r0, r3, #9
 8002e82:	b2e2      	uxtb	r2, r4
 8002e84:	e7e3      	b.n	8002e4e <__aeabi_d2f+0x62>
 8002e86:	08db      	lsrs	r3, r3, #3
 8002e88:	003c      	movs	r4, r7
 8002e8a:	e7f8      	b.n	8002e7e <__aeabi_d2f+0x92>
 8002e8c:	003b      	movs	r3, r7
 8002e8e:	3317      	adds	r3, #23
 8002e90:	dbf3      	blt.n	8002e7a <__aeabi_d2f+0x8e>
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	4333      	orrs	r3, r6
 8002e98:	261e      	movs	r6, #30
 8002e9a:	1bf6      	subs	r6, r6, r7
 8002e9c:	2e1f      	cmp	r6, #31
 8002e9e:	dd14      	ble.n	8002eca <__aeabi_d2f+0xde>
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4252      	negs	r2, r2
 8002ea4:	1bd7      	subs	r7, r2, r7
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	40fa      	lsrs	r2, r7
 8002eaa:	0017      	movs	r7, r2
 8002eac:	2e20      	cmp	r6, #32
 8002eae:	d004      	beq.n	8002eba <__aeabi_d2f+0xce>
 8002eb0:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <__aeabi_d2f+0x100>)
 8002eb2:	4694      	mov	ip, r2
 8002eb4:	4464      	add	r4, ip
 8002eb6:	40a3      	lsls	r3, r4
 8002eb8:	431d      	orrs	r5, r3
 8002eba:	002b      	movs	r3, r5
 8002ebc:	1e5d      	subs	r5, r3, #1
 8002ebe:	41ab      	sbcs	r3, r5
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	433b      	orrs	r3, r7
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	2700      	movs	r7, #0
 8002ec8:	e7ad      	b.n	8002e26 <__aeabi_d2f+0x3a>
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <__aeabi_d2f+0x104>)
 8002ecc:	0028      	movs	r0, r5
 8002ece:	18a2      	adds	r2, r4, r2
 8002ed0:	4095      	lsls	r5, r2
 8002ed2:	4093      	lsls	r3, r2
 8002ed4:	1e6c      	subs	r4, r5, #1
 8002ed6:	41a5      	sbcs	r5, r4
 8002ed8:	40f0      	lsrs	r0, r6
 8002eda:	2207      	movs	r2, #7
 8002edc:	432b      	orrs	r3, r5
 8002ede:	4303      	orrs	r3, r0
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	2700      	movs	r7, #0
 8002ee4:	e79f      	b.n	8002e26 <__aeabi_d2f+0x3a>
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	fffffc80 	.word	0xfffffc80
 8002eec:	fffffca2 	.word	0xfffffca2
 8002ef0:	fffffc82 	.word	0xfffffc82

08002ef4 <__clzsi2>:
 8002ef4:	211c      	movs	r1, #28
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	4298      	cmp	r0, r3
 8002efc:	d301      	bcc.n	8002f02 <__clzsi2+0xe>
 8002efe:	0c00      	lsrs	r0, r0, #16
 8002f00:	3910      	subs	r1, #16
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	4298      	cmp	r0, r3
 8002f06:	d301      	bcc.n	8002f0c <__clzsi2+0x18>
 8002f08:	0a00      	lsrs	r0, r0, #8
 8002f0a:	3908      	subs	r1, #8
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	4298      	cmp	r0, r3
 8002f10:	d301      	bcc.n	8002f16 <__clzsi2+0x22>
 8002f12:	0900      	lsrs	r0, r0, #4
 8002f14:	3904      	subs	r1, #4
 8002f16:	a202      	add	r2, pc, #8	; (adr r2, 8002f20 <__clzsi2+0x2c>)
 8002f18:	5c10      	ldrb	r0, [r2, r0]
 8002f1a:	1840      	adds	r0, r0, r1
 8002f1c:	4770      	bx	lr
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	02020304 	.word	0x02020304
 8002f24:	01010101 	.word	0x01010101
	...

08002f30 <__clzdi2>:
 8002f30:	b510      	push	{r4, lr}
 8002f32:	2900      	cmp	r1, #0
 8002f34:	d103      	bne.n	8002f3e <__clzdi2+0xe>
 8002f36:	f7ff ffdd 	bl	8002ef4 <__clzsi2>
 8002f3a:	3020      	adds	r0, #32
 8002f3c:	e002      	b.n	8002f44 <__clzdi2+0x14>
 8002f3e:	1c08      	adds	r0, r1, #0
 8002f40:	f7ff ffd8 	bl	8002ef4 <__clzsi2>
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)

08002f48 <Send_BOS_Message>:
 *New private function [inside SendMessageFromPort() ] for sending BOS Messages.
 *instead of writePxDMAMutex (the previous function)
 */

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout)
{
 8002f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4a:	46c6      	mov	lr, r8
 8002f4c:	b500      	push	{lr}
 8002f4e:	0006      	movs	r6, r0
 8002f50:	000d      	movs	r5, r1
 8002f52:	4690      	mov	r8, r2
 8002f54:	001c      	movs	r4, r3
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL){
 8002f56:	f00a fe9d 	bl	800dc94 <GetUart>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	d01c      	beq.n	8002f98 <Send_BOS_Message+0x50>
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <Send_BOS_Message+0x60>)
 8002f60:	00b2      	lsls	r2, r6, #2
 8002f62:	58d0      	ldr	r0, [r2, r3]
 8002f64:	0021      	movs	r1, r4
 8002f66:	f00b f80d 	bl	800df84 <osSemaphoreWait>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d114      	bne.n	8002f98 <Send_BOS_Message+0x50>
			for(uint8_t i=0;i<n;i++)
 8002f6e:	4643      	mov	r3, r8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d011      	beq.n	8002f98 <Send_BOS_Message+0x50>
 8002f74:	2400      	movs	r4, #0
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002f76:	0030      	movs	r0, r6
 8002f78:	f00a fe8c 	bl	800dc94 <GetUart>
 8002f7c:	0029      	movs	r1, r5
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f00f fdaa 	bl	8012ad8 <HAL_UART_Transmit_IT>
			for(uint8_t i=0;i<n;i++)
 8002f84:	3401      	adds	r4, #1
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002f86:	0007      	movs	r7, r0
			for(uint8_t i=0;i<n;i++)
 8002f88:	b2e4      	uxtb	r4, r4
				buffer++;
				//Delay_us(500);
				Delay_ms(2);
 8002f8a:	2002      	movs	r0, #2
				buffer++;
 8002f8c:	3501      	adds	r5, #1
				Delay_ms(2);
 8002f8e:	f00c fe5f 	bl	800fc50 <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002f92:	4544      	cmp	r4, r8
 8002f94:	d3ef      	bcc.n	8002f76 <Send_BOS_Message+0x2e>
 8002f96:	e000      	b.n	8002f9a <Send_BOS_Message+0x52>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002f98:	2701      	movs	r7, #1
			}
		}
	}
	Delay_ms(10);// Delay Between Sending Two Messages.
 8002f9a:	200a      	movs	r0, #10
 8002f9c:	f00c fe58 	bl	800fc50 <HAL_Delay>
	return result;
}
 8002fa0:	0038      	movs	r0, r7
 8002fa2:	bc04      	pop	{r2}
 8002fa4:	4690      	mov	r8, r2
 8002fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa8:	20006900 	.word	0x20006900

08002fac <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002fae:	4b22      	ldr	r3, [pc, #136]	; (8003038 <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002fb0:	4a22      	ldr	r2, [pc, #136]	; (800303c <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002fb2:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002fb4:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002fb6:	b29b      	uxth	r3, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d035      	beq.n	8003028 <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002fbc:	0a1e      	lsrs	r6, r3, #8
		if(N == 0)
 8002fbe:	d02c      	beq.n	800301a <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002fc0:	4a1f      	ldr	r2, [pc, #124]	; (8003040 <LoadROtopology+0x94>)
 8002fc2:	b2f6      	uxtb	r6, r6
 8002fc4:	7016      	strb	r6, [r2, #0]
			N =1;
		myID =(uint8_t )temp;
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <LoadROtopology+0x98>)
 8002fc8:	7013      	strb	r3, [r2, #0]
 8002fca:	466b      	mov	r3, sp
 8002fcc:	1dd9      	adds	r1, r3, #7
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fce:	2300      	movs	r3, #0
		myID =(uint8_t )temp;
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	2401      	movs	r4, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fd4:	469c      	mov	ip, r3
 8002fd6:	4d1c      	ldr	r5, [pc, #112]	; (8003048 <LoadROtopology+0x9c>)
 8002fd8:	4663      	mov	r3, ip
 8002fda:	700b      	strb	r3, [r1, #0]
 8002fdc:	780b      	ldrb	r3, [r1, #0]
 8002fde:	2b0a      	cmp	r3, #10
 8002fe0:	d814      	bhi.n	800300c <LoadROtopology+0x60>
 8002fe2:	1e63      	subs	r3, r4, #1
 8002fe4:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002fe6:	18c0      	adds	r0, r0, r3
 8002fe8:	0040      	lsls	r0, r0, #1
 8002fea:	18c0      	adds	r0, r0, r3
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <LoadROtopology+0x8c>)
 8002fee:	18d7      	adds	r7, r2, r3
 8002ff0:	780b      	ldrb	r3, [r1, #0]
 8002ff2:	883f      	ldrh	r7, [r7, #0]
 8002ff4:	18c3      	adds	r3, r0, r3
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	52ef      	strh	r7, [r5, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002ffa:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002ffc:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002ffe:	3301      	adds	r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	700b      	strb	r3, [r1, #0]
 8003004:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8003006:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8003008:	2b0a      	cmp	r3, #10
 800300a:	d9ef      	bls.n	8002fec <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 800300c:	3401      	adds	r4, #1
 800300e:	b2e4      	uxtb	r4, r4
 8003010:	42b4      	cmp	r4, r6
 8003012:	d9e1      	bls.n	8002fd8 <LoadROtopology+0x2c>
 8003014:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8003016:	b003      	add	sp, #12
 8003018:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 800301a:	2101      	movs	r1, #1
 800301c:	4a08      	ldr	r2, [pc, #32]	; (8003040 <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 800301e:	2601      	movs	r6, #1
			N =1;
 8003020:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8003022:	4a08      	ldr	r2, [pc, #32]	; (8003044 <LoadROtopology+0x98>)
 8003024:	7013      	strb	r3, [r2, #0]
 8003026:	e7d0      	b.n	8002fca <LoadROtopology+0x1e>
		N =1;
 8003028:	2201      	movs	r2, #1
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 800302c:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 800302e:	701a      	strb	r2, [r3, #0]
		myID =0;
 8003030:	2200      	movs	r2, #0
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <LoadROtopology+0x98>)
 8003034:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003036:	e7ee      	b.n	8003016 <LoadROtopology+0x6a>
 8003038:	0801d800 	.word	0x0801d800
 800303c:	0000ffff 	.word	0x0000ffff
 8003040:	20000010 	.word	0x20000010
 8003044:	20000aa8 	.word	0x20000aa8
 8003048:	20000ee4 	.word	0x20000ee4

0800304c <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 800304c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304e:	46c6      	mov	lr, r8
 8003050:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003052:	4e0f      	ldr	r6, [pc, #60]	; (8003090 <LoadEEportsDir+0x44>)
 8003054:	7833      	ldrb	r3, [r6, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d016      	beq.n	8003088 <LoadEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 800305a:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 800305c:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800305e:	4698      	mov	r8, r3
 8003060:	4f0c      	ldr	r7, [pc, #48]	; (8003094 <LoadEEportsDir+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8003062:	1e61      	subs	r1, r4, #1
 8003064:	0049      	lsls	r1, r1, #1
 8003066:	1c65      	adds	r5, r4, #1
 8003068:	1879      	adds	r1, r7, r1
 800306a:	b2a8      	uxth	r0, r5
 800306c:	f008 fcde 	bl	800ba2c <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003070:	2c19      	cmp	r4, #25
 8003072:	d901      	bls.n	8003078 <LoadEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8003074:	230a      	movs	r3, #10
 8003076:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003078:	7833      	ldrb	r3, [r6, #0]
 800307a:	b2ec      	uxtb	r4, r5
 800307c:	42a3      	cmp	r3, r4
 800307e:	d2f0      	bcs.n	8003062 <LoadEEportsDir+0x16>
	}
	
	return result;
}
 8003080:	4640      	mov	r0, r8
 8003082:	bc04      	pop	{r2}
 8003084:	4690      	mov	r8, r2
 8003086:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	4698      	mov	r8, r3
 800308c:	e7f8      	b.n	8003080 <LoadEEportsDir+0x34>
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	20000010 	.word	0x20000010
 8003094:	20006d3c 	.word	0x20006d3c

08003098 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8003098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309a:	464e      	mov	r6, r9
 800309c:	46de      	mov	lr, fp
 800309e:	4657      	mov	r7, sl
 80030a0:	4645      	mov	r5, r8
 80030a2:	b5e0      	push	{r5, r6, r7, lr}
 80030a4:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80030a6:	466b      	mov	r3, sp
 80030a8:	1d9e      	adds	r6, r3, #6
 80030aa:	2300      	movs	r3, #0
 80030ac:	8033      	strh	r3, [r6, #0]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80030ae:	4698      	mov	r8, r3
 80030b0:	4b17      	ldr	r3, [pc, #92]	; (8003110 <LoadEEalias+0x78>)
	uint16_t add =0, temp =0;
 80030b2:	241c      	movs	r4, #28
 80030b4:	469a      	mov	sl, r3
 80030b6:	4b17      	ldr	r3, [pc, #92]	; (8003114 <LoadEEalias+0x7c>)
 80030b8:	469b      	mov	fp, r3
 80030ba:	4643      	mov	r3, r8
 80030bc:	009f      	lsls	r7, r3, #2
 80030be:	18fd      	adds	r5, r7, r3
 80030c0:	1d63      	adds	r3, r4, #5
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	4699      	mov	r9, r3
 80030c6:	006d      	lsls	r5, r5, #1
 80030c8:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 80030ca:	0020      	movs	r0, r4
 80030cc:	0031      	movs	r1, r6
 80030ce:	f008 fcad 	bl	800ba2c <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 80030d2:	8833      	ldrh	r3, [r6, #0]
 80030d4:	3401      	adds	r4, #1
 80030d6:	706b      	strb	r3, [r5, #1]
 80030d8:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	702b      	strb	r3, [r5, #0]
 80030de:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80030e0:	454c      	cmp	r4, r9
 80030e2:	d1f2      	bne.n	80030ca <LoadEEalias+0x32>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 80030e4:	2300      	movs	r3, #0
 80030e6:	4447      	add	r7, r8
 80030e8:	007f      	lsls	r7, r7, #1
 80030ea:	4457      	add	r7, sl
 80030ec:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80030ee:	4643      	mov	r3, r8
 80030f0:	3301      	adds	r3, #1
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4698      	mov	r8, r3
 80030f6:	465b      	mov	r3, fp
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	4543      	cmp	r3, r8
 80030fc:	d2dd      	bcs.n	80030ba <LoadEEalias+0x22>
	}
	
	return result;
}
 80030fe:	2000      	movs	r0, #0
 8003100:	b003      	add	sp, #12
 8003102:	bc3c      	pop	{r2, r3, r4, r5}
 8003104:	4690      	mov	r8, r2
 8003106:	4699      	mov	r9, r3
 8003108:	46a2      	mov	sl, r4
 800310a:	46ab      	mov	fp, r5
 800310c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	20000dd4 	.word	0x20000dd4
 8003114:	20000010 	.word	0x20000010

08003118 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	4646      	mov	r6, r8
 800311c:	46d6      	mov	lr, sl
 800311e:	464f      	mov	r7, r9
 8003120:	b5c0      	push	{r6, r7, lr}
 8003122:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003124:	466b      	mov	r3, sp
 8003126:	1d9e      	adds	r6, r3, #6
 8003128:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 800312a:	4c22      	ldr	r4, [pc, #136]	; (80031b4 <LoadEEgroup+0x9c>)
	uint16_t add =0, temp =0;
 800312c:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 800312e:	7823      	ldrb	r3, [r4, #0]
	uint16_t add =0, temp =0;
 8003130:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8003132:	2b00      	cmp	r3, #0
 8003134:	d03a      	beq.n	80031ac <LoadEEgroup+0x94>
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <LoadEEgroup+0xa0>)
 8003138:	2100      	movs	r1, #0
 800313a:	4699      	mov	r9, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800313c:	1d1f      	adds	r7, r3, #4
 800313e:	0028      	movs	r0, r5
 8003140:	0049      	lsls	r1, r1, #1
 8003142:	30cb      	adds	r0, #203	; 0xcb
 8003144:	1879      	adds	r1, r7, r1
 8003146:	b280      	uxth	r0, r0
		add++;
 8003148:	3501      	adds	r5, #1
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800314a:	f008 fc6f 	bl	800ba2c <EE_ReadVariable>
		add++;
 800314e:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8003150:	7823      	ldrb	r3, [r4, #0]
 8003152:	b2e9      	uxtb	r1, r5
 8003154:	428b      	cmp	r3, r1
 8003156:	d8f2      	bhi.n	800313e <LoadEEgroup+0x26>
 8003158:	2338      	movs	r3, #56	; 0x38
 800315a:	002c      	movs	r4, r5
 800315c:	35cb      	adds	r5, #203	; 0xcb
 800315e:	469c      	mov	ip, r3
 8003160:	b2ab      	uxth	r3, r5
 8003162:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003164:	2300      	movs	r3, #0
 8003166:	469a      	mov	sl, r3
 8003168:	3499      	adds	r4, #153	; 0x99
 800316a:	44e1      	add	r9, ip
 800316c:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 800316e:	464d      	mov	r5, r9
 8003170:	1d67      	adds	r7, r4, #5
 8003172:	b2bf      	uxth	r7, r7
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8003174:	0020      	movs	r0, r4
 8003176:	0031      	movs	r1, r6
 8003178:	f008 fc58 	bl	800ba2c <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 800317c:	8833      	ldrh	r3, [r6, #0]
 800317e:	3401      	adds	r4, #1
 8003180:	706b      	strb	r3, [r5, #1]
 8003182:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	702b      	strb	r3, [r5, #0]
 8003188:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800318a:	42bc      	cmp	r4, r7
 800318c:	d1f2      	bne.n	8003174 <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 800318e:	464b      	mov	r3, r9
 8003190:	4652      	mov	r2, sl
 8003192:	725a      	strb	r2, [r3, #9]
 8003194:	230a      	movs	r3, #10
 8003196:	469c      	mov	ip, r3
 8003198:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 800319a:	45a0      	cmp	r8, r4
 800319c:	d1e7      	bne.n	800316e <LoadEEgroup+0x56>
	}
	
	return result;
}
 800319e:	2000      	movs	r0, #0
 80031a0:	b002      	add	sp, #8
 80031a2:	bc1c      	pop	{r2, r3, r4}
 80031a4:	4690      	mov	r8, r2
 80031a6:	4699      	mov	r9, r3
 80031a8:	46a2      	mov	sl, r4
 80031aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ac:	4b02      	ldr	r3, [pc, #8]	; (80031b8 <LoadEEgroup+0xa0>)
 80031ae:	4699      	mov	r9, r3
 80031b0:	e7d2      	b.n	8003158 <LoadEEgroup+0x40>
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	20000010 	.word	0x20000010
 80031b8:	20000aa8 	.word	0x20000aa8

080031bc <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 80031bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031be:	46ce      	mov	lr, r9
 80031c0:	4647      	mov	r7, r8
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80031c2:	260e      	movs	r6, #14
 80031c4:	2300      	movs	r3, #0
BOS_Status LoadEEstreams(void){
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b085      	sub	sp, #20
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80031ca:	ac03      	add	r4, sp, #12
 80031cc:	446e      	add	r6, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80031ce:	0021      	movs	r1, r4
 80031d0:	20e4      	movs	r0, #228	; 0xe4
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80031d2:	8023      	strh	r3, [r4, #0]
 80031d4:	8033      	strh	r3, [r6, #0]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80031d6:	f008 fc29 	bl	800ba2c <EE_ReadVariable>
	uint8_t direction =0;
 80031da:	2700      	movs	r7, #0
	if(!status1){
 80031dc:	2800      	cmp	r0, #0
 80031de:	d100      	bne.n	80031e2 <LoadEEstreams+0x26>
		direction =(uint8_t )temp1;
 80031e0:	7827      	ldrb	r7, [r4, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80031e2:	0021      	movs	r1, r4
 80031e4:	20e5      	movs	r0, #229	; 0xe5
 80031e6:	f008 fc21 	bl	800ba2c <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80031ea:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80031ec:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80031ee:	20e6      	movs	r0, #230	; 0xe6
 80031f0:	f008 fc1c 	bl	800ba2c <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 80031f4:	2300      	movs	r3, #0
	if(!status1 && !status2){
 80031f6:	4305      	orrs	r5, r0
 80031f8:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 80031fa:	4698      	mov	r8, r3
	if(!status1 && !status2){
 80031fc:	2d00      	cmp	r5, #0
 80031fe:	d104      	bne.n	800320a <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8003200:	8823      	ldrh	r3, [r4, #0]
 8003202:	8832      	ldrh	r2, [r6, #0]
 8003204:	041b      	lsls	r3, r3, #16
 8003206:	4698      	mov	r8, r3
 8003208:	4490      	add	r8, r2
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 800320a:	0021      	movs	r1, r4
 800320c:	20e7      	movs	r0, #231	; 0xe7
 800320e:	f008 fc0d 	bl	800ba2c <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8003212:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8003214:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8003216:	20e8      	movs	r0, #232	; 0xe8
 8003218:	f008 fc08 	bl	800ba2c <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 800321c:	2300      	movs	r3, #0
	if(!status1 && !status2){
 800321e:	4305      	orrs	r5, r0
 8003220:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8003222:	4699      	mov	r9, r3
	if(!status1 && !status2){
 8003224:	2d00      	cmp	r5, #0
 8003226:	d104      	bne.n	8003232 <LoadEEstreams+0x76>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003228:	8823      	ldrh	r3, [r4, #0]
 800322a:	8832      	ldrh	r2, [r6, #0]
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	4699      	mov	r9, r3
 8003230:	4491      	add	r9, r2
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8003232:	0021      	movs	r1, r4
 8003234:	20e9      	movs	r0, #233	; 0xe9
 8003236:	f008 fbf9 	bl	800ba2c <EE_ReadVariable>
	if(!status1){
 800323a:	2800      	cmp	r0, #0
 800323c:	d030      	beq.n	80032a0 <LoadEEstreams+0xe4>
 800323e:	4d26      	ldr	r5, [pc, #152]	; (80032d8 <LoadEEstreams+0x11c>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8003240:	0021      	movs	r1, r4
 8003242:	20ea      	movs	r0, #234	; 0xea
 8003244:	f008 fbf2 	bl	800ba2c <EE_ReadVariable>
	if(!status1){
 8003248:	2800      	cmp	r0, #0
 800324a:	d103      	bne.n	8003254 <LoadEEstreams+0x98>
		src2 =(uint8_t )(temp1 >> 8);
 800324c:	8823      	ldrh	r3, [r4, #0]
 800324e:	0a1a      	lsrs	r2, r3, #8
 8003250:	77aa      	strb	r2, [r5, #30]
		dst2 =(uint8_t )temp1;
 8003252:	77eb      	strb	r3, [r5, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8003254:	0021      	movs	r1, r4
 8003256:	20eb      	movs	r0, #235	; 0xeb
 8003258:	f008 fbe8 	bl	800ba2c <EE_ReadVariable>
	if(!status1){
 800325c:	2800      	cmp	r0, #0
 800325e:	d105      	bne.n	800326c <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 8003260:	2220      	movs	r2, #32
 8003262:	8823      	ldrh	r3, [r4, #0]
 8003264:	0a19      	lsrs	r1, r3, #8
 8003266:	54a9      	strb	r1, [r5, r2]
		dst3 =(uint8_t )temp1;
 8003268:	3201      	adds	r2, #1
 800326a:	54ab      	strb	r3, [r5, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 800326c:	7f2b      	ldrb	r3, [r5, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <LoadEEstreams+0xbc>
 8003272:	7f6a      	ldrb	r2, [r5, #29]
 8003274:	2a00      	cmp	r2, #0
 8003276:	d120      	bne.n	80032ba <LoadEEstreams+0xfe>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003278:	7fab      	ldrb	r3, [r5, #30]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <LoadEEstreams+0xc8>
 800327e:	7fea      	ldrb	r2, [r5, #31]
 8003280:	2a00      	cmp	r2, #0
 8003282:	d121      	bne.n	80032c8 <LoadEEstreams+0x10c>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003284:	2320      	movs	r3, #32
 8003286:	5ceb      	ldrb	r3, [r5, r3]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <LoadEEstreams+0xd8>
 800328c:	2221      	movs	r2, #33	; 0x21
 800328e:	5caa      	ldrb	r2, [r5, r2]
 8003290:	2a00      	cmp	r2, #0
 8003292:	d10b      	bne.n	80032ac <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003294:	2000      	movs	r0, #0
 8003296:	b005      	add	sp, #20
 8003298:	bc0c      	pop	{r2, r3}
 800329a:	4690      	mov	r8, r2
 800329c:	4699      	mov	r9, r3
 800329e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 80032a0:	8823      	ldrh	r3, [r4, #0]
 80032a2:	4d0d      	ldr	r5, [pc, #52]	; (80032d8 <LoadEEstreams+0x11c>)
 80032a4:	0a1a      	lsrs	r2, r3, #8
 80032a6:	772a      	strb	r2, [r5, #28]
		dst1 =(uint8_t )temp1;
 80032a8:	776b      	strb	r3, [r5, #29]
 80032aa:	e7c9      	b.n	8003240 <LoadEEstreams+0x84>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 80032ac:	9200      	str	r2, [sp, #0]
 80032ae:	4641      	mov	r1, r8
 80032b0:	464a      	mov	r2, r9
 80032b2:	0038      	movs	r0, r7
 80032b4:	f004 fcfc 	bl	8007cb0 <SetupDMAStreams>
 80032b8:	e7ec      	b.n	8003294 <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 80032ba:	9200      	str	r2, [sp, #0]
 80032bc:	4641      	mov	r1, r8
 80032be:	464a      	mov	r2, r9
 80032c0:	0038      	movs	r0, r7
 80032c2:	f004 fcf5 	bl	8007cb0 <SetupDMAStreams>
 80032c6:	e7d7      	b.n	8003278 <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80032c8:	9200      	str	r2, [sp, #0]
 80032ca:	4641      	mov	r1, r8
 80032cc:	464a      	mov	r2, r9
 80032ce:	0038      	movs	r0, r7
 80032d0:	f004 fcee 	bl	8007cb0 <SetupDMAStreams>
 80032d4:	e7d6      	b.n	8003284 <LoadEEstreams+0xc8>
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	20000b28 	.word	0x20000b28

080032dc <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80032dc:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 80032de:	b570      	push	{r4, r5, r6, lr}
 80032e0:	b082      	sub	sp, #8
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80032e2:	ac01      	add	r4, sp, #4
 80032e4:	0021      	movs	r1, r4
 80032e6:	0040      	lsls	r0, r0, #1
 80032e8:	f008 fba0 	bl	800ba2c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d15d      	bne.n	80033ac <LoadEEparams+0xd0>
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80032f0:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 80032f2:	8823      	ldrh	r3, [r4, #0]
 80032f4:	4d54      	ldr	r5, [pc, #336]	; (8003448 <LoadEEparams+0x16c>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80032f6:	0021      	movs	r1, r4
		BOSMessaging.response =(uint8_t )temp1;
 80032f8:	702b      	strb	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80032fa:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003300:	f008 fb94 	bl	800ba2c <EE_ReadVariable>

	if(!status1){
 8003304:	2800      	cmp	r0, #0
 8003306:	d15e      	bne.n	80033c6 <LoadEEparams+0xea>
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003308:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 800330a:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800330c:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 800330e:	0bda      	lsrs	r2, r3, #15
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003310:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8003312:	085b      	lsrs	r3, r3, #1
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003314:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8003316:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003318:	f008 fb88 	bl	800ba2c <EE_ReadVariable>
	if(!status1)
		BOS.buttons.debounce =temp1;
 800331c:	4d4b      	ldr	r5, [pc, #300]	; (800344c <LoadEEparams+0x170>)
	if(!status1)
 800331e:	2800      	cmp	r0, #0
 8003320:	d15e      	bne.n	80033e0 <LoadEEparams+0x104>
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003322:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 8003324:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003326:	0021      	movs	r1, r4
 8003328:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =temp1;
 800332a:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800332c:	f008 fb7e 	bl	800ba2c <EE_ReadVariable>
	if(!status1)
 8003330:	2800      	cmp	r0, #0
 8003332:	d15f      	bne.n	80033f4 <LoadEEparams+0x118>
		BOS.buttons.singleClickTime =temp1;
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003334:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 8003336:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003338:	0021      	movs	r1, r4
 800333a:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =temp1;
 800333c:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800333e:	f008 fb75 	bl	800ba2c <EE_ReadVariable>
	if(!status1){
 8003342:	2800      	cmp	r0, #0
 8003344:	d160      	bne.n	8003408 <LoadEEparams+0x12c>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003346:	8823      	ldrh	r3, [r4, #0]
 8003348:	712b      	strb	r3, [r5, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	716b      	strb	r3, [r5, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800334e:	208c      	movs	r0, #140	; 0x8c
 8003350:	0021      	movs	r1, r4
 8003352:	0040      	lsls	r0, r0, #1
 8003354:	f008 fb6a 	bl	800ba2c <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003358:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800335a:	0006      	movs	r6, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800335c:	201a      	movs	r0, #26
 800335e:	1d99      	adds	r1, r3, #6
 8003360:	30ff      	adds	r0, #255	; 0xff
 8003362:	f008 fb63 	bl	800ba2c <EE_ReadVariable>
	if(!status1 && !status2){
 8003366:	4306      	orrs	r6, r0
 8003368:	b2b6      	uxth	r6, r6
 800336a:	2e00      	cmp	r6, #0
 800336c:	d15f      	bne.n	800342e <LoadEEparams+0x152>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 800336e:	466b      	mov	r3, sp
 8003370:	88db      	ldrh	r3, [r3, #6]
 8003372:	8822      	ldrh	r2, [r4, #0]
 8003374:	041b      	lsls	r3, r3, #16
 8003376:	4313      	orrs	r3, r2
 8003378:	60ab      	str	r3, [r5, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 800337a:	208d      	movs	r0, #141	; 0x8d
 800337c:	0021      	movs	r1, r4
 800337e:	0040      	lsls	r0, r0, #1
 8003380:	f008 fb54 	bl	800ba2c <EE_ReadVariable>
	if(!status1){
 8003384:	2800      	cmp	r0, #0
 8003386:	d145      	bne.n	8003414 <LoadEEparams+0x138>
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003388:	201c      	movs	r0, #28
		BOS.daylightsaving =(int8_t )temp1;
 800338a:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800338c:	0021      	movs	r1, r4
		BOS.daylightsaving =(int8_t )temp1;
 800338e:	732b      	strb	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003390:	30ff      	adds	r0, #255	; 0xff
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	736b      	strb	r3, [r5, #13]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003396:	f008 fb49 	bl	800ba2c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800339a:	2800      	cmp	r0, #0
 800339c:	d044      	beq.n	8003428 <LoadEEparams+0x14c>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 800339e:	2326      	movs	r3, #38	; 0x26
 80033a0:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <LoadEEparams+0x174>)
 80033a2:	5cd3      	ldrb	r3, [r2, r3]
 80033a4:	76ab      	strb	r3, [r5, #26]
	}
	
	return result;
}
 80033a6:	2000      	movs	r0, #0
 80033a8:	b002      	add	sp, #8
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80033ac:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 80033ae:	4b28      	ldr	r3, [pc, #160]	; (8003450 <LoadEEparams+0x174>)
 80033b0:	4d25      	ldr	r5, [pc, #148]	; (8003448 <LoadEEparams+0x16c>)
 80033b2:	791a      	ldrb	r2, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80033b4:	0021      	movs	r1, r4
		BOSMessaging.response =BOSMessging_default.response;
 80033b6:	702a      	strb	r2, [r5, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 80033b8:	795b      	ldrb	r3, [r3, #5]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80033ba:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =BOSMessging_default.trace;
 80033bc:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80033be:	f008 fb35 	bl	800ba2c <EE_ReadVariable>
	if(!status1){
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d0a0      	beq.n	8003308 <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033c6:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80033c8:	4b21      	ldr	r3, [pc, #132]	; (8003450 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033ca:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80033cc:	7a1a      	ldrb	r2, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033ce:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80033d0:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80033d2:	895b      	ldrh	r3, [r3, #10]
 80033d4:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033d6:	f008 fb29 	bl	800ba2c <EE_ReadVariable>
		BOS.buttons.debounce =temp1;
 80033da:	4d1c      	ldr	r5, [pc, #112]	; (800344c <LoadEEparams+0x170>)
	if(!status1)
 80033dc:	2800      	cmp	r0, #0
 80033de:	d0a0      	beq.n	8003322 <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80033e0:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80033e4:	0021      	movs	r1, r4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80033e6:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80033e8:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80033ea:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80033ec:	f008 fb1e 	bl	800ba2c <EE_ReadVariable>
	if(!status1)
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d09f      	beq.n	8003334 <LoadEEparams+0x58>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80033f4:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80033f8:	0021      	movs	r1, r4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80033fa:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80033fc:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80033fe:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003400:	f008 fb14 	bl	800ba2c <EE_ReadVariable>
	if(!status1){
 8003404:	2800      	cmp	r0, #0
 8003406:	d09e      	beq.n	8003346 <LoadEEparams+0x6a>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <LoadEEparams+0x174>)
 800340a:	7c1a      	ldrb	r2, [r3, #16]
 800340c:	712a      	strb	r2, [r5, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 800340e:	7c5b      	ldrb	r3, [r3, #17]
 8003410:	716b      	strb	r3, [r5, #5]
 8003412:	e79c      	b.n	800334e <LoadEEparams+0x72>
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003414:	23c0      	movs	r3, #192	; 0xc0
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003416:	201c      	movs	r0, #28
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003418:	015b      	lsls	r3, r3, #5
 800341a:	81ab      	strh	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800341c:	0021      	movs	r1, r4
 800341e:	30ff      	adds	r0, #255	; 0xff
 8003420:	f008 fb04 	bl	800ba2c <EE_ReadVariable>
	if(!status1){
 8003424:	2800      	cmp	r0, #0
 8003426:	d1ba      	bne.n	800339e <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 8003428:	8823      	ldrh	r3, [r4, #0]
 800342a:	76ab      	strb	r3, [r5, #26]
 800342c:	e7bb      	b.n	80033a6 <LoadEEparams+0xca>
	else if(CLI_LOW_Baudrate_Flag)
 800342e:	2322      	movs	r3, #34	; 0x22
 8003430:	4a08      	ldr	r2, [pc, #32]	; (8003454 <LoadEEparams+0x178>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <LoadEEparams+0x164>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003438:	23e1      	movs	r3, #225	; 0xe1
 800343a:	025b      	lsls	r3, r3, #9
 800343c:	60ab      	str	r3, [r5, #8]
 800343e:	e79c      	b.n	800337a <LoadEEparams+0x9e>
		BOS.clibaudrate =BOS_default.clibaudrate;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <LoadEEparams+0x174>)
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	60ab      	str	r3, [r5, #8]
 8003446:	e798      	b.n	800337a <LoadEEparams+0x9e>
 8003448:	200067fc 	.word	0x200067fc
 800344c:	2000687c 	.word	0x2000687c
 8003450:	20000010 	.word	0x20000010
 8003454:	20000b28 	.word	0x20000b28

08003458 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345a:	46de      	mov	lr, fp
 800345c:	4657      	mov	r7, sl
 800345e:	464e      	mov	r6, r9
 8003460:	4645      	mov	r5, r8
 8003462:	b5e0      	push	{r5, r6, r7, lr}
 8003464:	b08b      	sub	sp, #44	; 0x2c
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003466:	ab02      	add	r3, sp, #8
 8003468:	469c      	mov	ip, r3
 800346a:	261e      	movs	r6, #30
 800346c:	2300      	movs	r3, #0
 800346e:	4466      	add	r6, ip
 8003470:	8033      	strh	r3, [r6, #0]
 8003472:	330f      	adds	r3, #15
 8003474:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003476:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 8003478:	2501      	movs	r5, #1
 800347a:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800347c:	469b      	mov	fp, r3
 800347e:	e004      	b.n	800348a <LoadEEbuttons+0x32>
 8003480:	3404      	adds	r4, #4
 8003482:	3501      	adds	r5, #1
 8003484:	b2a4      	uxth	r4, r4
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003486:	2d07      	cmp	r5, #7
 8003488:	d05e      	beq.n	8003548 <LoadEEbuttons+0xf0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800348a:	0031      	movs	r1, r6
 800348c:	0020      	movs	r0, r4
 800348e:	f008 facd 	bl	800ba2c <EE_ReadVariable>
 8003492:	b2eb      	uxtb	r3, r5
 8003494:	1e07      	subs	r7, r0, #0
 8003496:	4699      	mov	r9, r3
		if(!status1)									// This variable exists
 8003498:	d1f2      	bne.n	8003480 <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 800349a:	8832      	ldrh	r2, [r6, #0]
 800349c:	0a13      	lsrs	r3, r2, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800349e:	0919      	lsrs	r1, r3, #4
 80034a0:	42a9      	cmp	r1, r5
 80034a2:	d1ed      	bne.n	8003480 <LoadEEbuttons+0x28>
 80034a4:	4651      	mov	r1, sl
 80034a6:	400b      	ands	r3, r1
 80034a8:	d0ea      	beq.n	8003480 <LoadEEbuttons+0x28>
				button[i + 1].type =temp8 & 0x0F;
 80034aa:	482b      	ldr	r0, [pc, #172]	; (8003558 <LoadEEbuttons+0x100>)
 80034ac:	00e9      	lsls	r1, r5, #3
 80034ae:	4680      	mov	r8, r0
 80034b0:	1949      	adds	r1, r1, r5
 80034b2:	4488      	add	r8, r1
 80034b4:	4641      	mov	r1, r8
 80034b6:	00a8      	lsls	r0, r5, #2
 80034b8:	704b      	strb	r3, [r1, #1]
 80034ba:	b283      	uxth	r3, r0
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80034bc:	0018      	movs	r0, r3
 80034be:	30e9      	adds	r0, #233	; 0xe9
				button[i + 1].events =(uint8_t )temp16;
 80034c0:	720a      	strb	r2, [r1, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80034c2:	b280      	uxth	r0, r0
 80034c4:	0031      	movs	r1, r6
 80034c6:	9307      	str	r3, [sp, #28]
 80034c8:	f008 fab0 	bl	800ba2c <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80034cc:	4641      	mov	r1, r8
 80034ce:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80034d0:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80034d2:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80034d4:	30ea      	adds	r0, #234	; 0xea
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80034d6:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80034d8:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80034da:	b280      	uxth	r0, r0
 80034dc:	0031      	movs	r1, r6
 80034de:	f008 faa5 	bl	800ba2c <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80034e2:	4641      	mov	r1, r8
 80034e4:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80034e6:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80034e8:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80034ea:	30eb      	adds	r0, #235	; 0xeb
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80034ec:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80034ee:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80034f0:	b280      	uxth	r0, r0
 80034f2:	0031      	movs	r1, r6
 80034f4:	f008 fa9a 	bl	800ba2c <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80034f8:	4641      	mov	r1, r8
 80034fa:	8833      	ldrh	r3, [r6, #0]
				AddPortButton(button[i + 1].type,i + 1);
 80034fc:	7848      	ldrb	r0, [r1, #1]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80034fe:	0a1a      	lsrs	r2, r3, #8
 8003500:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 8003502:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i + 1].type,i + 1);
 8003504:	4649      	mov	r1, r9
 8003506:	f008 fe41 	bl	800c18c <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800350a:	4643      	mov	r3, r8
 800350c:	4658      	mov	r0, fp
 800350e:	7a19      	ldrb	r1, [r3, #8]
 8003510:	789b      	ldrb	r3, [r3, #2]
 8003512:	104a      	asrs	r2, r1, #1
 8003514:	4002      	ands	r2, r0
 8003516:	4001      	ands	r1, r0
 8003518:	4640      	mov	r0, r8
 800351a:	9705      	str	r7, [sp, #20]
 800351c:	79c0      	ldrb	r0, [r0, #7]
 800351e:	3404      	adds	r4, #4
 8003520:	9004      	str	r0, [sp, #16]
 8003522:	4640      	mov	r0, r8
 8003524:	7980      	ldrb	r0, [r0, #6]
 8003526:	3501      	adds	r5, #1
 8003528:	9003      	str	r0, [sp, #12]
 800352a:	4640      	mov	r0, r8
 800352c:	7940      	ldrb	r0, [r0, #5]
 800352e:	b2a4      	uxth	r4, r4
 8003530:	9002      	str	r0, [sp, #8]
 8003532:	4640      	mov	r0, r8
 8003534:	7900      	ldrb	r0, [r0, #4]
 8003536:	9001      	str	r0, [sp, #4]
 8003538:	4640      	mov	r0, r8
 800353a:	78c0      	ldrb	r0, [r0, #3]
 800353c:	9000      	str	r0, [sp, #0]
 800353e:	4648      	mov	r0, r9
 8003540:	f008 ff2a 	bl	800c398 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003544:	2d07      	cmp	r5, #7
 8003546:	d1a0      	bne.n	800348a <LoadEEbuttons+0x32>
			}
		}
	}
	
	return result;
}
 8003548:	2000      	movs	r0, #0
 800354a:	b00b      	add	sp, #44	; 0x2c
 800354c:	bc3c      	pop	{r2, r3, r4, r5}
 800354e:	4690      	mov	r8, r2
 8003550:	4699      	mov	r9, r3
 8003552:	46a2      	mov	sl, r4
 8003554:	46ab      	mov	fp, r5
 8003556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003558:	200023d8 	.word	0x200023d8

0800355c <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	46de      	mov	lr, fp
 8003560:	4645      	mov	r5, r8
 8003562:	4657      	mov	r7, sl
 8003564:	464e      	mov	r6, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003566:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 8003568:	b5e0      	push	{r5, r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 800356a:	f00f ffcf 	bl	801350c <malloc>
 800356e:	1e05      	subs	r5, r0, #0
	if(snipBuffer == NULL)
 8003570:	d065      	beq.n	800363e <LoadROsnippets+0xe2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 8003572:	4c3b      	ldr	r4, [pc, #236]	; (8003660 <LoadROsnippets+0x104>)
		return BOS_ERROR;
 8003574:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 8003576:	7822      	ldrb	r2, [r4, #0]
 8003578:	2afe      	cmp	r2, #254	; 0xfe
 800357a:	d156      	bne.n	800362a <LoadROsnippets+0xce>
 800357c:	1c6b      	adds	r3, r5, #1
 800357e:	4698      	mov	r8, r3
 8003580:	2364      	movs	r3, #100	; 0x64
 8003582:	4699      	mov	r9, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003584:	4b37      	ldr	r3, [pc, #220]	; (8003664 <LoadROsnippets+0x108>)
 8003586:	4e38      	ldr	r6, [pc, #224]	; (8003668 <LoadROsnippets+0x10c>)
 8003588:	469b      	mov	fp, r3
 800358a:	44b1      	add	r9, r6
 800358c:	0020      	movs	r0, r4
 800358e:	46a2      	mov	sl, r4
 8003590:	3014      	adds	r0, #20
 8003592:	1b29      	subs	r1, r5, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003594:	7822      	ldrb	r2, [r4, #0]
 8003596:	550a      	strb	r2, [r1, r4]
 8003598:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 800359a:	4284      	cmp	r4, r0
 800359c:	d1fa      	bne.n	8003594 <LoadROsnippets+0x38>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800359e:	2214      	movs	r2, #20
 80035a0:	4641      	mov	r1, r8
 80035a2:	0030      	movs	r0, r6
 80035a4:	f010 f9ff 	bl	80139a6 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 80035a8:	2100      	movs	r1, #0
 80035aa:	2214      	movs	r2, #20
 80035ac:	0028      	movs	r0, r5
 80035ae:	f010 fa03 	bl	80139b8 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035b2:	7821      	ldrb	r1, [r4, #0]
 80035b4:	1c8b      	adds	r3, r1, #2
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d942      	bls.n	8003642 <LoadROsnippets+0xe6>
 80035bc:	4657      	mov	r7, sl
 80035be:	0028      	movs	r0, r5
 80035c0:	3746      	adds	r7, #70	; 0x46
		i =0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e002      	b.n	80035cc <LoadROsnippets+0x70>
 80035c6:	3001      	adds	r0, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035c8:	42a7      	cmp	r7, r4
 80035ca:	d034      	beq.n	8003636 <LoadROsnippets+0xda>
			++currentAdd;
 80035cc:	3401      	adds	r4, #1
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80035ce:	7001      	strb	r1, [r0, #0]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035d0:	7821      	ldrb	r1, [r4, #0]
			++i;
 80035d2:	3301      	adds	r3, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035d4:	1c8a      	adds	r2, r1, #2
 80035d6:	b2d2      	uxtb	r2, r2
			++i;
 80035d8:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035da:	2a01      	cmp	r2, #1
 80035dc:	d8f3      	bhi.n	80035c6 <LoadROsnippets+0x6a>
 80035de:	469a      	mov	sl, r3
 80035e0:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 80035e2:	5caa      	ldrb	r2, [r5, r2]
 80035e4:	2a00      	cmp	r2, #0
 80035e6:	d002      	beq.n	80035ee <LoadROsnippets+0x92>
			++i;	// String termination char was not recorded, then add one
 80035e8:	3301      	adds	r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	469a      	mov	sl, r3
		snippets[s].cmd =(char* )malloc(i);
 80035ee:	4650      	mov	r0, sl
 80035f0:	f00f ff8c 	bl	801350c <malloc>
 80035f4:	60f0      	str	r0, [r6, #12]
		if(snippets[s].cmd == NULL){
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d028      	beq.n	800364c <LoadROsnippets+0xf0>
			memcpy(snippets[s].cmd,snipBuffer,i);
 80035fa:	4652      	mov	r2, sl
 80035fc:	0029      	movs	r1, r5
 80035fe:	f010 f9d2 	bl	80139a6 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003602:	465b      	mov	r3, fp
 8003604:	465a      	mov	r2, fp
 8003606:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 8003608:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 800360a:	3301      	adds	r3, #1
 800360c:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 800360e:	0028      	movs	r0, r5
 8003610:	4652      	mov	r2, sl
 8003612:	f010 f9d1 	bl	80139b8 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003616:	7823      	ldrb	r3, [r4, #0]
 8003618:	2bfe      	cmp	r3, #254	; 0xfe
 800361a:	d102      	bne.n	8003622 <LoadROsnippets+0xc6>
 800361c:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 800361e:	45b1      	cmp	r9, r6
 8003620:	d1b4      	bne.n	800358c <LoadROsnippets+0x30>
			break;
	}
	
	free(snipBuffer);
 8003622:	0028      	movs	r0, r5
 8003624:	f00f ff7c 	bl	8013520 <free>
	return BOS_OK;
 8003628:	2000      	movs	r0, #0
}
 800362a:	bc3c      	pop	{r2, r3, r4, r5}
 800362c:	4690      	mov	r8, r2
 800362e:	4699      	mov	r9, r3
 8003630:	46a2      	mov	sl, r4
 8003632:	46ab      	mov	fp, r5
 8003634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003636:	2332      	movs	r3, #50	; 0x32
 8003638:	2231      	movs	r2, #49	; 0x31
 800363a:	469a      	mov	sl, r3
 800363c:	e7d1      	b.n	80035e2 <LoadROsnippets+0x86>
		return BOS_MEM_FULL;
 800363e:	20fb      	movs	r0, #251	; 0xfb
 8003640:	e7f3      	b.n	800362a <LoadROsnippets+0xce>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003642:	2201      	movs	r2, #1
 8003644:	2300      	movs	r3, #0
 8003646:	4252      	negs	r2, r2
 8003648:	469a      	mov	sl, r3
 800364a:	e7ca      	b.n	80035e2 <LoadROsnippets+0x86>
			memset(&snippets[s],0,sizeof(snippet_t));
 800364c:	2214      	movs	r2, #20
 800364e:	2100      	movs	r1, #0
 8003650:	0030      	movs	r0, r6
 8003652:	f010 f9b1 	bl	80139b8 <memset>
			free(snipBuffer);
 8003656:	0028      	movs	r0, r5
 8003658:	f00f ff62 	bl	8013520 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 800365c:	200e      	movs	r0, #14
 800365e:	e7e4      	b.n	800362a <LoadROsnippets+0xce>
 8003660:	0801dc00 	.word	0x0801dc00
 8003664:	200016e4 	.word	0x200016e4
 8003668:	20006898 	.word	0x20006898

0800366c <LoadEEvars>:
void LoadEEvars(void){
 800366c:	b510      	push	{r4, lr}
	LoadROtopology();
 800366e:	f7ff fc9d 	bl	8002fac <LoadROtopology>
	LoadEEportsDir();
 8003672:	f7ff fceb 	bl	800304c <LoadEEportsDir>
	LoadEEalias();
 8003676:	f7ff fd0f 	bl	8003098 <LoadEEalias>
	LoadEEgroup();
 800367a:	f7ff fd4d 	bl	8003118 <LoadEEgroup>
	LoadEEstreams();
 800367e:	f7ff fd9d 	bl	80031bc <LoadEEstreams>
	LoadEEparams();
 8003682:	f7ff fe2b 	bl	80032dc <LoadEEparams>
	LoadEEbuttons();
 8003686:	f7ff fee7 	bl	8003458 <LoadEEbuttons>
	LoadROsnippets();
 800368a:	f7ff ff67 	bl	800355c <LoadROsnippets>
}
 800368e:	bd10      	pop	{r4, pc}

08003690 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003692:	46c6      	mov	lr, r8
 8003694:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003696:	4e10      	ldr	r6, [pc, #64]	; (80036d8 <SaveEEportsDir+0x48>)
 8003698:	7833      	ldrb	r3, [r6, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <SaveEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 800369e:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 80036a0:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80036a2:	4698      	mov	r8, r3
 80036a4:	4f0d      	ldr	r7, [pc, #52]	; (80036dc <SaveEEportsDir+0x4c>)
 80036a6:	e007      	b.n	80036b8 <SaveEEportsDir+0x28>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80036a8:	2c19      	cmp	r4, #25
 80036aa:	d901      	bls.n	80036b0 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 80036ac:	230a      	movs	r3, #10
 80036ae:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 80036b0:	7833      	ldrb	r3, [r6, #0]
 80036b2:	b2ec      	uxtb	r4, r5
 80036b4:	42a3      	cmp	r3, r4
 80036b6:	d30b      	bcc.n	80036d0 <SaveEEportsDir+0x40>
		if(arrayPortsDir[i - 1])
 80036b8:	1e63      	subs	r3, r4, #1
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	5af9      	ldrh	r1, [r7, r3]
 80036be:	1c65      	adds	r5, r4, #1
 80036c0:	2900      	cmp	r1, #0
 80036c2:	d0f1      	beq.n	80036a8 <SaveEEportsDir+0x18>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80036c4:	b2a8      	uxth	r0, r5
 80036c6:	f008 f9e1 	bl	800ba8c <EE_WriteVariable>
 80036ca:	e7ed      	b.n	80036a8 <SaveEEportsDir+0x18>
	BOS_Status result =BOS_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	4698      	mov	r8, r3
	}
	
	return result;
}
 80036d0:	4640      	mov	r0, r8
 80036d2:	bc04      	pop	{r2}
 80036d4:	4690      	mov	r8, r2
 80036d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036d8:	20000010 	.word	0x20000010
 80036dc:	20006d3c 	.word	0x20006d3c

080036e0 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80036e0:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 80036e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e4:	4646      	mov	r6, r8
 80036e6:	46d6      	mov	lr, sl
 80036e8:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 80036ea:	4698      	mov	r8, r3
 80036ec:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 80036ee:	b5c0      	push	{r6, r7, lr}
 80036f0:	4699      	mov	r9, r3
 80036f2:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80036f4:	2600      	movs	r6, #0
 80036f6:	469a      	mov	sl, r3
 80036f8:	e005      	b.n	8003706 <SaveEEalias+0x26>
 80036fa:	4653      	mov	r3, sl
 80036fc:	3601      	adds	r6, #1
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	b2f6      	uxtb	r6, r6
 8003702:	42b3      	cmp	r3, r6
 8003704:	d325      	bcc.n	8003752 <SaveEEalias+0x72>
	    {
		if(moduleAlias[i][0]){
 8003706:	464b      	mov	r3, r9
 8003708:	00b4      	lsls	r4, r6, #2
 800370a:	19a4      	adds	r4, r4, r6
 800370c:	0064      	lsls	r4, r4, #1
 800370e:	5d1b      	ldrb	r3, [r3, r4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f2      	beq.n	80036fa <SaveEEalias+0x1a>
 8003714:	4645      	mov	r5, r8
 8003716:	4647      	mov	r7, r8
 8003718:	351c      	adds	r5, #28
 800371a:	3721      	adds	r7, #33	; 0x21
 800371c:	444c      	add	r4, r9
 800371e:	b2ad      	uxth	r5, r5
 8003720:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003722:	7861      	ldrb	r1, [r4, #1]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003728:	0028      	movs	r0, r5
 800372a:	3501      	adds	r5, #1
 800372c:	b289      	uxth	r1, r1
 800372e:	b2ad      	uxth	r5, r5
 8003730:	f008 f9ac 	bl	800ba8c <EE_WriteVariable>
 8003734:	3402      	adds	r4, #2
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003736:	42bd      	cmp	r5, r7
 8003738:	d001      	beq.n	800373e <SaveEEalias+0x5e>
 800373a:	7823      	ldrb	r3, [r4, #0]
 800373c:	e7f1      	b.n	8003722 <SaveEEalias+0x42>
 800373e:	4643      	mov	r3, r8
 8003740:	3305      	adds	r3, #5
 8003742:	b29b      	uxth	r3, r3
 8003744:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003746:	4653      	mov	r3, sl
 8003748:	3601      	adds	r6, #1
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b2f6      	uxtb	r6, r6
 800374e:	42b3      	cmp	r3, r6
 8003750:	d2d9      	bcs.n	8003706 <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 8003752:	2000      	movs	r0, #0
 8003754:	bc1c      	pop	{r2, r3, r4}
 8003756:	4690      	mov	r8, r2
 8003758:	4699      	mov	r9, r3
 800375a:	46a2      	mov	sl, r4
 800375c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	20000dd4 	.word	0x20000dd4
 8003764:	20000010 	.word	0x20000010

08003768 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	46de      	mov	lr, fp
 800376c:	4657      	mov	r7, sl
 800376e:	464e      	mov	r6, r9
 8003770:	4645      	mov	r5, r8
 8003772:	468b      	mov	fp, r1
 8003774:	b5e0      	push	{r5, r6, r7, lr}
 8003776:	001e      	movs	r6, r3
 8003778:	ab0a      	add	r3, sp, #40	; 0x28
 800377a:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800377c:	b281      	uxth	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800377e:	469a      	mov	sl, r3
 8003780:	ab0b      	add	r3, sp, #44	; 0x2c
 8003782:	781d      	ldrb	r5, [r3, #0]
 8003784:	ab0c      	add	r3, sp, #48	; 0x30
 8003786:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003788:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800378a:	4698      	mov	r8, r3
 800378c:	ab0d      	add	r3, sp, #52	; 0x34
 800378e:	781c      	ldrb	r4, [r3, #0]
 8003790:	ab0e      	add	r3, sp, #56	; 0x38
 8003792:	4691      	mov	r9, r2
 8003794:	781f      	ldrb	r7, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003796:	f008 f979 	bl	800ba8c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 800379a:	465b      	mov	r3, fp
 800379c:	0a19      	lsrs	r1, r3, #8
 800379e:	b289      	uxth	r1, r1
 80037a0:	20e5      	movs	r0, #229	; 0xe5
 80037a2:	f008 f973 	bl	800ba8c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 80037a6:	465b      	mov	r3, fp
 80037a8:	20e6      	movs	r0, #230	; 0xe6
 80037aa:	b299      	uxth	r1, r3
 80037ac:	f008 f96e 	bl	800ba8c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 80037b0:	464b      	mov	r3, r9
 80037b2:	0a19      	lsrs	r1, r3, #8
 80037b4:	b289      	uxth	r1, r1
 80037b6:	20e7      	movs	r0, #231	; 0xe7
 80037b8:	f008 f968 	bl	800ba8c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037bc:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037be:	0236      	lsls	r6, r6, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037c0:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037c2:	4456      	add	r6, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037c4:	20e8      	movs	r0, #232	; 0xe8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80037c6:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037c8:	f008 f960 	bl	800ba8c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80037cc:	4445      	add	r5, r8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037ce:	b2b1      	uxth	r1, r6
 80037d0:	20e9      	movs	r0, #233	; 0xe9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80037d2:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037d4:	f008 f95a 	bl	800ba8c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80037d8:	19e4      	adds	r4, r4, r7
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80037da:	b2a9      	uxth	r1, r5
 80037dc:	20ea      	movs	r0, #234	; 0xea
 80037de:	f008 f955 	bl	800ba8c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80037e2:	b2a1      	uxth	r1, r4
 80037e4:	20eb      	movs	r0, #235	; 0xeb
 80037e6:	f008 f951 	bl	800ba8c <EE_WriteVariable>
	
	return result;
}
 80037ea:	2000      	movs	r0, #0
 80037ec:	bc3c      	pop	{r2, r3, r4, r5}
 80037ee:	4690      	mov	r8, r2
 80037f0:	4699      	mov	r9, r3
 80037f2:	46a2      	mov	sl, r4
 80037f4:	46ab      	mov	fp, r5
 80037f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037f8 <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80037f8:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 80037fa:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80037fc:	4c1e      	ldr	r4, [pc, #120]	; (8003878 <SaveEEparams+0x80>)
 80037fe:	0040      	lsls	r0, r0, #1
 8003800:	7863      	ldrb	r3, [r4, #1]
 8003802:	7821      	ldrb	r1, [r4, #0]
 8003804:	015b      	lsls	r3, r3, #5
 8003806:	4319      	orrs	r1, r3
 8003808:	f008 f940 	bl	800ba8c <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 800380c:	208e      	movs	r0, #142	; 0x8e
 800380e:	7921      	ldrb	r1, [r4, #4]
 8003810:	88e3      	ldrh	r3, [r4, #6]
 8003812:	03c9      	lsls	r1, r1, #15
 8003814:	4319      	orrs	r1, r3
 8003816:	b289      	uxth	r1, r1
 8003818:	0040      	lsls	r0, r0, #1
 800381a:	f008 f937 	bl	800ba8c <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 800381e:	2016      	movs	r0, #22
 8003820:	4c16      	ldr	r4, [pc, #88]	; (800387c <SaveEEparams+0x84>)
 8003822:	30ff      	adds	r0, #255	; 0xff
 8003824:	8821      	ldrh	r1, [r4, #0]
 8003826:	f008 f931 	bl	800ba8c <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800382a:	208b      	movs	r0, #139	; 0x8b
 800382c:	8861      	ldrh	r1, [r4, #2]
 800382e:	0040      	lsls	r0, r0, #1
 8003830:	f008 f92c 	bl	800ba8c <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003834:	2018      	movs	r0, #24
 8003836:	7963      	ldrb	r3, [r4, #5]
 8003838:	7b21      	ldrb	r1, [r4, #12]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	4319      	orrs	r1, r3
 800383e:	30ff      	adds	r0, #255	; 0xff
 8003840:	f008 f924 	bl	800ba8c <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003844:	208c      	movs	r0, #140	; 0x8c
 8003846:	8921      	ldrh	r1, [r4, #8]
 8003848:	0040      	lsls	r0, r0, #1
 800384a:	f008 f91f 	bl	800ba8c <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800384e:	201a      	movs	r0, #26
 8003850:	8961      	ldrh	r1, [r4, #10]
 8003852:	30ff      	adds	r0, #255	; 0xff
 8003854:	f008 f91a 	bl	800ba8c <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003858:	208d      	movs	r0, #141	; 0x8d
 800385a:	7b63      	ldrb	r3, [r4, #13]
 800385c:	7921      	ldrb	r1, [r4, #4]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	4319      	orrs	r1, r3
 8003862:	0040      	lsls	r0, r0, #1
 8003864:	f008 f912 	bl	800ba8c <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003868:	201c      	movs	r0, #28
 800386a:	7ea1      	ldrb	r1, [r4, #26]
 800386c:	30ff      	adds	r0, #255	; 0xff
 800386e:	f008 f90d 	bl	800ba8c <EE_WriteVariable>
	
	return result;
}
 8003872:	2000      	movs	r0, #0
 8003874:	bd10      	pop	{r4, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	200067fc 	.word	0x200067fc
 800387c:	2000687c 	.word	0x2000687c

08003880 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 8003880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003882:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003884:	4f12      	ldr	r7, [pc, #72]	; (80038d0 <ClearEEportsDir+0x50>)
BOS_Status ClearEEportsDir(void){
 8003886:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003888:	2234      	movs	r2, #52	; 0x34
 800388a:	2100      	movs	r1, #0
 800388c:	0038      	movs	r0, r7
 800388e:	f010 f893 	bl	80139b8 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 8003892:	4e10      	ldr	r6, [pc, #64]	; (80038d4 <ClearEEportsDir+0x54>)
 8003894:	7833      	ldrb	r3, [r6, #0]
	BOS_Status result =BOS_OK;
 8003896:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <ClearEEportsDir+0x48>
	BOS_Status result =BOS_OK;
 800389c:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 800389e:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80038a0:	4698      	mov	r8, r3
 80038a2:	2502      	movs	r5, #2
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80038a4:	2c19      	cmp	r4, #25
 80038a6:	d901      	bls.n	80038ac <ClearEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 80038a8:	230a      	movs	r3, #10
 80038aa:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 80038ac:	7833      	ldrb	r3, [r6, #0]
 80038ae:	b2ec      	uxtb	r4, r5
 80038b0:	42a3      	cmp	r3, r4
 80038b2:	d309      	bcc.n	80038c8 <ClearEEportsDir+0x48>
 80038b4:	1e63      	subs	r3, r4, #1
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	5af9      	ldrh	r1, [r7, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80038ba:	1c65      	adds	r5, r4, #1
		if(arrayPortsDir[i - 1])
 80038bc:	2900      	cmp	r1, #0
 80038be:	d0f1      	beq.n	80038a4 <ClearEEportsDir+0x24>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80038c0:	b2a8      	uxth	r0, r5
 80038c2:	f008 f8e3 	bl	800ba8c <EE_WriteVariable>
 80038c6:	e7ed      	b.n	80038a4 <ClearEEportsDir+0x24>
	}
	
	return result;
}
 80038c8:	4640      	mov	r0, r8
 80038ca:	bc04      	pop	{r2}
 80038cc:	4690      	mov	r8, r2
 80038ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d0:	20006d3c 	.word	0x20006d3c
 80038d4:	20000010 	.word	0x20000010

080038d8 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80038d8:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 80038da:	b570      	push	{r4, r5, r6, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80038dc:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 80038de:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80038e0:	ad03      	add	r5, sp, #12
 80038e2:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80038e4:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	002a      	movs	r2, r5
 80038ea:	ab06      	add	r3, sp, #24
 80038ec:	a905      	add	r1, sp, #20
 80038ee:	2001      	movs	r0, #1
 80038f0:	f008 fb76 	bl	800bfe0 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80038f4:	aa04      	add	r2, sp, #16
 80038f6:	ab08      	add	r3, sp, #32
 80038f8:	a907      	add	r1, sp, #28
 80038fa:	9400      	str	r4, [sp, #0]
 80038fc:	2002      	movs	r0, #2
 80038fe:	f008 fb6f 	bl	800bfe0 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003902:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003906:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003908:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800390a:	a909      	add	r1, sp, #36	; 0x24
 800390c:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin =P1_TX_Pin;
 800390e:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003912:	f00d fcbf 	bl	8011294 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003916:	2302      	movs	r3, #2
 8003918:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 800391a:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 800391c:	a909      	add	r1, sp, #36	; 0x24
 800391e:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003920:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003922:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003924:	f00d fcb6 	bl	8011294 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003928:	8829      	ldrh	r1, [r5, #0]
 800392a:	2200      	movs	r2, #0
 800392c:	9805      	ldr	r0, [sp, #20]
 800392e:	f00d fe51 	bl	80115d4 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8003932:	2005      	movs	r0, #5
 8003934:	f009 ffb2 	bl	800d89c <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003938:	8821      	ldrh	r1, [r4, #0]
 800393a:	9808      	ldr	r0, [sp, #32]
 800393c:	f00d fe44 	bl	80115c8 <HAL_GPIO_ReadPin>
 8003940:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003942:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10f      	bne.n	8003968 <IsLowerCLIbaud+0x90>
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003948:	8829      	ldrh	r1, [r5, #0]
 800394a:	2201      	movs	r2, #1
 800394c:	9805      	ldr	r0, [sp, #20]
 800394e:	f00d fe41 	bl	80115d4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003952:	2005      	movs	r0, #5
 8003954:	f009 ffa2 	bl	800d89c <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003958:	8821      	ldrh	r1, [r4, #0]
 800395a:	9808      	ldr	r0, [sp, #32]
 800395c:	f00d fe34 	bl	80115c8 <HAL_GPIO_ReadPin>
 8003960:	3801      	subs	r0, #1
 8003962:	4243      	negs	r3, r0
 8003964:	4158      	adcs	r0, r3
			return 1;
 8003966:	b2c0      	uxtb	r0, r0
}
 8003968:	b00e      	add	sp, #56	; 0x38
 800396a:	bd70      	pop	{r4, r5, r6, pc}

0800396c <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 800396e:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003970:	6899      	ldr	r1, [r3, #8]
 8003972:	f7fc fbc7 	bl	8000104 <strcmp>
 8003976:	4243      	negs	r3, r0
 8003978:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 800397a:	b2c0      	uxtb	r0, r0
 800397c:	bd10      	pop	{r4, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	200000a4 	.word	0x200000a4

08003984 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	46de      	mov	lr, fp
 8003988:	4657      	mov	r7, sl
 800398a:	464e      	mov	r6, r9
 800398c:	4645      	mov	r5, r8
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 800398e:	4923      	ldr	r1, [pc, #140]	; (8003a1c <IsMathOperator+0x98>)
uint8_t IsMathOperator(char *string){
 8003990:	b5e0      	push	{r5, r6, r7, lr}
 8003992:	0004      	movs	r4, r0
		if(!strcmp(string,"="))
 8003994:	f7fc fbb6 	bl	8000104 <strcmp>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003998:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <IsMathOperator+0x9c>)
		if(!strcmp(string,"="))
 800399a:	0006      	movs	r6, r0
		else if(!strcmp(string,"<"))
 800399c:	4698      	mov	r8, r3
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 800399e:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <IsMathOperator+0xa0>)
		if(!strcmp(string,"="))
 80039a0:	2506      	movs	r5, #6
		else if(!strcmp(string,">="))
 80039a2:	4699      	mov	r9, r3
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 80039a4:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <IsMathOperator+0xa4>)
		else if(!strcmp(string,">"))
 80039a6:	4f21      	ldr	r7, [pc, #132]	; (8003a2c <IsMathOperator+0xa8>)
		else if(!strcmp(string,"<="))
 80039a8:	469a      	mov	sl, r3
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 80039aa:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <IsMathOperator+0xac>)
 80039ac:	469b      	mov	fp, r3
		if(!strcmp(string,"="))
 80039ae:	2e00      	cmp	r6, #0
 80039b0:	d028      	beq.n	8003a04 <IsMathOperator+0x80>
		else if(!strcmp(string,">"))
 80039b2:	0039      	movs	r1, r7
 80039b4:	0020      	movs	r0, r4
 80039b6:	f7fc fba5 	bl	8000104 <strcmp>
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d024      	beq.n	8003a08 <IsMathOperator+0x84>
		else if(!strcmp(string,"<"))
 80039be:	4641      	mov	r1, r8
 80039c0:	0020      	movs	r0, r4
 80039c2:	f7fc fb9f 	bl	8000104 <strcmp>
 80039c6:	2800      	cmp	r0, #0
 80039c8:	d020      	beq.n	8003a0c <IsMathOperator+0x88>
		else if(!strcmp(string,">="))
 80039ca:	4649      	mov	r1, r9
 80039cc:	0020      	movs	r0, r4
 80039ce:	f7fc fb99 	bl	8000104 <strcmp>
 80039d2:	2800      	cmp	r0, #0
 80039d4:	d01c      	beq.n	8003a10 <IsMathOperator+0x8c>
		else if(!strcmp(string,"<="))
 80039d6:	4651      	mov	r1, sl
 80039d8:	0020      	movs	r0, r4
 80039da:	f7fc fb93 	bl	8000104 <strcmp>
 80039de:	2800      	cmp	r0, #0
 80039e0:	d018      	beq.n	8003a14 <IsMathOperator+0x90>
		else if(!strcmp(string,"!="))
 80039e2:	4659      	mov	r1, fp
 80039e4:	0020      	movs	r0, r4
 80039e6:	f7fc fb8d 	bl	8000104 <strcmp>
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d014      	beq.n	8003a18 <IsMathOperator+0x94>
 80039ee:	3d01      	subs	r5, #1
 80039f0:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80039f2:	2d00      	cmp	r5, #0
 80039f4:	d1db      	bne.n	80039ae <IsMathOperator+0x2a>
			return MATH_NOT_EQUAL;
	}
	return 0;
 80039f6:	2000      	movs	r0, #0
}
 80039f8:	bc3c      	pop	{r2, r3, r4, r5}
 80039fa:	4690      	mov	r8, r2
 80039fc:	4699      	mov	r9, r3
 80039fe:	46a2      	mov	sl, r4
 8003a00:	46ab      	mov	fp, r5
 8003a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 8003a04:	2001      	movs	r0, #1
 8003a06:	e7f7      	b.n	80039f8 <IsMathOperator+0x74>
			return MATH_GREATER;
 8003a08:	2002      	movs	r0, #2
 8003a0a:	e7f5      	b.n	80039f8 <IsMathOperator+0x74>
			return MATH_SMALLER;
 8003a0c:	2003      	movs	r0, #3
 8003a0e:	e7f3      	b.n	80039f8 <IsMathOperator+0x74>
			return MATH_GREATER_EQUAL;
 8003a10:	2004      	movs	r0, #4
 8003a12:	e7f1      	b.n	80039f8 <IsMathOperator+0x74>
			return MATH_SMALLER_EQUAL;
 8003a14:	2005      	movs	r0, #5
 8003a16:	e7ef      	b.n	80039f8 <IsMathOperator+0x74>
			return MATH_NOT_EQUAL;
 8003a18:	2006      	movs	r0, #6
 8003a1a:	e7ed      	b.n	80039f8 <IsMathOperator+0x74>
 8003a1c:	080189d8 	.word	0x080189d8
 8003a20:	080189e0 	.word	0x080189e0
 8003a24:	080189e4 	.word	0x080189e4
 8003a28:	080189e8 	.word	0x080189e8
 8003a2c:	080189dc 	.word	0x080189dc
 8003a30:	080189ec 	.word	0x080189ec

08003a34 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003a34:	b570      	push	{r4, r5, r6, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 8003a36:	f009 fde5 	bl	800d604 <RTC_Init>
	GetTimeDate();
 8003a3a:	f009 fe89 	bl	800d750 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 8003a3e:	f008 f90b 	bl	800bc58 <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 8003a42:	f008 fa79 	bl	800bf38 <GPIO_Init>
	DMA_Init();
 8003a46:	f007 f9cb 	bl	800ade0 <DMA_Init>
	TIM_USEC_Init();
 8003a4a:	f009 feb3 	bl	800d7b4 <TIM_USEC_Init>
	CRC_Init();
 8003a4e:	f007 ff23 	bl	800b898 <CRC_Init>
	TIM_MSEC_Init();
 8003a52:	f009 fee1 	bl	800d818 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 8003a56:	f008 fb21 	bl	800c09c <IsFactoryReset>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d162      	bne.n	8003b24 <BOS_Init+0xf0>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 8003a5e:	f7ff ff3b 	bl	80038d8 <IsLowerCLIbaud>
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d052      	beq.n	8003b0c <BOS_Init+0xd8>
		CLI_LOW_Baudrate_Flag =1;
 8003a66:	2322      	movs	r3, #34	; 0x22
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4e38      	ldr	r6, [pc, #224]	; (8003b4c <BOS_Init+0x118>)
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003a6c:	2032      	movs	r0, #50	; 0x32
		Module_Peripheral_Init();
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a6e:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 8003a70:	54f2      	strb	r2, [r6, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003a72:	f009 ff13 	bl	800d89c <StartMilliDelay>
		Module_Peripheral_Init();
 8003a76:	f006 fb39 	bl	800a0ec <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003a7a:	21e1      	movs	r1, #225	; 0xe1
 8003a7c:	4d34      	ldr	r5, [pc, #208]	; (8003b50 <BOS_Init+0x11c>)
			UpdateBaudrate(port,BOS.clibaudrate);
 8003a7e:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a80:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003a82:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a84:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003a86:	60a9      	str	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 8003a88:	f00a f8f2 	bl	800dc70 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a8c:	2c06      	cmp	r4, #6
 8003a8e:	d007      	beq.n	8003aa0 <BOS_Init+0x6c>
			UpdateBaudrate(port,BOS.clibaudrate);
 8003a90:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a92:	3401      	adds	r4, #1
 8003a94:	68a9      	ldr	r1, [r5, #8]
 8003a96:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 8003a98:	f00a f8ea 	bl	800dc70 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a9c:	2c06      	cmp	r4, #6
 8003a9e:	d1f7      	bne.n	8003a90 <BOS_Init+0x5c>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003aa0:	f7ff fde4 	bl	800366c <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003aa4:	f00a f97e 	bl	800dda4 <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003aa8:	f007 fe4a 	bl	800b740 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
	{
		IND_ON();
 8003aac:	2180      	movs	r1, #128	; 0x80
 8003aae:	2090      	movs	r0, #144	; 0x90
	if(myID == 0) /* Native module */
 8003ab0:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <BOS_Init+0x120>)
		IND_ON();
 8003ab2:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 8003ab4:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 8003ab6:	0109      	lsls	r1, r1, #4
 8003ab8:	05c0      	lsls	r0, r0, #23
	if(myID == 0) /* Native module */
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d02d      	beq.n	8003b1a <BOS_Init+0xe6>
		Delay_ms_no_rtos(500);IND_OFF();
	}
	else /* Non-native module */
	{
		IND_ON();
 8003abe:	f00d fd89 	bl	80115d4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8003ac2:	20fa      	movs	r0, #250	; 0xfa
 8003ac4:	0040      	lsls	r0, r0, #1
 8003ac6:	f009 fee9 	bl	800d89c <StartMilliDelay>
		IND_OFF();
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	2090      	movs	r0, #144	; 0x90
 8003ace:	2200      	movs	r2, #0
 8003ad0:	0109      	lsls	r1, r1, #4
 8003ad2:	05c0      	lsls	r0, r0, #23
 8003ad4:	f00d fd7e 	bl	80115d4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003ad8:	2064      	movs	r0, #100	; 0x64
 8003ada:	f009 fedf 	bl	800d89c <StartMilliDelay>
		IND_ON();
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	2090      	movs	r0, #144	; 0x90
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	05c0      	lsls	r0, r0, #23
 8003ae6:	0109      	lsls	r1, r1, #4
 8003ae8:	f00d fd74 	bl	80115d4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003aec:	2064      	movs	r0, #100	; 0x64
 8003aee:	f009 fed5 	bl	800d89c <StartMilliDelay>
		IND_OFF();
 8003af2:	2180      	movs	r1, #128	; 0x80
 8003af4:	2090      	movs	r0, #144	; 0x90
 8003af6:	2200      	movs	r2, #0
 8003af8:	0109      	lsls	r1, r1, #4
 8003afa:	05c0      	lsls	r0, r0, #23
 8003afc:	f00d fd6a 	bl	80115d4 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 8003b00:	f003 fd5c 	bl	80075bc <ResetUartORE>
	
	BOS_initialized =1;
 8003b04:	2323      	movs	r3, #35	; 0x23
 8003b06:	2201      	movs	r2, #1
 8003b08:	54f2      	strb	r2, [r6, r3]
}
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003b0c:	2032      	movs	r0, #50	; 0x32
 8003b0e:	f009 fec5 	bl	800d89c <StartMilliDelay>
		Module_Peripheral_Init();
 8003b12:	f006 faeb 	bl	800a0ec <Module_Peripheral_Init>
 8003b16:	4e0d      	ldr	r6, [pc, #52]	; (8003b4c <BOS_Init+0x118>)
 8003b18:	e7c2      	b.n	8003aa0 <BOS_Init+0x6c>
		IND_ON();
 8003b1a:	f00d fd5b 	bl	80115d4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003b1e:	20fa      	movs	r0, #250	; 0xfa
 8003b20:	0040      	lsls	r0, r0, #1
 8003b22:	e7e4      	b.n	8003aee <BOS_Init+0xba>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 8003b24:	4c0c      	ldr	r4, [pc, #48]	; (8003b58 <BOS_Init+0x124>)
 8003b26:	4d0d      	ldr	r5, [pc, #52]	; (8003b5c <BOS_Init+0x128>)
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	42ab      	cmp	r3, r5
 8003b2c:	d004      	beq.n	8003b38 <BOS_Init+0x104>
		if(EE_Format() == HAL_OK){
 8003b2e:	f008 f843 	bl	800bbb8 <EE_Format>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d100      	bne.n	8003b38 <BOS_Init+0x104>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003b36:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b38:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <BOS_Init+0x12c>)
 8003b3e:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <BOS_Init+0x130>)
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	e7fd      	b.n	8003b46 <BOS_Init+0x112>
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	20000b28 	.word	0x20000b28
 8003b50:	2000687c 	.word	0x2000687c
 8003b54:	20000aa8 	.word	0x20000aa8
 8003b58:	20007ff0 	.word	0x20007ff0
 8003b5c:	beefdead 	.word	0xbeefdead
 8003b60:	e000ed00 	.word	0xe000ed00
 8003b64:	05fa0004 	.word	0x05fa0004

08003b68 <Module_Init>:
void Module_Init(void){
 8003b68:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003b6a:	f00c f853 	bl	800fc14 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003b6e:	f006 f8df 	bl	8009d30 <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 8003b72:	f7ff ff5f 	bl	8003a34 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003b76:	f003 fd3d 	bl	80075f4 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003b7a:	f00a f9bb 	bl	800def4 <osKernelStart>
}
 8003b7e:	bd10      	pop	{r4, pc}

08003b80 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b82:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003b84:	4e12      	ldr	r6, [pc, #72]	; (8003bd0 <ExploreNeighbors+0x50>)
 8003b86:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
 8003b88:	0035      	movs	r5, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003b8a:	0007      	movs	r7, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003b8c:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003b8e:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003b90:	b500      	push	{lr}
			messageParams[1] =(uint8_t )myPN;
 8003b92:	3524      	adds	r5, #36	; 0x24
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003b94:	b082      	sub	sp, #8
		if(port != ignore){
 8003b96:	42a7      	cmp	r7, r4
 8003b98:	d011      	beq.n	8003bbe <ExploreNeighbors+0x3e>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003b9a:	4643      	mov	r3, r8
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	2224      	movs	r2, #36	; 0x24
 8003ba0:	0a19      	lsrs	r1, r3, #8
			messageParams[1] =(uint8_t )myPN;
 8003ba2:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003ba4:	2303      	movs	r3, #3
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003ba6:	54b1      	strb	r1, [r6, r2]
			messageParams[2] =port;
 8003ba8:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003baa:	2200      	movs	r2, #0
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	3307      	adds	r3, #7
 8003bb2:	0020      	movs	r0, r4
 8003bb4:	f004 f96c 	bl	8007e90 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003bb8:	200a      	movs	r0, #10
 8003bba:	f00a f9a1 	bl	800df00 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003bbe:	3401      	adds	r4, #1
 8003bc0:	b2e4      	uxtb	r4, r4
 8003bc2:	2c06      	cmp	r4, #6
 8003bc4:	d1e7      	bne.n	8003b96 <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	b002      	add	sp, #8
 8003bca:	bc04      	pop	{r2}
 8003bcc:	4690      	mov	r8, r2
 8003bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd0:	20000b28 	.word	0x20000b28
 8003bd4:	20000010 	.word	0x20000010

08003bd8 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bda:	4657      	mov	r7, sl
 8003bdc:	464e      	mov	r6, r9
 8003bde:	4645      	mov	r5, r8
 8003be0:	46de      	mov	lr, fp
 8003be2:	b5e0      	push	{r5, r6, r7, lr}
 8003be4:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003be6:	466a      	mov	r2, sp
 8003be8:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <FindBroadcastRoutes+0x140>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003bea:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003bec:	781d      	ldrb	r5, [r3, #0]
 8003bee:	1deb      	adds	r3, r5, #7
 8003bf0:	08db      	lsrs	r3, r3, #3
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	469d      	mov	sp, r3
 8003bf8:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003bfa:	2d00      	cmp	r5, #0
 8003bfc:	d00c      	beq.n	8003c18 <FindBroadcastRoutes+0x40>
		modules[m] =0;
 8003bfe:	2100      	movs	r1, #0
 8003c00:	1e6c      	subs	r4, r5, #1
 8003c02:	4a46      	ldr	r2, [pc, #280]	; (8003d1c <FindBroadcastRoutes+0x144>)
 8003c04:	b2e4      	uxtb	r4, r4
 8003c06:	3401      	adds	r4, #1
 8003c08:	3254      	adds	r2, #84	; 0x54
 8003c0a:	446c      	add	r4, sp
 8003c0c:	7019      	strb	r1, [r3, #0]
 8003c0e:	3301      	adds	r3, #1
		bcastRoutes[m] =0;
 8003c10:	8011      	strh	r1, [r2, #0]
 8003c12:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 8003c14:	42a3      	cmp	r3, r4
 8003c16:	d1f9      	bne.n	8003c0c <FindBroadcastRoutes+0x34>
	}
	modules[src - 1] =++level;					// Tag the source
 8003c18:	2301      	movs	r3, #1
 8003c1a:	2216      	movs	r2, #22
 8003c1c:	3801      	subs	r0, #1
 8003c1e:	5433      	strb	r3, [r6, r0]
 8003c20:	4b3f      	ldr	r3, [pc, #252]	; (8003d20 <FindBroadcastRoutes+0x148>)
 8003c22:	4342      	muls	r2, r0
 8003c24:	469c      	mov	ip, r3

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003c26:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <FindBroadcastRoutes+0x144>)
 8003c28:	0040      	lsls	r0, r0, #1
 8003c2a:	1818      	adds	r0, r3, r0
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	3202      	adds	r2, #2
 8003c30:	4462      	add	r2, ip
 8003c32:	469c      	mov	ip, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003c34:	3301      	adds	r3, #1
	modules[src - 1] =++level;					// Tag the source
 8003c36:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003c38:	2454      	movs	r4, #84	; 0x54
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003c3a:	469a      	mov	sl, r3
 8003c3c:	46b3      	mov	fp, r6
 8003c3e:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 8003c40:	8813      	ldrh	r3, [r2, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <FindBroadcastRoutes+0x8a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003c46:	5b05      	ldrh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003c48:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003c4a:	46a8      	mov	r8, r5
 8003c4c:	4665      	mov	r5, ip
 8003c4e:	408d      	lsls	r5, r1
 8003c50:	46a9      	mov	r9, r5
 8003c52:	4645      	mov	r5, r8
 8003c54:	464e      	mov	r6, r9
 8003c56:	4335      	orrs	r5, r6
 8003c58:	5305      	strh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003c5a:	4655      	mov	r5, sl
 8003c5c:	445b      	add	r3, fp
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	701d      	strb	r5, [r3, #0]
 8003c62:	3101      	adds	r1, #1
 8003c64:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 8003c66:	2906      	cmp	r1, #6
 8003c68:	d1ea      	bne.n	8003c40 <FindBroadcastRoutes+0x68>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003c6a:	2254      	movs	r2, #84	; 0x54
	++level;												// Move one level
 8003c6c:	2302      	movs	r3, #2
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003c6e:	4692      	mov	sl, r2
 8003c70:	465e      	mov	r6, fp
	++level;												// Move one level
 8003c72:	469b      	mov	fp, r3
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003c74:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <FindBroadcastRoutes+0x144>)
 8003c76:	687d      	ldr	r5, [r7, #4]
 8003c78:	449a      	add	sl, r3
 8003c7a:	4653      	mov	r3, sl
 8003c7c:	46a8      	mov	r8, r5
 8003c7e:	465d      	mov	r5, fp
 8003c80:	603b      	str	r3, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003c82:	4643      	mov	r3, r8
		++level;											// Move one level
 8003c84:	3501      	adds	r5, #1
 8003c86:	b2ed      	uxtb	r5, r5
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d03b      	beq.n	8003d04 <FindBroadcastRoutes+0x12c>
 8003c8c:	1e6b      	subs	r3, r5, #1
 8003c8e:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 8003c90:	2300      	movs	r3, #0
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003c92:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003c94:	469c      	mov	ip, r3
 8003c96:	46ab      	mov	fp, r5
 8003c98:	e003      	b.n	8003ca2 <FindBroadcastRoutes+0xca>
 8003c9a:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003c9c:	b2d3      	uxtb	r3, r2
 8003c9e:	4598      	cmp	r8, r3
 8003ca0:	d92c      	bls.n	8003cfc <FindBroadcastRoutes+0x124>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003ca2:	5cb3      	ldrb	r3, [r6, r2]
 8003ca4:	454b      	cmp	r3, r9
 8003ca6:	d1f8      	bne.n	8003c9a <FindBroadcastRoutes+0xc2>
 8003ca8:	2116      	movs	r1, #22
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <FindBroadcastRoutes+0x14c>)
 8003cac:	4351      	muls	r1, r2
 8003cae:	469a      	mov	sl, r3
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	4451      	add	r1, sl
 8003cb4:	46e2      	mov	sl, ip
 8003cb6:	4694      	mov	ip, r2
 8003cb8:	0055      	lsls	r5, r2, #1
 8003cba:	607d      	str	r5, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003cbc:	880b      	ldrh	r3, [r1, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d012      	beq.n	8003ce8 <FindBroadcastRoutes+0x110>
 8003cc2:	08db      	lsrs	r3, r3, #3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	5cf2      	ldrb	r2, [r6, r3]
 8003cc8:	2a00      	cmp	r2, #0
 8003cca:	d10d      	bne.n	8003ce8 <FindBroadcastRoutes+0x110>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003ccc:	683c      	ldr	r4, [r7, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	5b15      	ldrh	r5, [r2, r4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4082      	lsls	r2, r0
 8003cd6:	4315      	orrs	r5, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	5315      	strh	r5, [r2, r4]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
						++untaged;
 8003cdc:	4654      	mov	r4, sl
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003cde:	465a      	mov	r2, fp
						++untaged;
 8003ce0:	3401      	adds	r4, #1
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003ce2:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003ce4:	b2e3      	uxtb	r3, r4
 8003ce6:	469a      	mov	sl, r3
 8003ce8:	3001      	adds	r0, #1
 8003cea:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003cec:	2806      	cmp	r0, #6
 8003cee:	d1e5      	bne.n	8003cbc <FindBroadcastRoutes+0xe4>
 8003cf0:	4662      	mov	r2, ip
 8003cf2:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003cf4:	b2d3      	uxtb	r3, r2
 8003cf6:	46d4      	mov	ip, sl
 8003cf8:	4598      	cmp	r8, r3
 8003cfa:	d8d2      	bhi.n	8003ca2 <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003cfc:	4663      	mov	r3, ip
 8003cfe:	465d      	mov	r5, fp
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1be      	bne.n	8003c82 <FindBroadcastRoutes+0xaa>
	
	return result;
}
 8003d04:	2000      	movs	r0, #0
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b003      	add	sp, #12
 8003d0a:	bc3c      	pop	{r2, r3, r4, r5}
 8003d0c:	4690      	mov	r8, r2
 8003d0e:	4699      	mov	r9, r3
 8003d10:	46a2      	mov	sl, r4
 8003d12:	46ab      	mov	fp, r5
 8003d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	20000010 	.word	0x20000010
 8003d1c:	20000b28 	.word	0x20000b28
 8003d20:	20000ee4 	.word	0x20000ee4
 8003d24:	20000ee6 	.word	0x20000ee6

08003d28 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2a:	46de      	mov	lr, fp
 8003d2c:	464e      	mov	r6, r9
 8003d2e:	4645      	mov	r5, r8
 8003d30:	4657      	mov	r7, sl
 8003d32:	b5e0      	push	{r5, r6, r7, lr}
 8003d34:	b091      	sub	sp, #68	; 0x44
#ifdef __N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003d36:	ac03      	add	r4, sp, #12
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003d38:	0005      	movs	r5, r0
 8003d3a:	000e      	movs	r6, r1
 8003d3c:	9101      	str	r1, [sp, #4]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003d3e:	2232      	movs	r2, #50	; 0x32
 8003d40:	2100      	movs	r1, #0
 8003d42:	0020      	movs	r0, r4
 8003d44:	f00f fe38 	bl	80139b8 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 8003d48:	221a      	movs	r2, #26
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4862      	ldr	r0, [pc, #392]	; (8003ed8 <FindRoute+0x1b0>)
 8003d4e:	f00f fe33 	bl	80139b8 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003d52:	2100      	movs	r1, #0
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003d54:	2024      	movs	r0, #36	; 0x24
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003d56:	4b61      	ldr	r3, [pc, #388]	; (8003edc <FindRoute+0x1b4>)
 8003d58:	1e6a      	subs	r2, r5, #1
 8003d5a:	469c      	mov	ip, r3
 8003d5c:	189b      	adds	r3, r3, r2
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003d5e:	5419      	strb	r1, [r3, r0]
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003d60:	7219      	strb	r1, [r3, #8]
 8003d62:	2316      	movs	r3, #22
 8003d64:	4353      	muls	r3, r2
 8003d66:	4a5e      	ldr	r2, [pc, #376]	; (8003ee0 <FindRoute+0x1b8>)
 8003d68:	3302      	adds	r3, #2
 8003d6a:	4693      	mov	fp, r2
 8003d6c:	445b      	add	r3, fp
 8003d6e:	4699      	mov	r9, r3
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003d70:	001a      	movs	r2, r3
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 8003d72:	3823      	subs	r0, #35	; 0x23
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003d74:	b2b1      	uxth	r1, r6
 8003d76:	8813      	ldrh	r3, [r2, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <FindRoute+0x5c>
 8003d7c:	08db      	lsrs	r3, r3, #3
 8003d7e:	428b      	cmp	r3, r1
 8003d80:	d100      	bne.n	8003d84 <FindRoute+0x5c>
 8003d82:	e099      	b.n	8003eb8 <FindRoute+0x190>
	for(int col =1; col <= 6; col++){
 8003d84:	3001      	adds	r0, #1
 8003d86:	3202      	adds	r2, #2
 8003d88:	2807      	cmp	r0, #7
 8003d8a:	d1f4      	bne.n	8003d76 <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 8003d8c:	4b55      	ldr	r3, [pc, #340]	; (8003ee4 <FindRoute+0x1bc>)
 8003d8e:	7819      	ldrb	r1, [r3, #0]
 8003d90:	2301      	movs	r3, #1
 8003d92:	2900      	cmp	r1, #0
 8003d94:	d100      	bne.n	8003d98 <FindRoute+0x70>
 8003d96:	e09a      	b.n	8003ece <FindRoute+0x1a6>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003d98:	2208      	movs	r2, #8
 8003d9a:	4462      	add	r2, ip
 8003d9c:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003d9e:	2200      	movs	r2, #0
 8003da0:	4666      	mov	r6, ip
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003da2:	27ff      	movs	r7, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003da4:	4692      	mov	sl, r2
 8003da6:	3624      	adds	r6, #36	; 0x24
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003da8:	429d      	cmp	r5, r3
 8003daa:	d005      	beq.n	8003db8 <FindRoute+0x90>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003dac:	4640      	mov	r0, r8
 8003dae:	1e5a      	subs	r2, r3, #1
 8003db0:	5487      	strb	r7, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003db2:	4650      	mov	r0, sl
 8003db4:	18b2      	adds	r2, r6, r2
 8003db6:	7010      	strb	r0, [r2, #0]
	for(int i =1; i <= N; i++){
 8003db8:	3301      	adds	r3, #1
 8003dba:	428b      	cmp	r3, r1
 8003dbc:	ddf4      	ble.n	8003da8 <FindRoute+0x80>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	4463      	add	r3, ip
	uint8_t u =0;
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	4698      	mov	r8, r3
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
 8003dc6:	2201      	movs	r2, #1
	
	for(int i =0; i < N; i++){
 8003dc8:	2300      	movs	r3, #0
		temp &=Q[i];
 8003dca:	5ce0      	ldrb	r0, [r4, r3]
	for(int i =0; i < N; i++){
 8003dcc:	3301      	adds	r3, #1
		temp &=Q[i];
 8003dce:	4002      	ands	r2, r0
	for(int i =0; i < N; i++){
 8003dd0:	428b      	cmp	r3, r1
 8003dd2:	dbfa      	blt.n	8003dca <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	d000      	beq.n	8003dda <FindRoute+0xb2>
 8003dd8:	e07c      	b.n	8003ed4 <FindRoute+0x1ac>
 8003dda:	4663      	mov	r3, ip
 8003ddc:	7a1a      	ldrb	r2, [r3, #8]
	if(!Q[0])						// Not visited yet
 8003dde:	7823      	ldrb	r3, [r4, #0]
		smallest =arr[0];
 8003de0:	0010      	movs	r0, r2
	if(!Q[0])						// Not visited yet
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d000      	beq.n	8003de8 <FindRoute+0xc0>
	uint8_t smallest =0xFF;
 8003de6:	20ff      	movs	r0, #255	; 0xff
 8003de8:	2500      	movs	r5, #0
 8003dea:	2300      	movs	r3, #0
 8003dec:	e001      	b.n	8003df2 <FindRoute+0xca>
 8003dee:	4642      	mov	r2, r8
 8003df0:	5c9a      	ldrb	r2, [r3, r2]
		if((arr[i] < smallest) && !Q[i]){
 8003df2:	4290      	cmp	r0, r2
 8003df4:	d904      	bls.n	8003e00 <FindRoute+0xd8>
 8003df6:	5ce6      	ldrb	r6, [r4, r3]
 8003df8:	2e00      	cmp	r6, #0
 8003dfa:	d101      	bne.n	8003e00 <FindRoute+0xd8>
			index =i;
 8003dfc:	0010      	movs	r0, r2
 8003dfe:	b2dd      	uxtb	r5, r3
	for(int i =0; i < N; i++){
 8003e00:	3301      	adds	r3, #1
 8003e02:	428b      	cmp	r3, r1
 8003e04:	dbf3      	blt.n	8003dee <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003e06:	3501      	adds	r5, #1
		if(u == desID){
 8003e08:	9b01      	ldr	r3, [sp, #4]
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003e0a:	b2ed      	uxtb	r5, r5
		if(u == desID){
 8003e0c:	429d      	cmp	r5, r3
 8003e0e:	d023      	beq.n	8003e58 <FindRoute+0x130>
			Q[u - 1] =1;									// Remove u from Q
 8003e10:	2301      	movs	r3, #1
 8003e12:	1e6f      	subs	r7, r5, #1
 8003e14:	55e3      	strb	r3, [r4, r7]
 8003e16:	2316      	movs	r3, #22
 8003e18:	465e      	mov	r6, fp
 8003e1a:	437b      	muls	r3, r7
 8003e1c:	360e      	adds	r6, #14
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	445a      	add	r2, fp
 8003e22:	18f6      	adds	r6, r6, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003e24:	4467      	add	r7, ip
 8003e26:	9100      	str	r1, [sp, #0]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003e28:	8813      	ldrh	r3, [r2, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00f      	beq.n	8003e4e <FindRoute+0x126>
				v =(array[u - 1][n] >> 3);
 8003e2e:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	5ce0      	ldrb	r0, [r4, r3]
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d109      	bne.n	8003e4e <FindRoute+0x126>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003e3a:	7a38      	ldrb	r0, [r7, #8]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003e3c:	4463      	add	r3, ip
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003e3e:	3001      	adds	r0, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003e40:	7a19      	ldrb	r1, [r3, #8]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003e42:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003e44:	4281      	cmp	r1, r0
 8003e46:	d902      	bls.n	8003e4e <FindRoute+0x126>
						routePrev[v - 1] =u;
 8003e48:	2124      	movs	r1, #36	; 0x24
						routeDist[v - 1] =alt;
 8003e4a:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003e4c:	545d      	strb	r5, [r3, r1]
 8003e4e:	3202      	adds	r2, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003e50:	42b2      	cmp	r2, r6
 8003e52:	d1e9      	bne.n	8003e28 <FindRoute+0x100>
 8003e54:	9900      	ldr	r1, [sp, #0]
 8003e56:	e7b6      	b.n	8003dc6 <FindRoute+0x9e>
 8003e58:	3b01      	subs	r3, #1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003e5a:	2224      	movs	r2, #36	; 0x24
 8003e5c:	4463      	add	r3, ip
 8003e5e:	5c9a      	ldrb	r2, [r3, r2]
 8003e60:	2300      	movs	r3, #0
 8003e62:	2a00      	cmp	r2, #0
 8003e64:	d101      	bne.n	8003e6a <FindRoute+0x142>
 8003e66:	e00b      	b.n	8003e80 <FindRoute+0x158>
 8003e68:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003e6a:	491b      	ldr	r1, [pc, #108]	; (8003ed8 <FindRoute+0x1b0>)
 8003e6c:	1c58      	adds	r0, r3, #1
 8003e6e:	54cd      	strb	r5, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003e70:	4663      	mov	r3, ip
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	3323      	adds	r3, #35	; 0x23
 8003e76:	7819      	ldrb	r1, [r3, #0]
 8003e78:	0015      	movs	r5, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003e7a:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003e7c:	2900      	cmp	r1, #0
 8003e7e:	d1f3      	bne.n	8003e68 <FindRoute+0x140>
	for(int col =1; col <= 6; col++){
 8003e80:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003e82:	464c      	mov	r4, r9
 8003e84:	9b01      	ldr	r3, [sp, #4]
 8003e86:	4463      	add	r3, ip
 8003e88:	8822      	ldrh	r2, [r4, #0]
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	d008      	beq.n	8003ea0 <FindRoute+0x178>
 8003e8e:	4d12      	ldr	r5, [pc, #72]	; (8003ed8 <FindRoute+0x1b0>)
 8003e90:	79d9      	ldrb	r1, [r3, #7]
 8003e92:	46ac      	mov	ip, r5
 8003e94:	4461      	add	r1, ip
 8003e96:	3901      	subs	r1, #1
 8003e98:	7809      	ldrb	r1, [r1, #0]
 8003e9a:	08d2      	lsrs	r2, r2, #3
 8003e9c:	4291      	cmp	r1, r2
 8003e9e:	d014      	beq.n	8003eca <FindRoute+0x1a2>
	for(int col =1; col <= 6; col++){
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	3402      	adds	r4, #2
 8003ea4:	2807      	cmp	r0, #7
 8003ea6:	d1ef      	bne.n	8003e88 <FindRoute+0x160>
	return 0;
 8003ea8:	2000      	movs	r0, #0
}
 8003eaa:	b011      	add	sp, #68	; 0x44
 8003eac:	bc3c      	pop	{r2, r3, r4, r5}
 8003eae:	4690      	mov	r8, r2
 8003eb0:	4699      	mov	r9, r3
 8003eb2:	46a2      	mov	sl, r4
 8003eb4:	46ab      	mov	fp, r5
 8003eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003eb8:	9901      	ldr	r1, [sp, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	000b      	movs	r3, r1
 8003ebe:	4463      	add	r3, ip
 8003ec0:	71da      	strb	r2, [r3, #7]
			route[0] =desID;
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <FindRoute+0x1b0>)
			return col;
 8003ec4:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003ec6:	7019      	strb	r1, [r3, #0]
			return col;
 8003ec8:	e7ef      	b.n	8003eaa <FindRoute+0x182>
			return col;
 8003eca:	b2c0      	uxtb	r0, r0
 8003ecc:	e7ed      	b.n	8003eaa <FindRoute+0x182>
	for(int i =1; i <= N; i++){
 8003ece:	425b      	negs	r3, r3
 8003ed0:	2500      	movs	r5, #0
 8003ed2:	e7c2      	b.n	8003e5a <FindRoute+0x132>
 8003ed4:	1e6b      	subs	r3, r5, #1
 8003ed6:	e7c0      	b.n	8003e5a <FindRoute+0x132>
 8003ed8:	20006944 	.word	0x20006944
 8003edc:	20000ba8 	.word	0x20000ba8
 8003ee0:	20000ee4 	.word	0x20000ee4
 8003ee4:	20000010 	.word	0x20000010

08003ee8 <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ee8:	4b5b      	ldr	r3, [pc, #364]	; (8004058 <DisplayTopology+0x170>)
void DisplayTopology(uint8_t port){
 8003eea:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003eec:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003eee:	4645      	mov	r5, r8
 8003ef0:	464e      	mov	r6, r9
 8003ef2:	46de      	mov	lr, fp
 8003ef4:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ef6:	3440      	adds	r4, #64	; 0x40
 8003ef8:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003efa:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003efc:	4698      	mov	r8, r3
 8003efe:	4b57      	ldr	r3, [pc, #348]	; (800405c <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003f00:	0007      	movs	r7, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003f02:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003f04:	c223      	stmia	r2!, {r0, r1, r5}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f06:	2501      	movs	r5, #1
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003f08:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003f0a:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003f0c:	6011      	str	r1, [r2, #0]
 8003f0e:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f10:	426d      	negs	r5, r5
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003f12:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f14:	0021      	movs	r1, r4
 8003f16:	2332      	movs	r3, #50	; 0x32
 8003f18:	9500      	str	r5, [sp, #0]
 8003f1a:	2211      	movs	r2, #17
 8003f1c:	0038      	movs	r0, r7
 8003f1e:	f009 fe55 	bl	800dbcc <writePxMutex>
 8003f22:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <DisplayTopology+0x178>)
 8003f24:	2601      	movs	r6, #1
 8003f26:	4699      	mov	r9, r3
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003f28:	0032      	movs	r2, r6
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	0020      	movs	r0, r4
 8003f2e:	f00f ff3d 	bl	8013dac <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f32:	0020      	movs	r0, r4
 8003f34:	f7fc f8f0 	bl	8000118 <strlen>
 8003f38:	3601      	adds	r6, #1
 8003f3a:	b282      	uxth	r2, r0
 8003f3c:	9500      	str	r5, [sp, #0]
 8003f3e:	2332      	movs	r3, #50	; 0x32
 8003f40:	0021      	movs	r1, r4
 8003f42:	0038      	movs	r0, r7
 8003f44:	f009 fe42 	bl	800dbcc <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003f48:	2e06      	cmp	r6, #6
 8003f4a:	d1ed      	bne.n	8003f28 <DisplayTopology+0x40>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003f4c:	2332      	movs	r3, #50	; 0x32
 8003f4e:	9500      	str	r5, [sp, #0]
 8003f50:	2203      	movs	r2, #3
 8003f52:	4944      	ldr	r1, [pc, #272]	; (8004064 <DisplayTopology+0x17c>)
 8003f54:	0038      	movs	r0, r7
 8003f56:	f009 fe39 	bl	800dbcc <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003f5a:	4b43      	ldr	r3, [pc, #268]	; (8004068 <DisplayTopology+0x180>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d061      	beq.n	8004026 <DisplayTopology+0x13e>
 8003f62:	4b42      	ldr	r3, [pc, #264]	; (800406c <DisplayTopology+0x184>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003f64:	4645      	mov	r5, r8
 8003f66:	4699      	mov	r9, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f68:	2301      	movs	r3, #1
 8003f6a:	425b      	negs	r3, r3
 8003f6c:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003f6e:	4b40      	ldr	r3, [pc, #256]	; (8004070 <DisplayTopology+0x188>)
	for(uint8_t row =0; row < N; row++){
 8003f70:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003f72:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003f74:	3540      	adds	r5, #64	; 0x40
 8003f76:	1c63      	adds	r3, r4, #1
 8003f78:	001a      	movs	r2, r3
 8003f7a:	493e      	ldr	r1, [pc, #248]	; (8004074 <DisplayTopology+0x18c>)
 8003f7c:	0028      	movs	r0, r5
 8003f7e:	469a      	mov	sl, r3
 8003f80:	f00f ff14 	bl	8013dac <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f84:	0028      	movs	r0, r5
 8003f86:	f7fc f8c7 	bl	8000118 <strlen>
 8003f8a:	4643      	mov	r3, r8
 8003f8c:	b282      	uxth	r2, r0
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	0029      	movs	r1, r5
 8003f92:	2332      	movs	r3, #50	; 0x32
 8003f94:	0038      	movs	r0, r7
 8003f96:	f009 fe19 	bl	800dbcc <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003f9a:	2316      	movs	r3, #22
 8003f9c:	435c      	muls	r4, r3
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	5b1b      	ldrh	r3, [r3, r4]
 8003fa2:	2205      	movs	r2, #5
 8003fa4:	0059      	lsls	r1, r3, #1
 8003fa6:	18c9      	adds	r1, r1, r3
 8003fa8:	4b33      	ldr	r3, [pc, #204]	; (8004078 <DisplayTopology+0x190>)
 8003faa:	0049      	lsls	r1, r1, #1
 8003fac:	469c      	mov	ip, r3
 8003fae:	0028      	movs	r0, r5
 8003fb0:	4461      	add	r1, ip
 8003fb2:	f00f ff50 	bl	8013e56 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003fb6:	4643      	mov	r3, r8
 8003fb8:	2205      	movs	r2, #5
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	0029      	movs	r1, r5
 8003fbe:	2332      	movs	r3, #50	; 0x32
 8003fc0:	0038      	movs	r0, r7
 8003fc2:	f009 fe03 	bl	800dbcc <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003fc6:	4643      	mov	r3, r8
 8003fc8:	2201      	movs	r2, #1
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	492b      	ldr	r1, [pc, #172]	; (800407c <DisplayTopology+0x194>)
 8003fce:	2332      	movs	r3, #50	; 0x32
 8003fd0:	0038      	movs	r0, r7
 8003fd2:	f009 fdfb 	bl	800dbcc <writePxMutex>
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	1ca6      	adds	r6, r4, #2
 8003fda:	330c      	adds	r3, #12
 8003fdc:	444e      	add	r6, r9
 8003fde:	191c      	adds	r4, r3, r4
			if(!array[row][col])
 8003fe0:	8832      	ldrh	r2, [r6, #0]
 8003fe2:	2a00      	cmp	r2, #0
 8003fe4:	d12f      	bne.n	8004046 <DisplayTopology+0x15e>
				sprintf(pcUserMessage,"%d\t",0);
 8003fe6:	4926      	ldr	r1, [pc, #152]	; (8004080 <DisplayTopology+0x198>)
 8003fe8:	0028      	movs	r0, r5
 8003fea:	f00f fedf 	bl	8013dac <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003fee:	0028      	movs	r0, r5
 8003ff0:	f7fc f892 	bl	8000118 <strlen>
 8003ff4:	4643      	mov	r3, r8
 8003ff6:	b282      	uxth	r2, r0
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	0029      	movs	r1, r5
 8003ffc:	2332      	movs	r3, #50	; 0x32
 8003ffe:	0038      	movs	r0, r7
 8004000:	3602      	adds	r6, #2
 8004002:	f009 fde3 	bl	800dbcc <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8004006:	42a6      	cmp	r6, r4
 8004008:	d1ea      	bne.n	8003fe0 <DisplayTopology+0xf8>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 800400a:	4643      	mov	r3, r8
 800400c:	2202      	movs	r2, #2
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	491c      	ldr	r1, [pc, #112]	; (8004084 <DisplayTopology+0x19c>)
 8004012:	2332      	movs	r3, #50	; 0x32
 8004014:	0038      	movs	r0, r7
 8004016:	f009 fdd9 	bl	800dbcc <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 800401a:	4653      	mov	r3, sl
 800401c:	b2dc      	uxtb	r4, r3
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <DisplayTopology+0x180>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	42a3      	cmp	r3, r4
 8004024:	d8a7      	bhi.n	8003f76 <DisplayTopology+0x8e>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8004026:	2301      	movs	r3, #1
 8004028:	425b      	negs	r3, r3
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2201      	movs	r2, #1
 800402e:	3333      	adds	r3, #51	; 0x33
 8004030:	4915      	ldr	r1, [pc, #84]	; (8004088 <DisplayTopology+0x1a0>)
 8004032:	0038      	movs	r0, r7
 8004034:	f009 fdca 	bl	800dbcc <writePxMutex>
}
 8004038:	b003      	add	sp, #12
 800403a:	bc3c      	pop	{r2, r3, r4, r5}
 800403c:	4690      	mov	r8, r2
 800403e:	4699      	mov	r9, r3
 8004040:	46a2      	mov	sl, r4
 8004042:	46ab      	mov	fp, r5
 8004044:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8004046:	2307      	movs	r3, #7
 8004048:	4659      	mov	r1, fp
 800404a:	4013      	ands	r3, r2
 800404c:	0028      	movs	r0, r5
 800404e:	08d2      	lsrs	r2, r2, #3
 8004050:	f00f feac 	bl	8013dac <sprintf>
 8004054:	e7cb      	b.n	8003fee <DisplayTopology+0x106>
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	20000ba8 	.word	0x20000ba8
 800405c:	080189f0 	.word	0x080189f0
 8004060:	08018a04 	.word	0x08018a04
 8004064:	08019890 	.word	0x08019890
 8004068:	20000010 	.word	0x20000010
 800406c:	20000ee4 	.word	0x20000ee4
 8004070:	08018a1c 	.word	0x08018a1c
 8004074:	08018a0c 	.word	0x08018a0c
 8004078:	080181fc 	.word	0x080181fc
 800407c:	08018a00 	.word	0x08018a00
 8004080:	08018a18 	.word	0x08018a18
 8004084:	08018b28 	.word	0x08018b28
 8004088:	0801b4d8 	.word	0x0801b4d8

0800408c <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 800408c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408e:	4645      	mov	r5, r8
 8004090:	46de      	mov	lr, fp
 8004092:	4657      	mov	r7, sl
 8004094:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8004096:	4934      	ldr	r1, [pc, #208]	; (8004168 <DisplayPortsDir+0xdc>)
void DisplayPortsDir(uint8_t port){
 8004098:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 800409a:	3140      	adds	r1, #64	; 0x40
 800409c:	000a      	movs	r2, r1
 800409e:	4b33      	ldr	r3, [pc, #204]	; (800416c <DisplayPortsDir+0xe0>)
void DisplayPortsDir(uint8_t port){
 80040a0:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 80040a2:	cb31      	ldmia	r3!, {r0, r4, r5}
 80040a4:	c231      	stmia	r2!, {r0, r4, r5}
 80040a6:	cb31      	ldmia	r3!, {r0, r4, r5}
 80040a8:	c231      	stmia	r2!, {r0, r4, r5}
 80040aa:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 80040ac:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 80040ae:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80040b0:	2301      	movs	r3, #1
 80040b2:	425b      	negs	r3, r3
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	221b      	movs	r2, #27
 80040b8:	3333      	adds	r3, #51	; 0x33
 80040ba:	4650      	mov	r0, sl
 80040bc:	f009 fd86 	bl	800dbcc <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 80040c0:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <DisplayPortsDir+0xe4>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d035      	beq.n	8004134 <DisplayPortsDir+0xa8>
 80040c8:	2301      	movs	r3, #1
 80040ca:	4699      	mov	r9, r3
 80040cc:	4b29      	ldr	r3, [pc, #164]	; (8004174 <DisplayPortsDir+0xe8>)
 80040ce:	4698      	mov	r8, r3
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040d0:	4b29      	ldr	r3, [pc, #164]	; (8004178 <DisplayPortsDir+0xec>)
 80040d2:	469b      	mov	fp, r3
 80040d4:	464b      	mov	r3, r9
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040d6:	2680      	movs	r6, #128	; 0x80
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040d8:	4f23      	ldr	r7, [pc, #140]	; (8004168 <DisplayPortsDir+0xdc>)
 80040da:	1e5d      	subs	r5, r3, #1
 80040dc:	006d      	lsls	r5, r5, #1
	for(uint8_t i =1; i <= N; i++){
 80040de:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040e0:	0236      	lsls	r6, r6, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040e2:	3740      	adds	r7, #64	; 0x40
 80040e4:	e002      	b.n	80040ec <DisplayPortsDir+0x60>
 80040e6:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 80040e8:	2c0a      	cmp	r4, #10
 80040ea:	d01b      	beq.n	8004124 <DisplayPortsDir+0x98>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040ec:	0031      	movs	r1, r6
 80040ee:	4642      	mov	r2, r8
 80040f0:	4119      	asrs	r1, r3
 80040f2:	5b52      	ldrh	r2, [r2, r5]
 80040f4:	1c5c      	adds	r4, r3, #1
 80040f6:	4211      	tst	r1, r2
 80040f8:	d0f5      	beq.n	80040e6 <DisplayPortsDir+0x5a>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040fa:	0023      	movs	r3, r4
 80040fc:	464a      	mov	r2, r9
 80040fe:	4659      	mov	r1, fp
 8004100:	0038      	movs	r0, r7
 8004102:	f00f fe53 	bl	8013dac <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8004106:	0038      	movs	r0, r7
 8004108:	f7fc f806 	bl	8000118 <strlen>
 800410c:	2301      	movs	r3, #1
 800410e:	425b      	negs	r3, r3
 8004110:	b282      	uxth	r2, r0
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	0039      	movs	r1, r7
 8004116:	3333      	adds	r3, #51	; 0x33
 8004118:	4650      	mov	r0, sl
 800411a:	f009 fd57 	bl	800dbcc <writePxMutex>
 800411e:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8004120:	2c0a      	cmp	r4, #10
 8004122:	d1e3      	bne.n	80040ec <DisplayPortsDir+0x60>
	for(uint8_t i =1; i <= N; i++){
 8004124:	464b      	mov	r3, r9
 8004126:	3301      	adds	r3, #1
 8004128:	b2db      	uxtb	r3, r3
 800412a:	4699      	mov	r9, r3
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <DisplayPortsDir+0xe4>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	454b      	cmp	r3, r9
 8004132:	d2cf      	bcs.n	80040d4 <DisplayPortsDir+0x48>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8004134:	490c      	ldr	r1, [pc, #48]	; (8004168 <DisplayPortsDir+0xdc>)
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <DisplayPortsDir+0xf0>)
 8004138:	3140      	adds	r1, #64	; 0x40
 800413a:	000a      	movs	r2, r1
 800413c:	cb31      	ldmia	r3!, {r0, r4, r5}
 800413e:	c231      	stmia	r2!, {r0, r4, r5}
 8004140:	cb31      	ldmia	r3!, {r0, r4, r5}
 8004142:	c231      	stmia	r2!, {r0, r4, r5}
 8004144:	cb11      	ldmia	r3!, {r0, r4}
 8004146:	c211      	stmia	r2!, {r0, r4}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004148:	2301      	movs	r3, #1
 800414a:	425b      	negs	r3, r3
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	221f      	movs	r2, #31
 8004150:	3333      	adds	r3, #51	; 0x33
 8004152:	4650      	mov	r0, sl
 8004154:	f009 fd3a 	bl	800dbcc <writePxMutex>
	HAL_MAX_DELAY);
}
 8004158:	b003      	add	sp, #12
 800415a:	bc3c      	pop	{r2, r3, r4, r5}
 800415c:	4690      	mov	r8, r2
 800415e:	4699      	mov	r9, r3
 8004160:	46a2      	mov	sl, r4
 8004162:	46ab      	mov	fp, r5
 8004164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	20000ba8 	.word	0x20000ba8
 800416c:	08018a24 	.word	0x08018a24
 8004170:	20000010 	.word	0x20000010
 8004174:	20006d3c 	.word	0x20006d3c
 8004178:	08018a40 	.word	0x08018a40
 800417c:	08018a54 	.word	0x08018a54

08004180 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004182:	46de      	mov	lr, fp
 8004184:	464e      	mov	r6, r9
 8004186:	4645      	mov	r5, r8
 8004188:	4657      	mov	r7, sl
 800418a:	b5e0      	push	{r5, r6, r7, lr}
 800418c:	b085      	sub	sp, #20
 800418e:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004190:	f009 ffbe 	bl	800e110 <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8004194:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004196:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8004198:	4d98      	ldr	r5, [pc, #608]	; (80043fc <DisplayModuleStatus+0x27c>)
	strcpy((char* )pcOutputString,"");
 800419a:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 800419c:	4b98      	ldr	r3, [pc, #608]	; (8004400 <DisplayModuleStatus+0x280>)
 800419e:	3540      	adds	r5, #64	; 0x40
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	4998      	ldr	r1, [pc, #608]	; (8004404 <DisplayModuleStatus+0x284>)
 80041a4:	0028      	movs	r0, r5
 80041a6:	f00f fe01 	bl	8013dac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041aa:	0029      	movs	r1, r5
 80041ac:	0020      	movs	r0, r4
 80041ae:	f00f fe1d 	bl	8013dec <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 80041b2:	4b95      	ldr	r3, [pc, #596]	; (8004408 <DisplayModuleStatus+0x288>)
 80041b4:	4995      	ldr	r1, [pc, #596]	; (800440c <DisplayModuleStatus+0x28c>)
 80041b6:	7c1a      	ldrb	r2, [r3, #16]
 80041b8:	0028      	movs	r0, r5
 80041ba:	4698      	mov	r8, r3
 80041bc:	f00f fdf6 	bl	8013dac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041c0:	0029      	movs	r1, r5
 80041c2:	0020      	movs	r0, r4
 80041c4:	f00f fe12 	bl	8013dec <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 80041c8:	2306      	movs	r3, #6
 80041ca:	2200      	movs	r2, #0
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	4990      	ldr	r1, [pc, #576]	; (8004410 <DisplayModuleStatus+0x290>)
 80041d0:	3b04      	subs	r3, #4
 80041d2:	0028      	movs	r0, r5
 80041d4:	f00f fdea 	bl	8013dac <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 80041d8:	0029      	movs	r1, r5
 80041da:	0020      	movs	r0, r4
 80041dc:	f00f fe06 	bl	8013dec <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 80041e0:	4a8c      	ldr	r2, [pc, #560]	; (8004414 <DisplayModuleStatus+0x294>)
 80041e2:	498d      	ldr	r1, [pc, #564]	; (8004418 <DisplayModuleStatus+0x298>)
 80041e4:	0028      	movs	r0, r5
 80041e6:	f00f fde1 	bl	8013dac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041ea:	0029      	movs	r1, r5
 80041ec:	0020      	movs	r0, r4
 80041ee:	f00f fdfd 	bl	8013dec <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 80041f2:	4a8a      	ldr	r2, [pc, #552]	; (800441c <DisplayModuleStatus+0x29c>)
 80041f4:	498a      	ldr	r1, [pc, #552]	; (8004420 <DisplayModuleStatus+0x2a0>)
 80041f6:	0028      	movs	r0, r5
 80041f8:	f00f fdd8 	bl	8013dac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041fc:	0029      	movs	r1, r5
 80041fe:	0020      	movs	r0, r4
 8004200:	f00f fdf4 	bl	8013dec <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004204:	002a      	movs	r2, r5
 8004206:	4b87      	ldr	r3, [pc, #540]	; (8004424 <DisplayModuleStatus+0x2a4>)
 8004208:	cb43      	ldmia	r3!, {r0, r1, r6}
 800420a:	c243      	stmia	r2!, {r0, r1, r6}
 800420c:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 800420e:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004210:	6011      	str	r1, [r2, #0]
 8004212:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 8004214:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004216:	8091      	strh	r1, [r2, #4]
 8004218:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 800421a:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 800421c:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 800421e:	f00f fde5 	bl	8013dec <strcat>
 8004222:	4b81      	ldr	r3, [pc, #516]	; (8004428 <DisplayModuleStatus+0x2a8>)
 8004224:	4699      	mov	r9, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8004226:	4b81      	ldr	r3, [pc, #516]	; (800442c <DisplayModuleStatus+0x2ac>)
 8004228:	469a      	mov	sl, r3
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
				break;
			case PORTBUTTON:
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 800422a:	4b81      	ldr	r3, [pc, #516]	; (8004430 <DisplayModuleStatus+0x2b0>)
 800422c:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 800422e:	0032      	movs	r2, r6
 8004230:	4649      	mov	r1, r9
 8004232:	0028      	movs	r0, r5
 8004234:	f00f fdba 	bl	8013dac <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004238:	0029      	movs	r1, r5
 800423a:	0020      	movs	r0, r4
 800423c:	f00f fdd6 	bl	8013dec <strcat>
		switch(portStatus[i]){
 8004240:	4643      	mov	r3, r8
 8004242:	3314      	adds	r3, #20
 8004244:	5cf3      	ldrb	r3, [r6, r3]
 8004246:	2b04      	cmp	r3, #4
 8004248:	d80b      	bhi.n	8004262 <DisplayModuleStatus+0xe2>
 800424a:	4652      	mov	r2, sl
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	58d3      	ldr	r3, [r2, r3]
 8004250:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8004252:	002a      	movs	r2, r5
 8004254:	4b77      	ldr	r3, [pc, #476]	; (8004434 <DisplayModuleStatus+0x2b4>)
 8004256:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004258:	c283      	stmia	r2!, {r0, r1, r7}
 800425a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800425c:	c283      	stmia	r2!, {r0, r1, r7}
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	8013      	strh	r3, [r2, #0]
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8004262:	0029      	movs	r1, r5
 8004264:	0020      	movs	r0, r4
 8004266:	3601      	adds	r6, #1
 8004268:	f00f fdc0 	bl	8013dec <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800426c:	2e06      	cmp	r6, #6
 800426e:	d1de      	bne.n	800422e <DisplayModuleStatus+0xae>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004270:	002a      	movs	r2, r5
 8004272:	4b71      	ldr	r3, [pc, #452]	; (8004438 <DisplayModuleStatus+0x2b8>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004274:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004276:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004278:	c243      	stmia	r2!, {r0, r1, r6}
 800427a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800427c:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 800427e:	0029      	movs	r1, r5
 8004280:	0020      	movs	r0, r4
 8004282:	f00f fdb3 	bl	8013dec <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004286:	4b6d      	ldr	r3, [pc, #436]	; (800443c <DisplayModuleStatus+0x2bc>)
 8004288:	4e6d      	ldr	r6, [pc, #436]	; (8004440 <DisplayModuleStatus+0x2c0>)
 800428a:	469b      	mov	fp, r3
 800428c:	4b6d      	ldr	r3, [pc, #436]	; (8004444 <DisplayModuleStatus+0x2c4>)
	strcat((char* )pcOutputString,pcUserMessage);
 800428e:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004290:	469a      	mov	sl, r3
 8004292:	e01d      	b.n	80042d0 <DisplayModuleStatus+0x150>
 8004294:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004296:	f005 ff89 	bl	800a1ac <GetPort>
 800429a:	465a      	mov	r2, fp
 800429c:	00ab      	lsls	r3, r5, #2
 800429e:	3b04      	subs	r3, #4
 80042a0:	0004      	movs	r4, r0
 80042a2:	58d0      	ldr	r0, [r2, r3]
 80042a4:	f005 ff82 	bl	800a1ac <GetPort>
 80042a8:	2340      	movs	r3, #64	; 0x40
 80042aa:	4699      	mov	r9, r3
 80042ac:	4b53      	ldr	r3, [pc, #332]	; (80043fc <DisplayModuleStatus+0x27c>)
 80042ae:	002a      	movs	r2, r5
 80042b0:	469c      	mov	ip, r3
 80042b2:	44e1      	add	r9, ip
 80042b4:	9000      	str	r0, [sp, #0]
 80042b6:	0023      	movs	r3, r4
 80042b8:	4651      	mov	r1, sl
 80042ba:	4648      	mov	r0, r9
 80042bc:	f00f fd76 	bl	8013dac <sprintf>
 80042c0:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 80042c2:	4649      	mov	r1, r9
 80042c4:	4640      	mov	r0, r8
 80042c6:	f00f fd91 	bl	8013dec <strcat>
 80042ca:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80042cc:	2d07      	cmp	r5, #7
 80042ce:	d011      	beq.n	80042f4 <DisplayModuleStatus+0x174>
		if(streamDMA[i - 1].Instance == 0){
 80042d0:	6833      	ldr	r3, [r6, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1de      	bne.n	8004294 <DisplayModuleStatus+0x114>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80042d6:	4c49      	ldr	r4, [pc, #292]	; (80043fc <DisplayModuleStatus+0x27c>)
 80042d8:	002a      	movs	r2, r5
 80042da:	3440      	adds	r4, #64	; 0x40
 80042dc:	495a      	ldr	r1, [pc, #360]	; (8004448 <DisplayModuleStatus+0x2c8>)
 80042de:	0020      	movs	r0, r4
 80042e0:	f00f fd64 	bl	8013dac <sprintf>
 80042e4:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 80042e6:	0021      	movs	r1, r4
 80042e8:	4640      	mov	r0, r8
 80042ea:	f00f fd7f 	bl	8013dec <strcat>
 80042ee:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80042f0:	2d07      	cmp	r5, #7
 80042f2:	d1ed      	bne.n	80042d0 <DisplayModuleStatus+0x150>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80042f4:	4640      	mov	r0, r8
 80042f6:	f7fb ff0f 	bl	8000118 <strlen>
 80042fa:	4644      	mov	r4, r8
 80042fc:	0005      	movs	r5, r0
 80042fe:	4b53      	ldr	r3, [pc, #332]	; (800444c <DisplayModuleStatus+0x2cc>)
 8004300:	2202      	movs	r2, #2
 8004302:	0019      	movs	r1, r3
 8004304:	1820      	adds	r0, r4, r0
 8004306:	4698      	mov	r8, r3
 8004308:	f00f fb4d 	bl	80139a6 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 800430c:	1ca8      	adds	r0, r5, #2
 800430e:	221d      	movs	r2, #29
 8004310:	1820      	adds	r0, r4, r0
 8004312:	494f      	ldr	r1, [pc, #316]	; (8004450 <DisplayModuleStatus+0x2d0>)
 8004314:	f00f fb47 	bl	80139a6 <memcpy>
	temp =strlen((char* )pcOutputString);
 8004318:	231e      	movs	r3, #30
 800431a:	469b      	mov	fp, r3
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
		{
			sprintf(pcUserMessage,"P%d ",p);
 800431c:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <DisplayModuleStatus+0x2d4>)
	temp =strlen((char* )pcOutputString);
 800431e:	44ab      	add	fp, r5
			sprintf(pcUserMessage,"P%d ",p);
 8004320:	4699      	mov	r9, r3
 8004322:	2340      	movs	r3, #64	; 0x40
 8004324:	469a      	mov	sl, r3
 8004326:	4b35      	ldr	r3, [pc, #212]	; (80043fc <DisplayModuleStatus+0x27c>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004328:	2580      	movs	r5, #128	; 0x80
			sprintf(pcUserMessage,"P%d ",p);
 800432a:	469c      	mov	ip, r3
	temp =strlen((char* )pcOutputString);
 800432c:	2200      	movs	r2, #0
 800432e:	4e4a      	ldr	r6, [pc, #296]	; (8004458 <DisplayModuleStatus+0x2d8>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004330:	022d      	lsls	r5, r5, #8
			sprintf(pcUserMessage,"P%d ",p);
 8004332:	44e2      	add	sl, ip
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004334:	0029      	movs	r1, r5
 8004336:	4111      	asrs	r1, r2
 8004338:	4b31      	ldr	r3, [pc, #196]	; (8004400 <DisplayModuleStatus+0x280>)
 800433a:	1c57      	adds	r7, r2, #1
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	3b01      	subs	r3, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	5af3      	ldrh	r3, [r6, r3]
 8004344:	4219      	tst	r1, r3
 8004346:	d148      	bne.n	80043da <DisplayModuleStatus+0x25a>
 8004348:	003a      	movs	r2, r7
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800434a:	2f05      	cmp	r7, #5
 800434c:	d1f2      	bne.n	8004334 <DisplayModuleStatus+0x1b4>
			strcat((char* )pcOutputString,pcUserMessage);
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 800434e:	0020      	movs	r0, r4
 8004350:	f7fb fee2 	bl	8000118 <strlen>
 8004354:	465b      	mov	r3, fp
 8004356:	b29b      	uxth	r3, r3
 8004358:	0005      	movs	r5, r0
 800435a:	1820      	adds	r0, r4, r0
 800435c:	42ab      	cmp	r3, r5
 800435e:	d046      	beq.n	80043ee <DisplayModuleStatus+0x26e>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004360:	2203      	movs	r2, #3
 8004362:	4641      	mov	r1, r8
 8004364:	f00f fb1f 	bl	80139a6 <memcpy>
	
	/* Display output */
	if(port)
 8004368:	9b03      	ldr	r3, [sp, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00b      	beq.n	8004386 <DisplayModuleStatus+0x206>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800436e:	0020      	movs	r0, r4
 8004370:	f7fb fed2 	bl	8000118 <strlen>
 8004374:	2301      	movs	r3, #1
 8004376:	425b      	negs	r3, r3
 8004378:	b282      	uxth	r2, r0
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	0021      	movs	r1, r4
 800437e:	3333      	adds	r3, #51	; 0x33
 8004380:	9803      	ldr	r0, [sp, #12]
 8004382:	f009 fc23 	bl	800dbcc <writePxMutex>
	
}
 8004386:	b005      	add	sp, #20
 8004388:	bc3c      	pop	{r2, r3, r4, r5}
 800438a:	4690      	mov	r8, r2
 800438c:	4699      	mov	r9, r3
 800438e:	46a2      	mov	sl, r4
 8004390:	46ab      	mov	fp, r5
 8004392:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 8004394:	002a      	movs	r2, r5
 8004396:	4b31      	ldr	r3, [pc, #196]	; (800445c <DisplayModuleStatus+0x2dc>)
 8004398:	cb83      	ldmia	r3!, {r0, r1, r7}
 800439a:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 800439c:	e761      	b.n	8004262 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 800439e:	002a      	movs	r2, r5
 80043a0:	4b2f      	ldr	r3, [pc, #188]	; (8004460 <DisplayModuleStatus+0x2e0>)
 80043a2:	cb83      	ldmia	r3!, {r0, r1, r7}
 80043a4:	c283      	stmia	r2!, {r0, r1, r7}
 80043a6:	cb03      	ldmia	r3!, {r0, r1}
 80043a8:	c203      	stmia	r2!, {r0, r1}
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	7013      	strb	r3, [r2, #0]
				break;
 80043ae:	e758      	b.n	8004262 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 80043b0:	002b      	movs	r3, r5
 80043b2:	465a      	mov	r2, fp
 80043b4:	ca83      	ldmia	r2!, {r0, r1, r7}
 80043b6:	c383      	stmia	r3!, {r0, r1, r7}
 80043b8:	ca83      	ldmia	r2!, {r0, r1, r7}
 80043ba:	c383      	stmia	r3!, {r0, r1, r7}
 80043bc:	6811      	ldr	r1, [r2, #0]
 80043be:	6019      	str	r1, [r3, #0]
 80043c0:	8891      	ldrh	r1, [r2, #4]
 80043c2:	8099      	strh	r1, [r3, #4]
 80043c4:	7992      	ldrb	r2, [r2, #6]
 80043c6:	719a      	strb	r2, [r3, #6]
				break;
 80043c8:	e74b      	b.n	8004262 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Free\n\r");
 80043ca:	4b26      	ldr	r3, [pc, #152]	; (8004464 <DisplayModuleStatus+0x2e4>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	602a      	str	r2, [r5, #0]
 80043d0:	889a      	ldrh	r2, [r3, #4]
 80043d2:	80aa      	strh	r2, [r5, #4]
 80043d4:	799b      	ldrb	r3, [r3, #6]
 80043d6:	71ab      	strb	r3, [r5, #6]
				break;
 80043d8:	e743      	b.n	8004262 <DisplayModuleStatus+0xe2>
			sprintf(pcUserMessage,"P%d ",p);
 80043da:	4649      	mov	r1, r9
 80043dc:	003a      	movs	r2, r7
 80043de:	4650      	mov	r0, sl
 80043e0:	f00f fce4 	bl	8013dac <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80043e4:	4651      	mov	r1, sl
 80043e6:	0020      	movs	r0, r4
 80043e8:	f00f fd00 	bl	8013dec <strcat>
 80043ec:	e7ac      	b.n	8004348 <DisplayModuleStatus+0x1c8>
		strcat((char* )pcOutputString,"None");
 80043ee:	2205      	movs	r2, #5
 80043f0:	491d      	ldr	r1, [pc, #116]	; (8004468 <DisplayModuleStatus+0x2e8>)
 80043f2:	f00f fad8 	bl	80139a6 <memcpy>
 80043f6:	1d28      	adds	r0, r5, #4
 80043f8:	1820      	adds	r0, r4, r0
 80043fa:	e7b1      	b.n	8004360 <DisplayModuleStatus+0x1e0>
 80043fc:	20000ba8 	.word	0x20000ba8
 8004400:	20000aa8 	.word	0x20000aa8
 8004404:	08018a74 	.word	0x08018a74
 8004408:	20000c28 	.word	0x20000c28
 800440c:	08018a90 	.word	0x08018a90
 8004410:	08018aac 	.word	0x08018aac
 8004414:	08018acc 	.word	0x08018acc
 8004418:	08018ad8 	.word	0x08018ad8
 800441c:	08018af0 	.word	0x08018af0
 8004420:	08018afc 	.word	0x08018afc
 8004424:	08018b18 	.word	0x08018b18
 8004428:	08018b2c 	.word	0x08018b2c
 800442c:	08018150 	.word	0x08018150
 8004430:	08018b7c 	.word	0x08018b7c
 8004434:	08018b60 	.word	0x08018b60
 8004438:	08018b9c 	.word	0x08018b9c
 800443c:	20001860 	.word	0x20001860
 8004440:	2000208c 	.word	0x2000208c
 8004444:	08018bd0 	.word	0x08018bd0
 8004448:	08018bb4 	.word	0x08018bb4
 800444c:	08018b28 	.word	0x08018b28
 8004450:	08018c00 	.word	0x08018c00
 8004454:	08018c20 	.word	0x08018c20
 8004458:	20006d3c 	.word	0x20006d3c
 800445c:	08018b54 	.word	0x08018b54
 8004460:	08018b3c 	.word	0x08018b3c
 8004464:	08018b34 	.word	0x08018b34
 8004468:	08018c28 	.word	0x08018c28

0800446c <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 800446c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446e:	46c6      	mov	lr, r8
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004470:	4929      	ldr	r1, [pc, #164]	; (8004518 <GetID+0xac>)
int16_t GetID(char *string){
 8004472:	b500      	push	{lr}
 8004474:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 8004476:	f7fb fe45 	bl	8000104 <strcmp>
 800447a:	2800      	cmp	r0, #0
 800447c:	d02c      	beq.n	80044d8 <GetID+0x6c>
		return myID;
	else if(!strcmp(string,"all"))
 800447e:	4927      	ldr	r1, [pc, #156]	; (800451c <GetID+0xb0>)
 8004480:	0030      	movs	r0, r6
 8004482:	f7fb fe3f 	bl	8000104 <strcmp>
 8004486:	2800      	cmp	r0, #0
 8004488:	d02b      	beq.n	80044e2 <GetID+0x76>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 800448a:	7833      	ldrb	r3, [r6, #0]
 800448c:	4698      	mov	r8, r3
 800448e:	2b23      	cmp	r3, #35	; 0x23
 8004490:	d030      	beq.n	80044f4 <GetID+0x88>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004492:	4b23      	ldr	r3, [pc, #140]	; (8004520 <GetID+0xb4>)
 8004494:	781f      	ldrb	r7, [r3, #0]
 8004496:	2f00      	cmp	r7, #0
 8004498:	d00f      	beq.n	80044ba <GetID+0x4e>
 800449a:	2400      	movs	r4, #0
 800449c:	4d21      	ldr	r5, [pc, #132]	; (8004524 <GetID+0xb8>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 800449e:	0029      	movs	r1, r5
 80044a0:	0030      	movs	r0, r6
 80044a2:	f7fb fe2f 	bl	8000104 <strcmp>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d102      	bne.n	80044b0 <GetID+0x44>
 80044aa:	4643      	mov	r3, r8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d11a      	bne.n	80044e6 <GetID+0x7a>
		for(i =0; i < N; i++){
 80044b0:	3401      	adds	r4, #1
 80044b2:	b2e4      	uxtb	r4, r4
 80044b4:	350a      	adds	r5, #10
 80044b6:	42a7      	cmp	r7, r4
 80044b8:	d1f1      	bne.n	800449e <GetID+0x32>
 80044ba:	2400      	movs	r4, #0
 80044bc:	4d1a      	ldr	r5, [pc, #104]	; (8004528 <GetID+0xbc>)
 80044be:	3538      	adds	r5, #56	; 0x38
				return (i);
		}
		
		/* Check group alias */
		for(i =0; i < MaxNumOfGroups; i++){
			if(!strcmp(string,groupAlias[i]))
 80044c0:	0029      	movs	r1, r5
 80044c2:	0030      	movs	r0, r6
 80044c4:	f7fb fe1e 	bl	8000104 <strcmp>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d00e      	beq.n	80044ea <GetID+0x7e>
 80044cc:	3401      	adds	r4, #1
 80044ce:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80044d0:	2c0a      	cmp	r4, #10
 80044d2:	d1f5      	bne.n	80044c0 <GetID+0x54>
				return (BOS_MULTICAST | (i << 8));
		}
		
		return BOS_ERR_WrongName;
 80044d4:	2064      	movs	r0, #100	; 0x64
 80044d6:	e001      	b.n	80044dc <GetID+0x70>
		return myID;
 80044d8:	4b13      	ldr	r3, [pc, #76]	; (8004528 <GetID+0xbc>)
 80044da:	7818      	ldrb	r0, [r3, #0]
	}
	
}
 80044dc:	bc04      	pop	{r2}
 80044de:	4690      	mov	r8, r2
 80044e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_BROADCAST;
 80044e2:	20ff      	movs	r0, #255	; 0xff
 80044e4:	e7fa      	b.n	80044dc <GetID+0x70>
				return (i);
 80044e6:	b220      	sxth	r0, r4
 80044e8:	e7f8      	b.n	80044dc <GetID+0x70>
				return (BOS_MULTICAST | (i << 8));
 80044ea:	20fe      	movs	r0, #254	; 0xfe
 80044ec:	0224      	lsls	r4, r4, #8
 80044ee:	4320      	orrs	r0, r4
 80044f0:	b200      	sxth	r0, r0
 80044f2:	e7f3      	b.n	80044dc <GetID+0x70>
		id =atol(string + 1);
 80044f4:	1c70      	adds	r0, r6, #1
 80044f6:	f00e ff96 	bl	8013426 <atol>
 80044fa:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <GetID+0x9c>
 8004500:	4a07      	ldr	r2, [pc, #28]	; (8004520 <GetID+0xb4>)
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d204      	bcs.n	8004512 <GetID+0xa6>
		else if(id == myID)
 8004508:	4a07      	ldr	r2, [pc, #28]	; (8004528 <GetID+0xbc>)
			return BOS_ERR_WrongID;
 800450a:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 800450c:	7812      	ldrb	r2, [r2, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d1e4      	bne.n	80044dc <GetID+0x70>
			return myID;
 8004512:	b218      	sxth	r0, r3
 8004514:	e7e2      	b.n	80044dc <GetID+0x70>
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	08018c30 	.word	0x08018c30
 800451c:	08018c34 	.word	0x08018c34
 8004520:	20000010 	.word	0x20000010
 8004524:	20000dd4 	.word	0x20000dd4
 8004528:	20000aa8 	.word	0x20000aa8

0800452c <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 800452c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452e:	46c6      	mov	lr, r8
 8004530:	4c2c      	ldr	r4, [pc, #176]	; (80045e4 <NameModule+0xb8>)
 8004532:	0007      	movs	r7, r0
 8004534:	0026      	movs	r6, r4
 8004536:	000d      	movs	r5, r1
 8004538:	b500      	push	{lr}
 800453a:	3610      	adds	r6, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 800453c:	0021      	movs	r1, r4
 800453e:	0028      	movs	r0, r5
 8004540:	f7fb fde0 	bl	8000104 <strcmp>
 8004544:	2800      	cmp	r0, #0
 8004546:	d040      	beq.n	80045ca <NameModule+0x9e>
 8004548:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 800454a:	42a6      	cmp	r6, r4
 800454c:	d1f6      	bne.n	800453c <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 800454e:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <NameModule+0xbc>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d914      	bls.n	8004580 <NameModule+0x54>
 8004556:	4c25      	ldr	r4, [pc, #148]	; (80045ec <NameModule+0xc0>)
 8004558:	009e      	lsls	r6, r3, #2
 800455a:	18f6      	adds	r6, r6, r3
 800455c:	0023      	movs	r3, r4
 800455e:	0076      	lsls	r6, r6, #1
 8004560:	3b0a      	subs	r3, #10
 8004562:	18f6      	adds	r6, r6, r3
 8004564:	e002      	b.n	800456c <NameModule+0x40>
 8004566:	340a      	adds	r4, #10
 8004568:	42b4      	cmp	r4, r6
 800456a:	d009      	beq.n	8004580 <NameModule+0x54>
		if(!strcmp(alias,moduleAlias[i]))
 800456c:	0021      	movs	r1, r4
 800456e:	0028      	movs	r0, r5
 8004570:	f7fb fdc8 	bl	8000104 <strcmp>
 8004574:	2800      	cmp	r0, #0
 8004576:	d1f6      	bne.n	8004566 <NameModule+0x3a>
			return BOS_ERR_ExistingAlias;
 8004578:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 800457a:	bc04      	pop	{r2}
 800457c:	4690      	mov	r8, r2
 800457e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004580:	4e1b      	ldr	r6, [pc, #108]	; (80045f0 <NameModule+0xc4>)
 8004582:	0034      	movs	r4, r6
 8004584:	369c      	adds	r6, #156	; 0x9c
 8004586:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 8004588:	0021      	movs	r1, r4
 800458a:	0028      	movs	r0, r5
 800458c:	f7fb fdba 	bl	8000104 <strcmp>
 8004590:	2800      	cmp	r0, #0
 8004592:	d0f1      	beq.n	8004578 <NameModule+0x4c>
 8004594:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004596:	42a6      	cmp	r6, r4
 8004598:	d1f6      	bne.n	8004588 <NameModule+0x5c>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800459a:	4b16      	ldr	r3, [pc, #88]	; (80045f4 <NameModule+0xc8>)
 800459c:	4c16      	ldr	r4, [pc, #88]	; (80045f8 <NameModule+0xcc>)
 800459e:	4698      	mov	r8, r3
 80045a0:	61dc      	str	r4, [r3, #28]
 80045a2:	e004      	b.n	80045ae <NameModule+0x82>
 80045a4:	4643      	mov	r3, r8
 80045a6:	6864      	ldr	r4, [r4, #4]
 80045a8:	61dc      	str	r4, [r3, #28]
 80045aa:	2c00      	cmp	r4, #0
 80045ac:	d00f      	beq.n	80045ce <NameModule+0xa2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	681e      	ldr	r6, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80045b2:	0030      	movs	r0, r6
 80045b4:	f7fb fdb0 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80045b8:	0031      	movs	r1, r6
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80045ba:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80045bc:	0028      	movs	r0, r5
 80045be:	f00f fc39 	bl	8013e34 <strncmp>
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d1ee      	bne.n	80045a4 <NameModule+0x78>
			return BOS_ERR_ExistingCmd;
 80045c6:	2008      	movs	r0, #8
 80045c8:	e7d7      	b.n	800457a <NameModule+0x4e>
			return BOS_ERR_Keyword;
 80045ca:	2006      	movs	r0, #6
 80045cc:	e7d5      	b.n	800457a <NameModule+0x4e>
	strcpy(moduleAlias[module],alias);
 80045ce:	00b8      	lsls	r0, r7, #2
 80045d0:	19c0      	adds	r0, r0, r7
 80045d2:	4f0a      	ldr	r7, [pc, #40]	; (80045fc <NameModule+0xd0>)
 80045d4:	0040      	lsls	r0, r0, #1
 80045d6:	0029      	movs	r1, r5
 80045d8:	19c0      	adds	r0, r0, r7
 80045da:	f00f fc23 	bl	8013e24 <strcpy>
	result =SaveEEalias();
 80045de:	f7ff f87f 	bl	80036e0 <SaveEEalias>
	return result;
 80045e2:	e7ca      	b.n	800457a <NameModule+0x4e>
 80045e4:	080181ac 	.word	0x080181ac
 80045e8:	20000010 	.word	0x20000010
 80045ec:	20000dde 	.word	0x20000dde
 80045f0:	20000aa8 	.word	0x20000aa8
 80045f4:	20000c28 	.word	0x20000c28
 80045f8:	200000cc 	.word	0x200000cc
 80045fc:	20000dd4 	.word	0x20000dd4

08004600 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004602:	464f      	mov	r7, r9
 8004604:	4646      	mov	r6, r8
 8004606:	46d6      	mov	lr, sl
 8004608:	4b3e      	ldr	r3, [pc, #248]	; (8004704 <AddModuleToGroup+0x104>)
 800460a:	b5c0      	push	{r6, r7, lr}
 800460c:	001f      	movs	r7, r3
 800460e:	3738      	adds	r7, #56	; 0x38
 8004610:	4680      	mov	r8, r0
 8004612:	000e      	movs	r6, r1
 8004614:	4699      	mov	r9, r3
 8004616:	003c      	movs	r4, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004618:	2500      	movs	r5, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800461a:	0021      	movs	r1, r4
 800461c:	0030      	movs	r0, r6
 800461e:	f7fb fd71 	bl	8000104 <strcmp>
 8004622:	2800      	cmp	r0, #0
 8004624:	d02a      	beq.n	800467c <AddModuleToGroup+0x7c>
	for(i =0; i < MaxNumOfGroups; i++){
 8004626:	3501      	adds	r5, #1
 8004628:	340a      	adds	r4, #10
 800462a:	2d0a      	cmp	r5, #10
 800462c:	d1f5      	bne.n	800461a <AddModuleToGroup+0x1a>
 800462e:	4c36      	ldr	r4, [pc, #216]	; (8004708 <AddModuleToGroup+0x108>)
 8004630:	0025      	movs	r5, r4
 8004632:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004634:	0021      	movs	r1, r4
 8004636:	0030      	movs	r0, r6
 8004638:	f7fb fd64 	bl	8000104 <strcmp>
 800463c:	2800      	cmp	r0, #0
 800463e:	d051      	beq.n	80046e4 <AddModuleToGroup+0xe4>
 8004640:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 8004642:	42a5      	cmp	r5, r4
 8004644:	d1f6      	bne.n	8004634 <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 8004646:	4b31      	ldr	r3, [pc, #196]	; (800470c <AddModuleToGroup+0x10c>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d920      	bls.n	8004690 <AddModuleToGroup+0x90>
 800464e:	4c30      	ldr	r4, [pc, #192]	; (8004710 <AddModuleToGroup+0x110>)
 8004650:	009d      	lsls	r5, r3, #2
 8004652:	18ed      	adds	r5, r5, r3
 8004654:	0023      	movs	r3, r4
 8004656:	006d      	lsls	r5, r5, #1
 8004658:	3b0a      	subs	r3, #10
 800465a:	18ed      	adds	r5, r5, r3
 800465c:	e002      	b.n	8004664 <AddModuleToGroup+0x64>
 800465e:	340a      	adds	r4, #10
 8004660:	42a5      	cmp	r5, r4
 8004662:	d015      	beq.n	8004690 <AddModuleToGroup+0x90>
		if(!strcmp(group,moduleAlias[j]))
 8004664:	0021      	movs	r1, r4
 8004666:	0030      	movs	r0, r6
 8004668:	f7fb fd4c 	bl	8000104 <strcmp>
 800466c:	2800      	cmp	r0, #0
 800466e:	d1f6      	bne.n	800465e <AddModuleToGroup+0x5e>
			return BOS_ERR_ExistingAlias;
 8004670:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 8004672:	bc1c      	pop	{r2, r3, r4}
 8004674:	4690      	mov	r8, r2
 8004676:	4699      	mov	r9, r3
 8004678:	46a2      	mov	sl, r4
 800467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			groupModules[module - 1] |=(0x0001 << i);
 800467c:	2201      	movs	r2, #1
 800467e:	4647      	mov	r7, r8
 8004680:	40aa      	lsls	r2, r5
 8004682:	3f01      	subs	r7, #1
 8004684:	007f      	lsls	r7, r7, #1
 8004686:	444f      	add	r7, r9
 8004688:	88bb      	ldrh	r3, [r7, #4]
 800468a:	4313      	orrs	r3, r2
 800468c:	80bb      	strh	r3, [r7, #4]
			return result;
 800468e:	e7f0      	b.n	8004672 <AddModuleToGroup+0x72>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <AddModuleToGroup+0x114>)
 8004692:	4c21      	ldr	r4, [pc, #132]	; (8004718 <AddModuleToGroup+0x118>)
 8004694:	469a      	mov	sl, r3
 8004696:	621c      	str	r4, [r3, #32]
 8004698:	e004      	b.n	80046a4 <AddModuleToGroup+0xa4>
 800469a:	4653      	mov	r3, sl
 800469c:	6864      	ldr	r4, [r4, #4]
 800469e:	621c      	str	r4, [r3, #32]
 80046a0:	2c00      	cmp	r4, #0
 80046a2:	d00d      	beq.n	80046c0 <AddModuleToGroup+0xc0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80046a8:	0028      	movs	r0, r5
 80046aa:	f7fb fd35 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80046ae:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80046b0:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80046b2:	0030      	movs	r0, r6
 80046b4:	f00f fbbe 	bl	8013e34 <strncmp>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d1ee      	bne.n	800469a <AddModuleToGroup+0x9a>
			return BOS_ERR_ExistingCmd;
 80046bc:	2008      	movs	r0, #8
 80046be:	e7d8      	b.n	8004672 <AddModuleToGroup+0x72>
		if(!groupAlias[i][0]){
 80046c0:	783b      	ldrb	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d010      	beq.n	80046e8 <AddModuleToGroup+0xe8>
	for(i =0; i < MaxNumOfGroups; i++){
 80046c6:	3401      	adds	r4, #1
 80046c8:	370a      	adds	r7, #10
 80046ca:	2c0a      	cmp	r4, #10
 80046cc:	d1f8      	bne.n	80046c0 <AddModuleToGroup+0xc0>
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 80046d2:	4647      	mov	r7, r8
 80046d4:	3f01      	subs	r7, #1
 80046d6:	007f      	lsls	r7, r7, #1
 80046d8:	444f      	add	r7, r9
 80046da:	88ba      	ldrh	r2, [r7, #4]
	return result;
 80046dc:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 80046de:	4313      	orrs	r3, r2
 80046e0:	80bb      	strh	r3, [r7, #4]
	return result;
 80046e2:	e7c6      	b.n	8004672 <AddModuleToGroup+0x72>
			return BOS_ERR_Keyword;
 80046e4:	2006      	movs	r0, #6
 80046e6:	e7c4      	b.n	8004672 <AddModuleToGroup+0x72>
			strcpy(groupAlias[i],group);
 80046e8:	464b      	mov	r3, r9
 80046ea:	00a0      	lsls	r0, r4, #2
 80046ec:	1900      	adds	r0, r0, r4
 80046ee:	3338      	adds	r3, #56	; 0x38
 80046f0:	0040      	lsls	r0, r0, #1
 80046f2:	1818      	adds	r0, r3, r0
 80046f4:	0031      	movs	r1, r6
 80046f6:	f00f fb95 	bl	8013e24 <strcpy>
 80046fa:	2301      	movs	r3, #1
 80046fc:	40a3      	lsls	r3, r4
 80046fe:	b21b      	sxth	r3, r3
			break;
 8004700:	e7e7      	b.n	80046d2 <AddModuleToGroup+0xd2>
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	20000aa8 	.word	0x20000aa8
 8004708:	080181ac 	.word	0x080181ac
 800470c:	20000010 	.word	0x20000010
 8004710:	20000dde 	.word	0x20000dde
 8004714:	20000c28 	.word	0x20000c28
 8004718:	200000cc 	.word	0x200000cc

0800471c <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800471c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471e:	4645      	mov	r5, r8
 8004720:	4657      	mov	r7, sl
 8004722:	464e      	mov	r6, r9
 8004724:	46de      	mov	lr, fp
 8004726:	b5e0      	push	{r5, r6, r7, lr}
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 8004728:	4f82      	ldr	r7, [pc, #520]	; (8004934 <WriteToRemote+0x218>)
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800472a:	b083      	sub	sp, #12
 800472c:	ac0c      	add	r4, sp, #48	; 0x30
 800472e:	cc40      	ldmia	r4!, {r6}
	response =BOSMessaging.response;
 8004730:	783d      	ldrb	r5, [r7, #0]
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004732:	9001      	str	r0, [sp, #4]
 8004734:	7824      	ldrb	r4, [r4, #0]
	response =BOSMessaging.response;
 8004736:	46a8      	mov	r8, r5
	if(timeout)
 8004738:	2e00      	cmp	r6, #0
 800473a:	d059      	beq.n	80047f0 <WriteToRemote+0xd4>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 800473c:	2520      	movs	r5, #32
 800473e:	703d      	strb	r5, [r7, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
 8004740:	4265      	negs	r5, r4
 8004742:	416c      	adcs	r4, r5
 8004744:	2501      	movs	r5, #1
 8004746:	2022      	movs	r0, #34	; 0x22
 8004748:	4264      	negs	r4, r4
 800474a:	43ac      	bics	r4, r5
 800474c:	46a3      	mov	fp, r4
 800474e:	4684      	mov	ip, r0
 8004750:	b2d5      	uxtb	r5, r2
 8004752:	46a9      	mov	r9, r5
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 8004754:	4d78      	ldr	r5, [pc, #480]	; (8004938 <WriteToRemote+0x21c>)
		code = CODE_WRITE_REMOTE_FORCE;
 8004756:	44e3      	add	fp, ip
	if(remoteAddress < FLASH_BASE){
 8004758:	42aa      	cmp	r2, r5
 800475a:	d829      	bhi.n	80047b0 <WriteToRemote+0x94>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 800475c:	2224      	movs	r2, #36	; 0x24
 800475e:	464c      	mov	r4, r9
 8004760:	4d76      	ldr	r5, [pc, #472]	; (800493c <WriteToRemote+0x220>)
 8004762:	54ac      	strb	r4, [r5, r2]
		messageParams[1] =format;						// Send local format
 8004764:	002a      	movs	r2, r5
 8004766:	3224      	adds	r2, #36	; 0x24
 8004768:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 800476a:	2b08      	cmp	r3, #8
 800476c:	d814      	bhi.n	8004798 <WriteToRemote+0x7c>
 800476e:	4a74      	ldr	r2, [pc, #464]	; (8004940 <WriteToRemote+0x224>)
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	58d3      	ldr	r3, [r2, r3]
 8004774:	469f      	mov	pc, r3
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,code,10);
				break;
			case FMT_INT32:
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 8004776:	680b      	ldr	r3, [r1, #0]
 8004778:	3524      	adds	r5, #36	; 0x24
 800477a:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 800477c:	680b      	ldr	r3, [r1, #0]
 800477e:	121b      	asrs	r3, r3, #8
 8004780:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 8004782:	680b      	ldr	r3, [r1, #0]
 8004784:	141b      	asrs	r3, r3, #16
 8004786:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004788:	680b      	ldr	r3, [r1, #0]
 800478a:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,code,10);
 800478c:	220a      	movs	r2, #10
 800478e:	4659      	mov	r1, fp
 8004790:	9801      	ldr	r0, [sp, #4]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004792:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,code,10);
 8004794:	f003 fddc 	bl	8008350 <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 8004798:	4643      	mov	r3, r8
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 800479a:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 800479c:	703b      	strb	r3, [r7, #0]
	if(timeout){
 800479e:	2e00      	cmp	r6, #0
 80047a0:	d128      	bne.n	80047f4 <WriteToRemote+0xd8>
}
 80047a2:	b003      	add	sp, #12
 80047a4:	bc3c      	pop	{r2, r3, r4, r5}
 80047a6:	4690      	mov	r8, r2
 80047a8:	4699      	mov	r9, r3
 80047aa:	46a2      	mov	sl, r4
 80047ac:	46ab      	mov	fp, r5
 80047ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		messageParams[0] =0;
 80047b0:	2024      	movs	r0, #36	; 0x24
 80047b2:	4684      	mov	ip, r0
 80047b4:	2000      	movs	r0, #0
 80047b6:	4682      	mov	sl, r0
 80047b8:	4660      	mov	r0, ip
 80047ba:	4654      	mov	r4, sl
 80047bc:	4d5f      	ldr	r5, [pc, #380]	; (800493c <WriteToRemote+0x220>)
		messageParams[1] =format;							// Local format
 80047be:	44ac      	add	ip, r5
		messageParams[0] =0;
 80047c0:	542c      	strb	r4, [r5, r0]
		messageParams[1] =format;							// Local format
 80047c2:	4660      	mov	r0, ip
 80047c4:	7043      	strb	r3, [r0, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 80047c6:	0e10      	lsrs	r0, r2, #24
 80047c8:	4682      	mov	sl, r0
 80047ca:	4660      	mov	r0, ip
 80047cc:	4654      	mov	r4, sl
 80047ce:	7084      	strb	r4, [r0, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047d0:	0c10      	lsrs	r0, r2, #16
 80047d2:	4682      	mov	sl, r0
 80047d4:	4660      	mov	r0, ip
 80047d6:	4654      	mov	r4, sl
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 80047d8:	0a12      	lsrs	r2, r2, #8
 80047da:	7102      	strb	r2, [r0, #4]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047dc:	70c4      	strb	r4, [r0, #3]
		messageParams[5] =(uint8_t )remoteAddress;
 80047de:	4662      	mov	r2, ip
 80047e0:	4648      	mov	r0, r9
 80047e2:	7150      	strb	r0, [r2, #5]
		switch(format){
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d8d7      	bhi.n	8004798 <WriteToRemote+0x7c>
 80047e8:	4a56      	ldr	r2, [pc, #344]	; (8004944 <WriteToRemote+0x228>)
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	58d3      	ldr	r3, [r2, r3]
 80047ee:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 80047f0:	703e      	strb	r6, [r7, #0]
 80047f2:	e7a5      	b.n	8004740 <WriteToRemote+0x24>
		uint32_t t0 =HAL_GetTick();
 80047f4:	f00b fa26 	bl	800fc44 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80047f8:	2424      	movs	r4, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
 80047fa:	0007      	movs	r7, r0
 80047fc:	4d52      	ldr	r5, [pc, #328]	; (8004948 <WriteToRemote+0x22c>)
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80047fe:	5d28      	ldrb	r0, [r5, r4]
 8004800:	2800      	cmp	r0, #0
 8004802:	d0ce      	beq.n	80047a2 <WriteToRemote+0x86>
 8004804:	f00b fa1e 	bl	800fc44 <HAL_GetTick>
 8004808:	1bc0      	subs	r0, r0, r7
 800480a:	42b0      	cmp	r0, r6
 800480c:	d3f7      	bcc.n	80047fe <WriteToRemote+0xe2>
 800480e:	5d28      	ldrb	r0, [r5, r4]
		return responseStatus;
 8004810:	e7c7      	b.n	80047a2 <WriteToRemote+0x86>
				messageParams[2] =*(__IO int8_t* )localAddress;
 8004812:	780b      	ldrb	r3, [r1, #0]
 8004814:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 8004816:	2203      	movs	r2, #3
 8004818:	2120      	movs	r1, #32
 800481a:	9801      	ldr	r0, [sp, #4]
				messageParams[2] =*(__IO int8_t* )localAddress;
 800481c:	70ab      	strb	r3, [r5, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 800481e:	f003 fd97 	bl	8008350 <SendMessageToModule>
				break;
 8004822:	e7b9      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO int8_t* )localAddress;
 8004824:	780b      	ldrb	r3, [r1, #0]
 8004826:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,code,7);
 8004828:	2207      	movs	r2, #7
 800482a:	4659      	mov	r1, fp
 800482c:	9801      	ldr	r0, [sp, #4]
				messageParams[6] =*(__IO int8_t* )localAddress;
 800482e:	71ab      	strb	r3, [r5, #6]
				SendMessageToModule(module,code,7);
 8004830:	f003 fd8e 	bl	8008350 <SendMessageToModule>
				break;
 8004834:	e7b0      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004836:	680b      	ldr	r3, [r1, #0]
 8004838:	3524      	adds	r5, #36	; 0x24
 800483a:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 800483c:	680b      	ldr	r3, [r1, #0]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004842:	680b      	ldr	r3, [r1, #0]
 8004844:	0c1b      	lsrs	r3, r3, #16
 8004846:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004848:	680b      	ldr	r3, [r1, #0]
 800484a:	0e1b      	lsrs	r3, r3, #24
 800484c:	e79e      	b.n	800478c <WriteToRemote+0x70>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 800484e:	780b      	ldrb	r3, [r1, #0]
 8004850:	3524      	adds	r5, #36	; 0x24
 8004852:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004854:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004856:	220a      	movs	r2, #10
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004858:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800485a:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800485c:	9801      	ldr	r0, [sp, #4]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800485e:	712b      	strb	r3, [r5, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 8004860:	78cb      	ldrb	r3, [r1, #3]
 8004862:	716b      	strb	r3, [r5, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 8004864:	790b      	ldrb	r3, [r1, #4]
 8004866:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004868:	794b      	ldrb	r3, [r1, #5]
 800486a:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 800486c:	798b      	ldrb	r3, [r1, #6]
 800486e:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004870:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004872:	2120      	movs	r1, #32
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004874:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004876:	f003 fd6b 	bl	8008350 <SendMessageToModule>
				break;
 800487a:	e78d      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 800487c:	780b      	ldrb	r3, [r1, #0]
 800487e:	3524      	adds	r5, #36	; 0x24
 8004880:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004882:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,code,14);
 8004884:	220e      	movs	r2, #14
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004886:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004888:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,code,14);
 800488a:	9801      	ldr	r0, [sp, #4]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 800488c:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 800488e:	78cb      	ldrb	r3, [r1, #3]
 8004890:	726b      	strb	r3, [r5, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 8004892:	790b      	ldrb	r3, [r1, #4]
 8004894:	72ab      	strb	r3, [r5, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 8004896:	794b      	ldrb	r3, [r1, #5]
 8004898:	72eb      	strb	r3, [r5, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 800489a:	798b      	ldrb	r3, [r1, #6]
 800489c:	732b      	strb	r3, [r5, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800489e:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,code,14);
 80048a0:	4659      	mov	r1, fp
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 80048a2:	736b      	strb	r3, [r5, #13]
				SendMessageToModule(module,code,14);
 80048a4:	f003 fd54 	bl	8008350 <SendMessageToModule>
				break;
 80048a8:	e776      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80048aa:	880b      	ldrh	r3, [r1, #0]
 80048ac:	3524      	adds	r5, #36	; 0x24
 80048ae:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048b0:	880b      	ldrh	r3, [r1, #0]
 80048b2:	b21b      	sxth	r3, r3
 80048b4:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,code,8);
 80048b6:	2208      	movs	r2, #8
 80048b8:	4659      	mov	r1, fp
 80048ba:	9801      	ldr	r0, [sp, #4]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048bc:	71eb      	strb	r3, [r5, #7]
				SendMessageToModule(module,code,8);
 80048be:	f003 fd47 	bl	8008350 <SendMessageToModule>
				break;
 80048c2:	e769      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80048c4:	880b      	ldrh	r3, [r1, #0]
 80048c6:	3524      	adds	r5, #36	; 0x24
 80048c8:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80048ca:	880b      	ldrh	r3, [r1, #0]
 80048cc:	0a1b      	lsrs	r3, r3, #8
 80048ce:	e7f2      	b.n	80048b6 <WriteToRemote+0x19a>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80048d0:	680b      	ldr	r3, [r1, #0]
 80048d2:	3524      	adds	r5, #36	; 0x24
 80048d4:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80048d6:	680b      	ldr	r3, [r1, #0]
 80048d8:	121b      	asrs	r3, r3, #8
 80048da:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80048dc:	680b      	ldr	r3, [r1, #0]
 80048de:	141b      	asrs	r3, r3, #16
 80048e0:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048e2:	680b      	ldr	r3, [r1, #0]
 80048e4:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80048e6:	2206      	movs	r2, #6
 80048e8:	2120      	movs	r1, #32
 80048ea:	9801      	ldr	r0, [sp, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048ec:	716b      	strb	r3, [r5, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80048ee:	f003 fd2f 	bl	8008350 <SendMessageToModule>
				break;
 80048f2:	e751      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80048f4:	680b      	ldr	r3, [r1, #0]
 80048f6:	3524      	adds	r5, #36	; 0x24
 80048f8:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80048fa:	680b      	ldr	r3, [r1, #0]
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004900:	680b      	ldr	r3, [r1, #0]
 8004902:	0c1b      	lsrs	r3, r3, #16
 8004904:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004906:	680b      	ldr	r3, [r1, #0]
 8004908:	0e1b      	lsrs	r3, r3, #24
 800490a:	e7ec      	b.n	80048e6 <WriteToRemote+0x1ca>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 800490c:	880b      	ldrh	r3, [r1, #0]
 800490e:	3524      	adds	r5, #36	; 0x24
 8004910:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004912:	880b      	ldrh	r3, [r1, #0]
 8004914:	b21b      	sxth	r3, r3
 8004916:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004918:	2204      	movs	r2, #4
 800491a:	2120      	movs	r1, #32
 800491c:	9801      	ldr	r0, [sp, #4]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 800491e:	70eb      	strb	r3, [r5, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004920:	f003 fd16 	bl	8008350 <SendMessageToModule>
				break;
 8004924:	e738      	b.n	8004798 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004926:	880b      	ldrh	r3, [r1, #0]
 8004928:	3524      	adds	r5, #36	; 0x24
 800492a:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 800492c:	880b      	ldrh	r3, [r1, #0]
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	e7f2      	b.n	8004918 <WriteToRemote+0x1fc>
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	200067fc 	.word	0x200067fc
 8004938:	07ffffff 	.word	0x07ffffff
 800493c:	20000b28 	.word	0x20000b28
 8004940:	08018164 	.word	0x08018164
 8004944:	08018188 	.word	0x08018188
 8004948:	20000c28 	.word	0x20000c28

0800494c <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 800494c:	b530      	push	{r4, r5, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 800494e:	2101      	movs	r1, #1
char* GetDateString(void){
 8004950:	b083      	sub	sp, #12
	char *buffer =malloc(30 * sizeof(int8_t));
 8004952:	201e      	movs	r0, #30
 8004954:	f00e fd6e 	bl	8013434 <calloc>
 8004958:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 800495a:	4809      	ldr	r0, [pc, #36]	; (8004980 <GetDateString+0x34>)
 800495c:	4909      	ldr	r1, [pc, #36]	; (8004984 <GetDateString+0x38>)
 800495e:	7d02      	ldrb	r2, [r0, #20]
 8004960:	8b05      	ldrh	r5, [r0, #24]
 8004962:	7d83      	ldrb	r3, [r0, #22]
 8004964:	3a01      	subs	r2, #1
 8004966:	9501      	str	r5, [sp, #4]
 8004968:	7d40      	ldrb	r0, [r0, #21]
 800496a:	0092      	lsls	r2, r2, #2
 800496c:	188a      	adds	r2, r1, r2
 800496e:	9000      	str	r0, [sp, #0]
 8004970:	6912      	ldr	r2, [r2, #16]
 8004972:	312c      	adds	r1, #44	; 0x2c
 8004974:	0020      	movs	r0, r4
 8004976:	f00f fa19 	bl	8013dac <sprintf>
	return buffer;
}
 800497a:	0020      	movs	r0, r4
 800497c:	b003      	add	sp, #12
 800497e:	bd30      	pop	{r4, r5, pc}
 8004980:	2000687c 	.word	0x2000687c
 8004984:	080181ac 	.word	0x080181ac

08004988 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004988:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800498a:	4b08      	ldr	r3, [pc, #32]	; (80049ac <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800498c:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800498e:	7819      	ldrb	r1, [r3, #0]
 8004990:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004992:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004994:	9303      	str	r3, [sp, #12]
 8004996:	3b02      	subs	r3, #2
 8004998:	9302      	str	r3, [sp, #8]
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	3303      	adds	r3, #3
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	000b      	movs	r3, r1
 80049a2:	f003 fcf9 	bl	8008398 <StartScastDMAStream>
}
 80049a6:	b005      	add	sp, #20
 80049a8:	bd00      	pop	{pc}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	20000aa8 	.word	0x20000aa8

080049b0 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80049b0:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 80049b2:	b530      	push	{r4, r5, lr}
 80049b4:	0004      	movs	r4, r0
 80049b6:	000d      	movs	r5, r1
 80049b8:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80049ba:	9304      	str	r3, [sp, #16]
 80049bc:	9303      	str	r3, [sp, #12]
 80049be:	9302      	str	r3, [sp, #8]
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2100      	movs	r1, #0
 80049c8:	2000      	movs	r0, #0
 80049ca:	f7fe fecd 	bl	8003768 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049ce:	1e60      	subs	r0, r4, #1
 80049d0:	00c3      	lsls	r3, r0, #3
 80049d2:	4912      	ldr	r1, [pc, #72]	; (8004a1c <Unbridge+0x6c>)
 80049d4:	1a1b      	subs	r3, r3, r0
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	585b      	ldr	r3, [r3, r1]
 80049da:	1e6a      	subs	r2, r5, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d012      	beq.n	8004a06 <Unbridge+0x56>
 80049e0:	00d3      	lsls	r3, r2, #3
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	585b      	ldr	r3, [r3, r1]
		SwitchStreamDMAToMsg(port1);
 80049e8:	0020      	movs	r0, r4
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d104      	bne.n	80049f8 <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 80049ee:	f006 fee7 	bl	800b7c0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049f2:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80049f4:	b007      	add	sp, #28
 80049f6:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 80049f8:	f006 fee2 	bl	800b7c0 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80049fc:	0028      	movs	r0, r5
 80049fe:	f006 fedf 	bl	800b7c0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004a02:	2000      	movs	r0, #0
 8004a04:	e7f6      	b.n	80049f4 <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 8004a06:	00d3      	lsls	r3, r2, #3
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	585b      	ldr	r3, [r3, r1]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 8004a12:	0028      	movs	r0, r5
 8004a14:	e7eb      	b.n	80049ee <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 8004a16:	2068      	movs	r0, #104	; 0x68
 8004a18:	e7ec      	b.n	80049f4 <Unbridge+0x44>
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	2000208c 	.word	0x2000208c

08004a20 <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a22:	46d6      	mov	lr, sl
 8004a24:	4646      	mov	r6, r8
 8004a26:	464f      	mov	r7, r9
 8004a28:	b5c0      	push	{r6, r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a2a:	4e27      	ldr	r6, [pc, #156]	; (8004ac8 <AddSnippet.part.0+0xa8>)
 8004a2c:	4d27      	ldr	r5, [pc, #156]	; (8004acc <AddSnippet.part.0+0xac>)
 8004a2e:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a30:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a32:	3b01      	subs	r3, #1
 8004a34:	009c      	lsls	r4, r3, #2
 8004a36:	18e4      	adds	r4, r4, r3
 8004a38:	00a4      	lsls	r4, r4, #2
 8004a3a:	192c      	adds	r4, r5, r4
 8004a3c:	68e3      	ldr	r3, [r4, #12]
 8004a3e:	469a      	mov	sl, r3
 8004a40:	f7fb fb6a 	bl	8000118 <strlen>
 8004a44:	4653      	mov	r3, sl
 8004a46:	4681      	mov	r9, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d02e      	beq.n	8004aaa <AddSnippet.part.0+0x8a>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a4c:	4650      	mov	r0, sl
 8004a4e:	f7fb fb63 	bl	8000118 <strlen>
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a52:	4649      	mov	r1, r9
 8004a54:	3102      	adds	r1, #2
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a56:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a58:	1809      	adds	r1, r1, r0
 8004a5a:	4650      	mov	r0, sl
 8004a5c:	f00e ffde 	bl	8013a1c <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a60:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a62:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a64:	3a01      	subs	r2, #1
 8004a66:	0093      	lsls	r3, r2, #2
 8004a68:	189b      	adds	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	18eb      	adds	r3, r5, r3
 8004a6e:	68d8      	ldr	r0, [r3, #12]
 8004a70:	1c7a      	adds	r2, r7, #1
 8004a72:	1880      	adds	r0, r0, r2
 8004a74:	4641      	mov	r1, r8
 8004a76:	f00f f9d5 	bl	8013e24 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004a7a:	7832      	ldrb	r2, [r6, #0]
 8004a7c:	3a01      	subs	r2, #1
 8004a7e:	0093      	lsls	r3, r2, #2
 8004a80:	189b      	adds	r3, r3, r2
 8004a82:	2213      	movs	r2, #19
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	18eb      	adds	r3, r5, r3
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	55da      	strb	r2, [r3, r7]
 8004a8c:	7833      	ldrb	r3, [r6, #0]
 8004a8e:	3b01      	subs	r3, #1
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004a90:	0098      	lsls	r0, r3, #2
 8004a92:	18c0      	adds	r0, r0, r3
 8004a94:	0080      	lsls	r0, r0, #2
 8004a96:	1828      	adds	r0, r5, r0
 8004a98:	68c3      	ldr	r3, [r0, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <AddSnippet.part.0+0x9a>
			
		default:
			break;
	}
	
	return BOS_OK;
 8004a9e:	2000      	movs	r0, #0
}
 8004aa0:	bc1c      	pop	{r2, r3, r4}
 8004aa2:	4690      	mov	r8, r2
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	46a2      	mov	sl, r4
 8004aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004aaa:	3001      	adds	r0, #1
 8004aac:	f00e fd2e 	bl	801350c <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004ab0:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004ab2:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004ab4:	f00f f9b6 	bl	8013e24 <strcpy>
 8004ab8:	e7f1      	b.n	8004a9e <AddSnippet.part.0+0x7e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004aba:	2214      	movs	r2, #20
 8004abc:	2100      	movs	r1, #0
 8004abe:	f00e ff7b 	bl	80139b8 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004ac2:	200e      	movs	r0, #14
 8004ac4:	e7ec      	b.n	8004aa0 <AddSnippet.part.0+0x80>
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	200016e4 	.word	0x200016e4
 8004acc:	20006898 	.word	0x20006898

08004ad0 <StringToLowerCase>:
void StringToLowerCase(char *string){
 8004ad0:	b570      	push	{r4, r5, r6, lr}
	for(int i =0; string[i]; i++){
 8004ad2:	7804      	ldrb	r4, [r0, #0]
void StringToLowerCase(char *string){
 8004ad4:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004ad6:	2c00      	cmp	r4, #0
 8004ad8:	d00d      	beq.n	8004af6 <StringToLowerCase+0x26>
		string[i] =tolower(string[i]);
 8004ada:	2603      	movs	r6, #3
 8004adc:	f00e fd08 	bl	80134f0 <__locale_ctype_ptr>
 8004ae0:	1900      	adds	r0, r0, r4
 8004ae2:	7842      	ldrb	r2, [r0, #1]
 8004ae4:	4032      	ands	r2, r6
 8004ae6:	2a01      	cmp	r2, #1
 8004ae8:	d100      	bne.n	8004aec <StringToLowerCase+0x1c>
 8004aea:	3420      	adds	r4, #32
 8004aec:	702c      	strb	r4, [r5, #0]
 8004aee:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 8004af0:	782c      	ldrb	r4, [r5, #0]
 8004af2:	2c00      	cmp	r4, #0
 8004af4:	d1f2      	bne.n	8004adc <StringToLowerCase+0xc>
}
 8004af6:	bd70      	pop	{r4, r5, r6, pc}

08004af8 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afa:	4657      	mov	r7, sl
 8004afc:	464e      	mov	r6, r9
 8004afe:	46de      	mov	lr, fp
 8004b00:	4645      	mov	r5, r8
 8004b02:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004b04:	4ed8      	ldr	r6, [pc, #864]	; (8004e68 <ParseSnippetCondition+0x370>)
BOS_Status ParseSnippetCondition(char *string){
 8004b06:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004b08:	7834      	ldrb	r4, [r6, #0]
BOS_Status ParseSnippetCondition(char *string){
 8004b0a:	0007      	movs	r7, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004b0c:	2c05      	cmp	r4, #5
 8004b0e:	d067      	beq.n	8004be0 <ParseSnippetCondition+0xe8>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004b10:	00a3      	lsls	r3, r4, #2
 8004b12:	4dd6      	ldr	r5, [pc, #856]	; (8004e6c <ParseSnippetCondition+0x374>)
 8004b14:	1918      	adds	r0, r3, r4
 8004b16:	0080      	lsls	r0, r0, #2
 8004b18:	469a      	mov	sl, r3
 8004b1a:	182b      	adds	r3, r5, r0
 8004b1c:	4699      	mov	r9, r3
 8004b1e:	2300      	movs	r3, #0
 8004b20:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004b22:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004b24:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004b26:	1828      	adds	r0, r5, r0
 8004b28:	2204      	movs	r2, #4
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	f00e ff44 	bl	80139b8 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004b30:	783b      	ldrb	r3, [r7, #0]
 8004b32:	2b62      	cmp	r3, #98	; 0x62
 8004b34:	d102      	bne.n	8004b3c <ParseSnippetCondition+0x44>
 8004b36:	78bb      	ldrb	r3, [r7, #2]
 8004b38:	2b2e      	cmp	r3, #46	; 0x2e
 8004b3a:	d057      	beq.n	8004bec <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004b3c:	1d33      	adds	r3, r6, #4
 8004b3e:	4698      	mov	r8, r3
 8004b40:	0018      	movs	r0, r3
 8004b42:	0039      	movs	r1, r7
 8004b44:	f00f f96e 	bl	8013e24 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004b48:	4cc9      	ldr	r4, [pc, #804]	; (8004e70 <ParseSnippetCondition+0x378>)
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	0021      	movs	r1, r4
 8004b4e:	f00f ffe9 	bl	8014b24 <strtok>
		secondPart =strtok( NULL," ");
 8004b52:	0021      	movs	r1, r4
		firstPart =strtok((char* )cInputString," ");
 8004b54:	0007      	movs	r7, r0
		secondPart =strtok( NULL," ");
 8004b56:	2000      	movs	r0, #0
 8004b58:	f00f ffe4 	bl	8014b24 <strtok>
		thirdPart =strtok( NULL," ");
 8004b5c:	0021      	movs	r1, r4
		secondPart =strtok( NULL," ");
 8004b5e:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 8004b60:	2000      	movs	r0, #0
 8004b62:	f00f ffdf 	bl	8014b24 <strtok>
 8004b66:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004b68:	2f00      	cmp	r7, #0
 8004b6a:	d02f      	beq.n	8004bcc <ParseSnippetCondition+0xd4>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004b6c:	0038      	movs	r0, r7
 8004b6e:	f7fe fefd 	bl	800396c <IsModuleParameter>
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004b72:	4643      	mov	r3, r8
			modPar1 =IsModuleParameter(firstPart);
 8004b74:	1e07      	subs	r7, r0, #0
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004b76:	d036      	beq.n	8004be6 <ParseSnippetCondition+0xee>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d024      	beq.n	8004bc6 <ParseSnippetCondition+0xce>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004b7c:	2c00      	cmp	r4, #0
 8004b7e:	d025      	beq.n	8004bcc <ParseSnippetCondition+0xd4>
				modPar2 =IsModuleParameter(thirdPart);
 8004b80:	0020      	movs	r0, r4
 8004b82:	f7fe fef3 	bl	800396c <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d06b      	beq.n	8004c62 <ParseSnippetCondition+0x16a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	7833      	ldrb	r3, [r6, #0]
 8004b8e:	009c      	lsls	r4, r3, #2
 8004b90:	4699      	mov	r9, r3
 8004b92:	18e3      	adds	r3, r4, r3
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004b98:	18eb      	adds	r3, r5, r3
 8004b9a:	70df      	strb	r7, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004b9c:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b9e:	4640      	mov	r0, r8
 8004ba0:	f7fe fef0 	bl	8003984 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004ba4:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004ba6:	444c      	add	r4, r9
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004ba8:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004baa:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004bac:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004bae:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004bb0:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004bb2:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004bb4:	18ed      	adds	r5, r5, r3
 8004bb6:	786b      	ldrb	r3, [r5, #1]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <ParseSnippetCondition+0xd4>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004bbc:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004bbe:	3201      	adds	r2, #1
 8004bc0:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004bc2:	4698      	mov	r8, r3
 8004bc4:	e004      	b.n	8004bd0 <ParseSnippetCondition+0xd8>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004bc6:	2c00      	cmp	r4, #0
 8004bc8:	d100      	bne.n	8004bcc <ParseSnippetCondition+0xd4>
 8004bca:	e07f      	b.n	8004ccc <ParseSnippetCondition+0x1d4>
			return BOS_ERR_WrongParam;
 8004bcc:	2367      	movs	r3, #103	; 0x67
 8004bce:	4698      	mov	r8, r3
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004bd0:	4640      	mov	r0, r8
 8004bd2:	b00b      	add	sp, #44	; 0x2c
 8004bd4:	bc3c      	pop	{r2, r3, r4, r5}
 8004bd6:	4690      	mov	r8, r2
 8004bd8:	4699      	mov	r9, r3
 8004bda:	46a2      	mov	sl, r4
 8004bdc:	46ab      	mov	fp, r5
 8004bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_SNIP_MEM_FULL;
 8004be0:	230e      	movs	r3, #14
 8004be2:	4698      	mov	r8, r3
 8004be4:	e7f4      	b.n	8004bd0 <ParseSnippetCondition+0xd8>
			else if(secondPart != NULL && thirdPart != NULL){
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1c8      	bne.n	8004b7c <ParseSnippetCondition+0x84>
 8004bea:	e7ef      	b.n	8004bcc <ParseSnippetCondition+0xd4>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004bec:	787b      	ldrb	r3, [r7, #1]
 8004bee:	3b30      	subs	r3, #48	; 0x30
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004bf8:	465b      	mov	r3, fp
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d8e8      	bhi.n	8004bd0 <ParseSnippetCondition+0xd8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004bfe:	4649      	mov	r1, r9
 8004c00:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004c02:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004c04:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004c06:	1cfb      	adds	r3, r7, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004c08:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004c0a:	2207      	movs	r2, #7
 8004c0c:	4999      	ldr	r1, [pc, #612]	; (8004e74 <ParseSnippetCondition+0x37c>)
 8004c0e:	0018      	movs	r0, r3
 8004c10:	9307      	str	r3, [sp, #28]
 8004c12:	f00f f90f 	bl	8013e34 <strncmp>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d03d      	beq.n	8004c96 <ParseSnippetCondition+0x19e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004c1a:	220e      	movs	r2, #14
 8004c1c:	4996      	ldr	r1, [pc, #600]	; (8004e78 <ParseSnippetCondition+0x380>)
 8004c1e:	9807      	ldr	r0, [sp, #28]
 8004c20:	f00f f908 	bl	8013e34 <strncmp>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d15e      	bne.n	8004ce6 <ParseSnippetCondition+0x1ee>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004c28:	2306      	movs	r3, #6
 8004c2a:	464a      	mov	r2, r9
 8004c2c:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004c2e:	465b      	mov	r3, fp
 8004c30:	00da      	lsls	r2, r3, #3
 8004c32:	4b92      	ldr	r3, [pc, #584]	; (8004e7c <ParseSnippetCondition+0x384>)
 8004c34:	445a      	add	r2, fp
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	7a1b      	ldrb	r3, [r3, #8]
 8004c3a:	079b      	lsls	r3, r3, #30
 8004c3c:	d40e      	bmi.n	8004c5c <ParseSnippetCondition+0x164>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c3e:	2301      	movs	r3, #1
 8004c40:	9305      	str	r3, [sp, #20]
 8004c42:	4643      	mov	r3, r8
 8004c44:	2201      	movs	r2, #1
 8004c46:	9304      	str	r3, [sp, #16]
 8004c48:	9303      	str	r3, [sp, #12]
 8004c4a:	9302      	str	r3, [sp, #8]
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	2100      	movs	r1, #0
 8004c52:	2300      	movs	r3, #0
 8004c54:	4658      	mov	r0, fp
 8004c56:	f007 fb9f 	bl	800c398 <SetButtonEvents>
 8004c5a:	7834      	ldrb	r4, [r6, #0]
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004c5c:	3401      	adds	r4, #1
 8004c5e:	7034      	strb	r4, [r6, #0]
 8004c60:	e7b6      	b.n	8004bd0 <ParseSnippetCondition+0xd8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c62:	7832      	ldrb	r2, [r6, #0]
					float constant =atof(thirdPart);
 8004c64:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c66:	0093      	lsls	r3, r2, #2
 8004c68:	189b      	adds	r3, r3, r2
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004c70:	18eb      	adds	r3, r5, r3
 8004c72:	70df      	strb	r7, [r3, #3]
					float constant =atof(thirdPart);
 8004c74:	f00e fbcc 	bl	8013410 <atof>
 8004c78:	f7fe f8b8 	bl	8002dec <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c7c:	7833      	ldrb	r3, [r6, #0]
					float constant =atof(thirdPart);
 8004c7e:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c80:	009c      	lsls	r4, r3, #2
 8004c82:	18e0      	adds	r0, r4, r3
 8004c84:	0080      	lsls	r0, r0, #2
 8004c86:	3006      	adds	r0, #6
 8004c88:	1828      	adds	r0, r5, r0
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	a909      	add	r1, sp, #36	; 0x24
 8004c8e:	4699      	mov	r9, r3
 8004c90:	f00e fe89 	bl	80139a6 <memcpy>
 8004c94:	e783      	b.n	8004b9e <ParseSnippetCondition+0xa6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004c96:	2305      	movs	r3, #5
 8004c98:	4649      	mov	r1, r9
 8004c9a:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	4b77      	ldr	r3, [pc, #476]	; (8004e7c <ParseSnippetCondition+0x384>)
 8004ca0:	00ca      	lsls	r2, r1, #3
 8004ca2:	445a      	add	r2, fp
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	7a1b      	ldrb	r3, [r3, #8]
 8004caa:	421a      	tst	r2, r3
 8004cac:	d1d6      	bne.n	8004c5c <ParseSnippetCondition+0x164>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004cae:	2301      	movs	r3, #1
 8004cb0:	9305      	str	r3, [sp, #20]
 8004cb2:	4643      	mov	r3, r8
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	9304      	str	r3, [sp, #16]
 8004cb8:	9303      	str	r3, [sp, #12]
 8004cba:	9302      	str	r3, [sp, #8]
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4658      	mov	r0, fp
 8004cc4:	f007 fb68 	bl	800c398 <SetButtonEvents>
 8004cc8:	7834      	ldrb	r4, [r6, #0]
 8004cca:	e7c7      	b.n	8004c5c <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004ccc:	2102      	movs	r1, #2
 8004cce:	7832      	ldrb	r2, [r6, #0]
 8004cd0:	0093      	lsls	r3, r2, #2
 8004cd2:	189b      	adds	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cd8:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8004cda:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004cdc:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cde:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004ce0:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004ce2:	4698      	mov	r8, r3
 8004ce4:	e774      	b.n	8004bd0 <ParseSnippetCondition+0xd8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004ce6:	220c      	movs	r2, #12
 8004ce8:	4965      	ldr	r1, [pc, #404]	; (8004e80 <ParseSnippetCondition+0x388>)
 8004cea:	9807      	ldr	r0, [sp, #28]
 8004cec:	f00f f8a2 	bl	8013e34 <strncmp>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	d131      	bne.n	8004d58 <ParseSnippetCondition+0x260>
				if(!button[port].pressedX1Sec){
 8004cf4:	465b      	mov	r3, fp
 8004cf6:	00da      	lsls	r2, r3, #3
 8004cf8:	4b60      	ldr	r3, [pc, #384]	; (8004e7c <ParseSnippetCondition+0x384>)
 8004cfa:	445a      	add	r2, fp
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	789a      	ldrb	r2, [r3, #2]
 8004d00:	2a00      	cmp	r2, #0
 8004d02:	d063      	beq.n	8004dcc <ParseSnippetCondition+0x2d4>
				else if(!button[port].pressedX2Sec){
 8004d04:	78da      	ldrb	r2, [r3, #3]
 8004d06:	2a00      	cmp	r2, #0
 8004d08:	d07d      	beq.n	8004e06 <ParseSnippetCondition+0x30e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004d0a:	220c      	movs	r2, #12
				else if(!button[port].pressedX3Sec){
 8004d0c:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004d0e:	4690      	mov	r8, r2
				else if(!button[port].pressedX3Sec){
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1a3      	bne.n	8004c5c <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004d14:	0023      	movs	r3, r4
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d16:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004d18:	4453      	add	r3, sl
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	18eb      	adds	r3, r5, r3
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d22:	300f      	adds	r0, #15
 8004d24:	f00e fb79 	bl	801341a <atoi>
 8004d28:	7832      	ldrb	r2, [r6, #0]
 8004d2a:	b2c0      	uxtb	r0, r0
 8004d2c:	0093      	lsls	r3, r2, #2
 8004d2e:	189b      	adds	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d34:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d36:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d38:	9305      	str	r3, [sp, #20]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2100      	movs	r1, #0
 8004d40:	9304      	str	r3, [sp, #16]
 8004d42:	9303      	str	r3, [sp, #12]
 8004d44:	9302      	str	r3, [sp, #8]
 8004d46:	9001      	str	r0, [sp, #4]
 8004d48:	9300      	str	r3, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d4a:	4658      	mov	r0, fp
 8004d4c:	f007 fb24 	bl	800c398 <SetButtonEvents>
					status =BOS_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	7834      	ldrb	r4, [r6, #0]
 8004d54:	4698      	mov	r8, r3
 8004d56:	e781      	b.n	8004c5c <ParseSnippetCondition+0x164>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004d58:	220d      	movs	r2, #13
 8004d5a:	494a      	ldr	r1, [pc, #296]	; (8004e84 <ParseSnippetCondition+0x38c>)
 8004d5c:	9807      	ldr	r0, [sp, #28]
 8004d5e:	f00f f869 	bl	8013e34 <strncmp>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d000      	beq.n	8004d68 <ParseSnippetCondition+0x270>
 8004d66:	e779      	b.n	8004c5c <ParseSnippetCondition+0x164>
				if(!button[port].releasedY1Sec){
 8004d68:	465b      	mov	r3, fp
 8004d6a:	4a44      	ldr	r2, [pc, #272]	; (8004e7c <ParseSnippetCondition+0x384>)
 8004d6c:	00d9      	lsls	r1, r3, #3
 8004d6e:	18cb      	adds	r3, r1, r3
 8004d70:	18d3      	adds	r3, r2, r3
 8004d72:	7958      	ldrb	r0, [r3, #5]
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d05e      	beq.n	8004e36 <ParseSnippetCondition+0x33e>
				else if(!button[port].releasedY2Sec){
 8004d78:	799b      	ldrb	r3, [r3, #6]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d100      	bne.n	8004d80 <ParseSnippetCondition+0x288>
 8004d7e:	e083      	b.n	8004e88 <ParseSnippetCondition+0x390>
				else if(!button[port].releasedY3Sec){
 8004d80:	4459      	add	r1, fp
 8004d82:	1852      	adds	r2, r2, r1
 8004d84:	79d3      	ldrb	r3, [r2, #7]
 8004d86:	4699      	mov	r9, r3
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004d88:	230d      	movs	r3, #13
 8004d8a:	4698      	mov	r8, r3
				else if(!button[port].releasedY3Sec){
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d000      	beq.n	8004d94 <ParseSnippetCondition+0x29c>
 8004d92:	e763      	b.n	8004c5c <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d94:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d96:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d98:	4698      	mov	r8, r3
 8004d9a:	435c      	muls	r4, r3
 8004d9c:	3b06      	subs	r3, #6
 8004d9e:	192c      	adds	r4, r5, r4
 8004da0:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004da2:	3010      	adds	r0, #16
 8004da4:	f00e fb39 	bl	801341a <atoi>
 8004da8:	4642      	mov	r2, r8
 8004daa:	7833      	ldrb	r3, [r6, #0]
 8004dac:	b2c0      	uxtb	r0, r0
 8004dae:	4353      	muls	r3, r2
 8004db0:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004db2:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004db4:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004db6:	9305      	str	r3, [sp, #20]
 8004db8:	464b      	mov	r3, r9
 8004dba:	9303      	str	r3, [sp, #12]
 8004dbc:	9302      	str	r3, [sp, #8]
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9004      	str	r0, [sp, #16]
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	0019      	movs	r1, r3
 8004dca:	e7be      	b.n	8004d4a <ParseSnippetCondition+0x252>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004dcc:	2309      	movs	r3, #9
 8004dce:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dd0:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004dd2:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dd4:	300f      	adds	r0, #15
 8004dd6:	f00e fb20 	bl	801341a <atoi>
 8004dda:	7831      	ldrb	r1, [r6, #0]
 8004ddc:	b2c3      	uxtb	r3, r0
 8004dde:	008a      	lsls	r2, r1, #2
 8004de0:	1852      	adds	r2, r2, r1
 8004de2:	0092      	lsls	r2, r2, #2
 8004de4:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004de6:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004de8:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004dea:	9205      	str	r2, [sp, #20]
 8004dec:	4642      	mov	r2, r8
 8004dee:	9204      	str	r2, [sp, #16]
 8004df0:	9203      	str	r2, [sp, #12]
 8004df2:	9202      	str	r2, [sp, #8]
 8004df4:	9201      	str	r2, [sp, #4]
 8004df6:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4658      	mov	r0, fp
 8004dfe:	f007 facb 	bl	800c398 <SetButtonEvents>
 8004e02:	7834      	ldrb	r4, [r6, #0]
 8004e04:	e72a      	b.n	8004c5c <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004e06:	230a      	movs	r3, #10
 8004e08:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e0a:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004e0c:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e0e:	300f      	adds	r0, #15
 8004e10:	f00e fb03 	bl	801341a <atoi>
 8004e14:	7832      	ldrb	r2, [r6, #0]
 8004e16:	b2c0      	uxtb	r0, r0
 8004e18:	0093      	lsls	r3, r2, #2
 8004e1a:	189b      	adds	r3, r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e20:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e22:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e24:	9305      	str	r3, [sp, #20]
 8004e26:	4643      	mov	r3, r8
 8004e28:	9000      	str	r0, [sp, #0]
 8004e2a:	9304      	str	r3, [sp, #16]
 8004e2c:	9303      	str	r3, [sp, #12]
 8004e2e:	9302      	str	r3, [sp, #8]
 8004e30:	9301      	str	r3, [sp, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e32:	2300      	movs	r3, #0
 8004e34:	e7e0      	b.n	8004df8 <ParseSnippetCondition+0x300>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004e36:	230c      	movs	r3, #12
 8004e38:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e3a:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004e3c:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e3e:	3010      	adds	r0, #16
 8004e40:	f00e faeb 	bl	801341a <atoi>
 8004e44:	7832      	ldrb	r2, [r6, #0]
 8004e46:	b2c0      	uxtb	r0, r0
 8004e48:	0093      	lsls	r3, r2, #2
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e50:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e52:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e54:	9305      	str	r3, [sp, #20]
 8004e56:	4643      	mov	r3, r8
 8004e58:	9002      	str	r0, [sp, #8]
 8004e5a:	9304      	str	r3, [sp, #16]
 8004e5c:	9303      	str	r3, [sp, #12]
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2300      	movs	r3, #0
 8004e64:	e7c8      	b.n	8004df8 <ParseSnippetCondition+0x300>
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	200016e4 	.word	0x200016e4
 8004e6c:	20006898 	.word	0x20006898
 8004e70:	08018b30 	.word	0x08018b30
 8004e74:	080198c4 	.word	0x080198c4
 8004e78:	080190f8 	.word	0x080190f8
 8004e7c:	200023d8 	.word	0x200023d8
 8004e80:	08019108 	.word	0x08019108
 8004e84:	08019118 	.word	0x08019118
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004e88:	0023      	movs	r3, r4
 8004e8a:	220d      	movs	r2, #13
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e8c:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004e8e:	4453      	add	r3, sl
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	18eb      	adds	r3, r5, r3
 8004e94:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e96:	3010      	adds	r0, #16
 8004e98:	f00e fabf 	bl	801341a <atoi>
 8004e9c:	7832      	ldrb	r2, [r6, #0]
 8004e9e:	b2c0      	uxtb	r0, r0
 8004ea0:	0093      	lsls	r3, r2, #2
 8004ea2:	189b      	adds	r3, r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004ea8:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004eaa:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004eac:	9305      	str	r3, [sp, #20]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9003      	str	r0, [sp, #12]
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	9302      	str	r3, [sp, #8]
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	e744      	b.n	8004d4a <ParseSnippetCondition+0x252>

08004ec0 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec2:	46de      	mov	lr, fp
 8004ec4:	4657      	mov	r7, sl
 8004ec6:	4645      	mov	r5, r8
 8004ec8:	464e      	mov	r6, r9
 8004eca:	468a      	mov	sl, r1
 8004ecc:	b5e0      	push	{r5, r6, r7, lr}
 8004ece:	b08b      	sub	sp, #44	; 0x2c
 8004ed0:	9002      	str	r0, [sp, #8]
 8004ed2:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	2209      	movs	r2, #9
 8004ed8:	a807      	add	r0, sp, #28
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004eda:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004edc:	f00e fd6c 	bl	80139b8 <memset>
 8004ee0:	4bcd      	ldr	r3, [pc, #820]	; (8005218 <CLI_CommandParser+0x358>)
				if(id == myID){
 8004ee2:	4656      	mov	r6, sl
 8004ee4:	4698      	mov	r8, r3
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ee6:	4bcd      	ldr	r3, [pc, #820]	; (800521c <CLI_CommandParser+0x35c>)
				if(id == myID){
 8004ee8:	46ba      	mov	sl, r7
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004eea:	469b      	mov	fp, r3
 8004eec:	e02d      	b.n	8004f4a <CLI_CommandParser+0x8a>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004eee:	2206      	movs	r2, #6
 8004ef0:	49cb      	ldr	r1, [pc, #812]	; (8005220 <CLI_CommandParser+0x360>)
 8004ef2:	0028      	movs	r0, r5
 8004ef4:	f00e ff9e 	bl	8013e34 <strncmp>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d057      	beq.n	8004fac <CLI_CommandParser+0xec>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004efc:	2f02      	cmp	r7, #2
 8004efe:	d100      	bne.n	8004f02 <CLI_CommandParser+0x42>
 8004f00:	e0d2      	b.n	80050a8 <CLI_CommandParser+0x1e8>
			loc =strchr((char* )cInputString,'.');
 8004f02:	212e      	movs	r1, #46	; 0x2e
 8004f04:	0028      	movs	r0, r5
 8004f06:	f00e ff7f 	bl	8013e08 <strchr>
 8004f0a:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004f0c:	d007      	beq.n	8004f1e <CLI_CommandParser+0x5e>
 8004f0e:	3803      	subs	r0, #3
 8004f10:	2203      	movs	r2, #3
 8004f12:	4659      	mov	r1, fp
 8004f14:	f00e ff8e 	bl	8013e34 <strncmp>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d000      	beq.n	8004f1e <CLI_CommandParser+0x5e>
 8004f1c:	e079      	b.n	8005012 <CLI_CommandParser+0x152>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f1e:	2299      	movs	r2, #153	; 0x99
 8004f20:	0021      	movs	r1, r4
 8004f22:	0092      	lsls	r2, r2, #2
 8004f24:	0028      	movs	r0, r5
 8004f26:	f009 f87b 	bl	800e020 <FreeRTOS_CLIProcessCommand>
 8004f2a:	4682      	mov	sl, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f2c:	7823      	ldrb	r3, [r4, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d139      	bne.n	8004fa6 <CLI_CommandParser+0xe6>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f32:	0020      	movs	r0, r4
 8004f34:	f7fb f8f0 	bl	8000118 <strlen>
 8004f38:	2100      	movs	r1, #0
 8004f3a:	0002      	movs	r2, r0
 8004f3c:	0020      	movs	r0, r4
 8004f3e:	f00e fd3b 	bl	80139b8 <memset>
	} while(xReturned != pdFALSE);
 8004f42:	4653      	mov	r3, sl
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d100      	bne.n	8004f4a <CLI_CommandParser+0x8a>
 8004f48:	e1d0      	b.n	80052ec <CLI_CommandParser+0x42c>
		StringToLowerCase((char* )cInputString);
 8004f4a:	0028      	movs	r0, r5
 8004f4c:	f7ff fdc0 	bl	8004ad0 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004f50:	2336      	movs	r3, #54	; 0x36
 8004f52:	4699      	mov	r9, r3
 8004f54:	4643      	mov	r3, r8
 8004f56:	464a      	mov	r2, r9
 8004f58:	5c9f      	ldrb	r7, [r3, r2]
 8004f5a:	2f00      	cmp	r7, #0
 8004f5c:	d1c7      	bne.n	8004eee <CLI_CommandParser+0x2e>
 8004f5e:	3a33      	subs	r2, #51	; 0x33
 8004f60:	49b0      	ldr	r1, [pc, #704]	; (8005224 <CLI_CommandParser+0x364>)
 8004f62:	0028      	movs	r0, r5
 8004f64:	f00e ff66 	bl	8013e34 <strncmp>
 8004f68:	1e07      	subs	r7, r0, #0
 8004f6a:	d1ca      	bne.n	8004f02 <CLI_CommandParser+0x42>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f6c:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8004f6e:	f7ff fdc3 	bl	8004af8 <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d000      	beq.n	8004f78 <CLI_CommandParser+0xb8>
 8004f76:	e09f      	b.n	80050b8 <CLI_CommandParser+0x1f8>
				recordSnippet = SNIPPET_COMMANDS;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	4642      	mov	r2, r8
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	5453      	strb	r3, [r2, r1]
				pcOutputString[0] ='\r';
 8004f80:	330b      	adds	r3, #11
 8004f82:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f84:	2e00      	cmp	r6, #0
 8004f86:	d027      	beq.n	8004fd8 <CLI_CommandParser+0x118>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	469a      	mov	sl, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004f8c:	0020      	movs	r0, r4
 8004f8e:	f7fb f8c3 	bl	8000118 <strlen>
 8004f92:	2301      	movs	r3, #1
 8004f94:	425b      	negs	r3, r3
 8004f96:	b282      	uxth	r2, r0
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	0021      	movs	r1, r4
 8004f9c:	3333      	adds	r3, #51	; 0x33
 8004f9e:	9802      	ldr	r0, [sp, #8]
 8004fa0:	f008 fe14 	bl	800dbcc <writePxMutex>
 8004fa4:	e7c5      	b.n	8004f32 <CLI_CommandParser+0x72>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004fa6:	2e00      	cmp	r6, #0
 8004fa8:	d0c3      	beq.n	8004f32 <CLI_CommandParser+0x72>
 8004faa:	e7ef      	b.n	8004f8c <CLI_CommandParser+0xcc>
			recordSnippet =0;
 8004fac:	4643      	mov	r3, r8
 8004fae:	464a      	mov	r2, r9
 8004fb0:	5498      	strb	r0, [r3, r2]
			snippets[numOfRecordedSnippets - 1].state = true;
 8004fb2:	781a      	ldrb	r2, [r3, #0]
 8004fb4:	3a01      	subs	r2, #1
 8004fb6:	0093      	lsls	r3, r2, #2
 8004fb8:	189b      	adds	r3, r3, r2
 8004fba:	4a9b      	ldr	r2, [pc, #620]	; (8005228 <CLI_CommandParser+0x368>)
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	18d3      	adds	r3, r2, r3
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004fc4:	f004 ff0c 	bl	8009de0 <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004fc8:	2241      	movs	r2, #65	; 0x41
 8004fca:	4998      	ldr	r1, [pc, #608]	; (800522c <CLI_CommandParser+0x36c>)
 8004fcc:	0020      	movs	r0, r4
 8004fce:	f00e fcea 	bl	80139a6 <memcpy>
 8004fd2:	7823      	ldrb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1d5      	bne.n	8004f84 <CLI_CommandParser+0xc4>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004fd8:	0020      	movs	r0, r4
 8004fda:	f7fb f89d 	bl	8000118 <strlen>
 8004fde:	2100      	movs	r1, #0
 8004fe0:	0002      	movs	r2, r0
 8004fe2:	0020      	movs	r0, r4
 8004fe4:	46b2      	mov	sl, r6
 8004fe6:	f00e fce7 	bl	80139b8 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004fea:	2209      	movs	r2, #9
 8004fec:	2100      	movs	r1, #0
 8004fee:	a807      	add	r0, sp, #28
 8004ff0:	f00e fce2 	bl	80139b8 <memset>
	if(!recordSnippet && enableOutput)
 8004ff4:	2336      	movs	r3, #54	; 0x36
 8004ff6:	4642      	mov	r2, r8
 8004ff8:	5cd3      	ldrb	r3, [r2, r3]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <CLI_CommandParser+0x144>
 8004ffe:	4653      	mov	r3, sl
 8005000:	2b00      	cmp	r3, #0
 8005002:	d16a      	bne.n	80050da <CLI_CommandParser+0x21a>
}
 8005004:	b00b      	add	sp, #44	; 0x2c
 8005006:	bc3c      	pop	{r2, r3, r4, r5}
 8005008:	4690      	mov	r8, r2
 800500a:	4699      	mov	r9, r3
 800500c:	46a2      	mov	sl, r4
 800500e:	46ab      	mov	fp, r5
 8005010:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8005012:	f00e fa6d 	bl	80134f0 <__locale_ctype_ptr>
 8005016:	787b      	ldrb	r3, [r7, #1]
 8005018:	18c0      	adds	r0, r0, r3
 800501a:	7843      	ldrb	r3, [r0, #1]
 800501c:	075b      	lsls	r3, r3, #29
 800501e:	d500      	bpl.n	8005022 <CLI_CommandParser+0x162>
 8005020:	e77d      	b.n	8004f1e <CLI_CommandParser+0x5e>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8005022:	1b7a      	subs	r2, r7, r5
 8005024:	0029      	movs	r1, r5
 8005026:	a807      	add	r0, sp, #28
 8005028:	f00e ff15 	bl	8013e56 <strncpy>
				id =GetID(idString);
 800502c:	a807      	add	r0, sp, #28
 800502e:	f7ff fa1d 	bl	800446c <GetID>
				if(id == myID){
 8005032:	4b7f      	ldr	r3, [pc, #508]	; (8005230 <CLI_CommandParser+0x370>)
				id =GetID(idString);
 8005034:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	9305      	str	r3, [sp, #20]
 800503a:	4298      	cmp	r0, r3
 800503c:	d057      	beq.n	80050ee <CLI_CommandParser+0x22e>
				else if(id == BOS_ERR_WrongName){
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	2b64      	cmp	r3, #100	; 0x64
 8005042:	d100      	bne.n	8005046 <CLI_CommandParser+0x186>
 8005044:	e0da      	b.n	80051fc <CLI_CommandParser+0x33c>
				else if(id == BOS_ERR_WrongID){
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	2b66      	cmp	r3, #102	; 0x66
 800504a:	d100      	bne.n	800504e <CLI_CommandParser+0x18e>
 800504c:	e0dd      	b.n	800520a <CLI_CommandParser+0x34a>
 800504e:	1c7b      	adds	r3, r7, #1
 8005050:	9304      	str	r3, [sp, #16]
				else if(id == BOS_BROADCAST){
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	2bff      	cmp	r3, #255	; 0xff
 8005056:	d100      	bne.n	800505a <CLI_CommandParser+0x19a>
 8005058:	e08b      	b.n	8005172 <CLI_CommandParser+0x2b2>
				else if((uint8_t )id == BOS_MULTICAST){
 800505a:	466b      	mov	r3, sp
 800505c:	7b1b      	ldrb	r3, [r3, #12]
 800505e:	4699      	mov	r9, r3
 8005060:	2bfe      	cmp	r3, #254	; 0xfe
 8005062:	d100      	bne.n	8005066 <CLI_CommandParser+0x1a6>
 8005064:	e102      	b.n	800526c <CLI_CommandParser+0x3ac>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8005066:	2206      	movs	r2, #6
 8005068:	4972      	ldr	r1, [pc, #456]	; (8005234 <CLI_CommandParser+0x374>)
 800506a:	9804      	ldr	r0, [sp, #16]
 800506c:	f00e fee2 	bl	8013e34 <strncmp>
 8005070:	2800      	cmp	r0, #0
 8005072:	d144      	bne.n	80050fe <CLI_CommandParser+0x23e>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005074:	4b70      	ldr	r3, [pc, #448]	; (8005238 <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 8005076:	2200      	movs	r2, #0
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005078:	7018      	strb	r0, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 800507a:	2119      	movs	r1, #25
 800507c:	4648      	mov	r0, r9
						BOSMessaging.response = BOS_RESPONSE_NONE;
 800507e:	469a      	mov	sl, r3
						SendMessageToModule(id,CODE_UPDATE,0);
 8005080:	f003 f966 	bl	8008350 <SendMessageToModule>
						osDelay(100);
 8005084:	2064      	movs	r0, #100	; 0x64
 8005086:	f008 ff3b 	bl	800df00 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 800508a:	4b6c      	ldr	r3, [pc, #432]	; (800523c <CLI_CommandParser+0x37c>)
 800508c:	4649      	mov	r1, r9
 800508e:	781a      	ldrb	r2, [r3, #0]
 8005090:	4b67      	ldr	r3, [pc, #412]	; (8005230 <CLI_CommandParser+0x370>)
 8005092:	7818      	ldrb	r0, [r3, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	f004 ffc7 	bl	800a028 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800509a:	4653      	mov	r3, sl
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b60      	cmp	r3, #96	; 0x60
 80050a0:	d100      	bne.n	80050a4 <CLI_CommandParser+0x1e4>
 80050a2:	e095      	b.n	80051d0 <CLI_CommandParser+0x310>
 80050a4:	7823      	ldrb	r3, [r4, #0]
 80050a6:	e795      	b.n	8004fd4 <CLI_CommandParser+0x114>
 80050a8:	0028      	movs	r0, r5
 80050aa:	f7ff fcb9 	bl	8004a20 <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d10c      	bne.n	80050cc <CLI_CommandParser+0x20c>
				pcOutputString[0] ='\r';
 80050b2:	230d      	movs	r3, #13
 80050b4:	7023      	strb	r3, [r4, #0]
 80050b6:	e765      	b.n	8004f84 <CLI_CommandParser+0xc4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050b8:	2252      	movs	r2, #82	; 0x52
 80050ba:	4961      	ldr	r1, [pc, #388]	; (8005240 <CLI_CommandParser+0x380>)
 80050bc:	0020      	movs	r0, r4
 80050be:	f00e fc72 	bl	80139a6 <memcpy>
				recordSnippet =0;
 80050c2:	4643      	mov	r3, r8
 80050c4:	464a      	mov	r2, r9
 80050c6:	549f      	strb	r7, [r3, r2]
 80050c8:	7823      	ldrb	r3, [r4, #0]
 80050ca:	e783      	b.n	8004fd4 <CLI_CommandParser+0x114>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050cc:	2252      	movs	r2, #82	; 0x52
 80050ce:	495c      	ldr	r1, [pc, #368]	; (8005240 <CLI_CommandParser+0x380>)
 80050d0:	0020      	movs	r0, r4
 80050d2:	f00e fc68 	bl	80139a6 <memcpy>
 80050d6:	7823      	ldrb	r3, [r4, #0]
 80050d8:	e77c      	b.n	8004fd4 <CLI_CommandParser+0x114>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80050da:	2301      	movs	r3, #1
 80050dc:	425b      	negs	r3, r3
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	2238      	movs	r2, #56	; 0x38
 80050e2:	3333      	adds	r3, #51	; 0x33
 80050e4:	4957      	ldr	r1, [pc, #348]	; (8005244 <CLI_CommandParser+0x384>)
 80050e6:	9802      	ldr	r0, [sp, #8]
 80050e8:	f008 fd70 	bl	800dbcc <writePxMutex>
}
 80050ec:	e78a      	b.n	8005004 <CLI_CommandParser+0x144>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050ee:	2299      	movs	r2, #153	; 0x99
 80050f0:	1c78      	adds	r0, r7, #1
 80050f2:	0092      	lsls	r2, r2, #2
 80050f4:	0021      	movs	r1, r4
 80050f6:	f008 ff93 	bl	800e020 <FreeRTOS_CLIProcessCommand>
 80050fa:	4682      	mov	sl, r0
 80050fc:	e716      	b.n	8004f2c <CLI_CommandParser+0x6c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80050fe:	0028      	movs	r0, r5
 8005100:	f7fb f80a 	bl	8000118 <strlen>
 8005104:	0007      	movs	r7, r0
 8005106:	a807      	add	r0, sp, #28
 8005108:	f7fb f806 	bl	8000118 <strlen>
 800510c:	4682      	mov	sl, r0
 800510e:	1e7a      	subs	r2, r7, #1
 8005110:	1a12      	subs	r2, r2, r0
 8005112:	9904      	ldr	r1, [sp, #16]
 8005114:	484c      	ldr	r0, [pc, #304]	; (8005248 <CLI_CommandParser+0x388>)
 8005116:	f00e fe9e 	bl	8013e56 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 800511a:	0028      	movs	r0, r5
 800511c:	f7fa fffc 	bl	8000118 <strlen>
 8005120:	4653      	mov	r3, sl
 8005122:	3801      	subs	r0, #1
 8005124:	1ac2      	subs	r2, r0, r3
 8005126:	b292      	uxth	r2, r2
 8005128:	2117      	movs	r1, #23
 800512a:	4648      	mov	r0, r9
 800512c:	f003 f910 	bl	8008350 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8005130:	9a03      	ldr	r2, [sp, #12]
 8005132:	4946      	ldr	r1, [pc, #280]	; (800524c <CLI_CommandParser+0x38c>)
 8005134:	0020      	movs	r0, r4
 8005136:	f00e fe39 	bl	8013dac <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 800513a:	7823      	ldrb	r3, [r4, #0]
 800513c:	0020      	movs	r0, r4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00d      	beq.n	800515e <CLI_CommandParser+0x29e>
 8005142:	f7fa ffe9 	bl	8000118 <strlen>
 8005146:	0002      	movs	r2, r0
 8005148:	2e00      	cmp	r6, #0
 800514a:	d00b      	beq.n	8005164 <CLI_CommandParser+0x2a4>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 800514c:	2301      	movs	r3, #1
 800514e:	b282      	uxth	r2, r0
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	0021      	movs	r1, r4
 8005154:	3331      	adds	r3, #49	; 0x31
 8005156:	9802      	ldr	r0, [sp, #8]
 8005158:	f008 fd38 	bl	800dbcc <writePxMutex>
 800515c:	0020      	movs	r0, r4
 800515e:	f7fa ffdb 	bl	8000118 <strlen>
 8005162:	0002      	movs	r2, r0
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005164:	2100      	movs	r1, #0
 8005166:	0020      	movs	r0, r4
 8005168:	f00e fc26 	bl	80139b8 <memset>
 800516c:	4b32      	ldr	r3, [pc, #200]	; (8005238 <CLI_CommandParser+0x378>)
 800516e:	469a      	mov	sl, r3
 8005170:	e793      	b.n	800509a <CLI_CommandParser+0x1da>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005172:	221a      	movs	r2, #26
 8005174:	2100      	movs	r1, #0
 8005176:	4836      	ldr	r0, [pc, #216]	; (8005250 <CLI_CommandParser+0x390>)
 8005178:	f00e fc1e 	bl	80139b8 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 800517c:	0028      	movs	r0, r5
 800517e:	f7fa ffcb 	bl	8000118 <strlen>
 8005182:	0007      	movs	r7, r0
 8005184:	a807      	add	r0, sp, #28
 8005186:	f7fa ffc7 	bl	8000118 <strlen>
 800518a:	4681      	mov	r9, r0
 800518c:	3f01      	subs	r7, #1
 800518e:	1a3a      	subs	r2, r7, r0
 8005190:	9f04      	ldr	r7, [sp, #16]
 8005192:	482d      	ldr	r0, [pc, #180]	; (8005248 <CLI_CommandParser+0x388>)
 8005194:	0039      	movs	r1, r7
 8005196:	f00e fe5e 	bl	8013e56 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 800519a:	0028      	movs	r0, r5
 800519c:	f7fa ffbc 	bl	8000118 <strlen>
 80051a0:	464b      	mov	r3, r9
 80051a2:	1ac3      	subs	r3, r0, r3
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2217      	movs	r2, #23
 80051a8:	21ff      	movs	r1, #255	; 0xff
 80051aa:	9805      	ldr	r0, [sp, #20]
 80051ac:	f003 f88a 	bl	80082c4 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80051b0:	2299      	movs	r2, #153	; 0x99
 80051b2:	0021      	movs	r1, r4
 80051b4:	0092      	lsls	r2, r2, #2
 80051b6:	0038      	movs	r0, r7
 80051b8:	f008 ff32 	bl	800e020 <FreeRTOS_CLIProcessCommand>
 80051bc:	4682      	mov	sl, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 80051be:	0020      	movs	r0, r4
 80051c0:	f7fa ffaa 	bl	8000118 <strlen>
 80051c4:	221d      	movs	r2, #29
 80051c6:	1820      	adds	r0, r4, r0
 80051c8:	4922      	ldr	r1, [pc, #136]	; (8005254 <CLI_CommandParser+0x394>)
 80051ca:	f00e fbec 	bl	80139a6 <memcpy>
 80051ce:	e6ad      	b.n	8004f2c <CLI_CommandParser+0x6c>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 80051d0:	21fa      	movs	r1, #250	; 0xfa
 80051d2:	2001      	movs	r0, #1
 80051d4:	0089      	lsls	r1, r1, #2
 80051d6:	f00a f94b 	bl	800f470 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 80051da:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <CLI_CommandParser+0x398>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d100      	bne.n	80051e4 <CLI_CommandParser+0x324>
 80051e2:	e75f      	b.n	80050a4 <CLI_CommandParser+0x1e4>
							++timedoutMsg;
 80051e4:	4a1d      	ldr	r2, [pc, #116]	; (800525c <CLI_CommandParser+0x39c>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051e6:	491e      	ldr	r1, [pc, #120]	; (8005260 <CLI_CommandParser+0x3a0>)
							++timedoutMsg;
 80051e8:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051ea:	0020      	movs	r0, r4
							++timedoutMsg;
 80051ec:	3301      	adds	r3, #1
 80051ee:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051f0:	9b03      	ldr	r3, [sp, #12]
 80051f2:	0022      	movs	r2, r4
 80051f4:	f00e fdda 	bl	8013dac <sprintf>
 80051f8:	7823      	ldrb	r3, [r4, #0]
 80051fa:	e6eb      	b.n	8004fd4 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 80051fc:	2227      	movs	r2, #39	; 0x27
 80051fe:	4919      	ldr	r1, [pc, #100]	; (8005264 <CLI_CommandParser+0x3a4>)
 8005200:	0020      	movs	r0, r4
 8005202:	f00e fbd0 	bl	80139a6 <memcpy>
 8005206:	7823      	ldrb	r3, [r4, #0]
 8005208:	e6e4      	b.n	8004fd4 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 800520a:	2225      	movs	r2, #37	; 0x25
 800520c:	4916      	ldr	r1, [pc, #88]	; (8005268 <CLI_CommandParser+0x3a8>)
 800520e:	0020      	movs	r0, r4
 8005210:	f00e fbc9 	bl	80139a6 <memcpy>
 8005214:	7823      	ldrb	r3, [r4, #0]
 8005216:	e6dd      	b.n	8004fd4 <CLI_CommandParser+0x114>
 8005218:	200016e4 	.word	0x200016e4
 800521c:	080191cc 	.word	0x080191cc
 8005220:	08019180 	.word	0x08019180
 8005224:	08019128 	.word	0x08019128
 8005228:	20006898 	.word	0x20006898
 800522c:	08019188 	.word	0x08019188
 8005230:	20000aa8 	.word	0x20000aa8
 8005234:	0801926c 	.word	0x0801926c
 8005238:	200067fc 	.word	0x200067fc
 800523c:	20000c38 	.word	0x20000c38
 8005240:	0801912c 	.word	0x0801912c
 8005244:	080192b8 	.word	0x080192b8
 8005248:	20000b4c 	.word	0x20000b4c
 800524c:	08019274 	.word	0x08019274
 8005250:	20000db8 	.word	0x20000db8
 8005254:	08019220 	.word	0x08019220
 8005258:	20000c4c 	.word	0x20000c4c
 800525c:	20001fb4 	.word	0x20001fb4
 8005260:	08019298 	.word	0x08019298
 8005264:	080191d0 	.word	0x080191d0
 8005268:	080191f8 	.word	0x080191f8
					group =id >> 8;
 800526c:	4640      	mov	r0, r8
 800526e:	2237      	movs	r2, #55	; 0x37
 8005270:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005272:	2100      	movs	r1, #0
					group =id >> 8;
 8005274:	121f      	asrs	r7, r3, #8
 8005276:	b2fb      	uxtb	r3, r7
 8005278:	5483      	strb	r3, [r0, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800527a:	3a1d      	subs	r2, #29
 800527c:	481c      	ldr	r0, [pc, #112]	; (80052f0 <CLI_CommandParser+0x430>)
					group =id >> 8;
 800527e:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005280:	f00e fb9a 	bl	80139b8 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005284:	0028      	movs	r0, r5
 8005286:	f7fa ff47 	bl	8000118 <strlen>
 800528a:	0007      	movs	r7, r0
 800528c:	a807      	add	r0, sp, #28
 800528e:	f7fa ff43 	bl	8000118 <strlen>
 8005292:	4681      	mov	r9, r0
 8005294:	3f01      	subs	r7, #1
 8005296:	1a3a      	subs	r2, r7, r0
 8005298:	9904      	ldr	r1, [sp, #16]
 800529a:	4816      	ldr	r0, [pc, #88]	; (80052f4 <CLI_CommandParser+0x434>)
 800529c:	f00e fddb 	bl	8013e56 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 80052a0:	0028      	movs	r0, r5
 80052a2:	f7fa ff39 	bl	8000118 <strlen>
 80052a6:	464f      	mov	r7, r9
 80052a8:	1bc3      	subs	r3, r0, r7
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2217      	movs	r2, #23
 80052ae:	9903      	ldr	r1, [sp, #12]
 80052b0:	9805      	ldr	r0, [sp, #20]
 80052b2:	f003 f807 	bl	80082c4 <BroadcastMessage>
					if(InGroup(myID,group))
 80052b6:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <CLI_CommandParser+0x438>)
 80052b8:	4a10      	ldr	r2, [pc, #64]	; (80052fc <CLI_CommandParser+0x43c>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	4641      	mov	r1, r8
 80052be:	3b01      	subs	r3, #1
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	5a9b      	ldrh	r3, [r3, r2]
 80052c4:	2237      	movs	r2, #55	; 0x37
 80052c6:	5c8a      	ldrb	r2, [r1, r2]
 80052c8:	4113      	asrs	r3, r2
 80052ca:	07db      	lsls	r3, r3, #31
 80052cc:	d406      	bmi.n	80052dc <CLI_CommandParser+0x41c>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80052ce:	ab07      	add	r3, sp, #28
 80052d0:	0022      	movs	r2, r4
 80052d2:	490b      	ldr	r1, [pc, #44]	; (8005300 <CLI_CommandParser+0x440>)
 80052d4:	0020      	movs	r0, r4
 80052d6:	f00e fd69 	bl	8013dac <sprintf>
 80052da:	e627      	b.n	8004f2c <CLI_CommandParser+0x6c>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80052dc:	2299      	movs	r2, #153	; 0x99
 80052de:	0021      	movs	r1, r4
 80052e0:	0092      	lsls	r2, r2, #2
 80052e2:	9804      	ldr	r0, [sp, #16]
 80052e4:	f008 fe9c 	bl	800e020 <FreeRTOS_CLIProcessCommand>
 80052e8:	4682      	mov	sl, r0
 80052ea:	e7f0      	b.n	80052ce <CLI_CommandParser+0x40e>
 80052ec:	46b2      	mov	sl, r6
 80052ee:	e67c      	b.n	8004fea <CLI_CommandParser+0x12a>
 80052f0:	20000db8 	.word	0x20000db8
 80052f4:	20000b4c 	.word	0x20000b4c
 80052f8:	20000aa8 	.word	0x20000aa8
 80052fc:	20000aac 	.word	0x20000aac
 8005300:	08019240 	.word	0x08019240

08005304 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005306:	46de      	mov	lr, fp
 8005308:	4645      	mov	r5, r8
 800530a:	4657      	mov	r7, sl
 800530c:	464e      	mov	r6, r9
 800530e:	b5e0      	push	{r5, r6, r7, lr}
 8005310:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 8005312:	ab02      	add	r3, sp, #8
 8005314:	469c      	mov	ip, r3
 8005316:	250f      	movs	r5, #15
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005318:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 800531a:	2300      	movs	r3, #0
 800531c:	4465      	add	r5, ip
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800531e:	4249      	negs	r1, r1
 8005320:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 8005322:	702b      	strb	r3, [r5, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005324:	f00a f8a4 	bl	800f470 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005328:	f008 fef2 	bl	800e110 <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800532c:	23e1      	movs	r3, #225	; 0xe1
 800532e:	4a50      	ldr	r2, [pc, #320]	; (8005470 <prvCLITask+0x16c>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005330:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005332:	6892      	ldr	r2, [r2, #8]
 8005334:	031b      	lsls	r3, r3, #12
 8005336:	429a      	cmp	r2, r3
 8005338:	d100      	bne.n	800533c <prvCLITask+0x38>
 800533a:	e094      	b.n	8005466 <prvCLITask+0x162>
 800533c:	4b4d      	ldr	r3, [pc, #308]	; (8005474 <prvCLITask+0x170>)
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800533e:	2401      	movs	r4, #1
 8005340:	001e      	movs	r6, r3
 8005342:	7819      	ldrb	r1, [r3, #0]
			if(port != PcPort)
 8005344:	428c      	cmp	r4, r1
 8005346:	d005      	beq.n	8005354 <prvCLITask+0x50>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005348:	21e1      	movs	r1, #225	; 0xe1
 800534a:	0020      	movs	r0, r4
 800534c:	0309      	lsls	r1, r1, #12
 800534e:	f008 fc8f 	bl	800dc70 <UpdateBaudrate>
 8005352:	7831      	ldrb	r1, [r6, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005354:	3401      	adds	r4, #1
 8005356:	b2e4      	uxtb	r4, r4
 8005358:	2c06      	cmp	r4, #6
 800535a:	d1f3      	bne.n	8005344 <prvCLITask+0x40>
 800535c:	46b1      	mov	r9, r6
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800535e:	4846      	ldr	r0, [pc, #280]	; (8005478 <prvCLITask+0x174>)
 8005360:	4b46      	ldr	r3, [pc, #280]	; (800547c <prvCLITask+0x178>)
 8005362:	0004      	movs	r4, r0
 8005364:	881a      	ldrh	r2, [r3, #0]
 8005366:	3438      	adds	r4, #56	; 0x38
 8005368:	0053      	lsls	r3, r2, #1
 800536a:	189b      	adds	r3, r3, r2
 800536c:	4a44      	ldr	r2, [pc, #272]	; (8005480 <prvCLITask+0x17c>)
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	189b      	adds	r3, r3, r2
 8005372:	4a44      	ldr	r2, [pc, #272]	; (8005484 <prvCLITask+0x180>)
 8005374:	4683      	mov	fp, r0
 8005376:	7812      	ldrb	r2, [r2, #0]
 8005378:	0020      	movs	r0, r4
 800537a:	9100      	str	r1, [sp, #0]
 800537c:	4942      	ldr	r1, [pc, #264]	; (8005488 <prvCLITask+0x184>)
 800537e:	f00e fd15 	bl	8013dac <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005382:	464b      	mov	r3, r9
 8005384:	22a4      	movs	r2, #164	; 0xa4
 8005386:	4941      	ldr	r1, [pc, #260]	; (800548c <prvCLITask+0x188>)
 8005388:	0092      	lsls	r2, r2, #2
 800538a:	7818      	ldrb	r0, [r3, #0]
 800538c:	230a      	movs	r3, #10
 800538e:	f008 fc4f 	bl	800dc30 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005392:	0020      	movs	r0, r4
 8005394:	f7fa fec0 	bl	8000118 <strlen>
 8005398:	464b      	mov	r3, r9
 800539a:	b282      	uxth	r2, r0
 800539c:	0021      	movs	r1, r4
 800539e:	7818      	ldrb	r0, [r3, #0]
 80053a0:	230a      	movs	r3, #10
 80053a2:	f008 fc45 	bl	800dc30 <writePxITMutex>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80053a6:	2214      	movs	r2, #20
 80053a8:	4694      	mov	ip, r2
 80053aa:	4b39      	ldr	r3, [pc, #228]	; (8005490 <prvCLITask+0x18c>)
	int8_t cInputIndex =0, *pcOutputString;
 80053ac:	2600      	movs	r6, #0
 80053ae:	4698      	mov	r8, r3
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80053b0:	4b38      	ldr	r3, [pc, #224]	; (8005494 <prvCLITask+0x190>)
 80053b2:	4c39      	ldr	r4, [pc, #228]	; (8005498 <prvCLITask+0x194>)
 80053b4:	4463      	add	r3, ip
 80053b6:	469a      	mov	sl, r3
				strcpy((char* )cLastInputString,(char* )cInputString);
 80053b8:	2360      	movs	r3, #96	; 0x60
 80053ba:	469c      	mov	ip, r3
			Rx_Data[PcPort - 1] = 0;
 80053bc:	2700      	movs	r7, #0
				strcpy((char* )cLastInputString,(char* )cInputString);
 80053be:	44e3      	add	fp, ip
 80053c0:	e001      	b.n	80053c6 <prvCLITask+0xc2>
		taskYIELD();
 80053c2:	f00a faf9 	bl	800f9b8 <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 80053c6:	7823      	ldrb	r3, [r4, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d1fa      	bne.n	80053c2 <prvCLITask+0xbe>
			cRxedChar = Rx_Data[PcPort - 1];
 80053cc:	464b      	mov	r3, r9
 80053ce:	4642      	mov	r2, r8
 80053d0:	7818      	ldrb	r0, [r3, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80053d2:	0029      	movs	r1, r5
			cRxedChar = Rx_Data[PcPort - 1];
 80053d4:	1e43      	subs	r3, r0, #1
 80053d6:	5cd2      	ldrb	r2, [r2, r3]
			Read_In_CLI_Task_Flag = 0;
 80053d8:	7027      	strb	r7, [r4, #0]
			cRxedChar = Rx_Data[PcPort - 1];
 80053da:	702a      	strb	r2, [r5, #0]
			Rx_Data[PcPort - 1] = 0;
 80053dc:	4642      	mov	r2, r8
 80053de:	54d7      	strb	r7, [r2, r3]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80053e0:	230a      	movs	r3, #10
 80053e2:	2201      	movs	r2, #1
 80053e4:	f008 fc24 	bl	800dc30 <writePxITMutex>
			if(cRxedChar == '\r'){
 80053e8:	782b      	ldrb	r3, [r5, #0]
 80053ea:	2b0d      	cmp	r3, #13
 80053ec:	d01b      	beq.n	8005426 <prvCLITask+0x122>
				if(cRxedChar == '\n'){
 80053ee:	2b0a      	cmp	r3, #10
 80053f0:	d0e7      	beq.n	80053c2 <prvCLITask+0xbe>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d00d      	beq.n	8005412 <prvCLITask+0x10e>
 80053f6:	2b7f      	cmp	r3, #127	; 0x7f
 80053f8:	d00b      	beq.n	8005412 <prvCLITask+0x10e>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80053fa:	001a      	movs	r2, r3
 80053fc:	3a20      	subs	r2, #32
 80053fe:	2a5e      	cmp	r2, #94	; 0x5e
 8005400:	d8df      	bhi.n	80053c2 <prvCLITask+0xbe>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005402:	2e31      	cmp	r6, #49	; 0x31
 8005404:	dcdd      	bgt.n	80053c2 <prvCLITask+0xbe>
							cInputString[cInputIndex] =cRxedChar;
 8005406:	4a23      	ldr	r2, [pc, #140]	; (8005494 <prvCLITask+0x190>)
 8005408:	1992      	adds	r2, r2, r6
							cInputIndex++;
 800540a:	3601      	adds	r6, #1
							cInputString[cInputIndex] =cRxedChar;
 800540c:	7513      	strb	r3, [r2, #20]
							cInputIndex++;
 800540e:	b276      	sxtb	r6, r6
 8005410:	e7d7      	b.n	80053c2 <prvCLITask+0xbe>
					if(cInputIndex > 0){
 8005412:	2e00      	cmp	r6, #0
 8005414:	d0d5      	beq.n	80053c2 <prvCLITask+0xbe>
						cInputString[cInputIndex] ='\0';
 8005416:	4a1f      	ldr	r2, [pc, #124]	; (8005494 <prvCLITask+0x190>)
						cInputIndex--;
 8005418:	3e01      	subs	r6, #1
						cInputString[cInputIndex] ='\0';
 800541a:	4694      	mov	ip, r2
						cInputIndex--;
 800541c:	b2f3      	uxtb	r3, r6
 800541e:	b25e      	sxtb	r6, r3
						cInputString[cInputIndex] ='\0';
 8005420:	4463      	add	r3, ip
 8005422:	751f      	strb	r7, [r3, #20]
 8005424:	e7cd      	b.n	80053c2 <prvCLITask+0xbe>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005426:	464b      	mov	r3, r9
 8005428:	2202      	movs	r2, #2
 800542a:	7818      	ldrb	r0, [r3, #0]
 800542c:	491b      	ldr	r1, [pc, #108]	; (800549c <prvCLITask+0x198>)
 800542e:	230a      	movs	r3, #10
 8005430:	f008 fbfe 	bl	800dc30 <writePxITMutex>
				if(cInputIndex == 0){
 8005434:	2e00      	cmp	r6, #0
 8005436:	d011      	beq.n	800545c <prvCLITask+0x158>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005438:	464b      	mov	r3, r9
 800543a:	4652      	mov	r2, sl
 800543c:	7818      	ldrb	r0, [r3, #0]
 800543e:	2101      	movs	r1, #1
 8005440:	9b03      	ldr	r3, [sp, #12]
 8005442:	f7ff fd3d 	bl	8004ec0 <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 8005446:	4651      	mov	r1, sl
 8005448:	4658      	mov	r0, fp
 800544a:	f00e fceb 	bl	8013e24 <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 800544e:	2232      	movs	r2, #50	; 0x32
 8005450:	2100      	movs	r1, #0
 8005452:	4650      	mov	r0, sl
 8005454:	f00e fab0 	bl	80139b8 <memset>
				cInputIndex =0;
 8005458:	2600      	movs	r6, #0
 800545a:	e7b2      	b.n	80053c2 <prvCLITask+0xbe>
					strcpy((char* )cInputString,(char* )cLastInputString);
 800545c:	4659      	mov	r1, fp
 800545e:	4650      	mov	r0, sl
 8005460:	f00e fce0 	bl	8013e24 <strcpy>
 8005464:	e7e8      	b.n	8005438 <prvCLITask+0x134>
 8005466:	4b03      	ldr	r3, [pc, #12]	; (8005474 <prvCLITask+0x170>)
 8005468:	4699      	mov	r9, r3
 800546a:	7819      	ldrb	r1, [r3, #0]
 800546c:	e777      	b.n	800535e <prvCLITask+0x5a>
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	2000687c 	.word	0x2000687c
 8005474:	20000c38 	.word	0x20000c38
 8005478:	200016e4 	.word	0x200016e4
 800547c:	20000038 	.word	0x20000038
 8005480:	080181fc 	.word	0x080181fc
 8005484:	20000aa8 	.word	0x20000aa8
 8005488:	080192f4 	.word	0x080192f4
 800548c:	08019320 	.word	0x08019320
 8005490:	20001ca4 	.word	0x20001ca4
 8005494:	20001764 	.word	0x20001764
 8005498:	200016e1 	.word	0x200016e1
 800549c:	0801ab0c 	.word	0x0801ab0c

080054a0 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054a2:	4b1a      	ldr	r3, [pc, #104]	; (800550c <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054a4:	000c      	movs	r4, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054a6:	781a      	ldrb	r2, [r3, #0]
 80054a8:	3a01      	subs	r2, #1
 80054aa:	0093      	lsls	r3, r2, #2
 80054ac:	189b      	adds	r3, r3, r2
 80054ae:	4a18      	ldr	r2, [pc, #96]	; (8005510 <ParseSnippetCommand+0x70>)
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	18d3      	adds	r3, r2, r3
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d018      	beq.n	80054ec <ParseSnippetCommand+0x4c>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 80054ba:	4e16      	ldr	r6, [pc, #88]	; (8005514 <ParseSnippetCommand+0x74>)
 80054bc:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 80054be:	2d00      	cmp	r5, #0
 80054c0:	d016      	beq.n	80054f0 <ParseSnippetCommand+0x50>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 80054c2:	782b      	ldrb	r3, [r5, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00e      	beq.n	80054e6 <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80054c8:	2113      	movs	r1, #19
 80054ca:	0028      	movs	r0, r5
 80054cc:	f00e fc9c 	bl	8013e08 <strchr>
 80054d0:	1e07      	subs	r7, r0, #0
	if(ptrEnd != NULL){
 80054d2:	d010      	beq.n	80054f6 <ParseSnippetCommand+0x56>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80054d4:	1b42      	subs	r2, r0, r5
 80054d6:	0029      	movs	r1, r5
 80054d8:	0020      	movs	r0, r4
 80054da:	f00e fcbc 	bl	8013e56 <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 80054de:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 80054e0:	3701      	adds	r7, #1
 80054e2:	64b7      	str	r7, [r6, #72]	; 0x48
}
 80054e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80054e6:	64b3      	str	r3, [r6, #72]	; 0x48
		return false;
 80054e8:	2000      	movs	r0, #0
 80054ea:	e7fb      	b.n	80054e4 <ParseSnippetCommand+0x44>
		return false;
 80054ec:	2000      	movs	r0, #0
 80054ee:	e7f9      	b.n	80054e4 <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 80054f0:	64b0      	str	r0, [r6, #72]	; 0x48
 80054f2:	0005      	movs	r5, r0
 80054f4:	e7e5      	b.n	80054c2 <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 80054f6:	0029      	movs	r1, r5
 80054f8:	0020      	movs	r0, r4
 80054fa:	f00e fc93 	bl	8013e24 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 80054fe:	0020      	movs	r0, r4
 8005500:	f7fa fe0a 	bl	8000118 <strlen>
 8005504:	182d      	adds	r5, r5, r0
 8005506:	64b5      	str	r5, [r6, #72]	; 0x48
	return true;
 8005508:	2001      	movs	r0, #1
 800550a:	e7eb      	b.n	80054e4 <ParseSnippetCommand+0x44>
 800550c:	200016e4 	.word	0x200016e4
 8005510:	20006898 	.word	0x20006898
 8005514:	20001764 	.word	0x20001764

08005518 <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005518:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 800551a:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 800551c:	1818      	adds	r0, r3, r0
 800551e:	492e      	ldr	r1, [pc, #184]	; (80055d8 <CheckSnippetCondition+0xc0>)
 8005520:	0080      	lsls	r0, r0, #2
 8005522:	5c0b      	ldrb	r3, [r1, r0]
bool CheckSnippetCondition(uint8_t index){
 8005524:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 8005526:	2b01      	cmp	r3, #1
 8005528:	d020      	beq.n	800556c <CheckSnippetCondition+0x54>
 800552a:	2b03      	cmp	r3, #3
 800552c:	d11b      	bne.n	8005566 <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800552e:	180c      	adds	r4, r1, r0
 8005530:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005532:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005534:	3a01      	subs	r2, #1
 8005536:	0053      	lsls	r3, r2, #1
 8005538:	189b      	adds	r3, r3, r2
 800553a:	4a28      	ldr	r2, [pc, #160]	; (80055dc <CheckSnippetCondition+0xc4>)
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005540:	1841      	adds	r1, r0, r1
 8005542:	2204      	movs	r2, #4
 8005544:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005546:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005548:	f00e fa2d 	bl	80139a6 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 800554c:	7863      	ldrb	r3, [r4, #1]
 800554e:	2b06      	cmp	r3, #6
 8005550:	d809      	bhi.n	8005566 <CheckSnippetCondition+0x4e>
 8005552:	4a23      	ldr	r2, [pc, #140]	; (80055e0 <CheckSnippetCondition+0xc8>)
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	58d3      	ldr	r3, [r2, r3]
 8005558:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 800555a:	1c29      	adds	r1, r5, #0
 800555c:	9801      	ldr	r0, [sp, #4]
 800555e:	f7fa ffd1 	bl	8000504 <__aeabi_fcmpgt>
 8005562:	2800      	cmp	r0, #0
 8005564:	d114      	bne.n	8005590 <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 8005566:	2000      	movs	r0, #0
}
 8005568:	b003      	add	sp, #12
 800556a:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 800556c:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 800556e:	7882      	ldrb	r2, [r0, #2]
 8005570:	78c0      	ldrb	r0, [r0, #3]
 8005572:	00d3      	lsls	r3, r2, #3
 8005574:	189b      	adds	r3, r3, r2
 8005576:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <CheckSnippetCondition+0xcc>)
 8005578:	5c9b      	ldrb	r3, [r3, r2]
 800557a:	1a18      	subs	r0, r3, r0
 800557c:	4243      	negs	r3, r0
 800557e:	4158      	adcs	r0, r3
 8005580:	b2c0      	uxtb	r0, r0
 8005582:	e7f1      	b.n	8005568 <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005584:	1c29      	adds	r1, r5, #0
 8005586:	9801      	ldr	r0, [sp, #4]
 8005588:	f7fa ffa2 	bl	80004d0 <__aeabi_fcmpeq>
 800558c:	2800      	cmp	r0, #0
 800558e:	d1ea      	bne.n	8005566 <CheckSnippetCondition+0x4e>
 8005590:	2100      	movs	r1, #0
 8005592:	1c28      	adds	r0, r5, #0
 8005594:	f7fa ff9c 	bl	80004d0 <__aeabi_fcmpeq>
 8005598:	4243      	negs	r3, r0
 800559a:	4158      	adcs	r0, r3
 800559c:	e7e4      	b.n	8005568 <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 800559e:	1c29      	adds	r1, r5, #0
 80055a0:	9801      	ldr	r0, [sp, #4]
 80055a2:	f7fa ff95 	bl	80004d0 <__aeabi_fcmpeq>
 80055a6:	1e43      	subs	r3, r0, #1
 80055a8:	4198      	sbcs	r0, r3
 80055aa:	e7dd      	b.n	8005568 <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 80055ac:	1c29      	adds	r1, r5, #0
 80055ae:	9801      	ldr	r0, [sp, #4]
 80055b0:	f7fa ff94 	bl	80004dc <__aeabi_fcmplt>
 80055b4:	1e43      	subs	r3, r0, #1
 80055b6:	4198      	sbcs	r0, r3
 80055b8:	e7d6      	b.n	8005568 <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 80055ba:	1c29      	adds	r1, r5, #0
 80055bc:	9801      	ldr	r0, [sp, #4]
 80055be:	f7fa ff97 	bl	80004f0 <__aeabi_fcmple>
 80055c2:	1e43      	subs	r3, r0, #1
 80055c4:	4198      	sbcs	r0, r3
 80055c6:	e7cf      	b.n	8005568 <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80055c8:	1c29      	adds	r1, r5, #0
 80055ca:	9801      	ldr	r0, [sp, #4]
 80055cc:	f7fa ffa4 	bl	8000518 <__aeabi_fcmpge>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1dd      	bne.n	8005590 <CheckSnippetCondition+0x78>
 80055d4:	e7c7      	b.n	8005566 <CheckSnippetCondition+0x4e>
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	20006898 	.word	0x20006898
 80055dc:	200000a4 	.word	0x200000a4
 80055e0:	080182b0 	.word	0x080182b0
 80055e4:	200023d8 	.word	0x200023d8

080055e8 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	46de      	mov	lr, fp
 80055ec:	464e      	mov	r6, r9
 80055ee:	4645      	mov	r5, r8
 80055f0:	4657      	mov	r7, sl
 80055f2:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80055f4:	f008 fd8c 	bl	800e110 <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80055f8:	4b23      	ldr	r3, [pc, #140]	; (8005688 <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80055fa:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 80055fc:	4698      	mov	r8, r3
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d039      	beq.n	8005678 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005604:	4b21      	ldr	r3, [pc, #132]	; (800568c <ExecuteSnippet+0xa4>)
 8005606:	4f22      	ldr	r7, [pc, #136]	; (8005690 <ExecuteSnippet+0xa8>)
 8005608:	469b      	mov	fp, r3
 800560a:	2320      	movs	r3, #32
 800560c:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800560e:	4b21      	ldr	r3, [pc, #132]	; (8005694 <ExecuteSnippet+0xac>)
 8005610:	4d21      	ldr	r5, [pc, #132]	; (8005698 <ExecuteSnippet+0xb0>)
	for(s =0; s < numOfRecordedSnippets; s++){
 8005612:	2400      	movs	r4, #0
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005614:	374c      	adds	r7, #76	; 0x4c
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005616:	4699      	mov	r9, r3
 8005618:	e006      	b.n	8005628 <ExecuteSnippet+0x40>
	for(s =0; s < numOfRecordedSnippets; s++){
 800561a:	4643      	mov	r3, r8
 800561c:	3401      	adds	r4, #1
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	b2a4      	uxth	r4, r4
 8005622:	3514      	adds	r5, #20
 8005624:	42a3      	cmp	r3, r4
 8005626:	d927      	bls.n	8005678 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
 8005628:	7c2b      	ldrb	r3, [r5, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f5      	beq.n	800561a <ExecuteSnippet+0x32>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800562e:	b2e0      	uxtb	r0, r4
 8005630:	f7ff ff72 	bl	8005518 <CheckSnippetCondition>
 8005634:	2800      	cmp	r0, #0
 8005636:	d0f0      	beq.n	800561a <ExecuteSnippet+0x32>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005638:	465b      	mov	r3, fp
 800563a:	4652      	mov	r2, sl
 800563c:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800563e:	e00e      	b.n	800565e <ExecuteSnippet+0x76>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005640:	464b      	mov	r3, r9
 8005642:	003a      	movs	r2, r7
 8005644:	7818      	ldrb	r0, [r3, #0]
 8005646:	2100      	movs	r1, #0
 8005648:	0033      	movs	r3, r6
 800564a:	f7ff fc39 	bl	8004ec0 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800564e:	0030      	movs	r0, r6
 8005650:	f7fa fd62 	bl	8000118 <strlen>
 8005654:	2100      	movs	r1, #0
 8005656:	0002      	movs	r2, r0
 8005658:	0030      	movs	r0, r6
 800565a:	f00e f9ad 	bl	80139b8 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800565e:	0039      	movs	r1, r7
 8005660:	68e8      	ldr	r0, [r5, #12]
 8005662:	f7ff ff1d 	bl	80054a0 <ParseSnippetCommand>
 8005666:	2800      	cmp	r0, #0
 8005668:	d1ea      	bne.n	8005640 <ExecuteSnippet+0x58>
	for(s =0; s < numOfRecordedSnippets; s++){
 800566a:	4643      	mov	r3, r8
 800566c:	3401      	adds	r4, #1
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	b2a4      	uxth	r4, r4
 8005672:	3514      	adds	r5, #20
 8005674:	42a3      	cmp	r3, r4
 8005676:	d8d7      	bhi.n	8005628 <ExecuteSnippet+0x40>
			}
		}
	}
	
	return result;
}
 8005678:	2000      	movs	r0, #0
 800567a:	bc3c      	pop	{r2, r3, r4, r5}
 800567c:	4690      	mov	r8, r2
 800567e:	4699      	mov	r9, r3
 8005680:	46a2      	mov	sl, r4
 8005682:	46ab      	mov	fp, r5
 8005684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	200016e4 	.word	0x200016e4
 800568c:	200067fc 	.word	0x200067fc
 8005690:	20001764 	.word	0x20001764
 8005694:	20000c38 	.word	0x20000c38
 8005698:	20006898 	.word	0x20006898

0800569c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 800569c:	2000      	movs	r0, #0
 800569e:	4770      	bx	lr

080056a0 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056a0:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80056a2:	4b03      	ldr	r3, [pc, #12]	; (80056b0 <flashsizeCommand+0x10>)
 80056a4:	4903      	ldr	r1, [pc, #12]	; (80056b4 <flashsizeCommand+0x14>)
 80056a6:	881a      	ldrh	r2, [r3, #0]
 80056a8:	f00e fb80 	bl	8013dac <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80056ac:	2000      	movs	r0, #0
 80056ae:	bd10      	pop	{r4, pc}
 80056b0:	1ffff7cc 	.word	0x1ffff7cc
 80056b4:	080195b4 	.word	0x080195b4

080056b8 <ReadVrefCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056b8:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056ba:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056bc:	0004      	movs	r4, r0
 80056be:	b082      	sub	sp, #8
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80056c0:	a901      	add	r1, sp, #4
 80056c2:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80056c8:	f006 ffde 	bl	800c688 <ReadTempAndVref>
	
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80056cc:	4669      	mov	r1, sp
 80056ce:	0020      	movs	r0, r4
 80056d0:	f00e fba8 	bl	8013e24 <strcpy>
	
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80056d4:	9801      	ldr	r0, [sp, #4]
 80056d6:	f7fd fb37 	bl	8002d48 <__aeabi_f2d>
 80056da:	0002      	movs	r2, r0
 80056dc:	000b      	movs	r3, r1
 80056de:	0020      	movs	r0, r4
 80056e0:	4902      	ldr	r1, [pc, #8]	; (80056ec <ReadVrefCommand+0x34>)
 80056e2:	f00e fb63 	bl	8013dac <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80056e6:	2000      	movs	r0, #0
 80056e8:	b002      	add	sp, #8
 80056ea:	bd10      	pop	{r4, pc}
 80056ec:	080195d4 	.word	0x080195d4

080056f0 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056f0:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056f2:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056f4:	0004      	movs	r4, r0
 80056f6:	b082      	sub	sp, #8
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80056f8:	a901      	add	r1, sp, #4
 80056fa:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005700:	f006 ffc2 	bl	800c688 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005704:	4669      	mov	r1, sp
 8005706:	0020      	movs	r0, r4
 8005708:	f00e fb8c 	bl	8013e24 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 800570c:	9800      	ldr	r0, [sp, #0]
 800570e:	f7fd fb1b 	bl	8002d48 <__aeabi_f2d>
 8005712:	0002      	movs	r2, r0
 8005714:	000b      	movs	r3, r1
 8005716:	0020      	movs	r0, r4
 8005718:	4902      	ldr	r1, [pc, #8]	; (8005724 <ReadTempCommand+0x34>)
 800571a:	f00e fb47 	bl	8013dac <sprintf>
}
 800571e:	2000      	movs	r0, #0
 8005720:	b002      	add	sp, #8
 8005722:	bd10      	pop	{r4, pc}
 8005724:	080195fc 	.word	0x080195fc

08005728 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005728:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800572a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800572c:	0014      	movs	r4, r2
 800572e:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005730:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005732:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005734:	2300      	movs	r3, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005736:	aa01      	add	r2, sp, #4
 8005738:	2101      	movs	r1, #1
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800573a:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800573c:	0020      	movs	r0, r4
	float ADC_Value_CLI =0;
 800573e:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005740:	f008 fcea 	bl	800e118 <FreeRTOS_CLIGetParameter>
 8005744:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005746:	aa02      	add	r2, sp, #8
 8005748:	2102      	movs	r1, #2
 800574a:	0020      	movs	r0, r4
 800574c:	f008 fce4 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005750:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005752:	0007      	movs	r7, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005754:	3b32      	subs	r3, #50	; 0x32
 8005756:	2b01      	cmp	r3, #1
 8005758:	d907      	bls.n	800576a <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800575a:	2215      	movs	r2, #21
 800575c:	4919      	ldr	r1, [pc, #100]	; (80057c4 <ADCReadCommand+0x9c>)
 800575e:	0030      	movs	r0, r6
 8005760:	f00e f921 	bl	80139a6 <memcpy>
}
 8005764:	2000      	movs	r0, #0
 8005766:	b005      	add	sp, #20
 8005768:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800576a:	0028      	movs	r0, r5
 800576c:	f00d fe5b 	bl	8013426 <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005770:	4d15      	ldr	r5, [pc, #84]	; (80057c8 <ADCReadCommand+0xa0>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005772:	b2c4      	uxtb	r4, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005774:	0029      	movs	r1, r5
 8005776:	0038      	movs	r0, r7
 8005778:	f7fa fcc4 	bl	8000104 <strcmp>
 800577c:	2800      	cmp	r0, #0
 800577e:	d005      	beq.n	800578c <ADCReadCommand+0x64>
 8005780:	4912      	ldr	r1, [pc, #72]	; (80057cc <ADCReadCommand+0xa4>)
 8005782:	0038      	movs	r0, r7
 8005784:	f7fa fcbe 	bl	8000104 <strcmp>
 8005788:	2800      	cmp	r0, #0
 800578a:	d115      	bne.n	80057b8 <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 800578c:	0029      	movs	r1, r5
 800578e:	0020      	movs	r0, r4
 8005790:	f007 f940 	bl	800ca14 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005794:	aa03      	add	r2, sp, #12
 8005796:	0029      	movs	r1, r5
 8005798:	0020      	movs	r0, r4
 800579a:	f007 f98b 	bl	800cab4 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800579e:	a903      	add	r1, sp, #12
 80057a0:	0030      	movs	r0, r6
 80057a2:	f00e fb3f 	bl	8013e24 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 80057a6:	9803      	ldr	r0, [sp, #12]
 80057a8:	f7fa ff0a 	bl	80005c0 <__aeabi_f2uiz>
 80057ac:	4908      	ldr	r1, [pc, #32]	; (80057d0 <ADCReadCommand+0xa8>)
 80057ae:	b282      	uxth	r2, r0
 80057b0:	0030      	movs	r0, r6
 80057b2:	f00e fafb 	bl	8013dac <sprintf>
 80057b6:	e7d5      	b.n	8005764 <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80057b8:	2212      	movs	r2, #18
 80057ba:	4906      	ldr	r1, [pc, #24]	; (80057d4 <ADCReadCommand+0xac>)
 80057bc:	0030      	movs	r0, r6
 80057be:	f00e f8f2 	bl	80139a6 <memcpy>
 80057c2:	e7cf      	b.n	8005764 <ADCReadCommand+0x3c>
 80057c4:	08019650 	.word	0x08019650
 80057c8:	08019620 	.word	0x08019620
 80057cc:	08019624 	.word	0x08019624
 80057d0:	0801962c 	.word	0x0801962c
 80057d4:	0801963c 	.word	0x0801963c

080057d8 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057da:	4657      	mov	r7, sl
 80057dc:	46de      	mov	lr, fp
 80057de:	464e      	mov	r6, r9
 80057e0:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0;
 80057e2:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057e4:	b5e0      	push	{r5, r6, r7, lr}
 80057e6:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 80057e8:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80057ea:	4b5b      	ldr	r3, [pc, #364]	; (8005958 <testportCommand+0x180>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057ec:	2101      	movs	r1, #1
	char WriteVaule[1] ="H";
 80057ee:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057f0:	4682      	mov	sl, r0
	char WriteVaule[1] ="H";
 80057f2:	af02      	add	r7, sp, #8
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057f4:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057f6:	aa03      	add	r2, sp, #12
	char WriteVaule[1] ="H";
 80057f8:	703b      	strb	r3, [r7, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057fa:	f008 fc8d 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80057fe:	4957      	ldr	r1, [pc, #348]	; (800595c <testportCommand+0x184>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005800:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005802:	f7fa fc7f 	bl	8000104 <strcmp>
 8005806:	2800      	cmp	r0, #0
 8005808:	d15c      	bne.n	80058c4 <testportCommand+0xec>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 800580a:	4d55      	ldr	r5, [pc, #340]	; (8005960 <testportCommand+0x188>)
 800580c:	4a55      	ldr	r2, [pc, #340]	; (8005964 <testportCommand+0x18c>)
 800580e:	782b      	ldrb	r3, [r5, #0]
 8005810:	2401      	movs	r4, #1
 8005812:	18d2      	adds	r2, r2, r3
 8005814:	3a01      	subs	r2, #1
 8005816:	7816      	ldrb	r6, [r2, #0]
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005818:	4a53      	ldr	r2, [pc, #332]	; (8005968 <testportCommand+0x190>)
 800581a:	4691      	mov	r9, r2
 800581c:	e003      	b.n	8005826 <testportCommand+0x4e>
 800581e:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005820:	2c06      	cmp	r4, #6
 8005822:	d047      	beq.n	80058b4 <testportCommand+0xdc>
 8005824:	782b      	ldrb	r3, [r5, #0]
 8005826:	b2e2      	uxtb	r2, r4
 8005828:	4690      	mov	r8, r2
			if(PcPort != ports){
 800582a:	4293      	cmp	r3, r2
 800582c:	d0f7      	beq.n	800581e <testportCommand+0x46>
				WriteVaule[0] =rand();
 800582e:	f00e f8db 	bl	80139e8 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 8005832:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005834:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005836:	2201      	movs	r2, #1
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	0039      	movs	r1, r7
 800583c:	469b      	mov	fp, r3
 800583e:	4640      	mov	r0, r8
 8005840:	3b5a      	subs	r3, #90	; 0x5a
 8005842:	f008 f9c3 	bl	800dbcc <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005846:	4640      	mov	r0, r8
 8005848:	f008 fa24 	bl	800dc94 <GetUart>
 800584c:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 800584e:	783a      	ldrb	r2, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005850:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005852:	b2db      	uxtb	r3, r3
 8005854:	429a      	cmp	r2, r3
 8005856:	d03f      	beq.n	80058d8 <testportCommand+0x100>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005858:	0022      	movs	r2, r4
 800585a:	4944      	ldr	r1, [pc, #272]	; (800596c <testportCommand+0x194>)
 800585c:	4650      	mov	r0, sl
 800585e:	f00e faa5 	bl	8013dac <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005862:	4650      	mov	r0, sl
 8005864:	f7fa fc58 	bl	8000118 <strlen>
 8005868:	465b      	mov	r3, fp
 800586a:	b282      	uxth	r2, r0
 800586c:	4651      	mov	r1, sl
 800586e:	7828      	ldrb	r0, [r5, #0]
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	230a      	movs	r3, #10
 8005874:	f008 f9aa 	bl	800dbcc <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005878:	2254      	movs	r2, #84	; 0x54
 800587a:	493d      	ldr	r1, [pc, #244]	; (8005970 <testportCommand+0x198>)
 800587c:	4650      	mov	r0, sl
 800587e:	f00e f892 	bl	80139a6 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005882:	2364      	movs	r3, #100	; 0x64
 8005884:	7828      	ldrb	r0, [r5, #0]
 8005886:	2253      	movs	r2, #83	; 0x53
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	4651      	mov	r1, sl
 800588c:	3b5a      	subs	r3, #90	; 0x5a
 800588e:	f008 f99d 	bl	800dbcc <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005892:	3601      	adds	r6, #1
 8005894:	e002      	b.n	800589c <testportCommand+0xc4>
					Delay_ms(1);
 8005896:	2001      	movs	r0, #1
 8005898:	f00a f9da 	bl	800fc50 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 800589c:	782a      	ldrb	r2, [r5, #0]
 800589e:	3a01      	subs	r2, #1
 80058a0:	0053      	lsls	r3, r2, #1
 80058a2:	189b      	adds	r3, r3, r2
 80058a4:	019b      	lsls	r3, r3, #6
 80058a6:	444b      	add	r3, r9
 80058a8:	5d9b      	ldrb	r3, [r3, r6]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f3      	beq.n	8005896 <testportCommand+0xbe>
 80058ae:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 80058b0:	2c06      	cmp	r4, #6
 80058b2:	d1b7      	bne.n	8005824 <testportCommand+0x4c>
}
 80058b4:	2000      	movs	r0, #0
 80058b6:	b005      	add	sp, #20
 80058b8:	bc3c      	pop	{r2, r3, r4, r5}
 80058ba:	4690      	mov	r8, r2
 80058bc:	4699      	mov	r9, r3
 80058be:	46a2      	mov	sl, r4
 80058c0:	46ab      	mov	fp, r5
 80058c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(pcParameterString1[0] == 'p'){
 80058c4:	2300      	movs	r3, #0
 80058c6:	56e3      	ldrsb	r3, [r4, r3]
 80058c8:	2b70      	cmp	r3, #112	; 0x70
 80058ca:	d016      	beq.n	80058fa <testportCommand+0x122>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058cc:	220f      	movs	r2, #15
 80058ce:	4929      	ldr	r1, [pc, #164]	; (8005974 <testportCommand+0x19c>)
 80058d0:	4650      	mov	r0, sl
 80058d2:	f00e f868 	bl	80139a6 <memcpy>
 80058d6:	e7ed      	b.n	80058b4 <testportCommand+0xdc>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80058d8:	0022      	movs	r2, r4
 80058da:	4927      	ldr	r1, [pc, #156]	; (8005978 <testportCommand+0x1a0>)
 80058dc:	4650      	mov	r0, sl
 80058de:	f00e fa65 	bl	8013dac <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80058e2:	4650      	mov	r0, sl
 80058e4:	f7fa fc18 	bl	8000118 <strlen>
 80058e8:	465b      	mov	r3, fp
 80058ea:	b282      	uxth	r2, r0
 80058ec:	4651      	mov	r1, sl
 80058ee:	7828      	ldrb	r0, [r5, #0]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	3b5a      	subs	r3, #90	; 0x5a
 80058f4:	f008 f96a 	bl	800dbcc <writePxMutex>
 80058f8:	e7be      	b.n	8005878 <testportCommand+0xa0>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80058fa:	1c60      	adds	r0, r4, #1
 80058fc:	f00d fd93 	bl	8013426 <atol>
 8005900:	b2c5      	uxtb	r5, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005902:	1e6b      	subs	r3, r5, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005904:	0004      	movs	r4, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005906:	2b04      	cmp	r3, #4
 8005908:	d905      	bls.n	8005916 <testportCommand+0x13e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800590a:	221b      	movs	r2, #27
 800590c:	491b      	ldr	r1, [pc, #108]	; (800597c <testportCommand+0x1a4>)
 800590e:	4650      	mov	r0, sl
 8005910:	f00e f849 	bl	80139a6 <memcpy>
 8005914:	e7ce      	b.n	80058b4 <testportCommand+0xdc>
				WriteVaule[0] =rand();
 8005916:	f00e f867 	bl	80139e8 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 800591a:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 800591c:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 800591e:	2201      	movs	r2, #1
 8005920:	0039      	movs	r1, r7
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	0028      	movs	r0, r5
 8005926:	3b32      	subs	r3, #50	; 0x32
 8005928:	f008 f950 	bl	800dbcc <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800592c:	2000      	movs	r0, #0
 800592e:	f008 f9b1 	bl	800dc94 <GetUart>
 8005932:	22ff      	movs	r2, #255	; 0xff
 8005934:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 8005936:	7839      	ldrb	r1, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005938:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800593a:	4022      	ands	r2, r4
			if(WriteVaule[0] == ReadValue[0])
 800593c:	b2db      	uxtb	r3, r3
 800593e:	4299      	cmp	r1, r3
 8005940:	d004      	beq.n	800594c <testportCommand+0x174>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005942:	490a      	ldr	r1, [pc, #40]	; (800596c <testportCommand+0x194>)
 8005944:	4650      	mov	r0, sl
 8005946:	f00e fa31 	bl	8013dac <sprintf>
 800594a:	e7b3      	b.n	80058b4 <testportCommand+0xdc>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 800594c:	490a      	ldr	r1, [pc, #40]	; (8005978 <testportCommand+0x1a0>)
 800594e:	4650      	mov	r0, sl
 8005950:	f00e fa2c 	bl	8013dac <sprintf>
 8005954:	e7ae      	b.n	80058b4 <testportCommand+0xdc>
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	08018528 	.word	0x08018528
 800595c:	08018c34 	.word	0x08018c34
 8005960:	20000c38 	.word	0x20000c38
 8005964:	200018a4 	.word	0x200018a4
 8005968:	200018e4 	.word	0x200018e4
 800596c:	08019684 	.word	0x08019684
 8005970:	08019698 	.word	0x08019698
 8005974:	08019708 	.word	0x08019708
 8005978:	08019668 	.word	0x08019668
 800597c:	080196ec 	.word	0x080196ec

08005980 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005984:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005986:	b082      	sub	sp, #8
 8005988:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800598a:	466a      	mov	r2, sp
 800598c:	2101      	movs	r1, #1
 800598e:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005994:	f008 fbc0 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005998:	2300      	movs	r3, #0
 800599a:	56c3      	ldrsb	r3, [r0, r3]
 800599c:	2b70      	cmp	r3, #112	; 0x70
 800599e:	d010      	beq.n	80059c2 <unbridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059a0:	aa01      	add	r2, sp, #4
 80059a2:	2102      	movs	r1, #2
 80059a4:	0020      	movs	r0, r4
 80059a6:	f008 fbb7 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80059aa:	2300      	movs	r3, #0
 80059ac:	56c3      	ldrsb	r3, [r0, r3]
 80059ae:	2b70      	cmp	r3, #112	; 0x70
 80059b0:	d027      	beq.n	8005a02 <unbridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059b2:	220f      	movs	r2, #15
 80059b4:	4919      	ldr	r1, [pc, #100]	; (8005a1c <unbridgeCommand+0x9c>)
 80059b6:	0028      	movs	r0, r5
 80059b8:	f00d fff5 	bl	80139a6 <memcpy>
}
 80059bc:	2000      	movs	r0, #0
 80059be:	b002      	add	sp, #8
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059c2:	3001      	adds	r0, #1
 80059c4:	f00d fd2f 	bl	8013426 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059c8:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059ca:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059cc:	2102      	movs	r1, #2
 80059ce:	0020      	movs	r0, r4
 80059d0:	f008 fba2 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80059d4:	2300      	movs	r3, #0
 80059d6:	56c3      	ldrsb	r3, [r0, r3]
 80059d8:	2b70      	cmp	r3, #112	; 0x70
 80059da:	d1ea      	bne.n	80059b2 <unbridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80059dc:	3001      	adds	r0, #1
 80059de:	f00d fd22 	bl	8013426 <atol>
 80059e2:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 80059e4:	b2c1      	uxtb	r1, r0
 80059e6:	b2f0      	uxtb	r0, r6
 80059e8:	f7fe ffe2 	bl	80049b0 <Unbridge>
	if(result == BOS_OK)
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d10c      	bne.n	8005a0a <unbridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80059f0:	22ff      	movs	r2, #255	; 0xff
 80059f2:	0023      	movs	r3, r4
 80059f4:	490a      	ldr	r1, [pc, #40]	; (8005a20 <unbridgeCommand+0xa0>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	0028      	movs	r0, r5
 80059fa:	4032      	ands	r2, r6
 80059fc:	f00e f9d6 	bl	8013dac <sprintf>
 8005a00:	e7dc      	b.n	80059bc <unbridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a02:	3001      	adds	r0, #1
 8005a04:	f00d fd0f 	bl	8013426 <atol>
 8005a08:	e7d3      	b.n	80059b2 <unbridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 8005a0a:	2867      	cmp	r0, #103	; 0x67
 8005a0c:	d0d1      	beq.n	80059b2 <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005a0e:	2219      	movs	r2, #25
 8005a10:	4904      	ldr	r1, [pc, #16]	; (8005a24 <unbridgeCommand+0xa4>)
 8005a12:	0028      	movs	r0, r5
 8005a14:	f00d ffc7 	bl	80139a6 <memcpy>
	return pdFALSE;
 8005a18:	e7d0      	b.n	80059bc <unbridgeCommand+0x3c>
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	08019708 	.word	0x08019708
 8005a20:	08019718 	.word	0x08019718
 8005a24:	08019738 	.word	0x08019738

08005a28 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005a2c:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a2e:	b082      	sub	sp, #8
 8005a30:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a32:	466a      	mov	r2, sp
 8005a34:	2101      	movs	r1, #1
 8005a36:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a3c:	f008 fb6c 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005a40:	2300      	movs	r3, #0
 8005a42:	56c3      	ldrsb	r3, [r0, r3]
 8005a44:	2b70      	cmp	r3, #112	; 0x70
 8005a46:	d010      	beq.n	8005a6a <bridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a48:	aa01      	add	r2, sp, #4
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	0020      	movs	r0, r4
 8005a4e:	f008 fb63 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a52:	2300      	movs	r3, #0
 8005a54:	56c3      	ldrsb	r3, [r0, r3]
 8005a56:	2b70      	cmp	r3, #112	; 0x70
 8005a58:	d027      	beq.n	8005aaa <bridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a5a:	220f      	movs	r2, #15
 8005a5c:	4919      	ldr	r1, [pc, #100]	; (8005ac4 <bridgeCommand+0x9c>)
 8005a5e:	0028      	movs	r0, r5
 8005a60:	f00d ffa1 	bl	80139a6 <memcpy>
}
 8005a64:	2000      	movs	r0, #0
 8005a66:	b002      	add	sp, #8
 8005a68:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f00d fcdb 	bl	8013426 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a70:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a72:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a74:	2102      	movs	r1, #2
 8005a76:	0020      	movs	r0, r4
 8005a78:	f008 fb4e 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	56c3      	ldrsb	r3, [r0, r3]
 8005a80:	2b70      	cmp	r3, #112	; 0x70
 8005a82:	d1ea      	bne.n	8005a5a <bridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a84:	3001      	adds	r0, #1
 8005a86:	f00d fcce 	bl	8013426 <atol>
 8005a8a:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 8005a8c:	b2c1      	uxtb	r1, r0
 8005a8e:	b2f0      	uxtb	r0, r6
 8005a90:	f7fe ff7a 	bl	8004988 <Bridge>
	if(result == BOS_OK)
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d10c      	bne.n	8005ab2 <bridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005a98:	22ff      	movs	r2, #255	; 0xff
 8005a9a:	0023      	movs	r3, r4
 8005a9c:	490a      	ldr	r1, [pc, #40]	; (8005ac8 <bridgeCommand+0xa0>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	0028      	movs	r0, r5
 8005aa2:	4032      	ands	r2, r6
 8005aa4:	f00e f982 	bl	8013dac <sprintf>
 8005aa8:	e7dc      	b.n	8005a64 <bridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005aaa:	3001      	adds	r0, #1
 8005aac:	f00d fcbb 	bl	8013426 <atol>
 8005ab0:	e7d3      	b.n	8005a5a <bridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 8005ab2:	2867      	cmp	r0, #103	; 0x67
 8005ab4:	d0d1      	beq.n	8005a5a <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005ab6:	2217      	movs	r2, #23
 8005ab8:	4904      	ldr	r1, [pc, #16]	; (8005acc <bridgeCommand+0xa4>)
 8005aba:	0028      	movs	r0, r5
 8005abc:	f00d ff73 	bl	80139a6 <memcpy>
	return pdFALSE;
 8005ac0:	e7d0      	b.n	8005a64 <bridgeCommand+0x3c>
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	08019708 	.word	0x08019708
 8005ac8:	08019754 	.word	0x08019754
 8005acc:	08019778 	.word	0x08019778

08005ad0 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ad2:	46d6      	mov	lr, sl
 8005ad4:	4646      	mov	r6, r8
 8005ad6:	464f      	mov	r7, r9
	portBASE_TYPE xParameterStringLength1 =0;
 8005ad8:	2400      	movs	r4, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ada:	b5c0      	push	{r6, r7, lr}
 8005adc:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ade:	2101      	movs	r1, #1
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ae0:	0006      	movs	r6, r0
 8005ae2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ae4:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005ae6:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ae8:	f008 fb16 	bl	800e118 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005aec:	f00d fc95 	bl	801341a <atoi>
 8005af0:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 8005af2:	2d00      	cmp	r5, #0
 8005af4:	d003      	beq.n	8005afe <delSnipCommand+0x2e>
 8005af6:	4f30      	ldr	r7, [pc, #192]	; (8005bb8 <delSnipCommand+0xe8>)
 8005af8:	783b      	ldrb	r3, [r7, #0]
 8005afa:	42ab      	cmp	r3, r5
 8005afc:	d20b      	bcs.n	8005b16 <delSnipCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005afe:	2223      	movs	r2, #35	; 0x23
 8005b00:	492e      	ldr	r1, [pc, #184]	; (8005bbc <delSnipCommand+0xec>)
 8005b02:	0030      	movs	r0, r6
 8005b04:	f00d ff4f 	bl	80139a6 <memcpy>
}
 8005b08:	2000      	movs	r0, #0
 8005b0a:	b002      	add	sp, #8
 8005b0c:	bc1c      	pop	{r2, r3, r4}
 8005b0e:	4690      	mov	r8, r2
 8005b10:	4699      	mov	r9, r3
 8005b12:	46a2      	mov	sl, r4
 8005b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005b16:	23ff      	movs	r3, #255	; 0xff
 8005b18:	4003      	ands	r3, r0
 8005b1a:	469a      	mov	sl, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	0098      	lsls	r0, r3, #2
 8005b20:	18c0      	adds	r0, r0, r3
 8005b22:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <delSnipCommand+0xf0>)
 8005b24:	0080      	lsls	r0, r0, #2
 8005b26:	4699      	mov	r9, r3
 8005b28:	4680      	mov	r8, r0
 8005b2a:	44c8      	add	r8, r9
 8005b2c:	4643      	mov	r3, r8
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005b2e:	3002      	adds	r0, #2
		snippets[index - 1].cond.conditionType =0;
 8005b30:	801c      	strh	r4, [r3, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005b32:	2204      	movs	r2, #4
 8005b34:	2100      	movs	r1, #0
 8005b36:	4448      	add	r0, r9
 8005b38:	f00d ff3e 	bl	80139b8 <memset>
		snippets[index - 1].state = false;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4642      	mov	r2, r8
 8005b40:	7413      	strb	r3, [r2, #16]
		free(snippets[index - 1].cmd);
 8005b42:	68d0      	ldr	r0, [r2, #12]
 8005b44:	f00d fcec 	bl	8013520 <free>
		snippets[index - 1].cmd = NULL;
 8005b48:	4643      	mov	r3, r8
 8005b4a:	60dc      	str	r4, [r3, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b4c:	783b      	ldrb	r3, [r7, #0]
 8005b4e:	42ab      	cmp	r3, r5
 8005b50:	d92e      	bls.n	8005bb0 <delSnipCommand+0xe0>
 8005b52:	3b01      	subs	r3, #1
 8005b54:	1b58      	subs	r0, r3, r5
 8005b56:	b2c0      	uxtb	r0, r0
 8005b58:	4450      	add	r0, sl
 8005b5a:	4652      	mov	r2, sl
 8005b5c:	0085      	lsls	r5, r0, #2
 8005b5e:	182d      	adds	r5, r5, r0
 8005b60:	4648      	mov	r0, r9
 8005b62:	0094      	lsls	r4, r2, #2
 8005b64:	4454      	add	r4, sl
 8005b66:	00a4      	lsls	r4, r4, #2
 8005b68:	00ad      	lsls	r5, r5, #2
 8005b6a:	3014      	adds	r0, #20
 8005b6c:	444c      	add	r4, r9
 8005b6e:	4698      	mov	r8, r3
 8005b70:	182d      	adds	r5, r5, r0
 8005b72:	e002      	b.n	8005b7a <delSnipCommand+0xaa>
 8005b74:	3414      	adds	r4, #20
 8005b76:	42ac      	cmp	r4, r5
 8005b78:	d010      	beq.n	8005b9c <delSnipCommand+0xcc>
			if(snippets[s].cond.conditionType){
 8005b7a:	7823      	ldrb	r3, [r4, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f9      	beq.n	8005b74 <delSnipCommand+0xa4>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005b80:	0020      	movs	r0, r4
 8005b82:	0021      	movs	r1, r4
 8005b84:	2214      	movs	r2, #20
 8005b86:	3814      	subs	r0, #20
 8005b88:	f00d ff0d 	bl	80139a6 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005b8c:	0020      	movs	r0, r4
 8005b8e:	2214      	movs	r2, #20
 8005b90:	2100      	movs	r1, #0
 8005b92:	3414      	adds	r4, #20
 8005b94:	f00d ff10 	bl	80139b8 <memset>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b98:	42ac      	cmp	r4, r5
 8005b9a:	d1ee      	bne.n	8005b7a <delSnipCommand+0xaa>
		--numOfRecordedSnippets;
 8005b9c:	4643      	mov	r3, r8
 8005b9e:	703b      	strb	r3, [r7, #0]
		SaveToRO();
 8005ba0:	f004 f91e 	bl	8009de0 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005ba4:	2236      	movs	r2, #54	; 0x36
 8005ba6:	4907      	ldr	r1, [pc, #28]	; (8005bc4 <delSnipCommand+0xf4>)
 8005ba8:	0030      	movs	r0, r6
 8005baa:	f00d fefc 	bl	80139a6 <memcpy>
 8005bae:	e7ab      	b.n	8005b08 <delSnipCommand+0x38>
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	4698      	mov	r8, r3
 8005bb4:	e7f2      	b.n	8005b9c <delSnipCommand+0xcc>
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	200016e4 	.word	0x200016e4
 8005bbc:	080197c8 	.word	0x080197c8
 8005bc0:	20006898 	.word	0x20006898
 8005bc4:	08019790 	.word	0x08019790

08005bc8 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bc8:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005bca:	2400      	movs	r4, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bcc:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bce:	2101      	movs	r1, #1
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bd0:	0005      	movs	r5, r0
 8005bd2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bd4:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005bd6:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bd8:	f008 fa9e 	bl	800e118 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005bdc:	f00d fc1d 	bl	801341a <atoi>
 8005be0:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <pauseSnipCommand+0x26>
 8005be6:	4a0e      	ldr	r2, [pc, #56]	; (8005c20 <pauseSnipCommand+0x58>)
 8005be8:	7812      	ldrb	r2, [r2, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d207      	bcs.n	8005bfe <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005bee:	2223      	movs	r2, #35	; 0x23
 8005bf0:	490c      	ldr	r1, [pc, #48]	; (8005c24 <pauseSnipCommand+0x5c>)
 8005bf2:	0028      	movs	r0, r5
 8005bf4:	f00d fed7 	bl	80139a6 <memcpy>
}
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	b003      	add	sp, #12
 8005bfc:	bd30      	pop	{r4, r5, pc}
		snippets[index - 1].state = false;
 8005bfe:	23ff      	movs	r3, #255	; 0xff
 8005c00:	4018      	ands	r0, r3
 8005c02:	3801      	subs	r0, #1
 8005c04:	0083      	lsls	r3, r0, #2
 8005c06:	1818      	adds	r0, r3, r0
 8005c08:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <pauseSnipCommand+0x60>)
 8005c0a:	0080      	lsls	r0, r0, #2
 8005c0c:	1818      	adds	r0, r3, r0
 8005c0e:	7404      	strb	r4, [r0, #16]
		SaveToRO();
 8005c10:	f004 f8e6 	bl	8009de0 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c14:	2235      	movs	r2, #53	; 0x35
 8005c16:	4905      	ldr	r1, [pc, #20]	; (8005c2c <pauseSnipCommand+0x64>)
 8005c18:	0028      	movs	r0, r5
 8005c1a:	f00d fec4 	bl	80139a6 <memcpy>
 8005c1e:	e7eb      	b.n	8005bf8 <pauseSnipCommand+0x30>
 8005c20:	200016e4 	.word	0x200016e4
 8005c24:	080197c8 	.word	0x080197c8
 8005c28:	20006898 	.word	0x20006898
 8005c2c:	080197ec 	.word	0x080197ec

08005c30 <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005c30:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c32:	b510      	push	{r4, lr}
 8005c34:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c36:	2101      	movs	r1, #1
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c38:	0004      	movs	r4, r0
 8005c3a:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c3c:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005c3e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c40:	f008 fa6a 	bl	800e118 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c44:	f00d fbe9 	bl	801341a <atoi>
 8005c48:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <actSnipCommand+0x26>
 8005c4e:	4a0f      	ldr	r2, [pc, #60]	; (8005c8c <actSnipCommand+0x5c>)
 8005c50:	7812      	ldrb	r2, [r2, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d207      	bcs.n	8005c66 <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c56:	2223      	movs	r2, #35	; 0x23
 8005c58:	490d      	ldr	r1, [pc, #52]	; (8005c90 <actSnipCommand+0x60>)
 8005c5a:	0020      	movs	r0, r4
 8005c5c:	f00d fea3 	bl	80139a6 <memcpy>
}
 8005c60:	2000      	movs	r0, #0
 8005c62:	b002      	add	sp, #8
 8005c64:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005c66:	23ff      	movs	r3, #255	; 0xff
 8005c68:	4018      	ands	r0, r3
 8005c6a:	3801      	subs	r0, #1
 8005c6c:	0083      	lsls	r3, r0, #2
 8005c6e:	1818      	adds	r0, r3, r0
 8005c70:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <actSnipCommand+0x64>)
 8005c72:	0080      	lsls	r0, r0, #2
 8005c74:	1818      	adds	r0, r3, r0
 8005c76:	2301      	movs	r3, #1
 8005c78:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005c7a:	f004 f8b1 	bl	8009de0 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c7e:	2238      	movs	r2, #56	; 0x38
 8005c80:	4905      	ldr	r1, [pc, #20]	; (8005c98 <actSnipCommand+0x68>)
 8005c82:	0020      	movs	r0, r4
 8005c84:	f00d fe8f 	bl	80139a6 <memcpy>
 8005c88:	e7ea      	b.n	8005c60 <actSnipCommand+0x30>
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	200016e4 	.word	0x200016e4
 8005c90:	080197c8 	.word	0x080197c8
 8005c94:	20006898 	.word	0x20006898
 8005c98:	08019824 	.word	0x08019824

08005c9c <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c9e:	46de      	mov	lr, fp
 8005ca0:	4657      	mov	r7, sl
 8005ca2:	464e      	mov	r6, r9
 8005ca4:	4645      	mov	r5, r8
 8005ca6:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005ca8:	4b7c      	ldr	r3, [pc, #496]	; (8005e9c <snipCommand+0x200>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005caa:	b08b      	sub	sp, #44	; 0x2c
	char status[2][7] ={"Paused", "Active"};
 8005cac:	3304      	adds	r3, #4
 8005cae:	aa06      	add	r2, sp, #24
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005cb0:	0007      	movs	r7, r0
	char status[2][7] ={"Paused", "Active"};
 8005cb2:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005cb4:	c213      	stmia	r2!, {r0, r1, r4}
 8005cb6:	881b      	ldrh	r3, [r3, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005cb8:	4979      	ldr	r1, [pc, #484]	; (8005ea0 <snipCommand+0x204>)
	char status[2][7] ={"Paused", "Active"};
 8005cba:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005cbc:	4b79      	ldr	r3, [pc, #484]	; (8005ea4 <snipCommand+0x208>)
 8005cbe:	2237      	movs	r2, #55	; 0x37
 8005cc0:	7818      	ldrb	r0, [r3, #0]
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	425b      	negs	r3, r3
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	3333      	adds	r3, #51	; 0x33
 8005cca:	f007 ff7f 	bl	800dbcc <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005cce:	4b76      	ldr	r3, [pc, #472]	; (8005ea8 <snipCommand+0x20c>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d044      	beq.n	8005d60 <snipCommand+0xc4>
 8005cd6:	2500      	movs	r5, #0
 8005cd8:	4b74      	ldr	r3, [pc, #464]	; (8005eac <snipCommand+0x210>)
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005cda:	46a8      	mov	r8, r5
 8005cdc:	469a      	mov	sl, r3
 8005cde:	4c74      	ldr	r4, [pc, #464]	; (8005eb0 <snipCommand+0x214>)
 8005ce0:	4643      	mov	r3, r8
		if(snippets[s].cond.conditionType)
 8005ce2:	009d      	lsls	r5, r3, #2
 8005ce4:	18e9      	adds	r1, r5, r3
 8005ce6:	1c5e      	adds	r6, r3, #1
 8005ce8:	008b      	lsls	r3, r1, #2
 8005cea:	469b      	mov	fp, r3
 8005cec:	4653      	mov	r3, sl
 8005cee:	465a      	mov	r2, fp
 8005cf0:	5c9b      	ldrb	r3, [r3, r2]
 8005cf2:	b2f6      	uxtb	r6, r6
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d140      	bne.n	8005d7a <snipCommand+0xde>
 8005cf8:	4659      	mov	r1, fp
 8005cfa:	4451      	add	r1, sl
 8005cfc:	68c8      	ldr	r0, [r1, #12]
 8005cfe:	4445      	add	r5, r8
 8005d00:	00ad      	lsls	r5, r5, #2
 8005d02:	4455      	add	r5, sl
 8005d04:	e00e      	b.n	8005d24 <snipCommand+0x88>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005d06:	0023      	movs	r3, r4
 8005d08:	003a      	movs	r2, r7
 8005d0a:	496a      	ldr	r1, [pc, #424]	; (8005eb4 <snipCommand+0x218>)
 8005d0c:	0038      	movs	r0, r7
 8005d0e:	f00e f84d 	bl	8013dac <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005d12:	0020      	movs	r0, r4
 8005d14:	f7fa fa00 	bl	8000118 <strlen>
 8005d18:	2100      	movs	r1, #0
 8005d1a:	0002      	movs	r2, r0
 8005d1c:	0020      	movs	r0, r4
 8005d1e:	f00d fe4b 	bl	80139b8 <memset>
 8005d22:	68e8      	ldr	r0, [r5, #12]
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005d24:	0021      	movs	r1, r4
 8005d26:	f7ff fbbb 	bl	80054a0 <ParseSnippetCommand>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d1eb      	bne.n	8005d06 <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005d2e:	0038      	movs	r0, r7
 8005d30:	f7fa f9f2 	bl	8000118 <strlen>
 8005d34:	220c      	movs	r2, #12
 8005d36:	0005      	movs	r5, r0
 8005d38:	495f      	ldr	r1, [pc, #380]	; (8005eb8 <snipCommand+0x21c>)
 8005d3a:	1838      	adds	r0, r7, r0
 8005d3c:	f00d fe33 	bl	80139a6 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005d40:	4b58      	ldr	r3, [pc, #352]	; (8005ea4 <snipCommand+0x208>)
 8005d42:	350b      	adds	r5, #11
 8005d44:	7818      	ldrb	r0, [r3, #0]
 8005d46:	2301      	movs	r3, #1
 8005d48:	425b      	negs	r3, r3
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	b2aa      	uxth	r2, r5
 8005d4e:	3333      	adds	r3, #51	; 0x33
 8005d50:	0039      	movs	r1, r7
 8005d52:	f007 ff3b 	bl	800dbcc <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005d56:	4b54      	ldr	r3, [pc, #336]	; (8005ea8 <snipCommand+0x20c>)
 8005d58:	46b0      	mov	r8, r6
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	42b3      	cmp	r3, r6
 8005d5e:	d8bf      	bhi.n	8005ce0 <snipCommand+0x44>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005d60:	22b5      	movs	r2, #181	; 0xb5
 8005d62:	4956      	ldr	r1, [pc, #344]	; (8005ebc <snipCommand+0x220>)
 8005d64:	0038      	movs	r0, r7
 8005d66:	f00d fe1e 	bl	80139a6 <memcpy>
}
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	b00b      	add	sp, #44	; 0x2c
 8005d6e:	bc3c      	pop	{r2, r3, r4, r5}
 8005d70:	4690      	mov	r8, r2
 8005d72:	4699      	mov	r9, r3
 8005d74:	46a2      	mov	sl, r4
 8005d76:	46ab      	mov	fp, r5
 8005d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005d7a:	46d1      	mov	r9, sl
 8005d7c:	44d9      	add	r9, fp
 8005d7e:	464b      	mov	r3, r9
 8005d80:	7c1a      	ldrb	r2, [r3, #16]
 8005d82:	494f      	ldr	r1, [pc, #316]	; (8005ec0 <snipCommand+0x224>)
 8005d84:	00d3      	lsls	r3, r2, #3
 8005d86:	1a9b      	subs	r3, r3, r2
 8005d88:	aa06      	add	r2, sp, #24
 8005d8a:	4694      	mov	ip, r2
 8005d8c:	0038      	movs	r0, r7
 8005d8e:	4463      	add	r3, ip
 8005d90:	0032      	movs	r2, r6
 8005d92:	f00e f80b 	bl	8013dac <sprintf>
		switch(snippets[s].cond.conditionType){
 8005d96:	4653      	mov	r3, sl
 8005d98:	465a      	mov	r2, fp
 8005d9a:	5c9b      	ldrb	r3, [r3, r2]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d029      	beq.n	8005df4 <snipCommand+0x158>
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d175      	bne.n	8005e90 <snipCommand+0x1f4>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005da4:	4659      	mov	r1, fp
 8005da6:	3106      	adds	r1, #6
 8005da8:	4451      	add	r1, sl
 8005daa:	2204      	movs	r2, #4
 8005dac:	a805      	add	r0, sp, #20
 8005dae:	f00d fdfa 	bl	80139a6 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005db2:	464b      	mov	r3, r9
 8005db4:	78da      	ldrb	r2, [r3, #3]
 8005db6:	9805      	ldr	r0, [sp, #20]
 8005db8:	3a01      	subs	r2, #1
 8005dba:	0053      	lsls	r3, r2, #1
 8005dbc:	189b      	adds	r3, r3, r2
 8005dbe:	4a41      	ldr	r2, [pc, #260]	; (8005ec4 <snipCommand+0x228>)
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	18d3      	adds	r3, r2, r3
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	469b      	mov	fp, r3
 8005dc8:	f7fc ffbe 	bl	8002d48 <__aeabi_f2d>
 8005dcc:	464b      	mov	r3, r9
 8005dce:	9002      	str	r0, [sp, #8]
 8005dd0:	9103      	str	r1, [sp, #12]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	4a31      	ldr	r2, [pc, #196]	; (8005e9c <snipCommand+0x200>)
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	0059      	lsls	r1, r3, #1
 8005dda:	3214      	adds	r2, #20
 8005ddc:	18cb      	adds	r3, r1, r3
 8005dde:	18d3      	adds	r3, r2, r3
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	003a      	movs	r2, r7
 8005de4:	465b      	mov	r3, fp
 8005de6:	4938      	ldr	r1, [pc, #224]	; (8005ec8 <snipCommand+0x22c>)
 8005de8:	0038      	movs	r0, r7
 8005dea:	f00d ffdf 	bl	8013dac <sprintf>
 8005dee:	464b      	mov	r3, r9
 8005df0:	68d8      	ldr	r0, [r3, #12]
				break;
 8005df2:	e784      	b.n	8005cfe <snipCommand+0x62>
 8005df4:	464b      	mov	r3, r9
 8005df6:	68d8      	ldr	r0, [r3, #12]
				switch(snippets[s].cond.buffer1[1]){
 8005df8:	78db      	ldrb	r3, [r3, #3]
 8005dfa:	3b05      	subs	r3, #5
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b09      	cmp	r3, #9
 8005e00:	d900      	bls.n	8005e04 <snipCommand+0x168>
 8005e02:	e77c      	b.n	8005cfe <snipCommand+0x62>
 8005e04:	4a31      	ldr	r2, [pc, #196]	; (8005ecc <snipCommand+0x230>)
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	58d3      	ldr	r3, [r2, r3]
 8005e0a:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005e0c:	4643      	mov	r3, r8
 8005e0e:	18eb      	adds	r3, r5, r3
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4453      	add	r3, sl
 8005e14:	4699      	mov	r9, r3
 8005e16:	464a      	mov	r2, r9
 8005e18:	789b      	ldrb	r3, [r3, #2]
 8005e1a:	9001      	str	r0, [sp, #4]
 8005e1c:	7912      	ldrb	r2, [r2, #4]
 8005e1e:	492c      	ldr	r1, [pc, #176]	; (8005ed0 <snipCommand+0x234>)
 8005e20:	9200      	str	r2, [sp, #0]
 8005e22:	0038      	movs	r0, r7
 8005e24:	003a      	movs	r2, r7
 8005e26:	f00d ffc1 	bl	8013dac <sprintf>
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	68d8      	ldr	r0, [r3, #12]
						break;
 8005e2e:	e766      	b.n	8005cfe <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005e30:	4643      	mov	r3, r8
 8005e32:	18eb      	adds	r3, r5, r3
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4453      	add	r3, sl
 8005e38:	4699      	mov	r9, r3
 8005e3a:	464a      	mov	r2, r9
 8005e3c:	789b      	ldrb	r3, [r3, #2]
 8005e3e:	9001      	str	r0, [sp, #4]
 8005e40:	7912      	ldrb	r2, [r2, #4]
 8005e42:	4924      	ldr	r1, [pc, #144]	; (8005ed4 <snipCommand+0x238>)
 8005e44:	9200      	str	r2, [sp, #0]
 8005e46:	0038      	movs	r0, r7
 8005e48:	003a      	movs	r2, r7
 8005e4a:	f00d ffaf 	bl	8013dac <sprintf>
 8005e4e:	464b      	mov	r3, r9
 8005e50:	68d8      	ldr	r0, [r3, #12]
						break;
 8005e52:	e754      	b.n	8005cfe <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005e54:	4643      	mov	r3, r8
 8005e56:	18eb      	adds	r3, r5, r3
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4453      	add	r3, sl
 8005e5c:	4699      	mov	r9, r3
 8005e5e:	003a      	movs	r2, r7
 8005e60:	789b      	ldrb	r3, [r3, #2]
 8005e62:	491d      	ldr	r1, [pc, #116]	; (8005ed8 <snipCommand+0x23c>)
 8005e64:	9000      	str	r0, [sp, #0]
 8005e66:	0038      	movs	r0, r7
 8005e68:	f00d ffa0 	bl	8013dac <sprintf>
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	68d8      	ldr	r0, [r3, #12]
						break;
 8005e70:	e745      	b.n	8005cfe <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005e72:	4643      	mov	r3, r8
 8005e74:	18eb      	adds	r3, r5, r3
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4453      	add	r3, sl
 8005e7a:	4699      	mov	r9, r3
 8005e7c:	003a      	movs	r2, r7
 8005e7e:	789b      	ldrb	r3, [r3, #2]
 8005e80:	4916      	ldr	r1, [pc, #88]	; (8005edc <snipCommand+0x240>)
 8005e82:	9000      	str	r0, [sp, #0]
 8005e84:	0038      	movs	r0, r7
 8005e86:	f00d ff91 	bl	8013dac <sprintf>
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	68d8      	ldr	r0, [r3, #12]
						break;
 8005e8e:	e736      	b.n	8005cfe <snipCommand+0x62>
 8005e90:	2314      	movs	r3, #20
 8005e92:	4642      	mov	r2, r8
 8005e94:	4353      	muls	r3, r2
 8005e96:	4453      	add	r3, sl
 8005e98:	68d8      	ldr	r0, [r3, #12]
 8005e9a:	e730      	b.n	8005cfe <snipCommand+0x62>
 8005e9c:	08018528 	.word	0x08018528
 8005ea0:	0801985c 	.word	0x0801985c
 8005ea4:	20000c38 	.word	0x20000c38
 8005ea8:	200016e4 	.word	0x200016e4
 8005eac:	20006898 	.word	0x20006898
 8005eb0:	200017e4 	.word	0x200017e4
 8005eb4:	08019910 	.word	0x08019910
 8005eb8:	08019918 	.word	0x08019918
 8005ebc:	08019924 	.word	0x08019924
 8005ec0:	08019894 	.word	0x08019894
 8005ec4:	200000a4 	.word	0x200000a4
 8005ec8:	08019900 	.word	0x08019900
 8005ecc:	080182cc 	.word	0x080182cc
 8005ed0:	080198e4 	.word	0x080198e4
 8005ed4:	080198cc 	.word	0x080198cc
 8005ed8:	080198b4 	.word	0x080198b4
 8005edc:	080198a0 	.word	0x080198a0

08005ee0 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005ee4:	f009 fec8 	bl	800fc78 <HAL_GetDEVID>
	switch(dev){
 8005ee8:	4b1b      	ldr	r3, [pc, #108]	; (8005f58 <idcodeCommand+0x78>)
 8005eea:	0400      	lsls	r0, r0, #16
 8005eec:	469c      	mov	ip, r3
 8005eee:	0c00      	lsrs	r0, r0, #16
 8005ef0:	4460      	add	r0, ip
 8005ef2:	2808      	cmp	r0, #8
 8005ef4:	d82a      	bhi.n	8005f4c <idcodeCommand+0x6c>
 8005ef6:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <idcodeCommand+0x7c>)
 8005ef8:	0080      	lsls	r0, r0, #2
 8005efa:	581b      	ldr	r3, [r3, r0]
 8005efc:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005efe:	4a18      	ldr	r2, [pc, #96]	; (8005f60 <idcodeCommand+0x80>)
 8005f00:	4918      	ldr	r1, [pc, #96]	; (8005f64 <idcodeCommand+0x84>)
 8005f02:	0020      	movs	r0, r4
 8005f04:	f00d ff52 	bl	8013dac <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005f08:	f009 feb0 	bl	800fc6c <HAL_GetREVID>
 8005f0c:	0022      	movs	r2, r4
 8005f0e:	0b03      	lsrs	r3, r0, #12
 8005f10:	4915      	ldr	r1, [pc, #84]	; (8005f68 <idcodeCommand+0x88>)
 8005f12:	0020      	movs	r0, r4
 8005f14:	f00d ff4a 	bl	8013dac <sprintf>
}
 8005f18:	2000      	movs	r0, #0
 8005f1a:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005f1c:	4a13      	ldr	r2, [pc, #76]	; (8005f6c <idcodeCommand+0x8c>)
 8005f1e:	4911      	ldr	r1, [pc, #68]	; (8005f64 <idcodeCommand+0x84>)
 8005f20:	0020      	movs	r0, r4
 8005f22:	f00d ff43 	bl	8013dac <sprintf>
			break;
 8005f26:	e7ef      	b.n	8005f08 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005f28:	4a11      	ldr	r2, [pc, #68]	; (8005f70 <idcodeCommand+0x90>)
 8005f2a:	490e      	ldr	r1, [pc, #56]	; (8005f64 <idcodeCommand+0x84>)
 8005f2c:	0020      	movs	r0, r4
 8005f2e:	f00d ff3d 	bl	8013dac <sprintf>
			break;
 8005f32:	e7e9      	b.n	8005f08 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005f34:	4a0f      	ldr	r2, [pc, #60]	; (8005f74 <idcodeCommand+0x94>)
 8005f36:	490b      	ldr	r1, [pc, #44]	; (8005f64 <idcodeCommand+0x84>)
 8005f38:	0020      	movs	r0, r4
 8005f3a:	f00d ff37 	bl	8013dac <sprintf>
			break;
 8005f3e:	e7e3      	b.n	8005f08 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005f40:	4a0d      	ldr	r2, [pc, #52]	; (8005f78 <idcodeCommand+0x98>)
 8005f42:	4908      	ldr	r1, [pc, #32]	; (8005f64 <idcodeCommand+0x84>)
 8005f44:	0020      	movs	r0, r4
 8005f46:	f00d ff31 	bl	8013dac <sprintf>
			break;
 8005f4a:	e7dd      	b.n	8005f08 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005f4c:	4a0b      	ldr	r2, [pc, #44]	; (8005f7c <idcodeCommand+0x9c>)
 8005f4e:	4905      	ldr	r1, [pc, #20]	; (8005f64 <idcodeCommand+0x84>)
 8005f50:	0020      	movs	r0, r4
 8005f52:	f00d ff2b 	bl	8013dac <sprintf>
			break;
 8005f56:	e7d7      	b.n	8005f08 <idcodeCommand+0x28>
 8005f58:	fffffbc0 	.word	0xfffffbc0
 8005f5c:	080182f4 	.word	0x080182f4
 8005f60:	08019a14 	.word	0x08019a14
 8005f64:	080199e8 	.word	0x080199e8
 8005f68:	08019a34 	.word	0x08019a34
 8005f6c:	08019a08 	.word	0x08019a08
 8005f70:	08019a20 	.word	0x08019a20
 8005f74:	080199dc 	.word	0x080199dc
 8005f78:	080199fc 	.word	0x080199fc
 8005f7c:	08019a2c 	.word	0x08019a2c

08005f80 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005f84:	220e      	movs	r2, #14
 8005f86:	4911      	ldr	r1, [pc, #68]	; (8005fcc <uuidCommand+0x4c>)
 8005f88:	f00d fd0d 	bl	80139a6 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005f8c:	4d10      	ldr	r5, [pc, #64]	; (8005fd0 <uuidCommand+0x50>)
 8005f8e:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <uuidCommand+0x54>)
 8005f90:	0029      	movs	r1, r5
 8005f92:	0022      	movs	r2, r4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	0020      	movs	r0, r4
 8005f98:	f00d ff08 	bl	8013dac <sprintf>
 8005f9c:	4b0e      	ldr	r3, [pc, #56]	; (8005fd8 <uuidCommand+0x58>)
 8005f9e:	0029      	movs	r1, r5
 8005fa0:	0022      	movs	r2, r4
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	0020      	movs	r0, r4
 8005fa6:	f00d ff01 	bl	8013dac <sprintf>
 8005faa:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <uuidCommand+0x5c>)
 8005fac:	0029      	movs	r1, r5
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	0022      	movs	r2, r4
 8005fb2:	0020      	movs	r0, r4
 8005fb4:	f00d fefa 	bl	8013dac <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005fb8:	0020      	movs	r0, r4
 8005fba:	f7fa f8ad 	bl	8000118 <strlen>
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	1820      	adds	r0, r4, r0
 8005fc2:	4907      	ldr	r1, [pc, #28]	; (8005fe0 <uuidCommand+0x60>)
 8005fc4:	f00d fcef 	bl	80139a6 <memcpy>
}
 8005fc8:	2000      	movs	r0, #0
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
 8005fcc:	08019a4c 	.word	0x08019a4c
 8005fd0:	08019a5c 	.word	0x08019a5c
 8005fd4:	1ffff7ac 	.word	0x1ffff7ac
 8005fd8:	1ffff7b0 	.word	0x1ffff7b0
 8005fdc:	1ffff7b4 	.word	0x1ffff7b4
 8005fe0:	0801ab0c 	.word	0x0801ab0c

08005fe4 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	0004      	movs	r4, r0
	GetTimeDate();
 8005fe8:	f007 fbb2 	bl	800d750 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005fec:	f7fe fcae 	bl	800494c <GetDateString>
 8005ff0:	4903      	ldr	r1, [pc, #12]	; (8006000 <dateCommand+0x1c>)
 8005ff2:	0002      	movs	r2, r0
 8005ff4:	0020      	movs	r0, r4
 8005ff6:	f00d fed9 	bl	8013dac <sprintf>
}
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	bd10      	pop	{r4, pc}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	08019a64 	.word	0x08019a64

08006004 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006006:	46ce      	mov	lr, r9
 8006008:	4647      	mov	r7, r8
 800600a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800600c:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800600e:	b580      	push	{r7, lr}
 8006010:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006012:	466a      	mov	r2, sp
 8006014:	2101      	movs	r1, #1
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006016:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006018:	0028      	movs	r0, r5
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800601e:	f008 f87b 	bl	800e118 <FreeRTOS_CLIGetParameter>
 8006022:	4b6b      	ldr	r3, [pc, #428]	; (80061d0 <getCommand+0x1cc>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006024:	2204      	movs	r2, #4
 8006026:	496b      	ldr	r1, [pc, #428]	; (80061d4 <getCommand+0x1d0>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006028:	0004      	movs	r4, r0
 800602a:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800602c:	f00d ff02 	bl	8013e34 <strncmp>
 8006030:	2800      	cmp	r0, #0
 8006032:	d119      	bne.n	8006068 <getCommand+0x64>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006034:	9b00      	ldr	r3, [sp, #0]
 8006036:	1d27      	adds	r7, r4, #4
 8006038:	1f1d      	subs	r5, r3, #4
 800603a:	002a      	movs	r2, r5
 800603c:	4966      	ldr	r1, [pc, #408]	; (80061d8 <getCommand+0x1d4>)
 800603e:	0038      	movs	r0, r7
 8006040:	f00d fef8 	bl	8013e34 <strncmp>
 8006044:	2800      	cmp	r0, #0
 8006046:	d121      	bne.n	800608c <getCommand+0x88>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8006048:	4b64      	ldr	r3, [pc, #400]	; (80061dc <getCommand+0x1d8>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b60      	cmp	r3, #96	; 0x60
 800604e:	d100      	bne.n	8006052 <getCommand+0x4e>
 8006050:	e071      	b.n	8006136 <getCommand+0x132>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8006052:	2b20      	cmp	r3, #32
 8006054:	d069      	beq.n	800612a <getCommand+0x126>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8006056:	2b00      	cmp	r3, #0
 8006058:	d100      	bne.n	800605c <getCommand+0x58>
 800605a:	e096      	b.n	800618a <getCommand+0x186>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 800605c:	0022      	movs	r2, r4
 800605e:	4960      	ldr	r1, [pc, #384]	; (80061e0 <getCommand+0x1dc>)
 8006060:	0030      	movs	r0, r6
 8006062:	f00d fea3 	bl	8013dac <sprintf>
 8006066:	e00b      	b.n	8006080 <getCommand+0x7c>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8006068:	2205      	movs	r2, #5
 800606a:	495e      	ldr	r1, [pc, #376]	; (80061e4 <getCommand+0x1e0>)
 800606c:	0020      	movs	r0, r4
 800606e:	f00d fee1 	bl	8013e34 <strncmp>
 8006072:	2800      	cmp	r0, #0
 8006074:	d03b      	beq.n	80060ee <getCommand+0xea>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006076:	2213      	movs	r2, #19
 8006078:	495b      	ldr	r1, [pc, #364]	; (80061e8 <getCommand+0x1e4>)
 800607a:	0030      	movs	r0, r6
 800607c:	f00d fc93 	bl	80139a6 <memcpy>
}
 8006080:	2000      	movs	r0, #0
 8006082:	b003      	add	sp, #12
 8006084:	bc0c      	pop	{r2, r3}
 8006086:	4690      	mov	r8, r2
 8006088:	4699      	mov	r9, r3
 800608a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800608c:	002a      	movs	r2, r5
 800608e:	4957      	ldr	r1, [pc, #348]	; (80061ec <getCommand+0x1e8>)
 8006090:	0038      	movs	r0, r7
 8006092:	f00d fecf 	bl	8013e34 <strncmp>
 8006096:	2800      	cmp	r0, #0
 8006098:	d041      	beq.n	800611e <getCommand+0x11a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800609a:	002a      	movs	r2, r5
 800609c:	4954      	ldr	r1, [pc, #336]	; (80061f0 <getCommand+0x1ec>)
 800609e:	0038      	movs	r0, r7
 80060a0:	f00d fec8 	bl	8013e34 <strncmp>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d07d      	beq.n	80061a4 <getCommand+0x1a0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80060a8:	002a      	movs	r2, r5
 80060aa:	4952      	ldr	r1, [pc, #328]	; (80061f4 <getCommand+0x1f0>)
 80060ac:	0038      	movs	r0, r7
 80060ae:	f00d fec1 	bl	8013e34 <strncmp>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d07d      	beq.n	80061b2 <getCommand+0x1ae>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80060b6:	002a      	movs	r2, r5
 80060b8:	494f      	ldr	r1, [pc, #316]	; (80061f8 <getCommand+0x1f4>)
 80060ba:	0038      	movs	r0, r7
 80060bc:	f00d feba 	bl	8013e34 <strncmp>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d068      	beq.n	8006196 <getCommand+0x192>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80060c4:	002a      	movs	r2, r5
 80060c6:	494d      	ldr	r1, [pc, #308]	; (80061fc <getCommand+0x1f8>)
 80060c8:	0038      	movs	r0, r7
 80060ca:	f00d feb3 	bl	8013e34 <strncmp>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d076      	beq.n	80061c0 <getCommand+0x1bc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80060d2:	002a      	movs	r2, r5
 80060d4:	494a      	ldr	r1, [pc, #296]	; (8006200 <getCommand+0x1fc>)
 80060d6:	0038      	movs	r0, r7
 80060d8:	f00d feac 	bl	8013e34 <strncmp>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d1ca      	bne.n	8006076 <getCommand+0x72>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 80060e0:	4b48      	ldr	r3, [pc, #288]	; (8006204 <getCommand+0x200>)
 80060e2:	4949      	ldr	r1, [pc, #292]	; (8006208 <getCommand+0x204>)
 80060e4:	795a      	ldrb	r2, [r3, #5]
 80060e6:	0030      	movs	r0, r6
 80060e8:	f00d fe60 	bl	8013dac <sprintf>
 80060ec:	e7c8      	b.n	8006080 <getCommand+0x7c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80060ee:	0028      	movs	r0, r5
 80060f0:	aa01      	add	r2, sp, #4
 80060f2:	2102      	movs	r1, #2
 80060f4:	f008 f810 	bl	800e118 <FreeRTOS_CLIGetParameter>
 80060f8:	2400      	movs	r4, #0
 80060fa:	0007      	movs	r7, r0
 80060fc:	4d43      	ldr	r5, [pc, #268]	; (800620c <getCommand+0x208>)
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80060fe:	0029      	movs	r1, r5
 8006100:	0038      	movs	r0, r7
 8006102:	f7f9 ffff 	bl	8000104 <strcmp>
 8006106:	2800      	cmp	r0, #0
 8006108:	d01b      	beq.n	8006142 <getCommand+0x13e>
 800610a:	3401      	adds	r4, #1
 800610c:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 800610e:	2c0a      	cmp	r4, #10
 8006110:	d1f5      	bne.n	80060fe <getCommand+0xfa>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8006112:	003a      	movs	r2, r7
 8006114:	493e      	ldr	r1, [pc, #248]	; (8006210 <getCommand+0x20c>)
 8006116:	0030      	movs	r0, r6
 8006118:	f00d fe48 	bl	8013dac <sprintf>
			return pdFALSE;
 800611c:	e7b0      	b.n	8006080 <getCommand+0x7c>
			if(BOSMessaging.trace == TRACE_BOTH)
 800611e:	4b2f      	ldr	r3, [pc, #188]	; (80061dc <getCommand+0x1d8>)
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	2b03      	cmp	r3, #3
 8006124:	d007      	beq.n	8006136 <getCommand+0x132>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8006126:	2b01      	cmp	r3, #1
 8006128:	d195      	bne.n	8006056 <getCommand+0x52>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800612a:	4a3a      	ldr	r2, [pc, #232]	; (8006214 <getCommand+0x210>)
 800612c:	493a      	ldr	r1, [pc, #232]	; (8006218 <getCommand+0x214>)
 800612e:	0030      	movs	r0, r6
 8006130:	f00d fe3c 	bl	8013dac <sprintf>
 8006134:	e7a4      	b.n	8006080 <getCommand+0x7c>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006136:	4a39      	ldr	r2, [pc, #228]	; (800621c <getCommand+0x218>)
 8006138:	4937      	ldr	r1, [pc, #220]	; (8006218 <getCommand+0x214>)
 800613a:	0030      	movs	r0, r6
 800613c:	f00d fe36 	bl	8013dac <sprintf>
 8006140:	e79e      	b.n	8006080 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8006142:	003a      	movs	r2, r7
 8006144:	4936      	ldr	r1, [pc, #216]	; (8006220 <getCommand+0x21c>)
 8006146:	0030      	movs	r0, r6
 8006148:	f00d fe30 	bl	8013dac <sprintf>
			for(j =1; j <= N; j++)						// N modules
 800614c:	4f35      	ldr	r7, [pc, #212]	; (8006224 <getCommand+0x220>)
 800614e:	783b      	ldrb	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d095      	beq.n	8006080 <getCommand+0x7c>
 8006154:	2501      	movs	r5, #1
 8006156:	4b34      	ldr	r3, [pc, #208]	; (8006228 <getCommand+0x224>)
 8006158:	40a5      	lsls	r5, r4
 800615a:	4698      	mov	r8, r3
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 800615c:	4b33      	ldr	r3, [pc, #204]	; (800622c <getCommand+0x228>)
			for(j =1; j <= N; j++)						// N modules
 800615e:	2401      	movs	r4, #1
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006160:	4699      	mov	r9, r3
 8006162:	e005      	b.n	8006170 <getCommand+0x16c>
			for(j =1; j <= N; j++)						// N modules
 8006164:	3401      	adds	r4, #1
 8006166:	783b      	ldrb	r3, [r7, #0]
 8006168:	b2e4      	uxtb	r4, r4
 800616a:	42a3      	cmp	r3, r4
 800616c:	d200      	bcs.n	8006170 <getCommand+0x16c>
 800616e:	e787      	b.n	8006080 <getCommand+0x7c>
				if(InGroup(j,i)){
 8006170:	4642      	mov	r2, r8
 8006172:	1e63      	subs	r3, r4, #1
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	5ad3      	ldrh	r3, [r2, r3]
 8006178:	421d      	tst	r5, r3
 800617a:	d0f3      	beq.n	8006164 <getCommand+0x160>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 800617c:	0023      	movs	r3, r4
 800617e:	0032      	movs	r2, r6
 8006180:	4649      	mov	r1, r9
 8006182:	0030      	movs	r0, r6
 8006184:	f00d fe12 	bl	8013dac <sprintf>
 8006188:	e7ec      	b.n	8006164 <getCommand+0x160>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800618a:	4a29      	ldr	r2, [pc, #164]	; (8006230 <getCommand+0x22c>)
 800618c:	4922      	ldr	r1, [pc, #136]	; (8006218 <getCommand+0x214>)
 800618e:	0030      	movs	r0, r6
 8006190:	f00d fe0c 	bl	8013dac <sprintf>
 8006194:	e774      	b.n	8006080 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006196:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <getCommand+0x200>)
 8006198:	491b      	ldr	r1, [pc, #108]	; (8006208 <getCommand+0x204>)
 800619a:	885a      	ldrh	r2, [r3, #2]
 800619c:	0030      	movs	r0, r6
 800619e:	f00d fe05 	bl	8013dac <sprintf>
 80061a2:	e76d      	b.n	8006080 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 80061a4:	4b17      	ldr	r3, [pc, #92]	; (8006204 <getCommand+0x200>)
 80061a6:	4918      	ldr	r1, [pc, #96]	; (8006208 <getCommand+0x204>)
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	0030      	movs	r0, r6
 80061ac:	f00d fdfe 	bl	8013dac <sprintf>
 80061b0:	e766      	b.n	8006080 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 80061b2:	4b14      	ldr	r3, [pc, #80]	; (8006204 <getCommand+0x200>)
 80061b4:	4914      	ldr	r1, [pc, #80]	; (8006208 <getCommand+0x204>)
 80061b6:	881a      	ldrh	r2, [r3, #0]
 80061b8:	0030      	movs	r0, r6
 80061ba:	f00d fdf7 	bl	8013dac <sprintf>
 80061be:	e75f      	b.n	8006080 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 80061c0:	4b10      	ldr	r3, [pc, #64]	; (8006204 <getCommand+0x200>)
 80061c2:	4911      	ldr	r1, [pc, #68]	; (8006208 <getCommand+0x204>)
 80061c4:	791a      	ldrb	r2, [r3, #4]
 80061c6:	0030      	movs	r0, r6
 80061c8:	f00d fdf0 	bl	8013dac <sprintf>
 80061cc:	e758      	b.n	8006080 <getCommand+0x7c>
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	200017e4 	.word	0x200017e4
 80061d4:	08019a7c 	.word	0x08019a7c
 80061d8:	08019a84 	.word	0x08019a84
 80061dc:	200067fc 	.word	0x200067fc
 80061e0:	08019b18 	.word	0x08019b18
 80061e4:	08019af4 	.word	0x08019af4
 80061e8:	08019b04 	.word	0x08019b04
 80061ec:	08019a9c 	.word	0x08019a9c
 80061f0:	08019aa4 	.word	0x08019aa4
 80061f4:	08019ab0 	.word	0x08019ab0
 80061f8:	08019abc 	.word	0x08019abc
 80061fc:	08019acc 	.word	0x08019acc
 8006200:	08019ae0 	.word	0x08019ae0
 8006204:	2000687c 	.word	0x2000687c
 8006208:	08019290 	.word	0x08019290
 800620c:	20000ae0 	.word	0x20000ae0
 8006210:	08019b38 	.word	0x08019b38
 8006214:	08019a90 	.word	0x08019a90
 8006218:	08018b10 	.word	0x08018b10
 800621c:	08018c34 	.word	0x08018c34
 8006220:	08019b54 	.word	0x08019b54
 8006224:	20000010 	.word	0x20000010
 8006228:	20000aac 	.word	0x20000aac
 800622c:	08019afc 	.word	0x08019afc
 8006230:	08019a94 	.word	0x08019a94

08006234 <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006234:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006236:	b570      	push	{r4, r5, r6, lr}
 8006238:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800623a:	2101      	movs	r1, #1
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800623c:	0006      	movs	r6, r0
 800623e:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006240:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8006242:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006244:	f007 ff68 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006248:	9d01      	ldr	r5, [sp, #4]
 800624a:	491f      	ldr	r1, [pc, #124]	; (80062c8 <defaultCommand+0x94>)
 800624c:	002a      	movs	r2, r5
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800624e:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006250:	f00d fdf0 	bl	8013e34 <strncmp>
 8006254:	2800      	cmp	r0, #0
 8006256:	d026      	beq.n	80062a6 <defaultCommand+0x72>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006258:	002a      	movs	r2, r5
 800625a:	491c      	ldr	r1, [pc, #112]	; (80062cc <defaultCommand+0x98>)
 800625c:	0020      	movs	r0, r4
 800625e:	f00d fde9 	bl	8013e34 <strncmp>
 8006262:	2800      	cmp	r0, #0
 8006264:	d119      	bne.n	800629a <defaultCommand+0x66>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006266:	2116      	movs	r1, #22
 8006268:	2200      	movs	r2, #0
 800626a:	20ff      	movs	r0, #255	; 0xff
 800626c:	f002 f870 	bl	8008350 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006270:	2202      	movs	r2, #2
 8006272:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <defaultCommand+0x9c>)
		osDelay(100);
 8006274:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 8006276:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006278:	f007 fe42 	bl	800df00 <osDelay>
		ClearEEportsDir();
 800627c:	f7fd fb00 	bl	8003880 <ClearEEportsDir>
		ClearROtopology();
 8006280:	f003 fea6 	bl	8009fd0 <ClearROtopology>
		osDelay(100);
 8006284:	2064      	movs	r0, #100	; 0x64
 8006286:	f007 fe3b 	bl	800df00 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 800628a:	2240      	movs	r2, #64	; 0x40
 800628c:	4911      	ldr	r1, [pc, #68]	; (80062d4 <defaultCommand+0xa0>)
 800628e:	0030      	movs	r0, r6
 8006290:	f00d fb89 	bl	80139a6 <memcpy>
}
 8006294:	2000      	movs	r0, #0
 8006296:	b002      	add	sp, #8
 8006298:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800629a:	220f      	movs	r2, #15
 800629c:	490e      	ldr	r1, [pc, #56]	; (80062d8 <defaultCommand+0xa4>)
 800629e:	0030      	movs	r0, r6
 80062a0:	f00d fb81 	bl	80139a6 <memcpy>
 80062a4:	e7f6      	b.n	8006294 <defaultCommand+0x60>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 80062a6:	490d      	ldr	r1, [pc, #52]	; (80062dc <defaultCommand+0xa8>)
 80062a8:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <defaultCommand+0xac>)
 80062aa:	000a      	movs	r2, r1
 80062ac:	cb13      	ldmia	r3!, {r0, r1, r4}
 80062ae:	c213      	stmia	r2!, {r0, r1, r4}
 80062b0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80062b2:	c213      	stmia	r2!, {r0, r1, r4}
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 80062b8:	f7fd fa9e 	bl	80037f8 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 80062bc:	2227      	movs	r2, #39	; 0x27
 80062be:	4909      	ldr	r1, [pc, #36]	; (80062e4 <defaultCommand+0xb0>)
 80062c0:	0030      	movs	r0, r6
 80062c2:	f00d fb70 	bl	80139a6 <memcpy>
 80062c6:	e7e5      	b.n	8006294 <defaultCommand+0x60>
 80062c8:	08019b68 	.word	0x08019b68
 80062cc:	08019b98 	.word	0x08019b98
 80062d0:	2000114e 	.word	0x2000114e
 80062d4:	08019bb0 	.word	0x08019bb0
 80062d8:	08019ba0 	.word	0x08019ba0
 80062dc:	2000687c 	.word	0x2000687c
 80062e0:	2000001c 	.word	0x2000001c
 80062e4:	08019b70 	.word	0x08019b70

080062e8 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ea:	46de      	mov	lr, fp
 80062ec:	4657      	mov	r7, sl
 80062ee:	464e      	mov	r6, r9
 80062f0:	4645      	mov	r5, r8
 80062f2:	b5e0      	push	{r5, r6, r7, lr}
 80062f4:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80062f6:	2300      	movs	r3, #0
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062f8:	b08f      	sub	sp, #60	; 0x3c
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80062fa:	aa09      	add	r2, sp, #36	; 0x24
 80062fc:	2101      	movs	r1, #1
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062fe:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006300:	0038      	movs	r0, r7
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006302:	9309      	str	r3, [sp, #36]	; 0x24
 8006304:	930a      	str	r3, [sp, #40]	; 0x28
 8006306:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 8006308:	930c      	str	r3, [sp, #48]	; 0x30
 800630a:	930d      	str	r3, [sp, #52]	; 0x34
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800630c:	f007 ff04 	bl	800e118 <FreeRTOS_CLIGetParameter>
 8006310:	4ccf      	ldr	r4, [pc, #828]	; (8006650 <setCommand+0x368>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006312:	2204      	movs	r2, #4
 8006314:	49cf      	ldr	r1, [pc, #828]	; (8006654 <setCommand+0x36c>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006316:	0006      	movs	r6, r0
 8006318:	63a0      	str	r0, [r4, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800631a:	f00d fd8b 	bl	8013e34 <strncmp>
 800631e:	2800      	cmp	r0, #0
 8006320:	d100      	bne.n	8006324 <setCommand+0x3c>
 8006322:	e082      	b.n	800642a <setCommand+0x142>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 8006324:	2204      	movs	r2, #4
 8006326:	49cc      	ldr	r1, [pc, #816]	; (8006658 <setCommand+0x370>)
 8006328:	0030      	movs	r0, r6
 800632a:	f00d fd83 	bl	8013e34 <strncmp>
 800632e:	2800      	cmp	r0, #0
 8006330:	d014      	beq.n	800635c <setCommand+0x74>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 8006332:	2204      	movs	r2, #4
 8006334:	49c9      	ldr	r1, [pc, #804]	; (800665c <setCommand+0x374>)
 8006336:	0030      	movs	r0, r6
 8006338:	f00d fd7c 	bl	8013e34 <strncmp>
 800633c:	2800      	cmp	r0, #0
 800633e:	d100      	bne.n	8006342 <setCommand+0x5a>
 8006340:	e0e0      	b.n	8006504 <setCommand+0x21c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006342:	2213      	movs	r2, #19
 8006344:	49c6      	ldr	r1, [pc, #792]	; (8006660 <setCommand+0x378>)
 8006346:	0028      	movs	r0, r5
 8006348:	f00d fb2d 	bl	80139a6 <memcpy>
}
 800634c:	2000      	movs	r0, #0
 800634e:	b00f      	add	sp, #60	; 0x3c
 8006350:	bc3c      	pop	{r2, r3, r4, r5}
 8006352:	4690      	mov	r8, r2
 8006354:	4699      	mov	r9, r3
 8006356:	46a2      	mov	sl, r4
 8006358:	46ab      	mov	fp, r5
 800635a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800635c:	aa0a      	add	r2, sp, #40	; 0x28
 800635e:	2102      	movs	r1, #2
 8006360:	0038      	movs	r0, r7
 8006362:	f007 fed9 	bl	800e118 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006366:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006368:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800636a:	2103      	movs	r1, #3
 800636c:	0038      	movs	r0, r7
 800636e:	f007 fed3 	bl	800e118 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006372:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006374:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006376:	2104      	movs	r1, #4
 8006378:	0038      	movs	r0, r7
 800637a:	f007 fecd 	bl	800e118 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800637e:	aa0d      	add	r2, sp, #52	; 0x34
 8006380:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006382:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006384:	0038      	movs	r0, r7
 8006386:	f007 fec7 	bl	800e118 <FreeRTOS_CLIGetParameter>
 800638a:	64a0      	str	r0, [r4, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 800638c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800638e:	f00d f844 	bl	801341a <atoi>
 8006392:	b2c3      	uxtb	r3, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006394:	6c20      	ldr	r0, [r4, #64]	; 0x40
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006396:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006398:	f00d f83f 	bl	801341a <atoi>
 800639c:	0007      	movs	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800639e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80063a0:	f00d f83b 	bl	801341a <atoi>
		if(pcParameterString5 != NULL){
 80063a4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80063a6:	4682      	mov	sl, r0
		if(pcParameterString5 != NULL){
 80063a8:	2e00      	cmp	r6, #0
 80063aa:	d010      	beq.n	80063ce <setCommand+0xe6>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 80063ac:	2202      	movs	r2, #2
 80063ae:	49ad      	ldr	r1, [pc, #692]	; (8006664 <setCommand+0x37c>)
 80063b0:	0030      	movs	r0, r6
 80063b2:	f00d fd3f 	bl	8013e34 <strncmp>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d100      	bne.n	80063bc <setCommand+0xd4>
 80063ba:	e145      	b.n	8006648 <setCommand+0x360>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80063bc:	2202      	movs	r2, #2
 80063be:	49aa      	ldr	r1, [pc, #680]	; (8006668 <setCommand+0x380>)
 80063c0:	0030      	movs	r0, r6
 80063c2:	f00d fd37 	bl	8013e34 <strncmp>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d129      	bne.n	800641e <setCommand+0x136>
				temp84 =RTC_PM;
 80063ca:	2302      	movs	r3, #2
 80063cc:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80063ce:	464b      	mov	r3, r9
 80063d0:	2b17      	cmp	r3, #23
 80063d2:	d824      	bhi.n	800641e <setCommand+0x136>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80063d4:	b2ff      	uxtb	r7, r7
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80063d6:	2f3b      	cmp	r7, #59	; 0x3b
 80063d8:	d821      	bhi.n	800641e <setCommand+0x136>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80063da:	4653      	mov	r3, sl
 80063dc:	b2de      	uxtb	r6, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80063de:	2e3b      	cmp	r6, #59	; 0x3b
 80063e0:	d81d      	bhi.n	800641e <setCommand+0x136>
				GetTimeDate();
 80063e2:	f007 f9b5 	bl	800d750 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80063e6:	4ba1      	ldr	r3, [pc, #644]	; (800666c <setCommand+0x384>)
 80063e8:	7d1a      	ldrb	r2, [r3, #20]
 80063ea:	7d59      	ldrb	r1, [r3, #21]
 80063ec:	7d98      	ldrb	r0, [r3, #22]
 80063ee:	4694      	mov	ip, r2
 80063f0:	8b1a      	ldrh	r2, [r3, #24]
 80063f2:	7b1b      	ldrb	r3, [r3, #12]
 80063f4:	9701      	str	r7, [sp, #4]
 80063f6:	b25b      	sxtb	r3, r3
 80063f8:	9304      	str	r3, [sp, #16]
 80063fa:	4643      	mov	r3, r8
 80063fc:	9303      	str	r3, [sp, #12]
 80063fe:	464b      	mov	r3, r9
 8006400:	9600      	str	r6, [sp, #0]
 8006402:	9302      	str	r3, [sp, #8]
 8006404:	4663      	mov	r3, ip
 8006406:	f007 f949 	bl	800d69c <BOS_CalendarConfig>
 800640a:	4681      	mov	r9, r0
	if(result == BOS_OK){
 800640c:	464b      	mov	r3, r9
 800640e:	2b00      	cmp	r3, #0
 8006410:	d100      	bne.n	8006414 <setCommand+0x12c>
 8006412:	e24d      	b.n	80068b0 <setCommand+0x5c8>
	else if(result == BOS_ERR_WrongParam)
 8006414:	464b      	mov	r3, r9
 8006416:	2b67      	cmp	r3, #103	; 0x67
 8006418:	d093      	beq.n	8006342 <setCommand+0x5a>
	else if(result == BOS_ERR_WrongValue)
 800641a:	2b68      	cmp	r3, #104	; 0x68
 800641c:	d196      	bne.n	800634c <setCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800641e:	220f      	movs	r2, #15
 8006420:	4993      	ldr	r1, [pc, #588]	; (8006670 <setCommand+0x388>)
 8006422:	0028      	movs	r0, r5
 8006424:	f00d fabf 	bl	80139a6 <memcpy>
 8006428:	e790      	b.n	800634c <setCommand+0x64>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800642a:	aa0a      	add	r2, sp, #40	; 0x28
 800642c:	2102      	movs	r1, #2
 800642e:	0038      	movs	r0, r7
 8006430:	f007 fe72 	bl	800e118 <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006434:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006436:	4680      	mov	r8, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006438:	1d1e      	adds	r6, r3, #4
 800643a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800643c:	63e0      	str	r0, [r4, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800643e:	1f1f      	subs	r7, r3, #4
 8006440:	4b8c      	ldr	r3, [pc, #560]	; (8006674 <setCommand+0x38c>)
 8006442:	003a      	movs	r2, r7
 8006444:	0019      	movs	r1, r3
 8006446:	0030      	movs	r0, r6
 8006448:	4699      	mov	r9, r3
 800644a:	f00d fcf3 	bl	8013e34 <strncmp>
 800644e:	2800      	cmp	r0, #0
 8006450:	d128      	bne.n	80064a4 <setCommand+0x1bc>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006452:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006454:	4988      	ldr	r1, [pc, #544]	; (8006678 <setCommand+0x390>)
 8006456:	0032      	movs	r2, r6
 8006458:	4640      	mov	r0, r8
 800645a:	f00d fceb 	bl	8013e34 <strncmp>
 800645e:	2800      	cmp	r0, #0
 8006460:	d100      	bne.n	8006464 <setCommand+0x17c>
 8006462:	e21a      	b.n	800689a <setCommand+0x5b2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006464:	0032      	movs	r2, r6
 8006466:	4985      	ldr	r1, [pc, #532]	; (800667c <setCommand+0x394>)
 8006468:	4640      	mov	r0, r8
 800646a:	f00d fce3 	bl	8013e34 <strncmp>
 800646e:	2800      	cmp	r0, #0
 8006470:	d100      	bne.n	8006474 <setCommand+0x18c>
 8006472:	e256      	b.n	8006922 <setCommand+0x63a>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006474:	0032      	movs	r2, r6
 8006476:	4982      	ldr	r1, [pc, #520]	; (8006680 <setCommand+0x398>)
 8006478:	4640      	mov	r0, r8
 800647a:	f00d fcdb 	bl	8013e34 <strncmp>
 800647e:	2800      	cmp	r0, #0
 8006480:	d100      	bne.n	8006484 <setCommand+0x19c>
 8006482:	e222      	b.n	80068ca <setCommand+0x5e2>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006484:	0032      	movs	r2, r6
 8006486:	497f      	ldr	r1, [pc, #508]	; (8006684 <setCommand+0x39c>)
 8006488:	4640      	mov	r0, r8
 800648a:	f00d fcd3 	bl	8013e34 <strncmp>
 800648e:	2800      	cmp	r0, #0
 8006490:	d1c5      	bne.n	800641e <setCommand+0x136>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006492:	4b7d      	ldr	r3, [pc, #500]	; (8006688 <setCommand+0x3a0>)
 8006494:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006496:	208a      	movs	r0, #138	; 0x8a
 8006498:	7859      	ldrb	r1, [r3, #1]
 800649a:	0040      	lsls	r0, r0, #1
 800649c:	0209      	lsls	r1, r1, #8
 800649e:	f005 faf5 	bl	800ba8c <EE_WriteVariable>
 80064a2:	e205      	b.n	80068b0 <setCommand+0x5c8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80064a4:	003a      	movs	r2, r7
 80064a6:	4979      	ldr	r1, [pc, #484]	; (800668c <setCommand+0x3a4>)
 80064a8:	0030      	movs	r0, r6
 80064aa:	f00d fcc3 	bl	8013e34 <strncmp>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d000      	beq.n	80064b4 <setCommand+0x1cc>
 80064b2:	e08d      	b.n	80065d0 <setCommand+0x2e8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80064b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80064b6:	4970      	ldr	r1, [pc, #448]	; (8006678 <setCommand+0x390>)
 80064b8:	0032      	movs	r2, r6
 80064ba:	4640      	mov	r0, r8
 80064bc:	f00d fcba 	bl	8013e34 <strncmp>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d100      	bne.n	80064c6 <setCommand+0x1de>
 80064c4:	e239      	b.n	800693a <setCommand+0x652>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80064c6:	0032      	movs	r2, r6
 80064c8:	496c      	ldr	r1, [pc, #432]	; (800667c <setCommand+0x394>)
 80064ca:	4640      	mov	r0, r8
 80064cc:	f00d fcb2 	bl	8013e34 <strncmp>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d100      	bne.n	80064d6 <setCommand+0x1ee>
 80064d4:	e213      	b.n	80068fe <setCommand+0x616>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80064d6:	0032      	movs	r2, r6
 80064d8:	4649      	mov	r1, r9
 80064da:	4640      	mov	r0, r8
 80064dc:	f00d fcaa 	bl	8013e34 <strncmp>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d100      	bne.n	80064e6 <setCommand+0x1fe>
 80064e4:	e274      	b.n	80069d0 <setCommand+0x6e8>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80064e6:	0032      	movs	r2, r6
 80064e8:	4966      	ldr	r1, [pc, #408]	; (8006684 <setCommand+0x39c>)
 80064ea:	4640      	mov	r0, r8
 80064ec:	f00d fca2 	bl	8013e34 <strncmp>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d194      	bne.n	800641e <setCommand+0x136>
				BOSMessaging.trace =TRACE_NONE;
 80064f4:	4b64      	ldr	r3, [pc, #400]	; (8006688 <setCommand+0x3a0>)
 80064f6:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80064f8:	3015      	adds	r0, #21
 80064fa:	7819      	ldrb	r1, [r3, #0]
 80064fc:	30ff      	adds	r0, #255	; 0xff
 80064fe:	f005 fac5 	bl	800ba8c <EE_WriteVariable>
 8006502:	e1d5      	b.n	80068b0 <setCommand+0x5c8>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006504:	aa0a      	add	r2, sp, #40	; 0x28
 8006506:	2102      	movs	r1, #2
 8006508:	0038      	movs	r0, r7
 800650a:	f007 fe05 	bl	800e118 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800650e:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006510:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006512:	2103      	movs	r1, #3
 8006514:	0038      	movs	r0, r7
 8006516:	f007 fdff 	bl	800e118 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800651a:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800651c:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800651e:	2104      	movs	r1, #4
 8006520:	0038      	movs	r0, r7
 8006522:	f007 fdf9 	bl	800e118 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006526:	aa0d      	add	r2, sp, #52	; 0x34
 8006528:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800652a:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800652c:	0038      	movs	r0, r7
 800652e:	f007 fdf3 	bl	800e118 <FreeRTOS_CLIGetParameter>
 8006532:	64a0      	str	r0, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006534:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006536:	f00c ff70 	bl	801341a <atoi>
 800653a:	4680      	mov	r8, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 800653c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800653e:	f00c ff6c 	bl	801341a <atoi>
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006542:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006544:	4682      	mov	sl, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006546:	2206      	movs	r2, #6
 8006548:	4951      	ldr	r1, [pc, #324]	; (8006690 <setCommand+0x3a8>)
 800654a:	0038      	movs	r0, r7
 800654c:	f00d fc72 	bl	8013e34 <strncmp>
 8006550:	2800      	cmp	r0, #0
 8006552:	d100      	bne.n	8006556 <setCommand+0x26e>
 8006554:	e0b6      	b.n	80066c4 <setCommand+0x3dc>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006556:	2207      	movs	r2, #7
 8006558:	494e      	ldr	r1, [pc, #312]	; (8006694 <setCommand+0x3ac>)
 800655a:	0038      	movs	r0, r7
 800655c:	f00d fc6a 	bl	8013e34 <strncmp>
 8006560:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8006562:	9006      	str	r0, [sp, #24]
 8006564:	2207      	movs	r2, #7
 8006566:	494c      	ldr	r1, [pc, #304]	; (8006698 <setCommand+0x3b0>)
 8006568:	0030      	movs	r0, r6
 800656a:	f00d fc63 	bl	8013e34 <strncmp>
 800656e:	9b06      	ldr	r3, [sp, #24]
 8006570:	4681      	mov	r9, r0
 8006572:	9007      	str	r0, [sp, #28]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d100      	bne.n	800657a <setCommand+0x292>
 8006578:	e1a4      	b.n	80068c4 <setCommand+0x5dc>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 800657a:	2209      	movs	r2, #9
 800657c:	4947      	ldr	r1, [pc, #284]	; (800669c <setCommand+0x3b4>)
 800657e:	0038      	movs	r0, r7
 8006580:	f00d fc58 	bl	8013e34 <strncmp>
 8006584:	2800      	cmp	r0, #0
 8006586:	d100      	bne.n	800658a <setCommand+0x2a2>
 8006588:	e211      	b.n	80069ae <setCommand+0x6c6>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 800658a:	2208      	movs	r2, #8
 800658c:	4944      	ldr	r1, [pc, #272]	; (80066a0 <setCommand+0x3b8>)
 800658e:	0038      	movs	r0, r7
 8006590:	f00d fc50 	bl	8013e34 <strncmp>
 8006594:	2800      	cmp	r0, #0
 8006596:	d100      	bne.n	800659a <setCommand+0x2b2>
 8006598:	e220      	b.n	80069dc <setCommand+0x6f4>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 800659a:	2206      	movs	r2, #6
 800659c:	4941      	ldr	r1, [pc, #260]	; (80066a4 <setCommand+0x3bc>)
 800659e:	0038      	movs	r0, r7
 80065a0:	f00d fc48 	bl	8013e34 <strncmp>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d100      	bne.n	80065aa <setCommand+0x2c2>
 80065a8:	e22e      	b.n	8006a08 <setCommand+0x720>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 80065aa:	2208      	movs	r2, #8
 80065ac:	493e      	ldr	r1, [pc, #248]	; (80066a8 <setCommand+0x3c0>)
 80065ae:	0038      	movs	r0, r7
 80065b0:	f00d fc40 	bl	8013e34 <strncmp>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d100      	bne.n	80065ba <setCommand+0x2d2>
 80065b8:	e229      	b.n	8006a0e <setCommand+0x726>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 80065ba:	2206      	movs	r2, #6
 80065bc:	493b      	ldr	r1, [pc, #236]	; (80066ac <setCommand+0x3c4>)
 80065be:	0038      	movs	r0, r7
 80065c0:	f00d fc38 	bl	8013e34 <strncmp>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d000      	beq.n	80065ca <setCommand+0x2e2>
 80065c8:	e262      	b.n	8006a90 <setCommand+0x7a8>
			temp81 =SUNDAY;
 80065ca:	2307      	movs	r3, #7
 80065cc:	469b      	mov	fp, r3
 80065ce:	e082      	b.n	80066d6 <setCommand+0x3ee>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80065d0:	003a      	movs	r2, r7
 80065d2:	4937      	ldr	r1, [pc, #220]	; (80066b0 <setCommand+0x3c8>)
 80065d4:	0030      	movs	r0, r6
 80065d6:	f00d fc2d 	bl	8013e34 <strncmp>
 80065da:	4681      	mov	r9, r0
 80065dc:	2800      	cmp	r0, #0
 80065de:	d100      	bne.n	80065e2 <setCommand+0x2fa>
 80065e0:	e1b7      	b.n	8006952 <setCommand+0x66a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80065e2:	003a      	movs	r2, r7
 80065e4:	4933      	ldr	r1, [pc, #204]	; (80066b4 <setCommand+0x3cc>)
 80065e6:	0030      	movs	r0, r6
 80065e8:	f00d fc24 	bl	8013e34 <strncmp>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d100      	bne.n	80065f2 <setCommand+0x30a>
 80065f0:	e177      	b.n	80068e2 <setCommand+0x5fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80065f2:	003a      	movs	r2, r7
 80065f4:	4930      	ldr	r1, [pc, #192]	; (80066b8 <setCommand+0x3d0>)
 80065f6:	0030      	movs	r0, r6
 80065f8:	f00d fc1c 	bl	8013e34 <strncmp>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d100      	bne.n	8006602 <setCommand+0x31a>
 8006600:	e1d8      	b.n	80069b4 <setCommand+0x6cc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006602:	003a      	movs	r2, r7
 8006604:	492d      	ldr	r1, [pc, #180]	; (80066bc <setCommand+0x3d4>)
 8006606:	0030      	movs	r0, r6
 8006608:	f00d fc14 	bl	8013e34 <strncmp>
 800660c:	2800      	cmp	r0, #0
 800660e:	d100      	bne.n	8006612 <setCommand+0x32a>
 8006610:	e1e7      	b.n	80069e2 <setCommand+0x6fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006612:	003a      	movs	r2, r7
 8006614:	492a      	ldr	r1, [pc, #168]	; (80066c0 <setCommand+0x3d8>)
 8006616:	0030      	movs	r0, r6
 8006618:	f00d fc0c 	bl	8013e34 <strncmp>
 800661c:	2800      	cmp	r0, #0
 800661e:	d000      	beq.n	8006622 <setCommand+0x33a>
 8006620:	e68f      	b.n	8006342 <setCommand+0x5a>
			temp16 =atoi((const char* )pcParameterString2);
 8006622:	4640      	mov	r0, r8
 8006624:	f00c fef9 	bl	801341a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006628:	1e43      	subs	r3, r0, #1
 800662a:	b29b      	uxth	r3, r3
 800662c:	2bfe      	cmp	r3, #254	; 0xfe
 800662e:	d900      	bls.n	8006632 <setCommand+0x34a>
 8006630:	e6f5      	b.n	800641e <setCommand+0x136>
				BOS.buttons.maxInterClickTime =temp16;
 8006632:	4b0e      	ldr	r3, [pc, #56]	; (800666c <setCommand+0x384>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006634:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 8006636:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006638:	0200      	lsls	r0, r0, #8
 800663a:	4301      	orrs	r1, r0
 800663c:	2018      	movs	r0, #24
 800663e:	b289      	uxth	r1, r1
 8006640:	30ff      	adds	r0, #255	; 0xff
 8006642:	f005 fa23 	bl	800ba8c <EE_WriteVariable>
 8006646:	e133      	b.n	80068b0 <setCommand+0x5c8>
				temp84 =RTC_AM;
 8006648:	2301      	movs	r3, #1
 800664a:	4698      	mov	r8, r3
 800664c:	e6bf      	b.n	80063ce <setCommand+0xe6>
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	200017e4 	.word	0x200017e4
 8006654:	08019a7c 	.word	0x08019a7c
 8006658:	08019cf4 	.word	0x08019cf4
 800665c:	08019d00 	.word	0x08019d00
 8006660:	08019b04 	.word	0x08019b04
 8006664:	0801b32c 	.word	0x0801b32c
 8006668:	08019cfc 	.word	0x08019cfc
 800666c:	2000687c 	.word	0x2000687c
 8006670:	08019ba0 	.word	0x08019ba0
 8006674:	08019a84 	.word	0x08019a84
 8006678:	08018c34 	.word	0x08018c34
 800667c:	08019bf0 	.word	0x08019bf0
 8006680:	08019bf8 	.word	0x08019bf8
 8006684:	08019a94 	.word	0x08019a94
 8006688:	200067fc 	.word	0x200067fc
 800668c:	08019a9c 	.word	0x08019a9c
 8006690:	08019d08 	.word	0x08019d08
 8006694:	08019d10 	.word	0x08019d10
 8006698:	08019d18 	.word	0x08019d18
 800669c:	08019d20 	.word	0x08019d20
 80066a0:	08019d2c 	.word	0x08019d2c
 80066a4:	08019d38 	.word	0x08019d38
 80066a8:	08019d40 	.word	0x08019d40
 80066ac:	08019d4c 	.word	0x08019d4c
 80066b0:	08019aa4 	.word	0x08019aa4
 80066b4:	08019ab0 	.word	0x08019ab0
 80066b8:	08019abc 	.word	0x08019abc
 80066bc:	08019acc 	.word	0x08019acc
 80066c0:	08019ae0 	.word	0x08019ae0
 80066c4:	6c26      	ldr	r6, [r4, #64]	; 0x40
 80066c6:	2207      	movs	r2, #7
 80066c8:	49d3      	ldr	r1, [pc, #844]	; (8006a18 <setCommand+0x730>)
 80066ca:	0030      	movs	r0, r6
 80066cc:	f00d fbb2 	bl	8013e34 <strncmp>
			temp81 =MONDAY;
 80066d0:	2301      	movs	r3, #1
 80066d2:	4681      	mov	r9, r0
 80066d4:	469b      	mov	fp, r3
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80066d6:	464b      	mov	r3, r9
			temp82 =JANUARY;
 80066d8:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d123      	bne.n	8006726 <setCommand+0x43e>
		temp83 =atoi((const char* )pcParameterString4);		// day
 80066de:	4643      	mov	r3, r8
 80066e0:	b2de      	uxtb	r6, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80066e2:	1e73      	subs	r3, r6, #1
 80066e4:	2b1e      	cmp	r3, #30
 80066e6:	d900      	bls.n	80066ea <setCommand+0x402>
 80066e8:	e699      	b.n	800641e <setCommand+0x136>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80066ea:	4653      	mov	r3, sl
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	469a      	mov	sl, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80066f0:	4bca      	ldr	r3, [pc, #808]	; (8006a1c <setCommand+0x734>)
 80066f2:	4453      	add	r3, sl
 80066f4:	2b64      	cmp	r3, #100	; 0x64
 80066f6:	d900      	bls.n	80066fa <setCommand+0x412>
 80066f8:	e691      	b.n	800641e <setCommand+0x136>
				GetTimeDate();
 80066fa:	f007 f829 	bl	800d750 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80066fe:	220c      	movs	r2, #12
 8006700:	4bc7      	ldr	r3, [pc, #796]	; (8006a20 <setCommand+0x738>)
 8006702:	0031      	movs	r1, r6
 8006704:	569a      	ldrsb	r2, [r3, r2]
 8006706:	0038      	movs	r0, r7
 8006708:	9204      	str	r2, [sp, #16]
 800670a:	7cda      	ldrb	r2, [r3, #19]
 800670c:	9203      	str	r2, [sp, #12]
 800670e:	7c9a      	ldrb	r2, [r3, #18]
 8006710:	9202      	str	r2, [sp, #8]
 8006712:	7c5a      	ldrb	r2, [r3, #17]
 8006714:	9201      	str	r2, [sp, #4]
 8006716:	7c1b      	ldrb	r3, [r3, #16]
 8006718:	4652      	mov	r2, sl
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	465b      	mov	r3, fp
 800671e:	f006 ffbd 	bl	800d69c <BOS_CalendarConfig>
 8006722:	4681      	mov	r9, r0
 8006724:	e672      	b.n	800640c <setCommand+0x124>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006726:	2202      	movs	r2, #2
 8006728:	49be      	ldr	r1, [pc, #760]	; (8006a24 <setCommand+0x73c>)
 800672a:	0030      	movs	r0, r6
 800672c:	f00d fb82 	bl	8013e34 <strncmp>
 8006730:	2800      	cmp	r0, #0
 8006732:	d0d4      	beq.n	80066de <setCommand+0x3f6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006734:	2208      	movs	r2, #8
 8006736:	49bc      	ldr	r1, [pc, #752]	; (8006a28 <setCommand+0x740>)
 8006738:	0030      	movs	r0, r6
 800673a:	f00d fb7b 	bl	8013e34 <strncmp>
 800673e:	2800      	cmp	r0, #0
 8006740:	d100      	bne.n	8006744 <setCommand+0x45c>
 8006742:	e1c8      	b.n	8006ad6 <setCommand+0x7ee>
 8006744:	2202      	movs	r2, #2
 8006746:	49b9      	ldr	r1, [pc, #740]	; (8006a2c <setCommand+0x744>)
 8006748:	0030      	movs	r0, r6
 800674a:	f00d fb73 	bl	8013e34 <strncmp>
 800674e:	2800      	cmp	r0, #0
 8006750:	d100      	bne.n	8006754 <setCommand+0x46c>
 8006752:	e1c0      	b.n	8006ad6 <setCommand+0x7ee>
 8006754:	2300      	movs	r3, #0
 8006756:	4699      	mov	r9, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006758:	2205      	movs	r2, #5
 800675a:	49b5      	ldr	r1, [pc, #724]	; (8006a30 <setCommand+0x748>)
 800675c:	0030      	movs	r0, r6
 800675e:	f00d fb69 	bl	8013e34 <strncmp>
 8006762:	2800      	cmp	r0, #0
 8006764:	d100      	bne.n	8006768 <setCommand+0x480>
 8006766:	e0d6      	b.n	8006916 <setCommand+0x62e>
 8006768:	2202      	movs	r2, #2
 800676a:	49b2      	ldr	r1, [pc, #712]	; (8006a34 <setCommand+0x74c>)
 800676c:	0030      	movs	r0, r6
 800676e:	f00d fb61 	bl	8013e34 <strncmp>
 8006772:	2800      	cmp	r0, #0
 8006774:	d100      	bne.n	8006778 <setCommand+0x490>
 8006776:	e0ce      	b.n	8006916 <setCommand+0x62e>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006778:	2205      	movs	r2, #5
 800677a:	49af      	ldr	r1, [pc, #700]	; (8006a38 <setCommand+0x750>)
 800677c:	0030      	movs	r0, r6
 800677e:	f00d fb59 	bl	8013e34 <strncmp>
 8006782:	2800      	cmp	r0, #0
 8006784:	d100      	bne.n	8006788 <setCommand+0x4a0>
 8006786:	e145      	b.n	8006a14 <setCommand+0x72c>
 8006788:	2202      	movs	r2, #2
 800678a:	49ac      	ldr	r1, [pc, #688]	; (8006a3c <setCommand+0x754>)
 800678c:	0030      	movs	r0, r6
 800678e:	f00d fb51 	bl	8013e34 <strncmp>
 8006792:	2800      	cmp	r0, #0
 8006794:	d100      	bne.n	8006798 <setCommand+0x4b0>
 8006796:	e13d      	b.n	8006a14 <setCommand+0x72c>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006798:	2203      	movs	r2, #3
 800679a:	49a9      	ldr	r1, [pc, #676]	; (8006a40 <setCommand+0x758>)
 800679c:	0030      	movs	r0, r6
 800679e:	f00d fb49 	bl	8013e34 <strncmp>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d100      	bne.n	80067a8 <setCommand+0x4c0>
 80067a6:	e192      	b.n	8006ace <setCommand+0x7e6>
 80067a8:	2202      	movs	r2, #2
 80067aa:	49a6      	ldr	r1, [pc, #664]	; (8006a44 <setCommand+0x75c>)
 80067ac:	0030      	movs	r0, r6
 80067ae:	f00d fb41 	bl	8013e34 <strncmp>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d100      	bne.n	80067b8 <setCommand+0x4d0>
 80067b6:	e18a      	b.n	8006ace <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80067b8:	2204      	movs	r2, #4
 80067ba:	49a3      	ldr	r1, [pc, #652]	; (8006a48 <setCommand+0x760>)
 80067bc:	0030      	movs	r0, r6
 80067be:	f00d fb39 	bl	8013e34 <strncmp>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d100      	bne.n	80067c8 <setCommand+0x4e0>
 80067c6:	e184      	b.n	8006ad2 <setCommand+0x7ea>
 80067c8:	2202      	movs	r2, #2
 80067ca:	49a0      	ldr	r1, [pc, #640]	; (8006a4c <setCommand+0x764>)
 80067cc:	0030      	movs	r0, r6
 80067ce:	f00d fb31 	bl	8013e34 <strncmp>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d100      	bne.n	80067d8 <setCommand+0x4f0>
 80067d6:	e17c      	b.n	8006ad2 <setCommand+0x7ea>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80067d8:	2204      	movs	r2, #4
 80067da:	499d      	ldr	r1, [pc, #628]	; (8006a50 <setCommand+0x768>)
 80067dc:	0030      	movs	r0, r6
 80067de:	f00d fb29 	bl	8013e34 <strncmp>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d100      	bne.n	80067e8 <setCommand+0x500>
 80067e6:	e178      	b.n	8006ada <setCommand+0x7f2>
 80067e8:	2202      	movs	r2, #2
 80067ea:	499a      	ldr	r1, [pc, #616]	; (8006a54 <setCommand+0x76c>)
 80067ec:	0030      	movs	r0, r6
 80067ee:	f00d fb21 	bl	8013e34 <strncmp>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d100      	bne.n	80067f8 <setCommand+0x510>
 80067f6:	e170      	b.n	8006ada <setCommand+0x7f2>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80067f8:	2205      	movs	r2, #5
 80067fa:	4997      	ldr	r1, [pc, #604]	; (8006a58 <setCommand+0x770>)
 80067fc:	0030      	movs	r0, r6
 80067fe:	f00d fb19 	bl	8013e34 <strncmp>
 8006802:	2800      	cmp	r0, #0
 8006804:	d100      	bne.n	8006808 <setCommand+0x520>
 8006806:	e170      	b.n	8006aea <setCommand+0x802>
 8006808:	2202      	movs	r2, #2
 800680a:	4994      	ldr	r1, [pc, #592]	; (8006a5c <setCommand+0x774>)
 800680c:	0030      	movs	r0, r6
 800680e:	f00d fb11 	bl	8013e34 <strncmp>
 8006812:	2800      	cmp	r0, #0
 8006814:	d100      	bne.n	8006818 <setCommand+0x530>
 8006816:	e168      	b.n	8006aea <setCommand+0x802>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006818:	2209      	movs	r2, #9
 800681a:	4991      	ldr	r1, [pc, #580]	; (8006a60 <setCommand+0x778>)
 800681c:	0030      	movs	r0, r6
 800681e:	f00d fb09 	bl	8013e34 <strncmp>
 8006822:	2800      	cmp	r0, #0
 8006824:	d100      	bne.n	8006828 <setCommand+0x540>
 8006826:	e15e      	b.n	8006ae6 <setCommand+0x7fe>
 8006828:	2202      	movs	r2, #2
 800682a:	498e      	ldr	r1, [pc, #568]	; (8006a64 <setCommand+0x77c>)
 800682c:	0030      	movs	r0, r6
 800682e:	f00d fb01 	bl	8013e34 <strncmp>
 8006832:	2800      	cmp	r0, #0
 8006834:	d100      	bne.n	8006838 <setCommand+0x550>
 8006836:	e156      	b.n	8006ae6 <setCommand+0x7fe>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006838:	2207      	movs	r2, #7
 800683a:	498b      	ldr	r1, [pc, #556]	; (8006a68 <setCommand+0x780>)
 800683c:	0030      	movs	r0, r6
 800683e:	f00d faf9 	bl	8013e34 <strncmp>
 8006842:	2800      	cmp	r0, #0
 8006844:	d100      	bne.n	8006848 <setCommand+0x560>
 8006846:	e14c      	b.n	8006ae2 <setCommand+0x7fa>
 8006848:	2202      	movs	r2, #2
 800684a:	4988      	ldr	r1, [pc, #544]	; (8006a6c <setCommand+0x784>)
 800684c:	0030      	movs	r0, r6
 800684e:	f00d faf1 	bl	8013e34 <strncmp>
 8006852:	2800      	cmp	r0, #0
 8006854:	d100      	bne.n	8006858 <setCommand+0x570>
 8006856:	e144      	b.n	8006ae2 <setCommand+0x7fa>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006858:	2208      	movs	r2, #8
 800685a:	4985      	ldr	r1, [pc, #532]	; (8006a70 <setCommand+0x788>)
 800685c:	0030      	movs	r0, r6
 800685e:	f00d fae9 	bl	8013e34 <strncmp>
 8006862:	2800      	cmp	r0, #0
 8006864:	d100      	bne.n	8006868 <setCommand+0x580>
 8006866:	e13a      	b.n	8006ade <setCommand+0x7f6>
 8006868:	2202      	movs	r2, #2
 800686a:	4982      	ldr	r1, [pc, #520]	; (8006a74 <setCommand+0x78c>)
 800686c:	0030      	movs	r0, r6
 800686e:	f00d fae1 	bl	8013e34 <strncmp>
 8006872:	2800      	cmp	r0, #0
 8006874:	d100      	bne.n	8006878 <setCommand+0x590>
 8006876:	e132      	b.n	8006ade <setCommand+0x7f6>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006878:	2208      	movs	r2, #8
 800687a:	497f      	ldr	r1, [pc, #508]	; (8006a78 <setCommand+0x790>)
 800687c:	0030      	movs	r0, r6
 800687e:	f00d fad9 	bl	8013e34 <strncmp>
 8006882:	2800      	cmp	r0, #0
 8006884:	d007      	beq.n	8006896 <setCommand+0x5ae>
 8006886:	2202      	movs	r2, #2
 8006888:	497c      	ldr	r1, [pc, #496]	; (8006a7c <setCommand+0x794>)
 800688a:	0030      	movs	r0, r6
 800688c:	f00d fad2 	bl	8013e34 <strncmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	d000      	beq.n	8006896 <setCommand+0x5ae>
 8006894:	e5c3      	b.n	800641e <setCommand+0x136>
			temp82 =DECEMBER;
 8006896:	270c      	movs	r7, #12
 8006898:	e03e      	b.n	8006918 <setCommand+0x630>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 800689a:	2260      	movs	r2, #96	; 0x60
 800689c:	4b78      	ldr	r3, [pc, #480]	; (8006a80 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800689e:	3015      	adds	r0, #21
 80068a0:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_ALL;
 80068a2:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80068a4:	2360      	movs	r3, #96	; 0x60
 80068a6:	0209      	lsls	r1, r1, #8
 80068a8:	4319      	orrs	r1, r3
 80068aa:	30ff      	adds	r0, #255	; 0xff
 80068ac:	f005 f8ee 	bl	800ba8c <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80068b0:	2300      	movs	r3, #0
 80068b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80068b6:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80068b8:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80068ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80068bc:	4971      	ldr	r1, [pc, #452]	; (8006a84 <setCommand+0x79c>)
 80068be:	f00d fa75 	bl	8013dac <sprintf>
	return pdFALSE;
 80068c2:	e543      	b.n	800634c <setCommand+0x64>
			temp81 =TUESDAY;
 80068c4:	2302      	movs	r3, #2
 80068c6:	469b      	mov	fp, r3
 80068c8:	e705      	b.n	80066d6 <setCommand+0x3ee>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80068ca:	2240      	movs	r2, #64	; 0x40
 80068cc:	4b6c      	ldr	r3, [pc, #432]	; (8006a80 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80068ce:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80068d0:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80068d2:	7859      	ldrb	r1, [r3, #1]
 80068d4:	2340      	movs	r3, #64	; 0x40
 80068d6:	0209      	lsls	r1, r1, #8
 80068d8:	4319      	orrs	r1, r3
 80068da:	30ff      	adds	r0, #255	; 0xff
 80068dc:	f005 f8d6 	bl	800ba8c <EE_WriteVariable>
 80068e0:	e7e6      	b.n	80068b0 <setCommand+0x5c8>
			temp16 =atoi((const char* )pcParameterString2);
 80068e2:	4640      	mov	r0, r8
 80068e4:	f00c fd99 	bl	801341a <atoi>
 80068e8:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80068ea:	2900      	cmp	r1, #0
 80068ec:	d100      	bne.n	80068f0 <setCommand+0x608>
 80068ee:	e596      	b.n	800641e <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80068f0:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 80068f2:	4b4b      	ldr	r3, [pc, #300]	; (8006a20 <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80068f4:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 80068f6:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80068f8:	f005 f8c8 	bl	800ba8c <EE_WriteVariable>
 80068fc:	e7d8      	b.n	80068b0 <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_MESSAGE;
 80068fe:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006900:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 8006902:	4b5f      	ldr	r3, [pc, #380]	; (8006a80 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006904:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 8006906:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	3015      	adds	r0, #21
 800690c:	4319      	orrs	r1, r3
 800690e:	30ff      	adds	r0, #255	; 0xff
 8006910:	f005 f8bc 	bl	800ba8c <EE_WriteVariable>
 8006914:	e7cc      	b.n	80068b0 <setCommand+0x5c8>
			temp82 =MARCH;
 8006916:	2703      	movs	r7, #3
		if(result == BOS_OK){
 8006918:	464b      	mov	r3, r9
 800691a:	2b00      	cmp	r3, #0
 800691c:	d000      	beq.n	8006920 <setCommand+0x638>
 800691e:	e579      	b.n	8006414 <setCommand+0x12c>
 8006920:	e6dd      	b.n	80066de <setCommand+0x3f6>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006922:	2220      	movs	r2, #32
 8006924:	4b56      	ldr	r3, [pc, #344]	; (8006a80 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006926:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006928:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800692a:	7859      	ldrb	r1, [r3, #1]
 800692c:	2320      	movs	r3, #32
 800692e:	0209      	lsls	r1, r1, #8
 8006930:	4319      	orrs	r1, r3
 8006932:	30ff      	adds	r0, #255	; 0xff
 8006934:	f005 f8aa 	bl	800ba8c <EE_WriteVariable>
 8006938:	e7ba      	b.n	80068b0 <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_BOTH;
 800693a:	2203      	movs	r2, #3
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800693c:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 800693e:	4b50      	ldr	r3, [pc, #320]	; (8006a80 <setCommand+0x798>)
 8006940:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006942:	781b      	ldrb	r3, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006944:	0089      	lsls	r1, r1, #2
 8006946:	3015      	adds	r0, #21
 8006948:	4319      	orrs	r1, r3
 800694a:	30ff      	adds	r0, #255	; 0xff
 800694c:	f005 f89e 	bl	800ba8c <EE_WriteVariable>
 8006950:	e7ae      	b.n	80068b0 <setCommand+0x5c8>
			temp2 =atoi((const char* )pcParameterString2);
 8006952:	4640      	mov	r0, r8
 8006954:	f00c fd61 	bl	801341a <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006958:	23e1      	movs	r3, #225	; 0xe1
 800695a:	031b      	lsls	r3, r3, #12
 800695c:	4298      	cmp	r0, r3
 800695e:	d900      	bls.n	8006962 <setCommand+0x67a>
 8006960:	e55d      	b.n	800641e <setCommand+0x136>
				BOS.clibaudrate =temp2;
 8006962:	4e2f      	ldr	r6, [pc, #188]	; (8006a20 <setCommand+0x738>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006964:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 8006966:	60b0      	str	r0, [r6, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006968:	208c      	movs	r0, #140	; 0x8c
 800696a:	0040      	lsls	r0, r0, #1
 800696c:	f005 f88e 	bl	800ba8c <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006970:	201a      	movs	r0, #26
 8006972:	8971      	ldrh	r1, [r6, #10]
 8006974:	30ff      	adds	r0, #255	; 0xff
 8006976:	f005 f889 	bl	800ba8c <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800697a:	4649      	mov	r1, r9
 800697c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800697e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006980:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006982:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006986:	493f      	ldr	r1, [pc, #252]	; (8006a84 <setCommand+0x79c>)
 8006988:	f00d fa10 	bl	8013dac <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 800698c:	0028      	movs	r0, r5
 800698e:	f7f9 fbc3 	bl	8000118 <strlen>
 8006992:	0004      	movs	r4, r0
 8006994:	2230      	movs	r2, #48	; 0x30
 8006996:	1828      	adds	r0, r5, r0
 8006998:	493b      	ldr	r1, [pc, #236]	; (8006a88 <setCommand+0x7a0>)
 800699a:	f00d f804 	bl	80139a6 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 800699e:	0020      	movs	r0, r4
 80069a0:	302f      	adds	r0, #47	; 0x2f
 80069a2:	1828      	adds	r0, r5, r0
 80069a4:	22b2      	movs	r2, #178	; 0xb2
 80069a6:	4939      	ldr	r1, [pc, #228]	; (8006a8c <setCommand+0x7a4>)
 80069a8:	f00c fffd 	bl	80139a6 <memcpy>
 80069ac:	e4ce      	b.n	800634c <setCommand+0x64>
			temp81 =WEDNESDAY;
 80069ae:	2303      	movs	r3, #3
 80069b0:	469b      	mov	fp, r3
 80069b2:	e690      	b.n	80066d6 <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 80069b4:	4640      	mov	r0, r8
 80069b6:	f00c fd30 	bl	801341a <atoi>
 80069ba:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80069bc:	2900      	cmp	r1, #0
 80069be:	d100      	bne.n	80069c2 <setCommand+0x6da>
 80069c0:	e52d      	b.n	800641e <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80069c2:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 80069c4:	4b16      	ldr	r3, [pc, #88]	; (8006a20 <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80069c6:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 80069c8:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80069ca:	f005 f85f 	bl	800ba8c <EE_WriteVariable>
 80069ce:	e76f      	b.n	80068b0 <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_RESPONSE;
 80069d0:	2202      	movs	r2, #2
 80069d2:	4b2b      	ldr	r3, [pc, #172]	; (8006a80 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80069d4:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 80069d6:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	e7b3      	b.n	8006944 <setCommand+0x65c>
			temp81 =THURSDAY;
 80069dc:	2304      	movs	r3, #4
 80069de:	469b      	mov	fp, r3
 80069e0:	e679      	b.n	80066d6 <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 80069e2:	4640      	mov	r0, r8
 80069e4:	f00c fd19 	bl	801341a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80069e8:	1e43      	subs	r3, r0, #1
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2bfe      	cmp	r3, #254	; 0xfe
 80069ee:	d900      	bls.n	80069f2 <setCommand+0x70a>
 80069f0:	e515      	b.n	800641e <setCommand+0x136>
				BOS.buttons.minInterClickTime =temp16;
 80069f2:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <setCommand+0x738>)
 80069f4:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069f6:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 80069f8:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069fa:	0209      	lsls	r1, r1, #8
 80069fc:	4301      	orrs	r1, r0
 80069fe:	2018      	movs	r0, #24
 8006a00:	30ff      	adds	r0, #255	; 0xff
 8006a02:	f005 f843 	bl	800ba8c <EE_WriteVariable>
 8006a06:	e753      	b.n	80068b0 <setCommand+0x5c8>
			temp81 =FRIDAY;
 8006a08:	2305      	movs	r3, #5
 8006a0a:	469b      	mov	fp, r3
 8006a0c:	e663      	b.n	80066d6 <setCommand+0x3ee>
			temp81 =SATURDAY;
 8006a0e:	2306      	movs	r3, #6
 8006a10:	469b      	mov	fp, r3
 8006a12:	e660      	b.n	80066d6 <setCommand+0x3ee>
			temp82 =APRIL;
 8006a14:	2704      	movs	r7, #4
 8006a16:	e77f      	b.n	8006918 <setCommand+0x630>
 8006a18:	08019d18 	.word	0x08019d18
 8006a1c:	fffff830 	.word	0xfffff830
 8006a20:	2000687c 	.word	0x2000687c
 8006a24:	08019dd4 	.word	0x08019dd4
 8006a28:	08019dd8 	.word	0x08019dd8
 8006a2c:	08019de4 	.word	0x08019de4
 8006a30:	08019d54 	.word	0x08019d54
 8006a34:	08019d5c 	.word	0x08019d5c
 8006a38:	08019d60 	.word	0x08019d60
 8006a3c:	08019d68 	.word	0x08019d68
 8006a40:	08019d6c 	.word	0x08019d6c
 8006a44:	08019d70 	.word	0x08019d70
 8006a48:	08019d74 	.word	0x08019d74
 8006a4c:	08019d7c 	.word	0x08019d7c
 8006a50:	08019d80 	.word	0x08019d80
 8006a54:	08019d88 	.word	0x08019d88
 8006a58:	08019d8c 	.word	0x08019d8c
 8006a5c:	08019d94 	.word	0x08019d94
 8006a60:	08019d98 	.word	0x08019d98
 8006a64:	08019da4 	.word	0x08019da4
 8006a68:	08019da8 	.word	0x08019da8
 8006a6c:	08019db0 	.word	0x08019db0
 8006a70:	08019db4 	.word	0x08019db4
 8006a74:	08019dc0 	.word	0x08019dc0
 8006a78:	08019dc4 	.word	0x08019dc4
 8006a7c:	08019dd0 	.word	0x08019dd0
 8006a80:	200067fc 	.word	0x200067fc
 8006a84:	08019bfc 	.word	0x08019bfc
 8006a88:	08019c10 	.word	0x08019c10
 8006a8c:	08019c40 	.word	0x08019c40
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006a90:	9b07      	ldr	r3, [sp, #28]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d100      	bne.n	8006a98 <setCommand+0x7b0>
 8006a96:	e4c2      	b.n	800641e <setCommand+0x136>
 8006a98:	2202      	movs	r2, #2
 8006a9a:	4915      	ldr	r1, [pc, #84]	; (8006af0 <setCommand+0x808>)
 8006a9c:	0030      	movs	r0, r6
 8006a9e:	f00d f9c9 	bl	8013e34 <strncmp>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d100      	bne.n	8006aa8 <setCommand+0x7c0>
 8006aa6:	e4ba      	b.n	800641e <setCommand+0x136>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	4912      	ldr	r1, [pc, #72]	; (8006af4 <setCommand+0x80c>)
 8006aac:	0030      	movs	r0, r6
 8006aae:	f00d f9c1 	bl	8013e34 <strncmp>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d100      	bne.n	8006ab8 <setCommand+0x7d0>
 8006ab6:	e4b2      	b.n	800641e <setCommand+0x136>
 8006ab8:	2202      	movs	r2, #2
 8006aba:	490f      	ldr	r1, [pc, #60]	; (8006af8 <setCommand+0x810>)
 8006abc:	0030      	movs	r0, r6
 8006abe:	f00d f9b9 	bl	8013e34 <strncmp>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d100      	bne.n	8006ac8 <setCommand+0x7e0>
 8006ac6:	e4aa      	b.n	800641e <setCommand+0x136>
			result =BOS_ERR_WrongValue;
 8006ac8:	2368      	movs	r3, #104	; 0x68
 8006aca:	4699      	mov	r9, r3
 8006acc:	e644      	b.n	8006758 <setCommand+0x470>
			temp82 =MAY;
 8006ace:	2705      	movs	r7, #5
 8006ad0:	e722      	b.n	8006918 <setCommand+0x630>
			temp82 =JUNE;
 8006ad2:	2706      	movs	r7, #6
 8006ad4:	e720      	b.n	8006918 <setCommand+0x630>
			temp82 =FEBRUARY;
 8006ad6:	2702      	movs	r7, #2
 8006ad8:	e601      	b.n	80066de <setCommand+0x3f6>
			temp82 =JULY;
 8006ada:	2707      	movs	r7, #7
 8006adc:	e71c      	b.n	8006918 <setCommand+0x630>
			temp82 =NOVEMBER;
 8006ade:	270b      	movs	r7, #11
 8006ae0:	e71a      	b.n	8006918 <setCommand+0x630>
			temp82 =OCTOBER;
 8006ae2:	270a      	movs	r7, #10
 8006ae4:	e718      	b.n	8006918 <setCommand+0x630>
			temp82 =SEPTEMBER;
 8006ae6:	2709      	movs	r7, #9
 8006ae8:	e716      	b.n	8006918 <setCommand+0x630>
			temp82 =AUGUST;
 8006aea:	2708      	movs	r7, #8
 8006aec:	e714      	b.n	8006918 <setCommand+0x630>
 8006aee:	46c0      	nop			; (mov r8, r8)
 8006af0:	08019dd4 	.word	0x08019dd4
 8006af4:	08019dd8 	.word	0x08019dd8
 8006af8:	08019de4 	.word	0x08019de4

08006afc <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006afc:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006afe:	b530      	push	{r4, r5, lr}
 8006b00:	b083      	sub	sp, #12
 8006b02:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b04:	2101      	movs	r1, #1
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b06:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b08:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8006b0a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b0c:	f007 fb04 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006b10:	2300      	movs	r3, #0
 8006b12:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006b14:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006b16:	2b70      	cmp	r3, #112	; 0x70
 8006b18:	d00d      	beq.n	8006b36 <removebuttonCommand+0x3a>
	result =RemovePortButton(port);
 8006b1a:	0020      	movs	r0, r4
 8006b1c:	f005 fbb0 	bl	800c280 <RemovePortButton>
	if(result == BOS_OK){
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d105      	bne.n	8006b30 <removebuttonCommand+0x34>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006b24:	0023      	movs	r3, r4
 8006b26:	0022      	movs	r2, r4
 8006b28:	4905      	ldr	r1, [pc, #20]	; (8006b40 <removebuttonCommand+0x44>)
 8006b2a:	0028      	movs	r0, r5
 8006b2c:	f00d f93e 	bl	8013dac <sprintf>
}
 8006b30:	2000      	movs	r0, #0
 8006b32:	b003      	add	sp, #12
 8006b34:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b36:	3001      	adds	r0, #1
 8006b38:	f00c fc75 	bl	8013426 <atol>
 8006b3c:	b2c4      	uxtb	r4, r0
 8006b3e:	e7ec      	b.n	8006b1a <removebuttonCommand+0x1e>
 8006b40:	08019de8 	.word	0x08019de8

08006b44 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b46:	46ce      	mov	lr, r9
 8006b48:	4647      	mov	r7, r8
 8006b4a:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006b4c:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b085      	sub	sp, #20
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b52:	aa02      	add	r2, sp, #8
 8006b54:	2101      	movs	r1, #1
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b56:	4680      	mov	r8, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b58:	0030      	movs	r0, r6
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006b5a:	9302      	str	r3, [sp, #8]
 8006b5c:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b5e:	f007 fadb 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b62:	9f02      	ldr	r7, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b64:	4b24      	ldr	r3, [pc, #144]	; (8006bf8 <addbuttonCommand+0xb4>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b66:	003a      	movs	r2, r7
 8006b68:	4924      	ldr	r1, [pc, #144]	; (8006bfc <addbuttonCommand+0xb8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b6a:	0004      	movs	r4, r0
 8006b6c:	4699      	mov	r9, r3
 8006b6e:	64d8      	str	r0, [r3, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b70:	f00d f960 	bl	8013e34 <strncmp>
		type =MOMENTARY_NO;
 8006b74:	2501      	movs	r5, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d007      	beq.n	8006b8a <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006b7a:	003a      	movs	r2, r7
 8006b7c:	4920      	ldr	r1, [pc, #128]	; (8006c00 <addbuttonCommand+0xbc>)
 8006b7e:	0020      	movs	r0, r4
 8006b80:	f00d f958 	bl	8013e34 <strncmp>
		type =MOMENTARY_NC;
 8006b84:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d11f      	bne.n	8006bca <addbuttonCommand+0x86>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006b8a:	aa03      	add	r2, sp, #12
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	0030      	movs	r0, r6
 8006b90:	f007 fac2 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006b94:	2300      	movs	r3, #0
 8006b96:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006b98:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006b9a:	2b70      	cmp	r3, #112	; 0x70
 8006b9c:	d026      	beq.n	8006bec <addbuttonCommand+0xa8>
	result =AddPortButton(type,port);
 8006b9e:	0021      	movs	r1, r4
 8006ba0:	0028      	movs	r0, r5
 8006ba2:	f005 faf3 	bl	800c18c <AddPortButton>
	if(result == BOS_OK){
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d109      	bne.n	8006bbe <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006baa:	464b      	mov	r3, r9
 8006bac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bae:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006bb0:	4914      	ldr	r1, [pc, #80]	; (8006c04 <addbuttonCommand+0xc0>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006bb2:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006bb4:	9400      	str	r4, [sp, #0]
 8006bb6:	0023      	movs	r3, r4
 8006bb8:	4640      	mov	r0, r8
 8006bba:	f00d f8f7 	bl	8013dac <sprintf>
}
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	b005      	add	sp, #20
 8006bc2:	bc0c      	pop	{r2, r3}
 8006bc4:	4690      	mov	r8, r2
 8006bc6:	4699      	mov	r9, r3
 8006bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006bca:	003a      	movs	r2, r7
 8006bcc:	490e      	ldr	r1, [pc, #56]	; (8006c08 <addbuttonCommand+0xc4>)
 8006bce:	0020      	movs	r0, r4
 8006bd0:	f00d f930 	bl	8013e34 <strncmp>
		type =ONOFF_NO;
 8006bd4:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d0d7      	beq.n	8006b8a <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006bda:	003a      	movs	r2, r7
 8006bdc:	490b      	ldr	r1, [pc, #44]	; (8006c0c <addbuttonCommand+0xc8>)
 8006bde:	0020      	movs	r0, r4
 8006be0:	f00d f928 	bl	8013e34 <strncmp>
		type =ONOFF_NC;
 8006be4:	4245      	negs	r5, r0
 8006be6:	4145      	adcs	r5, r0
 8006be8:	00ad      	lsls	r5, r5, #2
 8006bea:	e7ce      	b.n	8006b8a <addbuttonCommand+0x46>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006bec:	3001      	adds	r0, #1
 8006bee:	f00c fc1a 	bl	8013426 <atol>
 8006bf2:	b2c4      	uxtb	r4, r0
 8006bf4:	e7d3      	b.n	8006b9e <addbuttonCommand+0x5a>
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	200017e4 	.word	0x200017e4
 8006bfc:	08019e10 	.word	0x08019e10
 8006c00:	08019e20 	.word	0x08019e20
 8006c04:	08019e48 	.word	0x08019e48
 8006c08:	08019e30 	.word	0x08019e30
 8006c0c:	08019e3c 	.word	0x08019e3c

08006c10 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c12:	46de      	mov	lr, fp
 8006c14:	464e      	mov	r6, r9
 8006c16:	4657      	mov	r7, sl
 8006c18:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006c1a:	2300      	movs	r3, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c1c:	0014      	movs	r4, r2
 8006c1e:	b5e0      	push	{r5, r6, r7, lr}
 8006c20:	b099      	sub	sp, #100	; 0x64
 8006c22:	9007      	str	r0, [sp, #28]
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006c24:	220a      	movs	r2, #10
 8006c26:	2100      	movs	r1, #0
 8006c28:	a80f      	add	r0, sp, #60	; 0x3c
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006c2a:	9308      	str	r3, [sp, #32]
 8006c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2e:	930a      	str	r3, [sp, #40]	; 0x28
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006c30:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c32:	930c      	str	r3, [sp, #48]	; 0x30
 8006c34:	930d      	str	r3, [sp, #52]	; 0x34
	portBASE_TYPE xParameterStringLength7 =0;
 8006c36:	930e      	str	r3, [sp, #56]	; 0x38
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006c38:	f00c febe 	bl	80139b8 <memset>
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	2100      	movs	r1, #0
 8006c40:	a812      	add	r0, sp, #72	; 0x48
 8006c42:	f00c feb9 	bl	80139b8 <memset>
 8006c46:	220a      	movs	r2, #10
 8006c48:	2100      	movs	r1, #0
 8006c4a:	a815      	add	r0, sp, #84	; 0x54
 8006c4c:	f00c feb4 	bl	80139b8 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c50:	aa08      	add	r2, sp, #32
 8006c52:	2101      	movs	r1, #1
 8006c54:	0020      	movs	r0, r4
 8006c56:	f007 fa5f 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006c5a:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c5c:	2200      	movs	r2, #0
	if(pcParameterString1[0] == 'P'){
 8006c5e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c60:	4691      	mov	r9, r2
	if(pcParameterString1[0] == 'P'){
 8006c62:	2b50      	cmp	r3, #80	; 0x50
 8006c64:	d100      	bne.n	8006c68 <scastCommand+0x58>
 8006c66:	e085      	b.n	8006d74 <scastCommand+0x164>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c68:	aa09      	add	r2, sp, #36	; 0x24
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	0020      	movs	r0, r4
 8006c6e:	f007 fa53 	bl	800e118 <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c74:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006c76:	a80f      	add	r0, sp, #60	; 0x3c
 8006c78:	f00d f8ed 	bl	8013e56 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006c7c:	a80f      	add	r0, sp, #60	; 0x3c
 8006c7e:	f7fd fbf5 	bl	800446c <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006c82:	aa0a      	add	r2, sp, #40	; 0x28
	srcM =(uint8_t )GetID(par1);
 8006c84:	b2c5      	uxtb	r5, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006c86:	2103      	movs	r1, #3
 8006c88:	0020      	movs	r0, r4
 8006c8a:	f007 fa45 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006c8e:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c90:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006c92:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c94:	4692      	mov	sl, r2
	if(pcParameterString3[0] == 'p'){
 8006c96:	2b70      	cmp	r3, #112	; 0x70
 8006c98:	d066      	beq.n	8006d68 <scastCommand+0x158>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006c9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c9c:	2104      	movs	r1, #4
 8006c9e:	0020      	movs	r0, r4
 8006ca0:	f007 fa3a 	bl	800e118 <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006ca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006ca6:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006ca8:	a812      	add	r0, sp, #72	; 0x48
 8006caa:	f00d f8d4 	bl	8013e56 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006cae:	a812      	add	r0, sp, #72	; 0x48
 8006cb0:	f7fd fbdc 	bl	800446c <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006cb4:	aa0c      	add	r2, sp, #48	; 0x30
	dstM =(uint8_t )GetID(par2);
 8006cb6:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006cb8:	2105      	movs	r1, #5
 8006cba:	0020      	movs	r0, r4
	dstM =(uint8_t )GetID(par2);
 8006cbc:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006cbe:	f007 fa2b 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cc4:	492e      	ldr	r1, [pc, #184]	; (8006d80 <scastCommand+0x170>)
 8006cc6:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006cc8:	0007      	movs	r7, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006cca:	4698      	mov	r8, r3
 8006ccc:	f00d f8b2 	bl	8013e34 <strncmp>
		direction =FORWARD;
 8006cd0:	2600      	movs	r6, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d007      	beq.n	8006ce6 <scastCommand+0xd6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006cd6:	4642      	mov	r2, r8
 8006cd8:	492a      	ldr	r1, [pc, #168]	; (8006d84 <scastCommand+0x174>)
 8006cda:	0038      	movs	r0, r7
 8006cdc:	f00d f8aa 	bl	8013e34 <strncmp>
		direction =BACKWARD;
 8006ce0:	3601      	adds	r6, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d137      	bne.n	8006d56 <scastCommand+0x146>
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006ce6:	0039      	movs	r1, r7
 8006ce8:	4642      	mov	r2, r8
 8006cea:	a815      	add	r0, sp, #84	; 0x54
 8006cec:	f00d f8b3 	bl	8013e56 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006cf0:	aa0d      	add	r2, sp, #52	; 0x34
 8006cf2:	2106      	movs	r1, #6
 8006cf4:	0020      	movs	r0, r4
 8006cf6:	f007 fa0f 	bl	800e118 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006cfa:	f00c fb94 	bl	8013426 <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006cfe:	aa0e      	add	r2, sp, #56	; 0x38
 8006d00:	2107      	movs	r1, #7
	count =(uint32_t )atol((char* )pcParameterString6);
 8006d02:	0007      	movs	r7, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006d04:	0020      	movs	r0, r4
 8006d06:	f007 fa07 	bl	800e118 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006d0a:	f00c fb8c 	bl	8013426 <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006d0e:	2300      	movs	r3, #0
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006d10:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006d12:	9303      	str	r3, [sp, #12]
 8006d14:	9002      	str	r0, [sp, #8]
 8006d16:	9701      	str	r7, [sp, #4]
 8006d18:	9600      	str	r6, [sp, #0]
 8006d1a:	465b      	mov	r3, fp
 8006d1c:	4652      	mov	r2, sl
 8006d1e:	0029      	movs	r1, r5
 8006d20:	4648      	mov	r0, r9
 8006d22:	f001 fb39 	bl	8008398 <StartScastDMAStream>
	if(result == BOS_OK){
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d10d      	bne.n	8006d46 <scastCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006d2a:	ab12      	add	r3, sp, #72	; 0x48
 8006d2c:	9302      	str	r3, [sp, #8]
 8006d2e:	4653      	mov	r3, sl
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	ab0f      	add	r3, sp, #60	; 0x3c
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	9404      	str	r4, [sp, #16]
 8006d38:	9703      	str	r7, [sp, #12]
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	aa15      	add	r2, sp, #84	; 0x54
 8006d3e:	4912      	ldr	r1, [pc, #72]	; (8006d88 <scastCommand+0x178>)
 8006d40:	9807      	ldr	r0, [sp, #28]
 8006d42:	f00d f833 	bl	8013dac <sprintf>
}
 8006d46:	2000      	movs	r0, #0
 8006d48:	b019      	add	sp, #100	; 0x64
 8006d4a:	bc3c      	pop	{r2, r3, r4, r5}
 8006d4c:	4690      	mov	r8, r2
 8006d4e:	4699      	mov	r9, r3
 8006d50:	46a2      	mov	sl, r4
 8006d52:	46ab      	mov	fp, r5
 8006d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006d56:	4642      	mov	r2, r8
 8006d58:	490c      	ldr	r1, [pc, #48]	; (8006d8c <scastCommand+0x17c>)
 8006d5a:	0038      	movs	r0, r7
 8006d5c:	f00d f86a 	bl	8013e34 <strncmp>
		direction =BIDIRECTIONAL;
 8006d60:	4246      	negs	r6, r0
 8006d62:	4146      	adcs	r6, r0
 8006d64:	0076      	lsls	r6, r6, #1
 8006d66:	e7be      	b.n	8006ce6 <scastCommand+0xd6>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f00c fb5c 	bl	8013426 <atol>
 8006d6e:	b2c3      	uxtb	r3, r0
 8006d70:	469a      	mov	sl, r3
 8006d72:	e792      	b.n	8006c9a <scastCommand+0x8a>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006d74:	3001      	adds	r0, #1
 8006d76:	f00c fb56 	bl	8013426 <atol>
 8006d7a:	b2c3      	uxtb	r3, r0
 8006d7c:	4699      	mov	r9, r3
 8006d7e:	e773      	b.n	8006c68 <scastCommand+0x58>
 8006d80:	08019e7c 	.word	0x08019e7c
 8006d84:	08019e84 	.word	0x08019e84
 8006d88:	08019ea0 	.word	0x08019ea0
 8006d8c:	08019e90 	.word	0x08019e90

08006d90 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d90:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(N > 1)
 8006d92:	4d22      	ldr	r5, [pc, #136]	; (8006e1c <infoCommand+0x8c>)
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d94:	b083      	sub	sp, #12
	if(N > 1)
 8006d96:	782a      	ldrb	r2, [r5, #0]
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d98:	0004      	movs	r4, r0
	BOS_Status result =BOS_OK;
 8006d9a:	2700      	movs	r7, #0
	if(N > 1)
 8006d9c:	2a01      	cmp	r2, #1
 8006d9e:	d903      	bls.n	8006da8 <infoCommand+0x18>
		result =ReadPortsDir();
 8006da0:	f006 ffaa 	bl	800dcf8 <ReadPortsDir>
 8006da4:	0007      	movs	r7, r0
 8006da6:	782a      	ldrb	r2, [r5, #0]
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006da8:	491d      	ldr	r1, [pc, #116]	; (8006e20 <infoCommand+0x90>)
 8006daa:	0020      	movs	r0, r4
 8006dac:	f00c fffe 	bl	8013dac <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006db0:	2601      	movs	r6, #1
 8006db2:	0020      	movs	r0, r4
 8006db4:	f7f9 f9b0 	bl	8000118 <strlen>
 8006db8:	4d1a      	ldr	r5, [pc, #104]	; (8006e24 <infoCommand+0x94>)
 8006dba:	4276      	negs	r6, r6
 8006dbc:	b282      	uxth	r2, r0
 8006dbe:	2332      	movs	r3, #50	; 0x32
 8006dc0:	7828      	ldrb	r0, [r5, #0]
 8006dc2:	0021      	movs	r1, r4
 8006dc4:	9600      	str	r6, [sp, #0]
 8006dc6:	f006 ff01 	bl	800dbcc <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006dca:	2213      	movs	r2, #19
 8006dcc:	4916      	ldr	r1, [pc, #88]	; (8006e28 <infoCommand+0x98>)
 8006dce:	0020      	movs	r0, r4
 8006dd0:	f00c fde9 	bl	80139a6 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006dd4:	7828      	ldrb	r0, [r5, #0]
 8006dd6:	2332      	movs	r3, #50	; 0x32
 8006dd8:	2212      	movs	r2, #18
 8006dda:	0021      	movs	r1, r4
 8006ddc:	9600      	str	r6, [sp, #0]
 8006dde:	f006 fef5 	bl	800dbcc <writePxMutex>
	DisplayTopology(PcPort);
 8006de2:	7828      	ldrb	r0, [r5, #0]
 8006de4:	f7fd f880 	bl	8003ee8 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006de8:	7828      	ldrb	r0, [r5, #0]
 8006dea:	f7fd f94f 	bl	800408c <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006dee:	2f02      	cmp	r7, #2
 8006df0:	d007      	beq.n	8006e02 <infoCommand+0x72>
	sprintf((char* )pcWriteBuffer," ");
 8006df2:	2202      	movs	r2, #2
 8006df4:	490d      	ldr	r1, [pc, #52]	; (8006e2c <infoCommand+0x9c>)
 8006df6:	0020      	movs	r0, r4
 8006df8:	f00c fdd5 	bl	80139a6 <memcpy>
}
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	b003      	add	sp, #12
 8006e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006e02:	2244      	movs	r2, #68	; 0x44
 8006e04:	490a      	ldr	r1, [pc, #40]	; (8006e30 <infoCommand+0xa0>)
 8006e06:	0020      	movs	r0, r4
 8006e08:	f00c fdcd 	bl	80139a6 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006e0c:	7828      	ldrb	r0, [r5, #0]
 8006e0e:	2332      	movs	r3, #50	; 0x32
 8006e10:	9600      	str	r6, [sp, #0]
 8006e12:	2243      	movs	r2, #67	; 0x43
 8006e14:	0021      	movs	r1, r4
 8006e16:	f006 fed9 	bl	800dbcc <writePxMutex>
 8006e1a:	e7ea      	b.n	8006df2 <infoCommand+0x62>
 8006e1c:	20000010 	.word	0x20000010
 8006e20:	08019f28 	.word	0x08019f28
 8006e24:	20000c38 	.word	0x20000c38
 8006e28:	08019f44 	.word	0x08019f44
 8006e2c:	08018b30 	.word	0x08018b30
 8006e30:	08019f58 	.word	0x08019f58

08006e34 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e34:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006e36:	2000      	movs	r0, #0
 8006e38:	f7fd f9a2 	bl	8004180 <DisplayModuleStatus>
}
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	bd10      	pop	{r4, pc}

08006e40 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e42:	46de      	mov	lr, fp
 8006e44:	464e      	mov	r6, r9
 8006e46:	4645      	mov	r5, r8
 8006e48:	4657      	mov	r7, sl
 8006e4a:	b5e0      	push	{r5, r6, r7, lr}
 8006e4c:	b091      	sub	sp, #68	; 0x44
	char module[MaxLengthOfAlias + 30] ={0};
 8006e4e:	ae06      	add	r6, sp, #24
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e50:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006e52:	2100      	movs	r1, #0
 8006e54:	2227      	movs	r2, #39	; 0x27
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e56:	4680      	mov	r8, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8006e58:	0030      	movs	r0, r6
 8006e5a:	f00c fdad 	bl	80139b8 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006e5e:	220a      	movs	r2, #10
 8006e60:	2100      	movs	r1, #0
 8006e62:	a803      	add	r0, sp, #12
 8006e64:	f00c fda8 	bl	80139b8 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e68:	4d52      	ldr	r5, [pc, #328]	; (8006fb4 <groupCommand+0x174>)
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	002a      	movs	r2, r5
 8006e6e:	4648      	mov	r0, r9
 8006e70:	3250      	adds	r2, #80	; 0x50
 8006e72:	f007 f951 	bl	800e118 <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006e76:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e78:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006e7a:	a803      	add	r0, sp, #12
 8006e7c:	f00c ffeb 	bl	8013e56 <strncpy>
 8006e80:	4c4d      	ldr	r4, [pc, #308]	; (8006fb8 <groupCommand+0x178>)
 8006e82:	0027      	movs	r7, r4
 8006e84:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006e86:	0021      	movs	r1, r4
 8006e88:	a803      	add	r0, sp, #12
 8006e8a:	f7f9 f93b 	bl	8000104 <strcmp>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d049      	beq.n	8006f26 <groupCommand+0xe6>
 8006e92:	340a      	adds	r4, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006e94:	42a7      	cmp	r7, r4
 8006e96:	d1f6      	bne.n	8006e86 <groupCommand+0x46>
	type =1;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	9301      	str	r3, [sp, #4]
	count =2;
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	2454      	movs	r4, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	4946      	ldr	r1, [pc, #280]	; (8006fbc <groupCommand+0x17c>)
 8006ea4:	4640      	mov	r0, r8
	count =2;
 8006ea6:	552b      	strb	r3, [r5, r4]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006ea8:	f00c fd7d 	bl	80139a6 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006eac:	002a      	movs	r2, r5
 8006eae:	2102      	movs	r1, #2
 8006eb0:	3258      	adds	r2, #88	; 0x58
 8006eb2:	4648      	mov	r0, r9
 8006eb4:	f007 f930 	bl	800e118 <FreeRTOS_CLIGetParameter>
 8006eb8:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d069      	beq.n	8006f92 <groupCommand+0x152>
		module[xParameterStringLength] ='\0';
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	469a      	mov	sl, r3
			strcat((char* )pcWriteBuffer,", ");
 8006ec2:	4b3f      	ldr	r3, [pc, #252]	; (8006fc0 <groupCommand+0x180>)
		if(count > 2)
 8006ec4:	2754      	movs	r7, #84	; 0x54
			strcat((char* )pcWriteBuffer,", ");
 8006ec6:	469b      	mov	fp, r3
 8006ec8:	e00e      	b.n	8006ee8 <groupCommand+0xa8>
		strcat((char* )pcWriteBuffer,module);
 8006eca:	0031      	movs	r1, r6
 8006ecc:	4640      	mov	r0, r8
 8006ece:	f00c ff8d 	bl	8013dec <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006ed2:	002a      	movs	r2, r5
 8006ed4:	3401      	adds	r4, #1
 8006ed6:	b261      	sxtb	r1, r4
 8006ed8:	3258      	adds	r2, #88	; 0x58
 8006eda:	4648      	mov	r0, r9
 8006edc:	55e9      	strb	r1, [r5, r7]
 8006ede:	f007 f91b 	bl	800e118 <FreeRTOS_CLIGetParameter>
 8006ee2:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d03e      	beq.n	8006f66 <groupCommand+0x126>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006ee8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006eea:	0001      	movs	r1, r0
 8006eec:	0022      	movs	r2, r4
 8006eee:	0030      	movs	r0, r6
 8006ef0:	f00c ffb1 	bl	8013e56 <strncpy>
		module[xParameterStringLength] ='\0';
 8006ef4:	4653      	mov	r3, sl
		modID =GetID(module);
 8006ef6:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8006ef8:	5533      	strb	r3, [r6, r4]
		modID =GetID(module);
 8006efa:	f7fd fab7 	bl	800446c <GetID>
		if(modID < 0)
 8006efe:	2800      	cmp	r0, #0
 8006f00:	db14      	blt.n	8006f2c <groupCommand+0xec>
		result =AddModuleToGroup(modID,alias);
 8006f02:	b2c0      	uxtb	r0, r0
 8006f04:	a903      	add	r1, sp, #12
 8006f06:	f7fd fb7b 	bl	8004600 <AddModuleToGroup>
		if(result != BOS_OK)
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d11b      	bne.n	8006f46 <groupCommand+0x106>
		if(count > 2)
 8006f0e:	57ec      	ldrsb	r4, [r5, r7]
 8006f10:	2c02      	cmp	r4, #2
 8006f12:	ddda      	ble.n	8006eca <groupCommand+0x8a>
			strcat((char* )pcWriteBuffer,", ");
 8006f14:	4640      	mov	r0, r8
 8006f16:	f7f9 f8ff 	bl	8000118 <strlen>
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	4440      	add	r0, r8
 8006f1e:	4659      	mov	r1, fp
 8006f20:	f00c fd41 	bl	80139a6 <memcpy>
 8006f24:	e7d1      	b.n	8006eca <groupCommand+0x8a>
			type =0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	9301      	str	r3, [sp, #4]
 8006f2a:	e7b7      	b.n	8006e9c <groupCommand+0x5c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006f2c:	0032      	movs	r2, r6
 8006f2e:	4925      	ldr	r1, [pc, #148]	; (8006fc4 <groupCommand+0x184>)
 8006f30:	4640      	mov	r0, r8
 8006f32:	f00c ff3b 	bl	8013dac <sprintf>
}
 8006f36:	2000      	movs	r0, #0
 8006f38:	b011      	add	sp, #68	; 0x44
 8006f3a:	bc3c      	pop	{r2, r3, r4, r5}
 8006f3c:	4690      	mov	r8, r2
 8006f3e:	4699      	mov	r9, r3
 8006f40:	46a2      	mov	sl, r4
 8006f42:	46ab      	mov	fp, r5
 8006f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8006f46:	2354      	movs	r3, #84	; 0x54
 8006f48:	56eb      	ldrsb	r3, [r5, r3]
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d024      	beq.n	8006f98 <groupCommand+0x158>
	else if(result == BOS_ERR_Keyword)
 8006f4e:	2806      	cmp	r0, #6
 8006f50:	d019      	beq.n	8006f86 <groupCommand+0x146>
	else if(result == BOS_ERR_ExistingAlias)
 8006f52:	2807      	cmp	r0, #7
 8006f54:	d028      	beq.n	8006fa8 <groupCommand+0x168>
	else if(result == BOS_ERR_ExistingCmd)
 8006f56:	2808      	cmp	r0, #8
 8006f58:	d1ed      	bne.n	8006f36 <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006f5a:	aa03      	add	r2, sp, #12
 8006f5c:	491a      	ldr	r1, [pc, #104]	; (8006fc8 <groupCommand+0x188>)
 8006f5e:	4640      	mov	r0, r8
 8006f60:	f00c ff24 	bl	8013dac <sprintf>
 8006f64:	e7e7      	b.n	8006f36 <groupCommand+0xf6>
	else if(count == 2)
 8006f66:	57eb      	ldrsb	r3, [r5, r7]
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d015      	beq.n	8006f98 <groupCommand+0x158>
	else if(result == BOS_OK && type){
 8006f6c:	9b01      	ldr	r3, [sp, #4]
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006f6e:	aa03      	add	r2, sp, #12
	else if(result == BOS_OK && type){
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d117      	bne.n	8006fa4 <groupCommand+0x164>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006f74:	4915      	ldr	r1, [pc, #84]	; (8006fcc <groupCommand+0x18c>)
 8006f76:	0030      	movs	r0, r6
 8006f78:	f00c ff18 	bl	8013dac <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006f7c:	0031      	movs	r1, r6
 8006f7e:	4640      	mov	r0, r8
 8006f80:	f00c ff34 	bl	8013dec <strcat>
 8006f84:	e7d7      	b.n	8006f36 <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006f86:	aa03      	add	r2, sp, #12
 8006f88:	4911      	ldr	r1, [pc, #68]	; (8006fd0 <groupCommand+0x190>)
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	f00c ff0e 	bl	8013dac <sprintf>
 8006f90:	e7d1      	b.n	8006f36 <groupCommand+0xf6>
	else if(count == 2)
 8006f92:	572b      	ldrsb	r3, [r5, r4]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d1e9      	bne.n	8006f6c <groupCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006f98:	aa03      	add	r2, sp, #12
 8006f9a:	490e      	ldr	r1, [pc, #56]	; (8006fd4 <groupCommand+0x194>)
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	f00c ff05 	bl	8013dac <sprintf>
 8006fa2:	e7c8      	b.n	8006f36 <groupCommand+0xf6>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006fa4:	490c      	ldr	r1, [pc, #48]	; (8006fd8 <groupCommand+0x198>)
 8006fa6:	e7e6      	b.n	8006f76 <groupCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006fa8:	aa03      	add	r2, sp, #12
 8006faa:	490c      	ldr	r1, [pc, #48]	; (8006fdc <groupCommand+0x19c>)
 8006fac:	4640      	mov	r0, r8
 8006fae:	f00c fefd 	bl	8013dac <sprintf>
 8006fb2:	e7c0      	b.n	8006f36 <groupCommand+0xf6>
 8006fb4:	200017e4 	.word	0x200017e4
 8006fb8:	20000ae0 	.word	0x20000ae0
 8006fbc:	08019f9c 	.word	0x08019f9c
 8006fc0:	08019fa8 	.word	0x08019fa8
 8006fc4:	0801a0c8 	.word	0x0801a0c8
 8006fc8:	0801a088 	.word	0x0801a088
 8006fcc:	08019ff4 	.word	0x08019ff4
 8006fd0:	0801a014 	.word	0x0801a014
 8006fd4:	08019fac 	.word	0x08019fac
 8006fd8:	08019fd8 	.word	0x08019fd8
 8006fdc:	0801a054 	.word	0x0801a054

08006fe0 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fe0:	b570      	push	{r4, r5, r6, lr}
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006fe2:	4c1b      	ldr	r4, [pc, #108]	; (8007050 <nameCommand+0x70>)
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fe4:	0006      	movs	r6, r0
 8006fe6:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006fe8:	0022      	movs	r2, r4
 8006fea:	2101      	movs	r1, #1
 8006fec:	3260      	adds	r2, #96	; 0x60
 8006fee:	f007 f893 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006ff2:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ff4:	0001      	movs	r1, r0
 8006ff6:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006ff8:	2b09      	cmp	r3, #9
 8006ffa:	dd01      	ble.n	8007000 <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8007000:	4d14      	ldr	r5, [pc, #80]	; (8007054 <nameCommand+0x74>)
 8007002:	7828      	ldrb	r0, [r5, #0]
 8007004:	f7fd fa92 	bl	800452c <NameModule>
	if(result == BOS_OK)
 8007008:	2800      	cmp	r0, #0
 800700a:	d007      	beq.n	800701c <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 800700c:	2806      	cmp	r0, #6
 800700e:	d012      	beq.n	8007036 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8007010:	2807      	cmp	r0, #7
 8007012:	d00a      	beq.n	800702a <nameCommand+0x4a>
	else if(result == BOS_ERR_ExistingCmd)
 8007014:	2808      	cmp	r0, #8
 8007016:	d014      	beq.n	8007042 <nameCommand+0x62>
}
 8007018:	2000      	movs	r0, #0
 800701a:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 800701c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800701e:	782a      	ldrb	r2, [r5, #0]
 8007020:	490d      	ldr	r1, [pc, #52]	; (8007058 <nameCommand+0x78>)
 8007022:	0030      	movs	r0, r6
 8007024:	f00c fec2 	bl	8013dac <sprintf>
 8007028:	e7f6      	b.n	8007018 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 800702a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800702c:	490b      	ldr	r1, [pc, #44]	; (800705c <nameCommand+0x7c>)
 800702e:	0030      	movs	r0, r6
 8007030:	f00c febc 	bl	8013dac <sprintf>
 8007034:	e7f0      	b.n	8007018 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8007036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007038:	4909      	ldr	r1, [pc, #36]	; (8007060 <nameCommand+0x80>)
 800703a:	0030      	movs	r0, r6
 800703c:	f00c feb6 	bl	8013dac <sprintf>
 8007040:	e7ea      	b.n	8007018 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8007042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007044:	4907      	ldr	r1, [pc, #28]	; (8007064 <nameCommand+0x84>)
 8007046:	0030      	movs	r0, r6
 8007048:	f00c feb0 	bl	8013dac <sprintf>
 800704c:	e7e4      	b.n	8007018 <nameCommand+0x38>
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	200017e4 	.word	0x200017e4
 8007054:	20000aa8 	.word	0x20000aa8
 8007058:	0801a0ec 	.word	0x0801a0ec
 800705c:	0801a054 	.word	0x0801a054
 8007060:	0801a014 	.word	0x0801a014
 8007064:	0801a088 	.word	0x0801a088

08007068 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800706a:	46c6      	mov	lr, r8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800706c:	4c50      	ldr	r4, [pc, #320]	; (80071b0 <bootloaderUpdateCommand+0x148>)
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800706e:	0015      	movs	r5, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007070:	0022      	movs	r2, r4
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007072:	b500      	push	{lr}
 8007074:	0006      	movs	r6, r0
 8007076:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007078:	3268      	adds	r2, #104	; 0x68
 800707a:	2101      	movs	r1, #1
 800707c:	0028      	movs	r0, r5
 800707e:	f007 f84b 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007082:	2800      	cmp	r0, #0
 8007084:	d069      	beq.n	800715a <bootloaderUpdateCommand+0xf2>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007086:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007088:	494a      	ldr	r1, [pc, #296]	; (80071b4 <bootloaderUpdateCommand+0x14c>)
 800708a:	f00c fed3 	bl	8013e34 <strncmp>
 800708e:	2800      	cmp	r0, #0
 8007090:	d133      	bne.n	80070fa <bootloaderUpdateCommand+0x92>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007092:	0022      	movs	r2, r4
 8007094:	2102      	movs	r1, #2
 8007096:	326c      	adds	r2, #108	; 0x6c
 8007098:	0028      	movs	r0, r5
 800709a:	f007 f83d 	bl	800e118 <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800709e:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80070a0:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80070a2:	3274      	adds	r2, #116	; 0x74
 80070a4:	0028      	movs	r0, r5
 80070a6:	2103      	movs	r1, #3
 80070a8:	f007 f836 	bl	800e118 <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 80070ac:	2200      	movs	r2, #0
 80070ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80070b0:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 80070b2:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 80070b4:	2568      	movs	r5, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 80070b6:	2a23      	cmp	r2, #35	; 0x23
 80070b8:	d029      	beq.n	800710e <bootloaderUpdateCommand+0xa6>
			if(pcParameterString3[0] == 'p'){
 80070ba:	2300      	movs	r3, #0
 80070bc:	56c3      	ldrsb	r3, [r0, r3]
 80070be:	2b70      	cmp	r3, #112	; 0x70
 80070c0:	d02f      	beq.n	8007122 <bootloaderUpdateCommand+0xba>
			if(module != myID){
 80070c2:	4c3d      	ldr	r4, [pc, #244]	; (80071b8 <bootloaderUpdateCommand+0x150>)
				result =BOS_ERR_WrongValue;
 80070c4:	2568      	movs	r5, #104	; 0x68
			if(module != myID){
 80070c6:	7823      	ldrb	r3, [r4, #0]
 80070c8:	42bb      	cmp	r3, r7
 80070ca:	d033      	beq.n	8007134 <bootloaderUpdateCommand+0xcc>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80070cc:	2200      	movs	r2, #0
 80070ce:	4b3b      	ldr	r3, [pc, #236]	; (80071bc <bootloaderUpdateCommand+0x154>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80070d0:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80070d2:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80070d4:	4642      	mov	r2, r8
 80070d6:	4b3a      	ldr	r3, [pc, #232]	; (80071c0 <bootloaderUpdateCommand+0x158>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80070d8:	0038      	movs	r0, r7
				messageParams[0] =port;
 80070da:	701a      	strb	r2, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80070dc:	2201      	movs	r2, #1
 80070de:	f001 f937 	bl	8008350 <SendMessageToModule>
				osDelay(100);
 80070e2:	2064      	movs	r0, #100	; 0x64
 80070e4:	f006 ff0c 	bl	800df00 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80070e8:	4b36      	ldr	r3, [pc, #216]	; (80071c4 <bootloaderUpdateCommand+0x15c>)
 80070ea:	7820      	ldrb	r0, [r4, #0]
 80070ec:	781a      	ldrb	r2, [r3, #0]
 80070ee:	0039      	movs	r1, r7
 80070f0:	4643      	mov	r3, r8
 80070f2:	f002 ff99 	bl	800a028 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 80070f6:	2d68      	cmp	r5, #104	; 0x68
 80070f8:	d104      	bne.n	8007104 <bootloaderUpdateCommand+0x9c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80070fa:	220f      	movs	r2, #15
 80070fc:	4932      	ldr	r1, [pc, #200]	; (80071c8 <bootloaderUpdateCommand+0x160>)
 80070fe:	0030      	movs	r0, r6
 8007100:	f00c fc51 	bl	80139a6 <memcpy>
}
 8007104:	2000      	movs	r0, #0
 8007106:	b002      	add	sp, #8
 8007108:	bc04      	pop	{r2}
 800710a:	4690      	mov	r8, r2
 800710c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800710e:	1c58      	adds	r0, r3, #1
 8007110:	f00c f989 	bl	8013426 <atol>
			if(pcParameterString3[0] == 'p'){
 8007114:	2300      	movs	r3, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8007116:	b2c7      	uxtb	r7, r0
 8007118:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	BOS_Status result =BOS_OK;
 800711a:	2500      	movs	r5, #0
			if(pcParameterString3[0] == 'p'){
 800711c:	56c3      	ldrsb	r3, [r0, r3]
 800711e:	2b70      	cmp	r3, #112	; 0x70
 8007120:	d1cf      	bne.n	80070c2 <bootloaderUpdateCommand+0x5a>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007122:	3001      	adds	r0, #1
 8007124:	f00c f97f 	bl	8013426 <atol>
			if(module != myID){
 8007128:	4c23      	ldr	r4, [pc, #140]	; (80071b8 <bootloaderUpdateCommand+0x150>)
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 800712a:	b2c3      	uxtb	r3, r0
 800712c:	4698      	mov	r8, r3
			if(module != myID){
 800712e:	7823      	ldrb	r3, [r4, #0]
 8007130:	42bb      	cmp	r3, r7
 8007132:	d1cb      	bne.n	80070cc <bootloaderUpdateCommand+0x64>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007134:	2300      	movs	r3, #0
 8007136:	2200      	movs	r2, #0
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	2100      	movs	r1, #0
 800713c:	3319      	adds	r3, #25
 800713e:	4640      	mov	r0, r8
 8007140:	f000 fea6 	bl	8007e90 <SendMessageFromPort>
				osDelay(100);
 8007144:	2064      	movs	r0, #100	; 0x64
 8007146:	f006 fedb 	bl	800df00 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 800714a:	7820      	ldrb	r0, [r4, #0]
 800714c:	4b1d      	ldr	r3, [pc, #116]	; (80071c4 <bootloaderUpdateCommand+0x15c>)
 800714e:	0001      	movs	r1, r0
 8007150:	781a      	ldrb	r2, [r3, #0]
 8007152:	4643      	mov	r3, r8
 8007154:	f002 ff68 	bl	800a028 <remoteBootloaderUpdate>
 8007158:	e7cd      	b.n	80070f6 <bootloaderUpdateCommand+0x8e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 800715a:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <bootloaderUpdateCommand+0x150>)
 800715c:	491b      	ldr	r1, [pc, #108]	; (80071cc <bootloaderUpdateCommand+0x164>)
 800715e:	781a      	ldrb	r2, [r3, #0]
 8007160:	0030      	movs	r0, r6
 8007162:	f00c fe23 	bl	8013dac <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007166:	4b1a      	ldr	r3, [pc, #104]	; (80071d0 <bootloaderUpdateCommand+0x168>)
 8007168:	0030      	movs	r0, r6
 800716a:	6819      	ldr	r1, [r3, #0]
 800716c:	f00c fe3e 	bl	8013dec <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8007170:	0030      	movs	r0, r6
 8007172:	f7f8 ffd1 	bl	8000118 <strlen>
 8007176:	4b13      	ldr	r3, [pc, #76]	; (80071c4 <bootloaderUpdateCommand+0x15c>)
 8007178:	b282      	uxth	r2, r0
 800717a:	7818      	ldrb	r0, [r3, #0]
 800717c:	2301      	movs	r3, #1
 800717e:	425b      	negs	r3, r3
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	0031      	movs	r1, r6
 8007184:	3333      	adds	r3, #51	; 0x33
 8007186:	f006 fd21 	bl	800dbcc <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800718a:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <bootloaderUpdateCommand+0x16c>)
 800718c:	4a12      	ldr	r2, [pc, #72]	; (80071d8 <bootloaderUpdateCommand+0x170>)
		osDelay(10);
 800718e:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007190:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8007192:	2201      	movs	r2, #1
 8007194:	4b11      	ldr	r3, [pc, #68]	; (80071dc <bootloaderUpdateCommand+0x174>)
 8007196:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007198:	f006 feb2 	bl	800df00 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <bootloaderUpdateCommand+0x178>)
 80071a2:	4a10      	ldr	r2, [pc, #64]	; (80071e4 <bootloaderUpdateCommand+0x17c>)
 80071a4:	60da      	str	r2, [r3, #12]
 80071a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	e7fd      	b.n	80071aa <bootloaderUpdateCommand+0x142>
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	200017e4 	.word	0x200017e4
 80071b4:	0801a124 	.word	0x0801a124
 80071b8:	20000aa8 	.word	0x20000aa8
 80071bc:	200067fc 	.word	0x200067fc
 80071c0:	20000b4c 	.word	0x20000b4c
 80071c4:	20000c38 	.word	0x20000c38
 80071c8:	08019ba0 	.word	0x08019ba0
 80071cc:	0801a104 	.word	0x0801a104
 80071d0:	20000068 	.word	0x20000068
 80071d4:	20007ff0 	.word	0x20007ff0
 80071d8:	deadbeef 	.word	0xdeadbeef
 80071dc:	2000114e 	.word	0x2000114e
 80071e0:	e000ed00 	.word	0xe000ed00
 80071e4:	05fa0004 	.word	0x05fa0004

080071e8 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80071e8:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 80071ea:	4b12      	ldr	r3, [pc, #72]	; (8007234 <pingCommand+0x4c>)
 80071ec:	4912      	ldr	r1, [pc, #72]	; (8007238 <pingCommand+0x50>)
 80071ee:	781a      	ldrb	r2, [r3, #0]
 80071f0:	0093      	lsls	r3, r2, #2
 80071f2:	189b      	adds	r3, r3, r2
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	5c5c      	ldrb	r4, [r3, r1]
 80071f8:	2c00      	cmp	r4, #0
 80071fa:	d016      	beq.n	800722a <pingCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80071fc:	185b      	adds	r3, r3, r1
 80071fe:	490f      	ldr	r1, [pc, #60]	; (800723c <pingCommand+0x54>)
 8007200:	f00c fdd4 	bl	8013dac <sprintf>
	RTOS_IND_blink(200);
 8007204:	2180      	movs	r1, #128	; 0x80
 8007206:	2090      	movs	r0, #144	; 0x90
 8007208:	2201      	movs	r2, #1
 800720a:	0109      	lsls	r1, r1, #4
 800720c:	05c0      	lsls	r0, r0, #23
 800720e:	f00a f9e1 	bl	80115d4 <HAL_GPIO_WritePin>
 8007212:	20c8      	movs	r0, #200	; 0xc8
 8007214:	f006 fe74 	bl	800df00 <osDelay>
 8007218:	2180      	movs	r1, #128	; 0x80
 800721a:	2090      	movs	r0, #144	; 0x90
 800721c:	2200      	movs	r2, #0
 800721e:	0109      	lsls	r1, r1, #4
 8007220:	05c0      	lsls	r0, r0, #23
 8007222:	f00a f9d7 	bl	80115d4 <HAL_GPIO_WritePin>
}
 8007226:	2000      	movs	r0, #0
 8007228:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 800722a:	4905      	ldr	r1, [pc, #20]	; (8007240 <pingCommand+0x58>)
 800722c:	f00c fdbe 	bl	8013dac <sprintf>
 8007230:	e7e8      	b.n	8007204 <pingCommand+0x1c>
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	20000aa8 	.word	0x20000aa8
 8007238:	20000dd4 	.word	0x20000dd4
 800723c:	0801a13c 	.word	0x0801a13c
 8007240:	0801a128 	.word	0x0801a128

08007244 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007244:	b510      	push	{r4, lr}
 8007246:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007248:	2241      	movs	r2, #65	; 0x41
 800724a:	4904      	ldr	r1, [pc, #16]	; (800725c <prvRunTimeStatsCommand+0x18>)
 800724c:	f00c fbab 	bl	80139a6 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 8007250:	0020      	movs	r0, r4
 8007252:	3040      	adds	r0, #64	; 0x40
 8007254:	f008 f8a4 	bl	800f3a0 <vTaskGetRunTimeStats>
}
 8007258:	2000      	movs	r0, #0
 800725a:	bd10      	pop	{r4, pc}
 800725c:	0801a158 	.word	0x0801a158

08007260 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007260:	b510      	push	{r4, lr}
 8007262:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007264:	2250      	movs	r2, #80	; 0x50
 8007266:	4904      	ldr	r1, [pc, #16]	; (8007278 <prvTaskStatsCommand+0x18>)
 8007268:	f00c fb9d 	bl	80139a6 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800726c:	0020      	movs	r0, r4
 800726e:	304f      	adds	r0, #79	; 0x4f
 8007270:	f008 f83c 	bl	800f2ec <vTaskList>
}
 8007274:	2000      	movs	r0, #0
 8007276:	bd10      	pop	{r4, pc}
 8007278:	0801a19c 	.word	0x0801a19c

0800727c <setBaudrateCommand>:
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8007280:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007282:	b082      	sub	sp, #8
 8007284:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007286:	466a      	mov	r2, sp
 8007288:	2101      	movs	r1, #1
 800728a:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0;
 800728c:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 800728e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007290:	f006 ff42 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8007294:	2300      	movs	r3, #0
 8007296:	56c3      	ldrsb	r3, [r0, r3]
 8007298:	2b70      	cmp	r3, #112	; 0x70
 800729a:	d00e      	beq.n	80072ba <setBaudrateCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800729c:	aa01      	add	r2, sp, #4
 800729e:	2102      	movs	r1, #2
 80072a0:	0020      	movs	r0, r4
 80072a2:	f006 ff39 	bl	800e118 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80072a6:	f00c f8be 	bl	8013426 <atol>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80072aa:	2213      	movs	r2, #19
 80072ac:	490f      	ldr	r1, [pc, #60]	; (80072ec <setBaudrateCommand+0x70>)
 80072ae:	0028      	movs	r0, r5
 80072b0:	f00c fb79 	bl	80139a6 <memcpy>
}
 80072b4:	2000      	movs	r0, #0
 80072b6:	b002      	add	sp, #8
 80072b8:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80072ba:	3001      	adds	r0, #1
 80072bc:	f00c f8b3 	bl	8013426 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80072c0:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80072c2:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80072c4:	2102      	movs	r1, #2
 80072c6:	0020      	movs	r0, r4
 80072c8:	f006 ff26 	bl	800e118 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80072cc:	f00c f8ab 	bl	8013426 <atol>
 80072d0:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 80072d2:	b2f0      	uxtb	r0, r6
 80072d4:	0021      	movs	r1, r4
 80072d6:	f006 fccb 	bl	800dc70 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80072da:	23ff      	movs	r3, #255	; 0xff
 80072dc:	0022      	movs	r2, r4
 80072de:	4033      	ands	r3, r6
 80072e0:	4903      	ldr	r1, [pc, #12]	; (80072f0 <setBaudrateCommand+0x74>)
 80072e2:	0028      	movs	r0, r5
 80072e4:	f00c fd62 	bl	8013dac <sprintf>
 80072e8:	e7e4      	b.n	80072b4 <setBaudrateCommand+0x38>
 80072ea:	46c0      	nop			; (mov r8, r8)
 80072ec:	0801a214 	.word	0x0801a214
 80072f0:	0801a1ec 	.word	0x0801a1ec

080072f4 <GetReadPrecentageCommand>:

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80072f4:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072f6:	b510      	push	{r4, lr}
 80072f8:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 80072fa:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80072fc:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072fe:	0004      	movs	r4, r0
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007300:	2101      	movs	r1, #1
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007302:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007304:	466a      	mov	r2, sp
	float ADC_Value_CLI =0;
 8007306:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007308:	f006 ff06 	bl	800e118 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800730c:	7803      	ldrb	r3, [r0, #0]
 800730e:	3b32      	subs	r3, #50	; 0x32
 8007310:	2b01      	cmp	r3, #1
 8007312:	d907      	bls.n	8007324 <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8007314:	2215      	movs	r2, #21
 8007316:	490b      	ldr	r1, [pc, #44]	; (8007344 <GetReadPrecentageCommand+0x50>)
 8007318:	0020      	movs	r0, r4
 800731a:	f00c fb44 	bl	80139a6 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 800731e:	2000      	movs	r0, #0
 8007320:	b002      	add	sp, #8
 8007322:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8007324:	f00c f87f 	bl	8013426 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8007328:	a901      	add	r1, sp, #4
 800732a:	b2c0      	uxtb	r0, r0
 800732c:	f005 fa72 	bl	800c814 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8007330:	9801      	ldr	r0, [sp, #4]
 8007332:	f7fb fd09 	bl	8002d48 <__aeabi_f2d>
 8007336:	0002      	movs	r2, r0
 8007338:	000b      	movs	r3, r1
 800733a:	0020      	movs	r0, r4
 800733c:	4902      	ldr	r1, [pc, #8]	; (8007348 <GetReadPrecentageCommand+0x54>)
 800733e:	f00c fd35 	bl	8013dac <sprintf>
 8007342:	e7ec      	b.n	800731e <GetReadPrecentageCommand+0x2a>
 8007344:	08019650 	.word	0x08019650
 8007348:	0801a228 	.word	0x0801a228

0800734c <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800734c:	b510      	push	{r4, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	0004      	movs	r4, r0
	GetTimeDate();
 8007352:	f006 f9fd 	bl	800d750 <GetTimeDate>
	if(BOS.hourformat == 24)
 8007356:	4915      	ldr	r1, [pc, #84]	; (80073ac <timeCommand+0x60>)
 8007358:	7b4b      	ldrb	r3, [r1, #13]
 800735a:	2b18      	cmp	r3, #24
 800735c:	d016      	beq.n	800738c <timeCommand+0x40>
	else if(BOS.hourformat == 12){
 800735e:	2b0c      	cmp	r3, #12
 8007360:	d002      	beq.n	8007368 <timeCommand+0x1c>
}
 8007362:	2000      	movs	r0, #0
 8007364:	b004      	add	sp, #16
 8007366:	bd10      	pop	{r4, pc}
		if(BOS.time.ampm == RTC_AM)
 8007368:	7ccb      	ldrb	r3, [r1, #19]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d019      	beq.n	80073a2 <timeCommand+0x56>
		else if(BOS.time.ampm == RTC_PM)
 800736e:	2b02      	cmp	r3, #2
 8007370:	d1f7      	bne.n	8007362 <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8007372:	7c4b      	ldrb	r3, [r1, #17]
 8007374:	7c8a      	ldrb	r2, [r1, #18]
 8007376:	480e      	ldr	r0, [pc, #56]	; (80073b0 <timeCommand+0x64>)
 8007378:	9002      	str	r0, [sp, #8]
 800737a:	89c8      	ldrh	r0, [r1, #14]
 800737c:	9001      	str	r0, [sp, #4]
 800737e:	7c09      	ldrb	r1, [r1, #16]
 8007380:	0020      	movs	r0, r4
 8007382:	9100      	str	r1, [sp, #0]
 8007384:	490b      	ldr	r1, [pc, #44]	; (80073b4 <timeCommand+0x68>)
 8007386:	f00c fd11 	bl	8013dac <sprintf>
 800738a:	e7ea      	b.n	8007362 <timeCommand+0x16>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 800738c:	89c8      	ldrh	r0, [r1, #14]
 800738e:	7c4b      	ldrb	r3, [r1, #17]
 8007390:	7c8a      	ldrb	r2, [r1, #18]
 8007392:	9001      	str	r0, [sp, #4]
 8007394:	7c09      	ldrb	r1, [r1, #16]
 8007396:	0020      	movs	r0, r4
 8007398:	9100      	str	r1, [sp, #0]
 800739a:	4907      	ldr	r1, [pc, #28]	; (80073b8 <timeCommand+0x6c>)
 800739c:	f00c fd06 	bl	8013dac <sprintf>
 80073a0:	e7df      	b.n	8007362 <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 80073a2:	7c4b      	ldrb	r3, [r1, #17]
 80073a4:	7c8a      	ldrb	r2, [r1, #18]
 80073a6:	4805      	ldr	r0, [pc, #20]	; (80073bc <timeCommand+0x70>)
 80073a8:	e7e6      	b.n	8007378 <timeCommand+0x2c>
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	2000687c 	.word	0x2000687c
 80073b0:	0801a2a4 	.word	0x0801a2a4
 80073b4:	0801a274 	.word	0x0801a274
 80073b8:	0801a24c 	.word	0x0801a24c
 80073bc:	0801a2a0 	.word	0x0801a2a0

080073c0 <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	4b03      	ldr	r3, [pc, #12]	; (80073d4 <resetCommand+0x14>)
 80073c6:	4a04      	ldr	r2, [pc, #16]	; (80073d8 <resetCommand+0x18>)
 80073c8:	60da      	str	r2, [r3, #12]
 80073ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	e7fd      	b.n	80073ce <resetCommand+0xe>
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	e000ed00 	.word	0xe000ed00
 80073d8:	05fa0004 	.word	0x05fa0004

080073dc <RegisterUserCLICommands>:
}
 80073dc:	4770      	bx	lr
 80073de:	46c0      	nop			; (mov r8, r8)

080073e0 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80073e0:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80073e2:	4c45      	ldr	r4, [pc, #276]	; (80074f8 <vRegisterCLICommands+0x118>)
 80073e4:	0020      	movs	r0, r4
 80073e6:	f006 fe03 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80073ea:	0020      	movs	r0, r4
 80073ec:	3010      	adds	r0, #16
 80073ee:	f006 fdff 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80073f2:	0020      	movs	r0, r4
 80073f4:	3020      	adds	r0, #32
 80073f6:	f006 fdfb 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80073fa:	0020      	movs	r0, r4
 80073fc:	3030      	adds	r0, #48	; 0x30
 80073fe:	f006 fdf7 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007402:	0020      	movs	r0, r4
 8007404:	3040      	adds	r0, #64	; 0x40
 8007406:	f006 fdf3 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 800740a:	0020      	movs	r0, r4
 800740c:	3050      	adds	r0, #80	; 0x50
 800740e:	f006 fdef 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8007412:	0020      	movs	r0, r4
 8007414:	3060      	adds	r0, #96	; 0x60
 8007416:	f006 fdeb 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 800741a:	0020      	movs	r0, r4
 800741c:	3070      	adds	r0, #112	; 0x70
 800741e:	f006 fde7 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 8007422:	4c36      	ldr	r4, [pc, #216]	; (80074fc <vRegisterCLICommands+0x11c>)
 8007424:	0020      	movs	r0, r4
 8007426:	f006 fde3 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 800742a:	0020      	movs	r0, r4
 800742c:	3010      	adds	r0, #16
 800742e:	f006 fddf 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007432:	0020      	movs	r0, r4
 8007434:	3020      	adds	r0, #32
 8007436:	f006 fddb 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 800743a:	0020      	movs	r0, r4
 800743c:	3030      	adds	r0, #48	; 0x30
 800743e:	f006 fdd7 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007442:	0020      	movs	r0, r4
 8007444:	3040      	adds	r0, #64	; 0x40
 8007446:	f006 fdd3 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 800744a:	0020      	movs	r0, r4
 800744c:	3050      	adds	r0, #80	; 0x50
 800744e:	f006 fdcf 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007452:	0020      	movs	r0, r4
 8007454:	3060      	adds	r0, #96	; 0x60
 8007456:	f006 fdcb 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 800745a:	0020      	movs	r0, r4
 800745c:	3070      	adds	r0, #112	; 0x70
 800745e:	f006 fdc7 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8007462:	4c27      	ldr	r4, [pc, #156]	; (8007500 <vRegisterCLICommands+0x120>)
 8007464:	0020      	movs	r0, r4
 8007466:	f006 fdc3 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 800746a:	0020      	movs	r0, r4
 800746c:	3010      	adds	r0, #16
 800746e:	f006 fdbf 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8007472:	0020      	movs	r0, r4
 8007474:	3020      	adds	r0, #32
 8007476:	f006 fdbb 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 800747a:	0020      	movs	r0, r4
 800747c:	3030      	adds	r0, #48	; 0x30
 800747e:	f006 fdb7 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007482:	0020      	movs	r0, r4
 8007484:	3040      	adds	r0, #64	; 0x40
 8007486:	f006 fdb3 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800748a:	0020      	movs	r0, r4
 800748c:	3050      	adds	r0, #80	; 0x50
 800748e:	f006 fdaf 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007492:	0020      	movs	r0, r4
 8007494:	3060      	adds	r0, #96	; 0x60
 8007496:	f006 fdab 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 800749a:	0020      	movs	r0, r4
 800749c:	3070      	adds	r0, #112	; 0x70
 800749e:	f006 fda7 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80074a2:	4c18      	ldr	r4, [pc, #96]	; (8007504 <vRegisterCLICommands+0x124>)
 80074a4:	0020      	movs	r0, r4
 80074a6:	f006 fda3 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 80074aa:	0020      	movs	r0, r4
 80074ac:	3010      	adds	r0, #16
 80074ae:	f006 fd9f 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 80074b2:	0020      	movs	r0, r4
 80074b4:	3020      	adds	r0, #32
 80074b6:	f006 fd9b 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 80074ba:	0020      	movs	r0, r4
 80074bc:	3030      	adds	r0, #48	; 0x30
 80074be:	f006 fd97 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 80074c2:	0020      	movs	r0, r4
 80074c4:	3040      	adds	r0, #64	; 0x40
 80074c6:	f006 fd93 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80074ca:	0020      	movs	r0, r4
 80074cc:	3050      	adds	r0, #80	; 0x50
 80074ce:	f006 fd8f 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80074d2:	0020      	movs	r0, r4
 80074d4:	3060      	adds	r0, #96	; 0x60
 80074d6:	f006 fd8b 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80074da:	0020      	movs	r0, r4
 80074dc:	3070      	adds	r0, #112	; 0x70
 80074de:	f006 fd87 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80074e2:	4809      	ldr	r0, [pc, #36]	; (8007508 <vRegisterCLICommands+0x128>)
 80074e4:	f006 fd84 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80074e8:	2223      	movs	r2, #35	; 0x23
 80074ea:	4b08      	ldr	r3, [pc, #32]	; (800750c <vRegisterCLICommands+0x12c>)
 80074ec:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80074ee:	f002 fe39 	bl	800a164 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80074f2:	f7ff ff73 	bl	80073dc <RegisterUserCLICommands>
}
 80074f6:	bd10      	pop	{r4, pc}
 80074f8:	08018318 	.word	0x08018318
 80074fc:	08018398 	.word	0x08018398
 8007500:	08018418 	.word	0x08018418
 8007504:	08018498 	.word	0x08018498
 8007508:	08018518 	.word	0x08018518
 800750c:	200067f8 	.word	0x200067f8

08007510 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007512:	46c6      	mov	lr, r8
 8007514:	b500      	push	{lr}
 8007516:	0005      	movs	r5, r0
 8007518:	000e      	movs	r6, r1
 800751a:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 800751c:	f002 fe46 	bl	800a1ac <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007520:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <StartDMAstream+0x50>)
	uint8_t srcPort =GetPort(huartSrc);
 8007522:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007524:	4698      	mov	r8, r3
 8007526:	5c1b      	ldrb	r3, [r3, r0]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d902      	bls.n	8007532 <StartDMAstream+0x22>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 800752c:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800752e:	2b03      	cmp	r3, #3
 8007530:	d112      	bne.n	8007558 <StartDMAstream+0x48>
		SwitchMsgDMAToStream(srcPort);
 8007532:	0020      	movs	r0, r4
 8007534:	f003 fd30 	bl	800af98 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007538:	4b0a      	ldr	r3, [pc, #40]	; (8007564 <StartDMAstream+0x54>)
 800753a:	1e62      	subs	r2, r4, #1
 800753c:	0092      	lsls	r2, r2, #2
 800753e:	50d6      	str	r6, [r2, r3]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 8007540:	2102      	movs	r1, #2
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007542:	189b      	adds	r3, r3, r2
	portStatus[srcPort] =STREAM;
 8007544:	4640      	mov	r0, r8
	dmaStreamCount[srcPort - 1] =0;
 8007546:	2200      	movs	r2, #0
	portStatus[srcPort] =STREAM;
 8007548:	5501      	strb	r1, [r0, r4]
	dmaStreamCount[srcPort - 1] =0;
 800754a:	615a      	str	r2, [r3, #20]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 800754c:	0028      	movs	r0, r5
 800754e:	003a      	movs	r2, r7
 8007550:	0031      	movs	r1, r6
 8007552:	f004 f981 	bl	800b858 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007556:	2000      	movs	r0, #0
}
 8007558:	bc04      	pop	{r2}
 800755a:	4690      	mov	r8, r2
 800755c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800755e:	46c0      	nop			; (mov r8, r8)
 8007560:	20000c3c 	.word	0x20000c3c
 8007564:	20001860 	.word	0x20001860

08007568 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	0005      	movs	r5, r0
	if(portStatus[port] != STREAM){
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <DMA_IRQHandler+0x44>)
 800756e:	1e44      	subs	r4, r0, #1
 8007570:	00e0      	lsls	r0, r4, #3
 8007572:	5d5b      	ldrb	r3, [r3, r5]
 8007574:	1b00      	subs	r0, r0, r4
 8007576:	00c0      	lsls	r0, r0, #3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d004      	beq.n	8007586 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 800757c:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <DMA_IRQHandler+0x48>)
 800757e:	18c0      	adds	r0, r0, r3
 8007580:	f009 f8a6 	bl	80106d0 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007584:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007586:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <DMA_IRQHandler+0x4c>)
		if(dmaStreamTotal[port - 1])
 8007588:	00a4      	lsls	r4, r4, #2
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800758a:	18c0      	adds	r0, r0, r3
 800758c:	f009 f8a0 	bl	80106d0 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007590:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <DMA_IRQHandler+0x50>)
 8007592:	191c      	adds	r4, r3, r4
 8007594:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007596:	2a00      	cmp	r2, #0
 8007598:	d004      	beq.n	80075a4 <DMA_IRQHandler+0x3c>
			++dmaStreamCount[port - 1];
 800759a:	6963      	ldr	r3, [r4, #20]
 800759c:	3301      	adds	r3, #1
 800759e:	6163      	str	r3, [r4, #20]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d8ef      	bhi.n	8007584 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 80075a4:	0028      	movs	r0, r5
 80075a6:	f003 fcdf 	bl	800af68 <StopStreamDMA>
 80075aa:	e7eb      	b.n	8007584 <DMA_IRQHandler+0x1c>
 80075ac:	20000c3c 	.word	0x20000c3c
 80075b0:	20002284 	.word	0x20002284
 80075b4:	2000208c 	.word	0x2000208c
 80075b8:	20001860 	.word	0x20001860

080075bc <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 80075bc:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <ResetUartORE+0x24>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	2308      	movs	r3, #8
 80075c2:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80075c4:	4a07      	ldr	r2, [pc, #28]	; (80075e4 <ResetUartORE+0x28>)
 80075c6:	6812      	ldr	r2, [r2, #0]
 80075c8:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80075ca:	4a07      	ldr	r2, [pc, #28]	; (80075e8 <ResetUartORE+0x2c>)
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 80075d0:	4a06      	ldr	r2, [pc, #24]	; (80075ec <ResetUartORE+0x30>)
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80075d6:	4a06      	ldr	r2, [pc, #24]	; (80075f0 <ResetUartORE+0x34>)
 80075d8:	6812      	ldr	r2, [r2, #0]
 80075da:	6213      	str	r3, [r2, #32]
#endif
}
 80075dc:	4770      	bx	lr
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	20006ac8 	.word	0x20006ac8
 80075e4:	20006bc0 	.word	0x20006bc0
 80075e8:	200069a0 	.word	0x200069a0
 80075ec:	20006a58 	.word	0x20006a58
 80075f0:	20006b48 	.word	0x20006b48

080075f4 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 80075f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80075f6:	2400      	movs	r4, #0
 80075f8:	2603      	movs	r6, #3
 80075fa:	4d57      	ldr	r5, [pc, #348]	; (8007758 <MX_FREERTOS_Init+0x164>)
void MX_FREERTOS_Init(void){
 80075fc:	b08f      	sub	sp, #60	; 0x3c
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80075fe:	9501      	str	r5, [sp, #4]
 8007600:	9600      	str	r6, [sp, #0]
 8007602:	9403      	str	r4, [sp, #12]
 8007604:	9402      	str	r4, [sp, #8]
 8007606:	2300      	movs	r3, #0
 8007608:	22f0      	movs	r2, #240	; 0xf0
 800760a:	4954      	ldr	r1, [pc, #336]	; (800775c <MX_FREERTOS_Init+0x168>)
 800760c:	4854      	ldr	r0, [pc, #336]	; (8007760 <MX_FREERTOS_Init+0x16c>)
 800760e:	f007 fa35 	bl	800ea7c <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007612:	1d2b      	adds	r3, r5, #4
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	9600      	str	r6, [sp, #0]
 8007618:	9403      	str	r4, [sp, #12]
 800761a:	9402      	str	r4, [sp, #8]
 800761c:	2300      	movs	r3, #0
 800761e:	22f0      	movs	r2, #240	; 0xf0
 8007620:	4950      	ldr	r1, [pc, #320]	; (8007764 <MX_FREERTOS_Init+0x170>)
 8007622:	4851      	ldr	r0, [pc, #324]	; (8007768 <MX_FREERTOS_Init+0x174>)
 8007624:	f007 fa2a 	bl	800ea7c <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007628:	002b      	movs	r3, r5
 800762a:	3308      	adds	r3, #8
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	9600      	str	r6, [sp, #0]
 8007630:	2300      	movs	r3, #0
 8007632:	22f0      	movs	r2, #240	; 0xf0
 8007634:	494d      	ldr	r1, [pc, #308]	; (800776c <MX_FREERTOS_Init+0x178>)
 8007636:	9403      	str	r4, [sp, #12]
 8007638:	9402      	str	r4, [sp, #8]
 800763a:	484d      	ldr	r0, [pc, #308]	; (8007770 <MX_FREERTOS_Init+0x17c>)
 800763c:	f007 fa1e 	bl	800ea7c <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007640:	f7ff fece 	bl	80073e0 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007644:	002b      	movs	r3, r5
 8007646:	228c      	movs	r2, #140	; 0x8c
 8007648:	330c      	adds	r3, #12
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	9600      	str	r6, [sp, #0]
 800764e:	9403      	str	r4, [sp, #12]
 8007650:	9402      	str	r4, [sp, #8]
 8007652:	2300      	movs	r3, #0
 8007654:	0052      	lsls	r2, r2, #1
 8007656:	4947      	ldr	r1, [pc, #284]	; (8007774 <MX_FREERTOS_Init+0x180>)
 8007658:	4847      	ldr	r0, [pc, #284]	; (8007778 <MX_FREERTOS_Init+0x184>)
 800765a:	f007 fa0f 	bl	800ea7c <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 800765e:	002b      	movs	r3, r5
 8007660:	2704      	movs	r7, #4
 8007662:	4e46      	ldr	r6, [pc, #280]	; (800777c <MX_FREERTOS_Init+0x188>)
 8007664:	3310      	adds	r3, #16
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	9403      	str	r4, [sp, #12]
 800766a:	9402      	str	r4, [sp, #8]
 800766c:	9700      	str	r7, [sp, #0]
 800766e:	2301      	movs	r3, #1
 8007670:	22f0      	movs	r2, #240	; 0xf0
 8007672:	4943      	ldr	r1, [pc, #268]	; (8007780 <MX_FREERTOS_Init+0x18c>)
 8007674:	0030      	movs	r0, r6
 8007676:	f007 fa01 	bl	800ea7c <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 800767a:	002b      	movs	r3, r5
 800767c:	3314      	adds	r3, #20
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	9403      	str	r4, [sp, #12]
 8007682:	9402      	str	r4, [sp, #8]
 8007684:	9700      	str	r7, [sp, #0]
 8007686:	2302      	movs	r3, #2
 8007688:	22f0      	movs	r2, #240	; 0xf0
 800768a:	493e      	ldr	r1, [pc, #248]	; (8007784 <MX_FREERTOS_Init+0x190>)
 800768c:	0030      	movs	r0, r6
 800768e:	f007 f9f5 	bl	800ea7c <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007692:	002b      	movs	r3, r5
 8007694:	3318      	adds	r3, #24
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	9403      	str	r4, [sp, #12]
 800769a:	9402      	str	r4, [sp, #8]
 800769c:	9700      	str	r7, [sp, #0]
 800769e:	2303      	movs	r3, #3
 80076a0:	22f0      	movs	r2, #240	; 0xf0
 80076a2:	4939      	ldr	r1, [pc, #228]	; (8007788 <MX_FREERTOS_Init+0x194>)
 80076a4:	0030      	movs	r0, r6
 80076a6:	f007 f9e9 	bl	800ea7c <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 80076aa:	002b      	movs	r3, r5
 80076ac:	331c      	adds	r3, #28
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	9403      	str	r4, [sp, #12]
 80076b2:	9402      	str	r4, [sp, #8]
 80076b4:	9700      	str	r7, [sp, #0]
 80076b6:	2304      	movs	r3, #4
 80076b8:	22f0      	movs	r2, #240	; 0xf0
 80076ba:	4934      	ldr	r1, [pc, #208]	; (800778c <MX_FREERTOS_Init+0x198>)
 80076bc:	0030      	movs	r0, r6
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80076be:	3520      	adds	r5, #32
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 80076c0:	f007 f9dc 	bl	800ea7c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80076c4:	2305      	movs	r3, #5
 80076c6:	22f0      	movs	r2, #240	; 0xf0
 80076c8:	9501      	str	r5, [sp, #4]
 80076ca:	9403      	str	r4, [sp, #12]
 80076cc:	9402      	str	r4, [sp, #8]
 80076ce:	9700      	str	r7, [sp, #0]
 80076d0:	492f      	ldr	r1, [pc, #188]	; (8007790 <MX_FREERTOS_Init+0x19c>)
 80076d2:	0030      	movs	r0, r6
 80076d4:	f007 f9d2 	bl	800ea7c <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80076d8:	2101      	movs	r1, #1
 80076da:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 80076dc:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80076de:	f006 fc3b 	bl	800df58 <osSemaphoreCreate>
 80076e2:	4e2c      	ldr	r6, [pc, #176]	; (8007794 <MX_FREERTOS_Init+0x1a0>)
	osSemaphoreDef(SemaphoreP2);
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80076e4:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80076e6:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80076e8:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 80076ea:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80076ec:	f006 fc34 	bl	800df58 <osSemaphoreCreate>
 80076f0:	4d29      	ldr	r5, [pc, #164]	; (8007798 <MX_FREERTOS_Init+0x1a4>)
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80076f2:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80076f4:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80076f6:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 80076f8:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80076fa:	f006 fc2d 	bl	800df58 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP4);
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80076fe:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007700:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007702:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 8007704:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007706:	f006 fc27 	bl	800df58 <osSemaphoreCreate>
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800770a:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 800770c:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800770e:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 8007710:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007712:	f006 fc21 	bl	800df58 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP6);
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007716:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007718:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 800771a:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 800771c:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 800771e:	f006 fc1b 	bl	800df58 <osSemaphoreCreate>
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007722:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007724:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007726:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8007728:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 800772a:	f006 fc15 	bl	800df58 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP8);
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800772e:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007730:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007732:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 8007734:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007736:	f006 fc0f 	bl	800df58 <osSemaphoreCreate>
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800773a:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800773c:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800773e:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 8007740:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007742:	f006 fc09 	bl	800df58 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP10);
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007746:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007748:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800774a:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 800774c:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800774e:	f006 fc03 	bl	800df58 <osSemaphoreCreate>
 8007752:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 8007754:	b00f      	add	sp, #60	; 0x3c
 8007756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007758:	20001cac 	.word	0x20001cac
 800775c:	0801af24 	.word	0x0801af24
 8007760:	08007ba1 	.word	0x08007ba1
 8007764:	0801af30 	.word	0x0801af30
 8007768:	08008511 	.word	0x08008511
 800776c:	0801af3c 	.word	0x0801af3c
 8007770:	0801340d 	.word	0x0801340d
 8007774:	0801af48 	.word	0x0801af48
 8007778:	08005305 	.word	0x08005305
 800777c:	08008679 	.word	0x08008679
 8007780:	0801af50 	.word	0x0801af50
 8007784:	0801af5c 	.word	0x0801af5c
 8007788:	0801af68 	.word	0x0801af68
 800778c:	0801af74 	.word	0x0801af74
 8007790:	0801af80 	.word	0x0801af80
 8007794:	20006920 	.word	0x20006920
 8007798:	20006900 	.word	0x20006900

0800779c <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 800779c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800779e:	46de      	mov	lr, fp
 80077a0:	4657      	mov	r7, sl
 80077a2:	464e      	mov	r6, r9
 80077a4:	4645      	mov	r5, r8
 80077a6:	b5e0      	push	{r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 80077a8:	4bd5      	ldr	r3, [pc, #852]	; (8007b00 <ExecuteMonitor+0x364>)
{
 80077aa:	b085      	sub	sp, #20
    if(Monitor_time == INTIAL_VALUE)
 80077ac:	469b      	mov	fp, r3
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d006      	beq.n	80077c2 <ExecuteMonitor+0x26>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 80077b4:	b005      	add	sp, #20
 80077b6:	bc3c      	pop	{r2, r3, r4, r5}
 80077b8:	4690      	mov	r8, r2
 80077ba:	4699      	mov	r9, r3
 80077bc:	46a2      	mov	sl, r4
 80077be:	46ab      	mov	fp, r5
 80077c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
initialValue();
 80077c2:	f002 fcc9 	bl	800a158 <initialValue>
	Monitor_time =0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	465a      	mov	r2, fp
 80077ca:	6013      	str	r3, [r2, #0]
	flag=0;
 80077cc:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 80077ce:	3320      	adds	r3, #32
 80077d0:	7153      	strb	r3, [r2, #5]
 80077d2:	4bcc      	ldr	r3, [pc, #816]	; (8007b04 <ExecuteMonitor+0x368>)
 80077d4:	4ecc      	ldr	r6, [pc, #816]	; (8007b08 <ExecuteMonitor+0x36c>)
 80077d6:	4699      	mov	r9, r3
 80077d8:	4bcc      	ldr	r3, [pc, #816]	; (8007b0c <ExecuteMonitor+0x370>)
 80077da:	4dcd      	ldr	r5, [pc, #820]	; (8007b10 <ExecuteMonitor+0x374>)
 80077dc:	469a      	mov	sl, r3
 80077de:	4ccd      	ldr	r4, [pc, #820]	; (8007b14 <ExecuteMonitor+0x378>)
		                    nonProcessingParameterIndex=0;
 80077e0:	2200      	movs	r2, #0
 80077e2:	4bcd      	ldr	r3, [pc, #820]	; (8007b18 <ExecuteMonitor+0x37c>)
		            	    perviousCharacter= INTIAL_VALUE;
 80077e4:	2703      	movs	r7, #3
		                    nonProcessingParameterIndex=0;
 80077e6:	701a      	strb	r2, [r3, #0]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80077e8:	2320      	movs	r3, #32
 80077ea:	4698      	mov	r8, r3
 80077ec:	e004      	b.n	80077f8 <ExecuteMonitor+0x5c>
 80077ee:	2a01      	cmp	r2, #1
 80077f0:	d04c      	beq.n	800788c <ExecuteMonitor+0xf0>
 80077f2:	2a02      	cmp	r2, #2
 80077f4:	d100      	bne.n	80077f8 <ExecuteMonitor+0x5c>
 80077f6:	e0a8      	b.n	800794a <ExecuteMonitor+0x1ae>
		            	    perviousCharacter= INTIAL_VALUE;
 80077f8:	464b      	mov	r3, r9
		            	    Delay_us(100);
 80077fa:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 80077fc:	701f      	strb	r7, [r3, #0]
		            	    Delay_us(100);
 80077fe:	f006 f83b 	bl	800d878 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8007802:	465b      	mov	r3, fp
 8007804:	464a      	mov	r2, r9
 8007806:	795b      	ldrb	r3, [r3, #5]
 8007808:	7812      	ldrb	r2, [r2, #0]
 800780a:	429a      	cmp	r2, r3
 800780c:	d00b      	beq.n	8007826 <ExecuteMonitor+0x8a>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 800780e:	4ac2      	ldr	r2, [pc, #776]	; (8007b18 <ExecuteMonitor+0x37c>)
 8007810:	48c1      	ldr	r0, [pc, #772]	; (8007b18 <ExecuteMonitor+0x37c>)
 8007812:	7812      	ldrb	r2, [r2, #0]
 8007814:	1c51      	adds	r1, r2, #1
 8007816:	7001      	strb	r1, [r0, #0]
 8007818:	2124      	movs	r1, #36	; 0x24
 800781a:	4452      	add	r2, sl
 800781c:	5453      	strb	r3, [r2, r1]
								perviousCharacter=currentCharacter;
 800781e:	464a      	mov	r2, r9
 8007820:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 8007822:	465a      	mov	r2, fp
 8007824:	7157      	strb	r7, [r2, #5]
 8007826:	465a      	mov	r2, fp
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007828:	4641      	mov	r1, r8
 800782a:	7912      	ldrb	r2, [r2, #4]
 800782c:	438b      	bics	r3, r1
 800782e:	d1de      	bne.n	80077ee <ExecuteMonitor+0x52>
                   if(flag == NonActive)
 8007830:	2a00      	cmp	r2, #0
 8007832:	d129      	bne.n	8007888 <ExecuteMonitor+0xec>
                	   nonProcessingParameterIndex=0;
 8007834:	4bb8      	ldr	r3, [pc, #736]	; (8007b18 <ExecuteMonitor+0x37c>)
 8007836:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8007838:	4653      	mov	r3, sl
 800783a:	3224      	adds	r2, #36	; 0x24
 800783c:	5c9b      	ldrb	r3, [r3, r2]
 800783e:	2b5b      	cmp	r3, #91	; 0x5b
 8007840:	d100      	bne.n	8007844 <ExecuteMonitor+0xa8>
 8007842:	e0eb      	b.n	8007a1c <ExecuteMonitor+0x280>
 		            else if(FirstCharacterInParameter == '#')
 8007844:	2b23      	cmp	r3, #35	; 0x23
 8007846:	d100      	bne.n	800784a <ExecuteMonitor+0xae>
 8007848:	e141      	b.n	8007ace <ExecuteMonitor+0x332>
 		            else if(FirstCharacterInParameter == '=')
 800784a:	2b3d      	cmp	r3, #61	; 0x3d
 800784c:	d100      	bne.n	8007850 <ExecuteMonitor+0xb4>
 800784e:	e175      	b.n	8007b3c <ExecuteMonitor+0x3a0>
 8007850:	2338      	movs	r3, #56	; 0x38
 8007852:	4652      	mov	r2, sl
 8007854:	5cd7      	ldrb	r7, [r2, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007856:	4650      	mov	r0, sl
               	   desiredArray=ParameterLocationIn2dArray;
 8007858:	4bb0      	ldr	r3, [pc, #704]	; (8007b1c <ExecuteMonitor+0x380>)
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800785a:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 800785c:	701f      	strb	r7, [r3, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800785e:	304c      	adds	r0, #76	; 0x4c
 8007860:	1bcf      	subs	r7, r1, r7
 8007862:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007864:	4657      	mov	r7, sl
 8007866:	3738      	adds	r7, #56	; 0x38
 8007868:	0039      	movs	r1, r7
 800786a:	220f      	movs	r2, #15
 800786c:	f00c f89b 	bl	80139a6 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 8007870:	4650      	mov	r0, sl
 8007872:	2214      	movs	r2, #20
 8007874:	2100      	movs	r1, #0
 8007876:	3024      	adds	r0, #36	; 0x24
 8007878:	f00c f89e 	bl	80139b8 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 800787c:	2214      	movs	r2, #20
 800787e:	2100      	movs	r1, #0
 8007880:	0038      	movs	r0, r7
 8007882:	f00c f899 	bl	80139b8 <memset>
 8007886:	e7ab      	b.n	80077e0 <ExecuteMonitor+0x44>
                   if(flag == RUN_FOR_ONCE)
 8007888:	2a01      	cmp	r2, #1
 800788a:	d15b      	bne.n	8007944 <ExecuteMonitor+0x1a8>
                	twoDMatrixIndex=1;
 800788c:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 800788e:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 8007890:	702b      	strb	r3, [r5, #0]
		          	counter=0;
 8007892:	4ba3      	ldr	r3, [pc, #652]	; (8007b20 <ExecuteMonitor+0x384>)
                	finalMatrixIndex=0;
 8007894:	7032      	strb	r2, [r6, #0]
		          	counter=0;
 8007896:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 8007898:	4ba2      	ldr	r3, [pc, #648]	; (8007b24 <ExecuteMonitor+0x388>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d02e      	beq.n	80078fe <ExecuteMonitor+0x162>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80078a0:	224c      	movs	r2, #76	; 0x4c
		           while(counter != numCommandParameters)
 80078a2:	2100      	movs	r1, #0
 80078a4:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80078a6:	4690      	mov	r8, r2
		           while(counter != numCommandParameters)
 80078a8:	2201      	movs	r2, #1
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80078aa:	0010      	movs	r0, r2
 80078ac:	2720      	movs	r7, #32
 80078ae:	001a      	movs	r2, r3
 80078b0:	0003      	movs	r3, r0
 80078b2:	e002      	b.n	80078ba <ExecuteMonitor+0x11e>
 80078b4:	4b9a      	ldr	r3, [pc, #616]	; (8007b20 <ExecuteMonitor+0x384>)
 80078b6:	781a      	ldrb	r2, [r3, #0]
 80078b8:	782b      	ldrb	r3, [r5, #0]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80078ba:	1c58      	adds	r0, r3, #1
 80078bc:	7028      	strb	r0, [r5, #0]
 80078be:	1c48      	adds	r0, r1, #1
 80078c0:	7030      	strb	r0, [r6, #0]
 80078c2:	0110      	lsls	r0, r2, #4
 80078c4:	1a82      	subs	r2, r0, r2
 80078c6:	4452      	add	r2, sl
 80078c8:	18d2      	adds	r2, r2, r3
 80078ca:	4643      	mov	r3, r8
 80078cc:	5cd3      	ldrb	r3, [r2, r3]
 80078ce:	2244      	movs	r2, #68	; 0x44
 80078d0:	1861      	adds	r1, r4, r1
		            	Delay_ms(1);
 80078d2:	2001      	movs	r0, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80078d4:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 80078d6:	f008 f9bb 	bl	800fc50 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80078da:	7831      	ldrb	r1, [r6, #0]
 80078dc:	1863      	adds	r3, r4, r1
 80078de:	3343      	adds	r3, #67	; 0x43
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	43bb      	bics	r3, r7
 80078e4:	d1e6      	bne.n	80078b4 <ExecuteMonitor+0x118>
		                   counter++;
 80078e6:	4b8e      	ldr	r3, [pc, #568]	; (8007b20 <ExecuteMonitor+0x384>)
 80078e8:	4a8d      	ldr	r2, [pc, #564]	; (8007b20 <ExecuteMonitor+0x384>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	3301      	adds	r3, #1
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 80078f2:	2201      	movs	r2, #1
 80078f4:	702a      	strb	r2, [r5, #0]
		           while(counter != numCommandParameters)
 80078f6:	4a8b      	ldr	r2, [pc, #556]	; (8007b24 <ExecuteMonitor+0x388>)
 80078f8:	7812      	ldrb	r2, [r2, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d1d4      	bne.n	80078a8 <ExecuteMonitor+0x10c>
		          		   flag=0;
 80078fe:	2300      	movs	r3, #0
 8007900:	465a      	mov	r2, fp
 8007902:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 8007904:	4a86      	ldr	r2, [pc, #536]	; (8007b20 <ExecuteMonitor+0x384>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007906:	2744      	movs	r7, #68	; 0x44
		          		   counter=0;
 8007908:	7013      	strb	r3, [r2, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800790a:	4a87      	ldr	r2, [pc, #540]	; (8007b28 <ExecuteMonitor+0x38c>)
 800790c:	7013      	strb	r3, [r2, #0]
 800790e:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007910:	4a86      	ldr	r2, [pc, #536]	; (8007b2c <ExecuteMonitor+0x390>)
		          			Delay_ms(1);
 8007912:	2001      	movs	r0, #1
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007914:	18d2      	adds	r2, r2, r3
 8007916:	18e3      	adds	r3, r4, r3
 8007918:	5ddb      	ldrb	r3, [r3, r7]
 800791a:	3281      	adds	r2, #129	; 0x81
 800791c:	32ff      	adds	r2, #255	; 0xff
 800791e:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 8007920:	f008 f996 	bl	800fc50 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007924:	4b80      	ldr	r3, [pc, #512]	; (8007b28 <ExecuteMonitor+0x38c>)
 8007926:	4a80      	ldr	r2, [pc, #512]	; (8007b28 <ExecuteMonitor+0x38c>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	3301      	adds	r3, #1
 800792c:	b2db      	uxtb	r3, r3
 800792e:	7013      	strb	r3, [r2, #0]
 8007930:	2b3f      	cmp	r3, #63	; 0x3f
 8007932:	d9ed      	bls.n	8007910 <ExecuteMonitor+0x174>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007934:	0020      	movs	r0, r4
 8007936:	2240      	movs	r2, #64	; 0x40
 8007938:	3044      	adds	r0, #68	; 0x44
 800793a:	2100      	movs	r1, #0
 800793c:	f00c f83c 	bl	80139b8 <memset>
 8007940:	465b      	mov	r3, fp
 8007942:	791a      	ldrb	r2, [r3, #4]
                   if(flag == CONTINUOUS_RUN)
 8007944:	2a02      	cmp	r2, #2
 8007946:	d000      	beq.n	800794a <ExecuteMonitor+0x1ae>
 8007948:	e74a      	b.n	80077e0 <ExecuteMonitor+0x44>
                	twoDMatrixIndex=1;
 800794a:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 800794c:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 800794e:	702b      	strb	r3, [r5, #0]
   		          	counter=0;
 8007950:	4b73      	ldr	r3, [pc, #460]	; (8007b20 <ExecuteMonitor+0x384>)
                	finalMatrixIndex=0;
 8007952:	7032      	strb	r2, [r6, #0]
   		          	counter=0;
 8007954:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 8007956:	4b73      	ldr	r3, [pc, #460]	; (8007b24 <ExecuteMonitor+0x388>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d033      	beq.n	80079c6 <ExecuteMonitor+0x22a>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800795e:	224c      	movs	r2, #76	; 0x4c
   		           while(counter != numCommandParameters)
 8007960:	2100      	movs	r1, #0
 8007962:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007964:	4690      	mov	r8, r2
   		           while(counter != numCommandParameters)
 8007966:	2201      	movs	r2, #1
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007968:	0010      	movs	r0, r2
 800796a:	2720      	movs	r7, #32
 800796c:	001a      	movs	r2, r3
 800796e:	0003      	movs	r3, r0
 8007970:	e001      	b.n	8007976 <ExecuteMonitor+0x1da>
 8007972:	781a      	ldrb	r2, [r3, #0]
 8007974:	782b      	ldrb	r3, [r5, #0]
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007976:	1c58      	adds	r0, r3, #1
 8007978:	7028      	strb	r0, [r5, #0]
 800797a:	1c48      	adds	r0, r1, #1
 800797c:	7030      	strb	r0, [r6, #0]
 800797e:	0110      	lsls	r0, r2, #4
 8007980:	1a82      	subs	r2, r0, r2
 8007982:	4452      	add	r2, sl
 8007984:	18d2      	adds	r2, r2, r3
 8007986:	4643      	mov	r3, r8
 8007988:	5cd3      	ldrb	r3, [r2, r3]
 800798a:	2244      	movs	r2, #68	; 0x44
 800798c:	1861      	adds	r1, r4, r1
   		            	Delay_ms(1);
 800798e:	2001      	movs	r0, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007990:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 8007992:	f008 f95d 	bl	800fc50 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007996:	7831      	ldrb	r1, [r6, #0]
 8007998:	1863      	adds	r3, r4, r1
 800799a:	3343      	adds	r3, #67	; 0x43
 800799c:	781a      	ldrb	r2, [r3, #0]
 800799e:	4b60      	ldr	r3, [pc, #384]	; (8007b20 <ExecuteMonitor+0x384>)
 80079a0:	43ba      	bics	r2, r7
 80079a2:	d1e6      	bne.n	8007972 <ExecuteMonitor+0x1d6>
   		             counter++;
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	485e      	ldr	r0, [pc, #376]	; (8007b20 <ExecuteMonitor+0x384>)
 80079a8:	3301      	adds	r3, #1
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	7003      	strb	r3, [r0, #0]
   		             twoDMatrixIndex=1;
 80079ae:	2001      	movs	r0, #1
 80079b0:	7028      	strb	r0, [r5, #0]
   		           while(counter != numCommandParameters)
 80079b2:	485c      	ldr	r0, [pc, #368]	; (8007b24 <ExecuteMonitor+0x388>)
 80079b4:	7800      	ldrb	r0, [r0, #0]
 80079b6:	4298      	cmp	r0, r3
 80079b8:	d1d5      	bne.n	8007966 <ExecuteMonitor+0x1ca>
 80079ba:	465b      	mov	r3, fp
		            counter=0;
 80079bc:	4958      	ldr	r1, [pc, #352]	; (8007b20 <ExecuteMonitor+0x384>)
 80079be:	791b      	ldrb	r3, [r3, #4]
 80079c0:	700a      	strb	r2, [r1, #0]
                  while(flag != NonActive)
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01e      	beq.n	8007a04 <ExecuteMonitor+0x268>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80079c6:	2744      	movs	r7, #68	; 0x44
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80079c8:	2200      	movs	r2, #0
 80079ca:	4b57      	ldr	r3, [pc, #348]	; (8007b28 <ExecuteMonitor+0x38c>)
 80079cc:	701a      	strb	r2, [r3, #0]
 80079ce:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80079d0:	4a56      	ldr	r2, [pc, #344]	; (8007b2c <ExecuteMonitor+0x390>)
		          			Delay_us(200);
 80079d2:	20c8      	movs	r0, #200	; 0xc8
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80079d4:	18d2      	adds	r2, r2, r3
 80079d6:	18e3      	adds	r3, r4, r3
 80079d8:	5ddb      	ldrb	r3, [r3, r7]
 80079da:	3281      	adds	r2, #129	; 0x81
 80079dc:	32ff      	adds	r2, #255	; 0xff
 80079de:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 80079e0:	f005 ff4a 	bl	800d878 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80079e4:	4b50      	ldr	r3, [pc, #320]	; (8007b28 <ExecuteMonitor+0x38c>)
 80079e6:	4a50      	ldr	r2, [pc, #320]	; (8007b28 <ExecuteMonitor+0x38c>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	3301      	adds	r3, #1
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	7013      	strb	r3, [r2, #0]
 80079f0:	2b3f      	cmp	r3, #63	; 0x3f
 80079f2:	d9ed      	bls.n	80079d0 <ExecuteMonitor+0x234>
  	          		 Delay_ms(Monitor_time);
 80079f4:	465b      	mov	r3, fp
 80079f6:	6818      	ldr	r0, [r3, #0]
 80079f8:	f008 f92a 	bl	800fc50 <HAL_Delay>
                  while(flag != NonActive)
 80079fc:	465b      	mov	r3, fp
 80079fe:	791b      	ldrb	r3, [r3, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e1      	bne.n	80079c8 <ExecuteMonitor+0x22c>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007a04:	0020      	movs	r0, r4
 8007a06:	2240      	movs	r2, #64	; 0x40
 8007a08:	2100      	movs	r1, #0
 8007a0a:	3044      	adds	r0, #68	; 0x44
 8007a0c:	f00b ffd4 	bl	80139b8 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 8007a10:	22c0      	movs	r2, #192	; 0xc0
 8007a12:	2100      	movs	r1, #0
 8007a14:	4846      	ldr	r0, [pc, #280]	; (8007b30 <ExecuteMonitor+0x394>)
 8007a16:	f00b ffcf 	bl	80139b8 <memset>
 8007a1a:	e6e1      	b.n	80077e0 <ExecuteMonitor+0x44>
 		            	nonProcessingParameterIndex++;
 8007a1c:	4a3e      	ldr	r2, [pc, #248]	; (8007b18 <ExecuteMonitor+0x37c>)
 8007a1e:	3b5a      	subs	r3, #90	; 0x5a
 8007a20:	7013      	strb	r3, [r2, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007a22:	4b44      	ldr	r3, [pc, #272]	; (8007b34 <ExecuteMonitor+0x398>)
 8007a24:	210a      	movs	r1, #10
 8007a26:	781f      	ldrb	r7, [r3, #0]
 8007a28:	4653      	mov	r3, sl
 8007a2a:	9701      	str	r7, [sp, #4]
 8007a2c:	3324      	adds	r3, #36	; 0x24
 8007a2e:	7858      	ldrb	r0, [r3, #1]
 8007a30:	f7f8 fc14 	bl	800025c <__aeabi_uidivmod>
 8007a34:	2303      	movs	r3, #3
 8007a36:	b2c9      	uxtb	r1, r1
 8007a38:	4698      	mov	r8, r3
 8007a3a:	42b9      	cmp	r1, r7
 8007a3c:	d101      	bne.n	8007a42 <ExecuteMonitor+0x2a6>
 8007a3e:	e0a1      	b.n	8007b84 <ExecuteMonitor+0x3e8>
 8007a40:	46b8      	mov	r8, r7
 8007a42:	4643      	mov	r3, r8
 8007a44:	1c9f      	adds	r7, r3, #2
 8007a46:	4653      	mov	r3, sl
 8007a48:	2224      	movs	r2, #36	; 0x24
 8007a4a:	4443      	add	r3, r8
 8007a4c:	5c98      	ldrb	r0, [r3, r2]
 8007a4e:	210a      	movs	r1, #10
 8007a50:	f7f8 fc04 	bl	800025c <__aeabi_uidivmod>
 8007a54:	9b01      	ldr	r3, [sp, #4]
 8007a56:	b2c9      	uxtb	r1, r1
 8007a58:	b2ff      	uxtb	r7, r7
 8007a5a:	4299      	cmp	r1, r3
 8007a5c:	d1f0      	bne.n	8007a40 <ExecuteMonitor+0x2a4>
 8007a5e:	4643      	mov	r3, r8
 8007a60:	46b8      	mov	r8, r7
 8007a62:	3301      	adds	r3, #1
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	9301      	str	r3, [sp, #4]
 8007a68:	9702      	str	r7, [sp, #8]
 		            			nonProcessingParameterIndex++;
 8007a6a:	4a2b      	ldr	r2, [pc, #172]	; (8007b18 <ExecuteMonitor+0x37c>)
 8007a6c:	9901      	ldr	r1, [sp, #4]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007a6e:	4453      	add	r3, sl
 		            			nonProcessingParameterIndex++;
 8007a70:	7011      	strb	r1, [r2, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007a72:	2224      	movs	r2, #36	; 0x24
 8007a74:	5c9b      	ldrb	r3, [r3, r2]
 8007a76:	210a      	movs	r1, #10
 8007a78:	0018      	movs	r0, r3
 8007a7a:	9303      	str	r3, [sp, #12]
 8007a7c:	f7f8 fbee 	bl	800025c <__aeabi_uidivmod>
 8007a80:	2338      	movs	r3, #56	; 0x38
 8007a82:	4652      	mov	r2, sl
 8007a84:	b2cf      	uxtb	r7, r1
 8007a86:	54d7      	strb	r7, [r2, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007a88:	9b03      	ldr	r3, [sp, #12]
 8007a8a:	2b5d      	cmp	r3, #93	; 0x5d
 8007a8c:	d00d      	beq.n	8007aaa <ExecuteMonitor+0x30e>
 8007a8e:	9b01      	ldr	r3, [sp, #4]
 8007a90:	3301      	adds	r3, #1
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	e000      	b.n	8007a98 <ExecuteMonitor+0x2fc>
 8007a96:	0013      	movs	r3, r2
 8007a98:	2124      	movs	r1, #36	; 0x24
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	4453      	add	r3, sl
 8007a9e:	5c5b      	ldrb	r3, [r3, r1]
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	2b5d      	cmp	r3, #93	; 0x5d
 8007aa4:	d1f7      	bne.n	8007a96 <ExecuteMonitor+0x2fa>
 8007aa6:	4690      	mov	r8, r2
 8007aa8:	9202      	str	r2, [sp, #8]
 		            	nonProcessingParameterIndex++;
 8007aaa:	4642      	mov	r2, r8
 8007aac:	4b1a      	ldr	r3, [pc, #104]	; (8007b18 <ExecuteMonitor+0x37c>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007aae:	4651      	mov	r1, sl
 		            	nonProcessingParameterIndex++;
 8007ab0:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	4a20      	ldr	r2, [pc, #128]	; (8007b38 <ExecuteMonitor+0x39c>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007ab6:	4650      	mov	r0, sl
 		            	processingParameterIndex=1;
 8007ab8:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007aba:	9b02      	ldr	r3, [sp, #8]
 8007abc:	2214      	movs	r2, #20
 8007abe:	469c      	mov	ip, r3
 8007ac0:	3124      	adds	r1, #36	; 0x24
 8007ac2:	1ad2      	subs	r2, r2, r3
 8007ac4:	4461      	add	r1, ip
 8007ac6:	3039      	adds	r0, #57	; 0x39
 8007ac8:	f00b ff6d 	bl	80139a6 <memcpy>
 8007acc:	e6c3      	b.n	8007856 <ExecuteMonitor+0xba>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8007ace:	4653      	mov	r3, sl
 8007ad0:	3324      	adds	r3, #36	; 0x24
 8007ad2:	7858      	ldrb	r0, [r3, #1]
 8007ad4:	210a      	movs	r1, #10
 8007ad6:	f7f8 fbc1 	bl	800025c <__aeabi_uidivmod>
 8007ada:	4652      	mov	r2, sl
 8007adc:	2338      	movs	r3, #56	; 0x38
 8007ade:	b2cf      	uxtb	r7, r1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007ae0:	4650      	mov	r0, sl
 8007ae2:	4651      	mov	r1, sl
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8007ae4:	54d7      	strb	r7, [r2, r3]
 		            	nonProcessingParameterIndex=2;
 8007ae6:	4a0c      	ldr	r2, [pc, #48]	; (8007b18 <ExecuteMonitor+0x37c>)
 8007ae8:	3b36      	subs	r3, #54	; 0x36
 8007aea:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 8007aec:	4a12      	ldr	r2, [pc, #72]	; (8007b38 <ExecuteMonitor+0x39c>)
 8007aee:	3b01      	subs	r3, #1
 8007af0:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007af2:	3126      	adds	r1, #38	; 0x26
 8007af4:	2212      	movs	r2, #18
 8007af6:	3039      	adds	r0, #57	; 0x39
 8007af8:	f00b ff55 	bl	80139a6 <memcpy>
 8007afc:	e6ab      	b.n	8007856 <ExecuteMonitor+0xba>
 8007afe:	46c0      	nop			; (mov r8, r8)
 8007b00:	20000000 	.word	0x20000000
 8007b04:	200068fc 	.word	0x200068fc
 8007b08:	20006940 	.word	0x20006940
 8007b0c:	20001cac 	.word	0x20001cac
 8007b10:	2000693d 	.word	0x2000693d
 8007b14:	20001d2c 	.word	0x20001d2c
 8007b18:	2000691d 	.word	0x2000691d
 8007b1c:	2000693f 	.word	0x2000693f
 8007b20:	2000691e 	.word	0x2000691e
 8007b24:	2000693c 	.word	0x2000693c
 8007b28:	200068fd 	.word	0x200068fd
 8007b2c:	200018e4 	.word	0x200018e4
 8007b30:	20001a64 	.word	0x20001a64
 8007b34:	2000693e 	.word	0x2000693e
 8007b38:	2000691c 	.word	0x2000691c
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007b3c:	4657      	mov	r7, sl
 8007b3e:	3724      	adds	r7, #36	; 0x24
 8007b40:	7878      	ldrb	r0, [r7, #1]
 8007b42:	210a      	movs	r1, #10
 8007b44:	f7f8 fb8a 	bl	800025c <__aeabi_uidivmod>
 8007b48:	4b11      	ldr	r3, [pc, #68]	; (8007b90 <ExecuteMonitor+0x3f4>)
 8007b4a:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007b4c:	78b8      	ldrb	r0, [r7, #2]
 8007b4e:	210a      	movs	r1, #10
 8007b50:	f7f8 fb84 	bl	800025c <__aeabi_uidivmod>
 8007b54:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <ExecuteMonitor+0x3f8>)
 8007b56:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007b58:	78f8      	ldrb	r0, [r7, #3]
 8007b5a:	210a      	movs	r1, #10
 8007b5c:	f7f8 fb7e 	bl	800025c <__aeabi_uidivmod>
 8007b60:	4652      	mov	r2, sl
 8007b62:	2338      	movs	r3, #56	; 0x38
 8007b64:	b2cf      	uxtb	r7, r1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007b66:	4650      	mov	r0, sl
 8007b68:	4651      	mov	r1, sl
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007b6a:	54d7      	strb	r7, [r2, r3]
                	    nonProcessingParameterIndex=4;
 8007b6c:	4a0a      	ldr	r2, [pc, #40]	; (8007b98 <ExecuteMonitor+0x3fc>)
 8007b6e:	3b34      	subs	r3, #52	; 0x34
 8007b70:	7013      	strb	r3, [r2, #0]
                	    processingParameterIndex=1;
 8007b72:	4a0a      	ldr	r2, [pc, #40]	; (8007b9c <ExecuteMonitor+0x400>)
 8007b74:	3b03      	subs	r3, #3
 8007b76:	7013      	strb	r3, [r2, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007b78:	3128      	adds	r1, #40	; 0x28
 8007b7a:	2210      	movs	r2, #16
 8007b7c:	3039      	adds	r0, #57	; 0x39
 8007b7e:	f00b ff12 	bl	80139a6 <memcpy>
 8007b82:	e668      	b.n	8007856 <ExecuteMonitor+0xba>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007b84:	2202      	movs	r2, #2
 8007b86:	9302      	str	r3, [sp, #8]
 8007b88:	9201      	str	r2, [sp, #4]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	e76d      	b.n	8007a6a <ExecuteMonitor+0x2ce>
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	2000693e 	.word	0x2000693e
 8007b94:	2000693c 	.word	0x2000693c
 8007b98:	2000691d 	.word	0x2000691d
 8007b9c:	2000691c 	.word	0x2000691c

08007ba0 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	4c1e      	ldr	r4, [pc, #120]	; (8007c1c <StartDefaultTask+0x7c>)
 8007ba4:	4d1e      	ldr	r5, [pc, #120]	; (8007c20 <StartDefaultTask+0x80>)
 8007ba6:	4e1f      	ldr	r6, [pc, #124]	; (8007c24 <StartDefaultTask+0x84>)
 8007ba8:	e00f      	b.n	8007bca <StartDefaultTask+0x2a>
		switch(indMode){
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d024      	beq.n	8007bf8 <StartDefaultTask+0x58>
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d02b      	beq.n	8007c0a <StartDefaultTask+0x6a>
		CheckAttachedButtons();
 8007bb2:	f005 f813 	bl	800cbdc <CheckAttachedButtons>
		ExecuteSnippet();
 8007bb6:	f7fd fd17 	bl	80055e8 <ExecuteSnippet>
		ExecuteMonitor();
 8007bba:	f7ff fdef 	bl	800779c <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 8007bbe:	782b      	ldrb	r3, [r5, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d100      	bne.n	8007bc6 <StartDefaultTask+0x26>
			delayButtonStateReset = false;
 8007bc4:	7033      	strb	r3, [r6, #0]
		taskYIELD();
 8007bc6:	f007 fef7 	bl	800f9b8 <vPortYield>
		switch(indMode){
 8007bca:	7823      	ldrb	r3, [r4, #0]
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d1ec      	bne.n	8007baa <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 8007bd0:	2180      	movs	r1, #128	; 0x80
 8007bd2:	2090      	movs	r0, #144	; 0x90
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	05c0      	lsls	r0, r0, #23
 8007bd8:	0109      	lsls	r1, r1, #4
 8007bda:	f009 fcfb 	bl	80115d4 <HAL_GPIO_WritePin>
 8007bde:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 8007be0:	f006 f98e 	bl	800df00 <osDelay>
 8007be4:	2180      	movs	r1, #128	; 0x80
 8007be6:	2090      	movs	r0, #144	; 0x90
 8007be8:	2200      	movs	r2, #0
 8007bea:	0109      	lsls	r1, r1, #4
 8007bec:	05c0      	lsls	r0, r0, #23
 8007bee:	f009 fcf1 	bl	80115d4 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	7023      	strb	r3, [r4, #0]
				break;
 8007bf6:	e7dc      	b.n	8007bb2 <StartDefaultTask+0x12>
				RTOS_IND_blink(30);
 8007bf8:	2180      	movs	r1, #128	; 0x80
 8007bfa:	2090      	movs	r0, #144	; 0x90
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	05c0      	lsls	r0, r0, #23
 8007c00:	0109      	lsls	r1, r1, #4
 8007c02:	f009 fce7 	bl	80115d4 <HAL_GPIO_WritePin>
 8007c06:	201e      	movs	r0, #30
 8007c08:	e7ea      	b.n	8007be0 <StartDefaultTask+0x40>
				RTOS_IND_blink(200);
 8007c0a:	2180      	movs	r1, #128	; 0x80
 8007c0c:	2090      	movs	r0, #144	; 0x90
 8007c0e:	2201      	movs	r2, #1
 8007c10:	05c0      	lsls	r0, r0, #23
 8007c12:	0109      	lsls	r1, r1, #4
 8007c14:	f009 fcde 	bl	80115d4 <HAL_GPIO_WritePin>
 8007c18:	20c8      	movs	r0, #200	; 0xc8
 8007c1a:	e7e1      	b.n	8007be0 <StartDefaultTask+0x40>
 8007c1c:	2000114e 	.word	0x2000114e
 8007c20:	20002477 	.word	0x20002477
 8007c24:	2000246c 	.word	0x2000246c

08007c28 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007c28:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 8007c2a:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007c2c:	6818      	ldr	r0, [r3, #0]
 8007c2e:	4904      	ldr	r1, [pc, #16]	; (8007c40 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007c30:	f7f8 fa8e 	bl	8000150 <__udivsi3>
 8007c34:	4b03      	ldr	r3, [pc, #12]	; (8007c44 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007c36:	6058      	str	r0, [r3, #4]
}
 8007c38:	bd10      	pop	{r4, pc}
 8007c3a:	46c0      	nop			; (mov r8, r8)
 8007c3c:	200000c4 	.word	0x200000c4
 8007c40:	00002710 	.word	0x00002710
 8007c44:	20001dac 	.word	0x20001dac

08007c48 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007c48:	21fa      	movs	r1, #250	; 0xfa
 8007c4a:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <ulMainGetRunTimeCounterValue+0x40>)
uint32_t ulMainGetRunTimeCounterValue(void){
 8007c4c:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	0089      	lsls	r1, r1, #2
 8007c52:	f7f8 fa7d 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c56:	4c0d      	ldr	r4, [pc, #52]	; (8007c8c <ulMainGetRunTimeCounterValue+0x44>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007c58:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c5a:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007c5c:	f007 f87c 	bl	800ed58 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007c60:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <ulMainGetRunTimeCounterValue+0x48>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	015b      	lsls	r3, r3, #5
 8007c66:	d50c      	bpl.n	8007c82 <ulMainGetRunTimeCounterValue+0x3a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c68:	6823      	ldr	r3, [r4, #0]
		ulTickCount++;
 8007c6a:	3001      	adds	r0, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c6c:	1aed      	subs	r5, r5, r3
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007c6e:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <ulMainGetRunTimeCounterValue+0x4c>)
	ulReturn =(ulTickCount * 10UL);
 8007c70:	0084      	lsls	r4, r0, #2
 8007c72:	1824      	adds	r4, r4, r0
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007c74:	6859      	ldr	r1, [r3, #4]
 8007c76:	0028      	movs	r0, r5
 8007c78:	f7f8 fa6a 	bl	8000150 <__udivsi3>
	ulReturn =(ulTickCount * 10UL);
 8007c7c:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007c7e:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007c80:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c82:	1bad      	subs	r5, r5, r6
 8007c84:	e7f3      	b.n	8007c6e <ulMainGetRunTimeCounterValue+0x26>
 8007c86:	46c0      	nop			; (mov r8, r8)
 8007c88:	200000c4 	.word	0x200000c4
 8007c8c:	e000e018 	.word	0xe000e018
 8007c90:	e000ed04 	.word	0xe000ed04
 8007c94:	20001dac 	.word	0x20001dac

08007c98 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007c98:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007c9a:	f007 fe35 	bl	800f908 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007c9e:	b2c4      	uxtb	r4, r0
 8007ca0:	0020      	movs	r0, r4
 8007ca2:	f003 f961 	bl	800af68 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007ca6:	0020      	movs	r0, r4
 8007ca8:	f003 fd8a 	bl	800b7c0 <SwitchStreamDMAToMsg>
}
 8007cac:	bd10      	pop	{r4, pc}
 8007cae:	46c0      	nop			; (mov r8, r8)

08007cb0 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cb2:	46ce      	mov	lr, r9
 8007cb4:	4647      	mov	r7, r8
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	0015      	movs	r5, r2
 8007cbc:	466a      	mov	r2, sp
 8007cbe:	73d3      	strb	r3, [r2, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007cc0:	aa0c      	add	r2, sp, #48	; 0x30
 8007cc2:	7812      	ldrb	r2, [r2, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007cc4:	000e      	movs	r6, r1
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d06b      	beq.n	8007da2 <SetupDMAStreams+0xf2>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d051      	beq.n	8007d72 <SetupDMAStreams+0xc2>
 8007cce:	2a00      	cmp	r2, #0
 8007cd0:	d04f      	beq.n	8007d72 <SetupDMAStreams+0xc2>
	if(direction == FORWARD){
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d06a      	beq.n	8007dac <SetupDMAStreams+0xfc>
	else if(direction == BACKWARD){
 8007cd6:	2801      	cmp	r0, #1
 8007cd8:	d052      	beq.n	8007d80 <SetupDMAStreams+0xd0>
		return BOS_ERR_WrongParam;
 8007cda:	2467      	movs	r4, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007cdc:	2802      	cmp	r0, #2
 8007cde:	d149      	bne.n	8007d74 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	f005 ffd7 	bl	800dc94 <GetUart>
 8007ce6:	ab0c      	add	r3, sp, #48	; 0x30
 8007ce8:	0004      	movs	r4, r0
 8007cea:	7818      	ldrb	r0, [r3, #0]
 8007cec:	f005 ffd2 	bl	800dc94 <GetUart>
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	0001      	movs	r1, r0
 8007cf4:	0020      	movs	r0, r4
 8007cf6:	f7ff fc0b 	bl	8007510 <StartDMAstream>
 8007cfa:	2817      	cmp	r0, #23
 8007cfc:	d04f      	beq.n	8007d9e <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007cfe:	21fa      	movs	r1, #250	; 0xfa
 8007d00:	0168      	lsls	r0, r5, #5
 8007d02:	1b40      	subs	r0, r0, r5
 8007d04:	0080      	lsls	r0, r0, #2
 8007d06:	1940      	adds	r0, r0, r5
 8007d08:	0089      	lsls	r1, r1, #2
 8007d0a:	00c0      	lsls	r0, r0, #3
 8007d0c:	f7f8 fa20 	bl	8000150 <__udivsi3>
 8007d10:	4b49      	ldr	r3, [pc, #292]	; (8007e38 <SetupDMAStreams+0x188>)
 8007d12:	4d4a      	ldr	r5, [pc, #296]	; (8007e3c <SetupDMAStreams+0x18c>)
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	4698      	mov	r8, r3
 8007d18:	230f      	movs	r3, #15
 8007d1a:	0001      	movs	r1, r0
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	446b      	add	r3, sp
 8007d20:	0007      	movs	r7, r0
 8007d22:	0028      	movs	r0, r5
 8007d24:	f007 fc94 	bl	800f650 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007d28:	466b      	mov	r3, sp
 8007d2a:	7bdb      	ldrb	r3, [r3, #15]
 8007d2c:	4c44      	ldr	r4, [pc, #272]	; (8007e40 <SetupDMAStreams+0x190>)
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	511e      	str	r6, [r3, r4]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007d34:	ab0c      	add	r3, sp, #48	; 0x30
 8007d36:	7818      	ldrb	r0, [r3, #0]
 8007d38:	f005 ffac 	bl	800dc94 <GetUart>
 8007d3c:	466b      	mov	r3, sp
 8007d3e:	4681      	mov	r9, r0
 8007d40:	7bd8      	ldrb	r0, [r3, #15]
 8007d42:	f005 ffa7 	bl	800dc94 <GetUart>
 8007d46:	2201      	movs	r2, #1
 8007d48:	0001      	movs	r1, r0
 8007d4a:	4648      	mov	r0, r9
 8007d4c:	f7ff fbe0 	bl	8007510 <StartDMAstream>
 8007d50:	2817      	cmp	r0, #23
 8007d52:	d024      	beq.n	8007d9e <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007d54:	4643      	mov	r3, r8
 8007d56:	0028      	movs	r0, r5
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	ab0c      	add	r3, sp, #48	; 0x30
 8007d5e:	0039      	movs	r1, r7
 8007d60:	f007 fc76 	bl	800f650 <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 8007d64:	ab0c      	add	r3, sp, #48	; 0x30
 8007d66:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007d68:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	511e      	str	r6, [r3, r4]
 8007d70:	e044      	b.n	8007dfc <SetupDMAStreams+0x14c>
		return BOS_ERR_WrongParam;
 8007d72:	2467      	movs	r4, #103	; 0x67
}
 8007d74:	0020      	movs	r0, r4
 8007d76:	b005      	add	sp, #20
 8007d78:	bc0c      	pop	{r2, r3}
 8007d7a:	4690      	mov	r8, r2
 8007d7c:	4699      	mov	r9, r3
 8007d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007d80:	0010      	movs	r0, r2
 8007d82:	f005 ff87 	bl	800dc94 <GetUart>
 8007d86:	466b      	mov	r3, sp
 8007d88:	0004      	movs	r4, r0
 8007d8a:	7bd8      	ldrb	r0, [r3, #15]
 8007d8c:	f005 ff82 	bl	800dc94 <GetUart>
 8007d90:	2201      	movs	r2, #1
 8007d92:	0001      	movs	r1, r0
 8007d94:	0020      	movs	r0, r4
 8007d96:	f7ff fbbb 	bl	8007510 <StartDMAstream>
 8007d9a:	2817      	cmp	r0, #23
 8007d9c:	d13d      	bne.n	8007e1a <SetupDMAStreams+0x16a>
			return BOS_ERR_PORT_BUSY;
 8007d9e:	2417      	movs	r4, #23
 8007da0:	e7e8      	b.n	8007d74 <SetupDMAStreams+0xc4>
		portStatus[src] =STREAM;
 8007da2:	2102      	movs	r1, #2
 8007da4:	4a27      	ldr	r2, [pc, #156]	; (8007e44 <SetupDMAStreams+0x194>)
		return BOS_ERR_WrongParam;
 8007da6:	2467      	movs	r4, #103	; 0x67
		portStatus[src] =STREAM;
 8007da8:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007daa:	e7e3      	b.n	8007d74 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007dac:	0018      	movs	r0, r3
 8007dae:	f005 ff71 	bl	800dc94 <GetUart>
 8007db2:	ab0c      	add	r3, sp, #48	; 0x30
 8007db4:	0004      	movs	r4, r0
 8007db6:	7818      	ldrb	r0, [r3, #0]
 8007db8:	f005 ff6c 	bl	800dc94 <GetUart>
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	0001      	movs	r1, r0
 8007dc0:	0020      	movs	r0, r4
 8007dc2:	f7ff fba5 	bl	8007510 <StartDMAstream>
 8007dc6:	2817      	cmp	r0, #23
 8007dc8:	d0e9      	beq.n	8007d9e <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007dca:	21fa      	movs	r1, #250	; 0xfa
 8007dcc:	0168      	lsls	r0, r5, #5
 8007dce:	1b40      	subs	r0, r0, r5
 8007dd0:	0080      	lsls	r0, r0, #2
 8007dd2:	1940      	adds	r0, r0, r5
 8007dd4:	0089      	lsls	r1, r1, #2
 8007dd6:	00c0      	lsls	r0, r0, #3
 8007dd8:	f7f8 f9ba 	bl	8000150 <__udivsi3>
 8007ddc:	4b16      	ldr	r3, [pc, #88]	; (8007e38 <SetupDMAStreams+0x188>)
 8007dde:	0001      	movs	r1, r0
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	230f      	movs	r3, #15
 8007de4:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007de6:	2200      	movs	r2, #0
 8007de8:	4814      	ldr	r0, [pc, #80]	; (8007e3c <SetupDMAStreams+0x18c>)
 8007dea:	f007 fc31 	bl	800f650 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007dee:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007df0:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 8007df2:	7bdb      	ldrb	r3, [r3, #15]
 8007df4:	4a12      	ldr	r2, [pc, #72]	; (8007e40 <SetupDMAStreams+0x190>)
 8007df6:	3b01      	subs	r3, #1
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8007dfc:	2400      	movs	r4, #0
	if(xTimerStream != NULL)
 8007dfe:	2d00      	cmp	r5, #0
 8007e00:	d0b8      	beq.n	8007d74 <SetupDMAStreams+0xc4>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007e02:	f006 ffa3 	bl	800ed4c <xTaskGetTickCount>
 8007e06:	2301      	movs	r3, #1
 8007e08:	425b      	negs	r3, r3
 8007e0a:	0002      	movs	r2, r0
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	2101      	movs	r1, #1
 8007e10:	2300      	movs	r3, #0
 8007e12:	0028      	movs	r0, r5
 8007e14:	f007 fc3c 	bl	800f690 <xTimerGenericCommand>
 8007e18:	e7ac      	b.n	8007d74 <SetupDMAStreams+0xc4>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007e1a:	21fa      	movs	r1, #250	; 0xfa
 8007e1c:	0168      	lsls	r0, r5, #5
 8007e1e:	1b40      	subs	r0, r0, r5
 8007e20:	0080      	lsls	r0, r0, #2
 8007e22:	1940      	adds	r0, r0, r5
 8007e24:	0089      	lsls	r1, r1, #2
 8007e26:	00c0      	lsls	r0, r0, #3
 8007e28:	f7f8 f992 	bl	8000150 <__udivsi3>
 8007e2c:	4b02      	ldr	r3, [pc, #8]	; (8007e38 <SetupDMAStreams+0x188>)
 8007e2e:	0001      	movs	r1, r0
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	ab0c      	add	r3, sp, #48	; 0x30
 8007e34:	e7d7      	b.n	8007de6 <SetupDMAStreams+0x136>
 8007e36:	46c0      	nop			; (mov r8, r8)
 8007e38:	08007c99 	.word	0x08007c99
 8007e3c:	0801af8c 	.word	0x0801af8c
 8007e40:	20001888 	.word	0x20001888
 8007e44:	20000c3c 	.word	0x20000c3c

08007e48 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007e48:	b510      	push	{r4, lr}
	switch(port){
 8007e4a:	2805      	cmp	r0, #5
 8007e4c:	d80a      	bhi.n	8007e64 <NotifyMessagingTask+0x1c>
 8007e4e:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <NotifyMessagingTask+0x30>)
 8007e50:	0080      	lsls	r0, r0, #2
 8007e52:	581b      	ldr	r3, [r3, r0]
 8007e54:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P5
		case P5:
			xTaskNotifyGive(P5MsgTaskHandle)
 8007e56:	4b09      	ldr	r3, [pc, #36]	; (8007e7c <NotifyMessagingTask+0x34>)
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	2100      	movs	r1, #0
 8007e60:	f007 fb46 	bl	800f4f0 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007e64:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007e66:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <NotifyMessagingTask+0x38>)
 8007e68:	e7f6      	b.n	8007e58 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007e6a:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <NotifyMessagingTask+0x3c>)
 8007e6c:	e7f4      	b.n	8007e58 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007e6e:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <NotifyMessagingTask+0x40>)
 8007e70:	e7f2      	b.n	8007e58 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007e72:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <NotifyMessagingTask+0x44>)
 8007e74:	e7f0      	b.n	8007e58 <NotifyMessagingTask+0x10>
 8007e76:	46c0      	nop			; (mov r8, r8)
 8007e78:	08018550 	.word	0x08018550
 8007e7c:	20001ccc 	.word	0x20001ccc
 8007e80:	20001cbc 	.word	0x20001cbc
 8007e84:	20001cc0 	.word	0x20001cc0
 8007e88:	20001cc4 	.word	0x20001cc4
 8007e8c:	20001cc8 	.word	0x20001cc8

08007e90 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	ac06      	add	r4, sp, #24
 8007e96:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007e98:	0004      	movs	r4, r0
 8007e9a:	4314      	orrs	r4, r2
 8007e9c:	d011      	beq.n	8007ec2 <SendMessageFromPort+0x32>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d10b      	bne.n	8007eba <SendMessageFromPort+0x2a>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007ea2:	1c96      	adds	r6, r2, #2
 8007ea4:	b2f6      	uxtb	r6, r6
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 8007ea6:	2467      	movs	r4, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007ea8:	2e01      	cmp	r6, #1
 8007eaa:	d803      	bhi.n	8007eb4 <SendMessageFromPort+0x24>
 8007eac:	9500      	str	r5, [sp, #0]
 8007eae:	f000 f80b 	bl	8007ec8 <SendMessageFromPort.part.0>
 8007eb2:	0004      	movs	r4, r0
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 8007eb4:	0020      	movs	r0, r4
 8007eb6:	b002      	add	sp, #8
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007eba:	2900      	cmp	r1, #0
 8007ebc:	d0f6      	beq.n	8007eac <SendMessageFromPort+0x1c>
 8007ebe:	2a00      	cmp	r2, #0
 8007ec0:	d1f4      	bne.n	8007eac <SendMessageFromPort+0x1c>
		return BOS_ERR_WrongParam;
 8007ec2:	2467      	movs	r4, #103	; 0x67
 8007ec4:	e7f6      	b.n	8007eb4 <SendMessageFromPort+0x24>
 8007ec6:	46c0      	nop			; (mov r8, r8)

08007ec8 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eca:	46de      	mov	lr, fp
 8007ecc:	464e      	mov	r6, r9
 8007ece:	4645      	mov	r5, r8
 8007ed0:	4657      	mov	r7, sl
 8007ed2:	b5e0      	push	{r5, r6, r7, lr}
 8007ed4:	b087      	sub	sp, #28
 8007ed6:	0005      	movs	r5, r0
 8007ed8:	9004      	str	r0, [sp, #16]
 8007eda:	469b      	mov	fp, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 8007edc:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007ede:	ab10      	add	r3, sp, #64	; 0x40
 8007ee0:	4689      	mov	r9, r1
 8007ee2:	4690      	mov	r8, r2
 8007ee4:	881e      	ldrh	r6, [r3, #0]
	TaskPriority =uxTaskPriorityGet( NULL);
 8007ee6:	f006 fe9b 	bl	800ec20 <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007eea:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 8007eec:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007eee:	2000      	movs	r0, #0
 8007ef0:	f006 fea6 	bl	800ec40 <vTaskPrioritySet>
	message[0] ='H';
 8007ef4:	2348      	movs	r3, #72	; 0x48
 8007ef6:	4cd2      	ldr	r4, [pc, #840]	; (8008240 <SendMessageFromPort.part.0+0x378>)
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007ef8:	464a      	mov	r2, r9
	message[0] ='H';
 8007efa:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 8007efc:	3312      	adds	r3, #18
 8007efe:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007f00:	002b      	movs	r3, r5
 8007f02:	4313      	orrs	r3, r2
 8007f04:	d000      	beq.n	8007f08 <SendMessageFromPort.part.0+0x40>
 8007f06:	e094      	b.n	8008032 <SendMessageFromPort.part.0+0x16a>
 8007f08:	4643      	mov	r3, r8
 8007f0a:	1c9f      	adds	r7, r3, #2
 8007f0c:	b2ff      	uxtb	r7, r7
 8007f0e:	2f01      	cmp	r7, #1
 8007f10:	d800      	bhi.n	8007f14 <SendMessageFromPort.part.0+0x4c>
 8007f12:	e095      	b.n	8008040 <SendMessageFromPort.part.0+0x178>
 8007f14:	465b      	mov	r3, fp
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d100      	bne.n	8007f1c <SendMessageFromPort.part.0+0x54>
 8007f1a:	e091      	b.n	8008040 <SendMessageFromPort.part.0+0x178>
			src =myID;
 8007f1c:	4bc9      	ldr	r3, [pc, #804]	; (8008244 <SendMessageFromPort.part.0+0x37c>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	4699      	mov	r9, r3
		message[2] =length;
 8007f22:	2300      	movs	r3, #0
 8007f24:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 8007f26:	4643      	mov	r3, r8
 8007f28:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 8007f2a:	464b      	mov	r3, r9
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007f2c:	4ac6      	ldr	r2, [pc, #792]	; (8008248 <SendMessageFromPort.part.0+0x380>)
		message[4] =src;
 8007f2e:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007f30:	7913      	ldrb	r3, [r2, #4]
 8007f32:	7851      	ldrb	r1, [r2, #1]
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	7812      	ldrb	r2, [r2, #0]
 8007f38:	0089      	lsls	r1, r1, #2
 8007f3a:	430b      	orrs	r3, r1
 8007f3c:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8007f3e:	22ff      	movs	r2, #255	; 0xff
 8007f40:	455a      	cmp	r2, fp
 8007f42:	4192      	sbcs	r2, r2
 8007f44:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007f46:	0052      	lsls	r2, r2, #1
 8007f48:	4313      	orrs	r3, r2
		message[6 + shift] =(uint8_t )code;
 8007f4a:	465a      	mov	r2, fp
 8007f4c:	71a2      	strb	r2, [r4, #6]
		if(extendCode == true){
 8007f4e:	2200      	movs	r2, #0
 8007f50:	4692      	mov	sl, r2
 8007f52:	465a      	mov	r2, fp
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	7163      	strb	r3, [r4, #5]
		if(extendCode == true){
 8007f58:	2aff      	cmp	r2, #255	; 0xff
 8007f5a:	d903      	bls.n	8007f64 <SendMessageFromPort.part.0+0x9c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007f5c:	0a12      	lsrs	r2, r2, #8
 8007f5e:	71e2      	strb	r2, [r4, #7]
			++shift;
 8007f60:	2201      	movs	r2, #1
 8007f62:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007f64:	2e2e      	cmp	r6, #46	; 0x2e
 8007f66:	d800      	bhi.n	8007f6a <SendMessageFromPort.part.0+0xa2>
 8007f68:	e157      	b.n	800821a <SendMessageFromPort.part.0+0x352>
			message[5] |=0x80;
 8007f6a:	2280      	movs	r2, #128	; 0x80
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007f6c:	272e      	movs	r7, #46	; 0x2e
			message[5] |=0x80;
 8007f6e:	4252      	negs	r2, r2
			totalNumberOfParams =numberOfParams;
 8007f70:	4db6      	ldr	r5, [pc, #728]	; (800824c <SendMessageFromPort.part.0+0x384>)
			message[5] |=0x80;
 8007f72:	4313      	orrs	r3, r2
 8007f74:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 8007f76:	806e      	strh	r6, [r5, #2]
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007f78:	2e2d      	cmp	r6, #45	; 0x2d
 8007f7a:	d900      	bls.n	8007f7e <SendMessageFromPort.part.0+0xb6>
 8007f7c:	e136      	b.n	80081ec <SendMessageFromPort.part.0+0x324>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007f7e:	237f      	movs	r3, #127	; 0x7f
 8007f80:	7962      	ldrb	r2, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007f82:	8829      	ldrh	r1, [r5, #0]
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007f84:	4013      	ands	r3, r2
 8007f86:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007f88:	4653      	mov	r3, sl
 8007f8a:	1dd8      	adds	r0, r3, #7
 8007f8c:	4bb0      	ldr	r3, [pc, #704]	; (8008250 <SendMessageFromPort.part.0+0x388>)
 8007f8e:	1820      	adds	r0, r4, r0
 8007f90:	18c9      	adds	r1, r1, r3
 8007f92:	0032      	movs	r2, r6
 8007f94:	f00b fd07 	bl	80139a6 <memcpy>
					ptrShift =0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 8007f9c:	806b      	strh	r3, [r5, #2]
					length =numberOfParams + shift + 4;
 8007f9e:	4653      	mov	r3, sl
 8007fa0:	1d1d      	adds	r5, r3, #4
 8007fa2:	19ad      	adds	r5, r5, r6
 8007fa4:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 8007fa6:	4bab      	ldr	r3, [pc, #684]	; (8008254 <SendMessageFromPort.part.0+0x38c>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d03d      	beq.n	800802a <SendMessageFromPort.part.0+0x162>
			if(dstGroupID < BOS_BROADCAST){
 8007fae:	4baa      	ldr	r3, [pc, #680]	; (8008258 <SendMessageFromPort.part.0+0x390>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2bff      	cmp	r3, #255	; 0xff
 8007fb4:	d100      	bne.n	8007fb8 <SendMessageFromPort.part.0+0xf0>
 8007fb6:	e106      	b.n	80081c6 <SendMessageFromPort.part.0+0x2fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007fb8:	4aa8      	ldr	r2, [pc, #672]	; (800825c <SendMessageFromPort.part.0+0x394>)
 8007fba:	7817      	ldrb	r7, [r2, #0]
 8007fbc:	2f00      	cmp	r7, #0
 8007fbe:	d100      	bne.n	8007fc2 <SendMessageFromPort.part.0+0xfa>
 8007fc0:	e139      	b.n	8008236 <SendMessageFromPort.part.0+0x36e>
 8007fc2:	2201      	movs	r2, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007fc4:	0021      	movs	r1, r4
 8007fc6:	409a      	lsls	r2, r3
 8007fc8:	4451      	add	r1, sl
 8007fca:	4694      	mov	ip, r2
 8007fcc:	9105      	str	r1, [sp, #20]
 8007fce:	0039      	movs	r1, r7
			uint8_t groupMembers =0;
 8007fd0:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007fd2:	4667      	mov	r7, ip
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007fd4:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007fd6:	46ac      	mov	ip, r5
 8007fd8:	000d      	movs	r5, r1
 8007fda:	48a1      	ldr	r0, [pc, #644]	; (8008260 <SendMessageFromPort.part.0+0x398>)
					if(InGroup(i,dstGroupID)){
 8007fdc:	8801      	ldrh	r1, [r0, #0]
 8007fde:	420f      	tst	r7, r1
 8007fe0:	d009      	beq.n	8007ff6 <SendMessageFromPort.part.0+0x12e>
						++groupMembers;							// Add this member
 8007fe2:	3201      	adds	r2, #1
 8007fe4:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007fe6:	1991      	adds	r1, r2, r6
 8007fe8:	292c      	cmp	r1, #44	; 0x2c
 8007fea:	dd00      	ble.n	8007fee <SendMessageFromPort.part.0+0x126>
 8007fec:	e0fc      	b.n	80081e8 <SendMessageFromPort.part.0+0x320>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007fee:	9905      	ldr	r1, [sp, #20]
 8007ff0:	1889      	adds	r1, r1, r2
 8007ff2:	1989      	adds	r1, r1, r6
 8007ff4:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	3002      	adds	r0, #2
 8007ffc:	42ab      	cmp	r3, r5
 8007ffe:	d9ed      	bls.n	8007fdc <SendMessageFromPort.part.0+0x114>
 8008000:	4665      	mov	r5, ip
 8008002:	0010      	movs	r0, r2
 8008004:	1991      	adds	r1, r2, r6
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8008006:	4653      	mov	r3, sl
 8008008:	3307      	adds	r3, #7
 800800a:	199e      	adds	r6, r3, r6
 800800c:	1836      	adds	r6, r6, r0
 800800e:	55a2      	strb	r2, [r4, r6]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8008010:	292b      	cmp	r1, #43	; 0x2b
 8008012:	dd00      	ble.n	8008016 <SendMessageFromPort.part.0+0x14e>
 8008014:	e0e8      	b.n	80081e8 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8008016:	4993      	ldr	r1, [pc, #588]	; (8008264 <SendMessageFromPort.part.0+0x39c>)
 8008018:	3502      	adds	r5, #2
 800801a:	780b      	ldrb	r3, [r1, #0]
 800801c:	19a6      	adds	r6, r4, r6
 800801e:	3301      	adds	r3, #1
 8008020:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8008022:	18ad      	adds	r5, r5, r2
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8008024:	700b      	strb	r3, [r1, #0]
 8008026:	7073      	strb	r3, [r6, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8008028:	b2ed      	uxtb	r5, r5
 800802a:	4647      	mov	r7, r8
 800802c:	3702      	adds	r7, #2
 800802e:	b2ff      	uxtb	r7, r7
 8008030:	e012      	b.n	8008058 <SendMessageFromPort.part.0+0x190>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008032:	465b      	mov	r3, fp
 8008034:	2b00      	cmp	r3, #0
 8008036:	d000      	beq.n	800803a <SendMessageFromPort.part.0+0x172>
 8008038:	e0af      	b.n	800819a <SendMessageFromPort.part.0+0x2d2>
 800803a:	4647      	mov	r7, r8
 800803c:	3702      	adds	r7, #2
 800803e:	b2ff      	uxtb	r7, r7
		length =messageLength[numberOfParams - 1];
 8008040:	3e01      	subs	r6, #1
 8008042:	4b89      	ldr	r3, [pc, #548]	; (8008268 <SendMessageFromPort.part.0+0x3a0>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8008044:	00f1      	lsls	r1, r6, #3
		length =messageLength[numberOfParams - 1];
 8008046:	5d9d      	ldrb	r5, [r3, r6]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8008048:	1b89      	subs	r1, r1, r6
 800804a:	4e88      	ldr	r6, [pc, #544]	; (800826c <SendMessageFromPort.part.0+0x3a4>)
 800804c:	00c9      	lsls	r1, r1, #3
 800804e:	1989      	adds	r1, r1, r6
 8008050:	002a      	movs	r2, r5
 8008052:	4887      	ldr	r0, [pc, #540]	; (8008270 <SendMessageFromPort.part.0+0x3a8>)
 8008054:	f00b fca7 	bl	80139a6 <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8008058:	1ceb      	adds	r3, r5, #3
 800805a:	469a      	mov	sl, r3
 800805c:	4e85      	ldr	r6, [pc, #532]	; (8008274 <SendMessageFromPort.part.0+0x3ac>)
 800805e:	001a      	movs	r2, r3
 8008060:	0021      	movs	r1, r4
 8008062:	0030      	movs	r0, r6
	message[2] =length;
 8008064:	70a5      	strb	r5, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8008066:	f00b fc9e 	bl	80139a6 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 800806a:	b2ab      	uxth	r3, r5
 800806c:	4651      	mov	r1, sl
 800806e:	0030      	movs	r0, r6
 8008070:	9305      	str	r3, [sp, #20]
 8008072:	f003 fc33 	bl	800b8dc <CalculateCRC8>
 8008076:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8008078:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 800807a:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 800807c:	2100      	movs	r1, #0
 800807e:	0030      	movs	r0, r6
 8008080:	f00b fc9a 	bl	80139b8 <memset>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8008084:	465b      	mov	r3, fp
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8008086:	2f01      	cmp	r7, #1
 8008088:	d94a      	bls.n	8008120 <SendMessageFromPort.part.0+0x258>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 800808a:	3b2c      	subs	r3, #44	; 0x2c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d800      	bhi.n	8008092 <SendMessageFromPort.part.0+0x1ca>
 8008090:	e08d      	b.n	80081ae <SendMessageFromPort.part.0+0x2e6>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8008092:	4b6d      	ldr	r3, [pc, #436]	; (8008248 <SendMessageFromPort.part.0+0x380>)
 8008094:	4698      	mov	r8, r3
 8008096:	88db      	ldrh	r3, [r3, #6]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d100      	bne.n	800809e <SendMessageFromPort.part.0+0x1d6>
 800809c:	e08f      	b.n	80081be <SendMessageFromPort.part.0+0x2f6>
 800809e:	9e05      	ldr	r6, [sp, #20]
 80080a0:	4f75      	ldr	r7, [pc, #468]	; (8008278 <SendMessageFromPort.part.0+0x3b0>)
 80080a2:	4b76      	ldr	r3, [pc, #472]	; (800827c <SendMessageFromPort.part.0+0x3b4>)
 80080a4:	3604      	adds	r6, #4
 80080a6:	46ba      	mov	sl, r7
 80080a8:	b2b6      	uxth	r6, r6
 80080aa:	2500      	movs	r5, #0
 80080ac:	4699      	mov	r9, r3
 80080ae:	9f04      	ldr	r7, [sp, #16]
 80080b0:	e005      	b.n	80080be <SendMessageFromPort.part.0+0x1f6>
 80080b2:	4643      	mov	r3, r8
 80080b4:	3501      	adds	r5, #1
 80080b6:	88db      	ldrh	r3, [r3, #6]
 80080b8:	b2ed      	uxtb	r5, r5
 80080ba:	42ab      	cmp	r3, r5
 80080bc:	d91c      	bls.n	80080f8 <SendMessageFromPort.part.0+0x230>
				Send_BOS_Message(port,message,length + 4,cmd50ms);
 80080be:	2332      	movs	r3, #50	; 0x32
 80080c0:	0032      	movs	r2, r6
 80080c2:	0021      	movs	r1, r4
 80080c4:	0038      	movs	r0, r7
 80080c6:	f7fa ff3f 	bl	8002f48 <Send_BOS_Message>
				osDelay(200);
 80080ca:	20c8      	movs	r0, #200	; 0xc8
 80080cc:	f005 ff18 	bl	800df00 <osDelay>
				if(ACK_FLAG == true)
 80080d0:	464b      	mov	r3, r9
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10f      	bne.n	80080f8 <SendMessageFromPort.part.0+0x230>
				if(rejected_FLAG == true)
 80080d8:	4653      	mov	r3, sl
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0e8      	beq.n	80080b2 <SendMessageFromPort.part.0+0x1ea>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 80080e0:	2332      	movs	r3, #50	; 0x32
 80080e2:	0032      	movs	r2, r6
 80080e4:	0021      	movs	r1, r4
 80080e6:	0038      	movs	r0, r7
 80080e8:	f7fa ff2e 	bl	8002f48 <Send_BOS_Message>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 80080ec:	4643      	mov	r3, r8
 80080ee:	3501      	adds	r5, #1
 80080f0:	88db      	ldrh	r3, [r3, #6]
 80080f2:	b2ed      	uxtb	r5, r5
 80080f4:	42ab      	cmp	r3, r5
 80080f6:	d8e2      	bhi.n	80080be <SendMessageFromPort.part.0+0x1f6>
 80080f8:	4657      	mov	r7, sl
		ACK_FLAG =false; rejected_FLAG=false;
 80080fa:	2300      	movs	r3, #0
 80080fc:	464a      	mov	r2, r9
 80080fe:	703b      	strb	r3, [r7, #0]
 8008100:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 8008102:	2000      	movs	r0, #0
 8008104:	9903      	ldr	r1, [sp, #12]
 8008106:	f006 fd9b 	bl	800ec40 <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 800810a:	2202      	movs	r2, #2
	return result;
 800810c:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 800810e:	4b5c      	ldr	r3, [pc, #368]	; (8008280 <SendMessageFromPort.part.0+0x3b8>)
 8008110:	701a      	strb	r2, [r3, #0]
}
 8008112:	b007      	add	sp, #28
 8008114:	bc3c      	pop	{r2, r3, r4, r5}
 8008116:	4690      	mov	r8, r2
 8008118:	4699      	mov	r9, r3
 800811a:	46a2      	mov	sl, r4
 800811c:	46ab      	mov	fp, r5
 800811e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8008120:	2b00      	cmp	r3, #0
 8008122:	d03e      	beq.n	80081a2 <SendMessageFromPort.part.0+0x2da>
		FindBroadcastRoutes(src);
 8008124:	4648      	mov	r0, r9
 8008126:	f7fb fd57 	bl	8003bd8 <FindBroadcastRoutes>
 800812a:	2300      	movs	r3, #0
 800812c:	4698      	mov	r8, r3
 800812e:	4b45      	ldr	r3, [pc, #276]	; (8008244 <SendMessageFromPort.part.0+0x37c>)
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8008130:	9e05      	ldr	r6, [sp, #20]
 8008132:	4699      	mov	r9, r3
 8008134:	4b53      	ldr	r3, [pc, #332]	; (8008284 <SendMessageFromPort.part.0+0x3bc>)
 8008136:	3604      	adds	r6, #4
 8008138:	469b      	mov	fp, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800813a:	2301      	movs	r3, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 800813c:	b2b6      	uxth	r6, r6
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800813e:	469a      	mov	sl, r3
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8008140:	0033      	movs	r3, r6
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008142:	2501      	movs	r5, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8008144:	4646      	mov	r6, r8
 8008146:	4698      	mov	r8, r3
 8008148:	4f4b      	ldr	r7, [pc, #300]	; (8008278 <SendMessageFromPort.part.0+0x3b0>)
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800814a:	464b      	mov	r3, r9
 800814c:	465a      	mov	r2, fp
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	3b01      	subs	r3, #1
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	5ad3      	ldrh	r3, [r2, r3]
 8008156:	4652      	mov	r2, sl
 8008158:	4133      	asrs	r3, r6
 800815a:	421a      	tst	r2, r3
 800815c:	d10a      	bne.n	8008174 <SendMessageFromPort.part.0+0x2ac>
			rejected_FLAG=false;
 800815e:	2300      	movs	r3, #0
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008160:	3501      	adds	r5, #1
			Delay_us(10);
 8008162:	200a      	movs	r0, #10
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008164:	b2ed      	uxtb	r5, r5
			rejected_FLAG=false;
 8008166:	703b      	strb	r3, [r7, #0]
 8008168:	3601      	adds	r6, #1
			Delay_us(10);
 800816a:	f005 fb85 	bl	800d878 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800816e:	2d06      	cmp	r5, #6
 8008170:	d1eb      	bne.n	800814a <SendMessageFromPort.part.0+0x282>
 8008172:	e7c6      	b.n	8008102 <SendMessageFromPort.part.0+0x23a>
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8008174:	2332      	movs	r3, #50	; 0x32
 8008176:	4642      	mov	r2, r8
 8008178:	0021      	movs	r1, r4
 800817a:	0028      	movs	r0, r5
 800817c:	f7fa fee4 	bl	8002f48 <Send_BOS_Message>
				osDelay(200);
 8008180:	20c8      	movs	r0, #200	; 0xc8
 8008182:	f005 febd 	bl	800df00 <osDelay>
				if(rejected_FLAG == true)
 8008186:	783b      	ldrb	r3, [r7, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0e8      	beq.n	800815e <SendMessageFromPort.part.0+0x296>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 800818c:	2332      	movs	r3, #50	; 0x32
 800818e:	4642      	mov	r2, r8
 8008190:	0021      	movs	r1, r4
 8008192:	9804      	ldr	r0, [sp, #16]
 8008194:	f7fa fed8 	bl	8002f48 <Send_BOS_Message>
 8008198:	e7e1      	b.n	800815e <SendMessageFromPort.part.0+0x296>
		if(src == 0)
 800819a:	2a00      	cmp	r2, #0
 800819c:	d000      	beq.n	80081a0 <SendMessageFromPort.part.0+0x2d8>
 800819e:	e6c0      	b.n	8007f22 <SendMessageFromPort.part.0+0x5a>
 80081a0:	e6bc      	b.n	8007f1c <SendMessageFromPort.part.0+0x54>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 80081a2:	464b      	mov	r3, r9
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1bd      	bne.n	8008124 <SendMessageFromPort.part.0+0x25c>
			src =message[4];
 80081a8:	7923      	ldrb	r3, [r4, #4]
 80081aa:	4699      	mov	r9, r3
 80081ac:	e7ba      	b.n	8008124 <SendMessageFromPort.part.0+0x25c>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
 80081ae:	9a05      	ldr	r2, [sp, #20]
 80081b0:	2332      	movs	r3, #50	; 0x32
 80081b2:	3204      	adds	r2, #4
 80081b4:	b292      	uxth	r2, r2
 80081b6:	0021      	movs	r1, r4
 80081b8:	9804      	ldr	r0, [sp, #16]
 80081ba:	f7fa fec5 	bl	8002f48 <Send_BOS_Message>
 80081be:	4b2f      	ldr	r3, [pc, #188]	; (800827c <SendMessageFromPort.part.0+0x3b4>)
 80081c0:	4f2d      	ldr	r7, [pc, #180]	; (8008278 <SendMessageFromPort.part.0+0x3b0>)
 80081c2:	4699      	mov	r9, r3
 80081c4:	e799      	b.n	80080fa <SendMessageFromPort.part.0+0x232>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80081c6:	2e2c      	cmp	r6, #44	; 0x2c
 80081c8:	d80e      	bhi.n	80081e8 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams] =++bcastID;
 80081ca:	4a26      	ldr	r2, [pc, #152]	; (8008264 <SendMessageFromPort.part.0+0x39c>)
 80081cc:	4647      	mov	r7, r8
 80081ce:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 80081d0:	3501      	adds	r5, #1
				message[7 + shift + numberOfParams] =++bcastID;
 80081d2:	3301      	adds	r3, #1
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	7013      	strb	r3, [r2, #0]
 80081d8:	4652      	mov	r2, sl
 80081da:	18a2      	adds	r2, r4, r2
 80081dc:	1996      	adds	r6, r2, r6
 80081de:	3702      	adds	r7, #2
 80081e0:	71f3      	strb	r3, [r6, #7]
				length +=1;		// + bcastID
 80081e2:	b2ed      	uxtb	r5, r5
 80081e4:	b2ff      	uxtb	r7, r7
 80081e6:	e737      	b.n	8008058 <SendMessageFromPort.part.0+0x190>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80081e8:	2069      	movs	r0, #105	; 0x69
 80081ea:	e792      	b.n	8008112 <SendMessageFromPort.part.0+0x24a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 80081ec:	465b      	mov	r3, fp
 80081ee:	4642      	mov	r2, r8
 80081f0:	4649      	mov	r1, r9
 80081f2:	9700      	str	r7, [sp, #0]
 80081f4:	9804      	ldr	r0, [sp, #16]
 80081f6:	f7ff fe4b 	bl	8007e90 <SendMessageFromPort>
					osDelay(10);
 80081fa:	200a      	movs	r0, #10
 80081fc:	f005 fe80 	bl	800df00 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8008200:	886e      	ldrh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8008202:	882b      	ldrh	r3, [r5, #0]
					totalNumberOfParams -=numberOfParams;
 8008204:	3e2e      	subs	r6, #46	; 0x2e
 8008206:	b2b6      	uxth	r6, r6
					ptrShift +=numberOfParams;
 8008208:	332e      	adds	r3, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 800820a:	806e      	strh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 800820c:	802b      	strh	r3, [r5, #0]
			while(totalNumberOfParams != 0){
 800820e:	2e00      	cmp	r6, #0
 8008210:	d000      	beq.n	8008214 <SendMessageFromPort.part.0+0x34c>
 8008212:	e6b1      	b.n	8007f78 <SendMessageFromPort.part.0+0xb0>
 8008214:	2500      	movs	r5, #0
 8008216:	362e      	adds	r6, #46	; 0x2e
 8008218:	e6c5      	b.n	8007fa6 <SendMessageFromPort.part.0+0xde>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800821a:	4653      	mov	r3, sl
 800821c:	1dd8      	adds	r0, r3, #7
 800821e:	4b0b      	ldr	r3, [pc, #44]	; (800824c <SendMessageFromPort.part.0+0x384>)
			length =numberOfParams + shift + 4;
 8008220:	1d35      	adds	r5, r6, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8008222:	8819      	ldrh	r1, [r3, #0]
 8008224:	4b0a      	ldr	r3, [pc, #40]	; (8008250 <SendMessageFromPort.part.0+0x388>)
 8008226:	1820      	adds	r0, r4, r0
 8008228:	18c9      	adds	r1, r1, r3
 800822a:	0032      	movs	r2, r6
			length =numberOfParams + shift + 4;
 800822c:	4455      	add	r5, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800822e:	f00b fbba 	bl	80139a6 <memcpy>
			length =numberOfParams + shift + 4;
 8008232:	b2ed      	uxtb	r5, r5
 8008234:	e6b7      	b.n	8007fa6 <SendMessageFromPort.part.0+0xde>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8008236:	0031      	movs	r1, r6
 8008238:	2000      	movs	r0, #0
			uint8_t groupMembers =0;
 800823a:	2200      	movs	r2, #0
 800823c:	e6e3      	b.n	8008006 <SendMessageFromPort.part.0+0x13e>
 800823e:	46c0      	nop			; (mov r8, r8)
 8008240:	20000c68 	.word	0x20000c68
 8008244:	20000aa8 	.word	0x20000aa8
 8008248:	200067fc 	.word	0x200067fc
 800824c:	20001db4 	.word	0x20001db4
 8008250:	20000b4c 	.word	0x20000b4c
 8008254:	20001120 	.word	0x20001120
 8008258:	20000058 	.word	0x20000058
 800825c:	20000010 	.word	0x20000010
 8008260:	20000aac 	.word	0x20000aac
 8008264:	20000c58 	.word	0x20000c58
 8008268:	20000c60 	.word	0x20000c60
 800826c:	20000ca0 	.word	0x20000ca0
 8008270:	20000c6b 	.word	0x20000c6b
 8008274:	200018ac 	.word	0x200018ac
 8008278:	2000114c 	.word	0x2000114c
 800827c:	2000114d 	.word	0x2000114d
 8008280:	20000c4c 	.word	0x20000c4c
 8008284:	20000b7c 	.word	0x20000b7c

08008288 <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 8008288:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 800828a:	b500      	push	{lr}
	AddBcastPayload = false;
 800828c:	4b0b      	ldr	r3, [pc, #44]	; (80082bc <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 800828e:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8008290:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8008292:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <BroadcastReceivedMessage+0x38>)
 8008294:	b289      	uxth	r1, r1
 8008296:	7018      	strb	r0, [r3, #0]
 8008298:	9100      	str	r1, [sp, #0]
 800829a:	2300      	movs	r3, #0
	if(dstGroup == BOS_BROADCAST)
 800829c:	28ff      	cmp	r0, #255	; 0xff
 800829e:	d007      	beq.n	80082b0 <BroadcastReceivedMessage+0x28>
 80082a0:	22fe      	movs	r2, #254	; 0xfe
 80082a2:	2100      	movs	r1, #0
 80082a4:	2000      	movs	r0, #0
 80082a6:	f7ff fe0f 	bl	8007ec8 <SendMessageFromPort.part.0>
}
 80082aa:	2000      	movs	r0, #0
 80082ac:	b003      	add	sp, #12
 80082ae:	bd00      	pop	{pc}
 80082b0:	32ff      	adds	r2, #255	; 0xff
 80082b2:	2100      	movs	r1, #0
 80082b4:	2000      	movs	r0, #0
 80082b6:	f7ff fe07 	bl	8007ec8 <SendMessageFromPort.part.0>
 80082ba:	e7f6      	b.n	80082aa <BroadcastReceivedMessage+0x22>
 80082bc:	20001120 	.word	0x20001120
 80082c0:	20000058 	.word	0x20000058

080082c4 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80082c4:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 80082c6:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80082c8:	001c      	movs	r4, r3
	AddBcastPayload = true;
 80082ca:	4b0e      	ldr	r3, [pc, #56]	; (8008304 <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80082cc:	b083      	sub	sp, #12
	AddBcastPayload = true;
 80082ce:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 80082d0:	4b0d      	ldr	r3, [pc, #52]	; (8008308 <BroadcastMessage+0x44>)
 80082d2:	7019      	strb	r1, [r3, #0]
 80082d4:	9400      	str	r4, [sp, #0]
 80082d6:	0013      	movs	r3, r2
	if(dstGroup == BOS_BROADCAST)
 80082d8:	29ff      	cmp	r1, #255	; 0xff
 80082da:	d00c      	beq.n	80082f6 <BroadcastMessage+0x32>
 80082dc:	0001      	movs	r1, r0
 80082de:	22fe      	movs	r2, #254	; 0xfe
 80082e0:	2000      	movs	r0, #0
 80082e2:	f7ff fdf1 	bl	8007ec8 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 80082e6:	0022      	movs	r2, r4
 80082e8:	2100      	movs	r1, #0
 80082ea:	4808      	ldr	r0, [pc, #32]	; (800830c <BroadcastMessage+0x48>)
 80082ec:	f00b fb64 	bl	80139b8 <memset>
}
 80082f0:	2000      	movs	r0, #0
 80082f2:	b003      	add	sp, #12
 80082f4:	bd30      	pop	{r4, r5, pc}
 80082f6:	0001      	movs	r1, r0
 80082f8:	22ff      	movs	r2, #255	; 0xff
 80082fa:	2000      	movs	r0, #0
 80082fc:	f7ff fde4 	bl	8007ec8 <SendMessageFromPort.part.0>
 8008300:	e7f1      	b.n	80082e6 <BroadcastMessage+0x22>
 8008302:	46c0      	nop			; (mov r8, r8)
 8008304:	20001120 	.word	0x20001120
 8008308:	20000058 	.word	0x20000058
 800830c:	20000b4c 	.word	0x20000b4c

08008310 <ForwardReceivedMessage>:
	AddBcastPayload = false;
 8008310:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8008312:	b530      	push	{r4, r5, lr}
 8008314:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8008316:	4b0b      	ldr	r3, [pc, #44]	; (8008344 <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8008318:	b083      	sub	sp, #12
	AddBcastPayload = false;
 800831a:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 800831c:	1e42      	subs	r2, r0, #1
 800831e:	00d3      	lsls	r3, r2, #3
 8008320:	1a9b      	subs	r3, r3, r2
 8008322:	4a09      	ldr	r2, [pc, #36]	; (8008348 <ForwardReceivedMessage+0x38>)
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	5c9c      	ldrb	r4, [r3, r2]
		port =FindRoute(myID,dst);
 8008328:	4b08      	ldr	r3, [pc, #32]	; (800834c <ForwardReceivedMessage+0x3c>)
 800832a:	0021      	movs	r1, r4
 800832c:	7818      	ldrb	r0, [r3, #0]
 800832e:	f7fb fcfb 	bl	8003d28 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8008332:	9500      	str	r5, [sp, #0]
 8008334:	2300      	movs	r3, #0
 8008336:	0022      	movs	r2, r4
 8008338:	2100      	movs	r1, #0
 800833a:	f7ff fda9 	bl	8007e90 <SendMessageFromPort>
}
 800833e:	2000      	movs	r0, #0
 8008340:	b003      	add	sp, #12
 8008342:	bd30      	pop	{r4, r5, pc}
 8008344:	20001120 	.word	0x20001120
 8008348:	20000ca0 	.word	0x20000ca0
 800834c:	20000aa8 	.word	0x20000aa8

08008350 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8008350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008352:	4d0f      	ldr	r5, [pc, #60]	; (8008390 <SendMessageToModule+0x40>)
 8008354:	0004      	movs	r4, r0
 8008356:	b083      	sub	sp, #12
 8008358:	000f      	movs	r7, r1
 800835a:	0016      	movs	r6, r2
 800835c:	7828      	ldrb	r0, [r5, #0]
	if(dst != BOS_BROADCAST){
 800835e:	2cff      	cmp	r4, #255	; 0xff
 8008360:	d010      	beq.n	8008384 <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 8008362:	0021      	movs	r1, r4
 8008364:	f7fb fce0 	bl	8003d28 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8008368:	7829      	ldrb	r1, [r5, #0]
 800836a:	0022      	movs	r2, r4
 800836c:	9600      	str	r6, [sp, #0]
 800836e:	003b      	movs	r3, r7
 8008370:	f7ff fd8e 	bl	8007e90 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8008374:	0032      	movs	r2, r6
 8008376:	2100      	movs	r1, #0
 8008378:	4806      	ldr	r0, [pc, #24]	; (8008394 <SendMessageToModule+0x44>)
 800837a:	f00b fb1d 	bl	80139b8 <memset>
}
 800837e:	2000      	movs	r0, #0
 8008380:	b003      	add	sp, #12
 8008382:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8008384:	0013      	movs	r3, r2
 8008386:	000a      	movs	r2, r1
 8008388:	21ff      	movs	r1, #255	; 0xff
 800838a:	f7ff ff9b 	bl	80082c4 <BroadcastMessage>
 800838e:	e7f6      	b.n	800837e <SendMessageToModule+0x2e>
 8008390:	20000aa8 	.word	0x20000aa8
 8008394:	20000b4c 	.word	0x20000b4c

08008398 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8008398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800839a:	4657      	mov	r7, sl
 800839c:	46de      	mov	lr, fp
 800839e:	464e      	mov	r6, r9
 80083a0:	4645      	mov	r5, r8
 80083a2:	b5e0      	push	{r5, r6, r7, lr}
 80083a4:	b08f      	sub	sp, #60	; 0x3c
 80083a6:	001e      	movs	r6, r3
 80083a8:	ab18      	add	r3, sp, #96	; 0x60
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	4693      	mov	fp, r2
 80083ae:	469a      	mov	sl, r3
 80083b0:	ab1b      	add	r3, sp, #108	; 0x6c
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083b6:	000f      	movs	r7, r1
 80083b8:	0e19      	lsrs	r1, r3, #24
 80083ba:	0c1b      	lsrs	r3, r3, #16
 80083bc:	b2dc      	uxtb	r4, r3
 80083be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083c0:	4684      	mov	ip, r0
 80083c2:	0a1b      	lsrs	r3, r3, #8
 80083c4:	b2dd      	uxtb	r5, r3
 80083c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80083c8:	900d      	str	r0, [sp, #52]	; 0x34
 80083ca:	0e1b      	lsrs	r3, r3, #24
 80083cc:	0018      	movs	r0, r3
 80083ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80083d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80083d2:	9206      	str	r2, [sp, #24]
 80083d4:	0c1b      	lsrs	r3, r3, #16
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	9307      	str	r3, [sp, #28]
 80083da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80083dc:	9109      	str	r1, [sp, #36]	; 0x24
 80083de:	0a1b      	lsrs	r3, r3, #8
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80083e4:	4b47      	ldr	r3, [pc, #284]	; (8008504 <StartScastDMAStream+0x16c>)
 80083e6:	940a      	str	r4, [sp, #40]	; 0x28
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	950c      	str	r5, [sp, #48]	; 0x30
 80083ec:	42bb      	cmp	r3, r7
 80083ee:	d16d      	bne.n	80084cc <StartScastDMAStream+0x134>
 80083f0:	231a      	movs	r3, #26
 80083f2:	4698      	mov	r8, r3
 80083f4:	4d44      	ldr	r5, [pc, #272]	; (8008508 <StartScastDMAStream+0x170>)
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80083f6:	4c45      	ldr	r4, [pc, #276]	; (800850c <StartScastDMAStream+0x174>)
 80083f8:	44a8      	add	r8, r5
		FindRoute(srcM,dstM);
 80083fa:	0031      	movs	r1, r6
 80083fc:	0038      	movs	r0, r7
 80083fe:	f7fb fc93 	bl	8003d28 <FindRoute>
		if(route[i]){
 8008402:	7868      	ldrb	r0, [r5, #1]
 8008404:	2800      	cmp	r0, #0
 8008406:	d035      	beq.n	8008474 <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 8008408:	78a9      	ldrb	r1, [r5, #2]
 800840a:	2900      	cmp	r1, #0
 800840c:	d100      	bne.n	8008410 <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 800840e:	0039      	movs	r1, r7
 8008410:	f7fb fc8a 	bl	8003d28 <FindRoute>
			FindRoute(srcM,dstM);
 8008414:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 8008416:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 8008418:	0038      	movs	r0, r7
 800841a:	f7fb fc85 	bl	8003d28 <FindRoute>
			if(route[i] == dstM){
 800841e:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 8008420:	465b      	mov	r3, fp
			if(route[i] == dstM){
 8008422:	42b0      	cmp	r0, r6
 8008424:	d003      	beq.n	800842e <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 8008426:	7829      	ldrb	r1, [r5, #0]
 8008428:	f7fb fc7e 	bl	8003d28 <FindRoute>
 800842c:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800842e:	9a09      	ldr	r2, [sp, #36]	; 0x24
			messageParams[5] =(uint8_t )(timeout >> 16);
			messageParams[6] =(uint8_t )(timeout >> 8);
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 8008430:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008432:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8008434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 8008436:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8008438:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 800843a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			FindRoute(srcM,dstM);
 800843c:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 800843e:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8008440:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 8008442:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 8008444:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008446:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			messageParams[11] =stored; /* EEPROM storage */
 8008448:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 800844a:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 800844c:	9a07      	ldr	r2, [sp, #28]
 800844e:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8008450:	9a08      	ldr	r2, [sp, #32]
 8008452:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8008454:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008456:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8008458:	4652      	mov	r2, sl
 800845a:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 800845c:	464a      	mov	r2, r9
 800845e:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 8008460:	f7fb fc62 	bl	8003d28 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8008464:	7868      	ldrb	r0, [r5, #1]
 8008466:	220c      	movs	r2, #12
 8008468:	211b      	movs	r1, #27
 800846a:	f7ff ff71 	bl	8008350 <SendMessageToModule>
			osDelay(10);
 800846e:	200a      	movs	r0, #10
 8008470:	f005 fd46 	bl	800df00 <osDelay>
 8008474:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8008476:	4545      	cmp	r5, r8
 8008478:	d1bf      	bne.n	80083fa <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 800847a:	42b7      	cmp	r7, r6
 800847c:	d112      	bne.n	80084a4 <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 800847e:	465b      	mov	r3, fp
 8008480:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008488:	4650      	mov	r0, sl
 800848a:	f7ff fc11 	bl	8007cb0 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 800848e:	9b06      	ldr	r3, [sp, #24]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10d      	bne.n	80084b0 <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8008494:	2000      	movs	r0, #0
 8008496:	b00f      	add	sp, #60	; 0x3c
 8008498:	bc3c      	pop	{r2, r3, r4, r5}
 800849a:	4690      	mov	r8, r2
 800849c:	4699      	mov	r9, r3
 800849e:	46a2      	mov	sl, r4
 80084a0:	46ab      	mov	fp, r5
 80084a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 80084a4:	0031      	movs	r1, r6
 80084a6:	0038      	movs	r0, r7
 80084a8:	f7fb fc3e 	bl	8003d28 <FindRoute>
 80084ac:	4683      	mov	fp, r0
 80084ae:	e7e6      	b.n	800847e <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 80084b0:	2300      	movs	r3, #0
 80084b2:	9304      	str	r3, [sp, #16]
 80084b4:	9303      	str	r3, [sp, #12]
 80084b6:	9302      	str	r3, [sp, #8]
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	465b      	mov	r3, fp
 80084bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	9919      	ldr	r1, [sp, #100]	; 0x64
 80084c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084c4:	4650      	mov	r0, sl
 80084c6:	f7fb f94f 	bl	8003768 <SaveEEstreams>
 80084ca:	e7e3      	b.n	8008494 <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80084cc:	4b0f      	ldr	r3, [pc, #60]	; (800850c <StartScastDMAStream+0x174>)
 80084ce:	7019      	strb	r1, [r3, #0]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80084d0:	9907      	ldr	r1, [sp, #28]
		messageParams[1] =(uint8_t )(count >> 16);
 80084d2:	705c      	strb	r4, [r3, #1]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80084d4:	7159      	strb	r1, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 80084d6:	9908      	ldr	r1, [sp, #32]
		messageParams[3] =(uint8_t )count;
 80084d8:	9c19      	ldr	r4, [sp, #100]	; 0x64
		messageParams[6] =(uint8_t )(timeout >> 8);
 80084da:	7199      	strb	r1, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80084dc:	991a      	ldr	r1, [sp, #104]	; 0x68
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80084de:	7118      	strb	r0, [r3, #4]
		messageParams[7] =(uint8_t )timeout;
 80084e0:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80084e2:	4651      	mov	r1, sl
 80084e4:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80084e6:	4661      	mov	r1, ip
 80084e8:	7259      	strb	r1, [r3, #9]
		messageParams[11] =dstP; /* destination port */
 80084ea:	4659      	mov	r1, fp
		messageParams[12] =stored; /* EEPROM storage */
 80084ec:	731a      	strb	r2, [r3, #12]
		messageParams[11] =dstP; /* destination port */
 80084ee:	72d9      	strb	r1, [r3, #11]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80084f0:	220d      	movs	r2, #13
 80084f2:	211c      	movs	r1, #28
 80084f4:	0038      	movs	r0, r7
		messageParams[2] =(uint8_t )(count >> 8);
 80084f6:	709d      	strb	r5, [r3, #2]
		messageParams[3] =(uint8_t )count;
 80084f8:	70dc      	strb	r4, [r3, #3]
		messageParams[10] =dstM; /* destination module */
 80084fa:	729e      	strb	r6, [r3, #10]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80084fc:	f7ff ff28 	bl	8008350 <SendMessageToModule>
		return result;
 8008500:	e7c8      	b.n	8008494 <StartScastDMAStream+0xfc>
 8008502:	46c0      	nop			; (mov r8, r8)
 8008504:	20000aa8 	.word	0x20000aa8
 8008508:	20006943 	.word	0x20006943
 800850c:	20000b4c 	.word	0x20000b4c

08008510 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8008510:	4b4e      	ldr	r3, [pc, #312]	; (800864c <BackEndTask+0x13c>)
 8008512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008514:	4657      	mov	r7, sl
 8008516:	46de      	mov	lr, fp
 8008518:	464e      	mov	r6, r9
 800851a:	4645      	mov	r5, r8
 800851c:	4699      	mov	r9, r3
 800851e:	4b4c      	ldr	r3, [pc, #304]	; (8008650 <BackEndTask+0x140>)
 8008520:	b5e0      	push	{r5, r6, r7, lr}
 8008522:	469b      	mov	fp, r3
 8008524:	4b4b      	ldr	r3, [pc, #300]	; (8008654 <BackEndTask+0x144>)
 8008526:	4f4c      	ldr	r7, [pc, #304]	; (8008658 <BackEndTask+0x148>)
 8008528:	4698      	mov	r8, r3
 800852a:	4b4c      	ldr	r3, [pc, #304]	; (800865c <BackEndTask+0x14c>)
 800852c:	b083      	sub	sp, #12
 800852e:	469a      	mov	sl, r3


	uint8_t calculated_crc,port_number,length,port_index;
	for(;;)
	{
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008530:	464b      	mov	r3, r9
 8008532:	4a4b      	ldr	r2, [pc, #300]	; (8008660 <BackEndTask+0x150>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	7812      	ldrb	r2, [r2, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d054      	beq.n	80085e6 <BackEndTask+0xd6>
		{
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 800853c:	4a49      	ldr	r2, [pc, #292]	; (8008664 <BackEndTask+0x154>)
			port_index = port_number - 1;
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 800853e:	2048      	movs	r0, #72	; 0x48
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008540:	5cd3      	ldrb	r3, [r2, r3]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 8008542:	255a      	movs	r5, #90	; 0x5a
			port_index = port_number - 1;
 8008544:	1e5c      	subs	r4, r3, #1
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008546:	9301      	str	r3, [sp, #4]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008548:	465b      	mov	r3, fp
			port_index = port_number - 1;
 800854a:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 800854c:	5d19      	ldrb	r1, [r3, r4]
 800854e:	00a6      	lsls	r6, r4, #2
 8008550:	00cb      	lsls	r3, r1, #3
 8008552:	1a59      	subs	r1, r3, r1
 8008554:	1933      	adds	r3, r6, r4
 8008556:	00da      	lsls	r2, r3, #3
 8008558:	1ad2      	subs	r2, r2, r3
 800855a:	00c9      	lsls	r1, r1, #3
 800855c:	00d2      	lsls	r2, r2, #3
 800855e:	188b      	adds	r3, r1, r2
 8008560:	54f8      	strb	r0, [r7, r3]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 8008562:	18f8      	adds	r0, r7, r3
 8008564:	7045      	strb	r5, [r0, #1]

			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 8008566:	7885      	ldrb	r5, [r0, #2]

			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 8008568:	4640      	mov	r0, r8
 800856a:	5cfb      	ldrb	r3, [r7, r3]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 800856c:	7085      	strb	r5, [r0, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 800856e:	7003      	strb	r3, [r0, #0]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
 8008570:	235a      	movs	r3, #90	; 0x5a
 8008572:	7043      	strb	r3, [r0, #1]
			for(int i=0;i<length;i++)
 8008574:	2d00      	cmp	r5, #0
 8008576:	d00b      	beq.n	8008590 <BackEndTask+0x80>
 8008578:	1cd3      	adds	r3, r2, #3
 800857a:	4642      	mov	r2, r8
 800857c:	185b      	adds	r3, r3, r1
 800857e:	3203      	adds	r2, #3
 8008580:	18fb      	adds	r3, r7, r3
 8008582:	1950      	adds	r0, r2, r5
			{
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 8008584:	7819      	ldrb	r1, [r3, #0]
 8008586:	3301      	adds	r3, #1
 8008588:	7011      	strb	r1, [r2, #0]
 800858a:	3201      	adds	r2, #1
			for(int i=0;i<length;i++)
 800858c:	4282      	cmp	r2, r0
 800858e:	d1f9      	bne.n	8008584 <BackEndTask+0x74>
			}

			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,
 8008590:	1ce9      	adds	r1, r5, #3
 8008592:	4640      	mov	r0, r8
 8008594:	f003 f9a2 	bl	800b8dc <CalculateCRC8>
				length + 3);


			Message_counter++;
 8008598:	4653      	mov	r3, sl
 800859a:	4652      	mov	r2, sl
 800859c:	881b      	ldrh	r3, [r3, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 800859e:	1936      	adds	r6, r6, r4
			Message_counter++;
 80085a0:	3301      	adds	r3, #1
 80085a2:	8013      	strh	r3, [r2, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 80085a4:	465b      	mov	r3, fp
 80085a6:	5d1b      	ldrb	r3, [r3, r4]
 80085a8:	00f2      	lsls	r2, r6, #3
 80085aa:	00d9      	lsls	r1, r3, #3
 80085ac:	1b92      	subs	r2, r2, r6
 80085ae:	1ac9      	subs	r1, r1, r3
 80085b0:	00c9      	lsls	r1, r1, #3
 80085b2:	00d2      	lsls	r2, r2, #3
 80085b4:	188e      	adds	r6, r1, r2
 80085b6:	19be      	adds	r6, r7, r6
 80085b8:	1976      	adds	r6, r6, r5
 80085ba:	78f6      	ldrb	r6, [r6, #3]
 80085bc:	4286      	cmp	r6, r0
 80085be:	d01d      	beq.n	80085fc <BackEndTask+0xec>


			}
			else
			{
				Rejected_Messages++;
 80085c0:	4652      	mov	r2, sl
 80085c2:	4651      	mov	r1, sl
 80085c4:	8892      	ldrh	r2, [r2, #4]
 80085c6:	3201      	adds	r2, #1
 80085c8:	808a      	strh	r2, [r1, #4]
				//TODO: Implement something here when the message is rejected.
			}

			MSG_Buffer_Index_Start[port_index]++;
 80085ca:	3301      	adds	r3, #1
 80085cc:	b2db      	uxtb	r3, r3
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80085ce:	2b05      	cmp	r3, #5
 80085d0:	d010      	beq.n	80085f4 <BackEndTask+0xe4>
			MSG_Buffer_Index_Start[port_index]++;
 80085d2:	465a      	mov	r2, fp
 80085d4:	5513      	strb	r3, [r2, r4]

			Process_Message_Buffer_Index_Start++;
 80085d6:	464b      	mov	r3, r9
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	3301      	adds	r3, #1
 80085dc:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80085de:	2b05      	cmp	r3, #5
 80085e0:	d004      	beq.n	80085ec <BackEndTask+0xdc>
			Process_Message_Buffer_Index_Start++;
 80085e2:	464a      	mov	r2, r9
 80085e4:	7013      	strb	r3, [r2, #0]
		}

		taskYIELD();
 80085e6:	f007 f9e7 	bl	800f9b8 <vPortYield>
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80085ea:	e7a1      	b.n	8008530 <BackEndTask+0x20>
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80085ec:	464b      	mov	r3, r9
 80085ee:	2200      	movs	r2, #0
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	e7f8      	b.n	80085e6 <BackEndTask+0xd6>
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80085f4:	465b      	mov	r3, fp
 80085f6:	2200      	movs	r2, #0
 80085f8:	551a      	strb	r2, [r3, r4]
 80085fa:	e7ec      	b.n	80085d6 <BackEndTask+0xc6>
				Accepted_Messages++;
 80085fc:	4653      	mov	r3, sl
 80085fe:	4650      	mov	r0, sl
 8008600:	885b      	ldrh	r3, [r3, #2]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 8008602:	00e6      	lsls	r6, r4, #3
				Accepted_Messages++;
 8008604:	3301      	adds	r3, #1
 8008606:	8043      	strh	r3, [r0, #2]
				messageLength[port_index] =length;
 8008608:	4b17      	ldr	r3, [pc, #92]	; (8008668 <BackEndTask+0x158>)
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 800860a:	3203      	adds	r2, #3
				messageLength[port_index] =length;
 800860c:	551d      	strb	r5, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 800860e:	1b36      	subs	r6, r6, r4
 8008610:	4b16      	ldr	r3, [pc, #88]	; (800866c <BackEndTask+0x15c>)
 8008612:	00f6      	lsls	r6, r6, #3
 8008614:	1851      	adds	r1, r2, r1
 8008616:	1998      	adds	r0, r3, r6
 8008618:	002a      	movs	r2, r5
 800861a:	1879      	adds	r1, r7, r1
 800861c:	f00b f9c3 	bl	80139a6 <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 8008620:	4b12      	ldr	r3, [pc, #72]	; (800866c <BackEndTask+0x15c>)
 8008622:	4a13      	ldr	r2, [pc, #76]	; (8008670 <BackEndTask+0x160>)
 8008624:	5d9b      	ldrb	r3, [r3, r6]
 8008626:	7812      	ldrb	r2, [r2, #0]
					NotifyMessagingTask(port_number);
 8008628:	9801      	ldr	r0, [sp, #4]
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 800862a:	429a      	cmp	r2, r3
 800862c:	d008      	beq.n	8008640 <BackEndTask+0x130>
 800862e:	3302      	adds	r3, #2
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b01      	cmp	r3, #1
 8008634:	d904      	bls.n	8008640 <BackEndTask+0x130>
					ForwardReceivedMessage(port_number);
 8008636:	f7ff fe6b 	bl	8008310 <ForwardReceivedMessage>
 800863a:	465b      	mov	r3, fp
 800863c:	5d1b      	ldrb	r3, [r3, r4]
 800863e:	e7c4      	b.n	80085ca <BackEndTask+0xba>
					NotifyMessagingTask(port_number);
 8008640:	f7ff fc02 	bl	8007e48 <NotifyMessagingTask>
 8008644:	465b      	mov	r3, fp
 8008646:	5d1b      	ldrb	r3, [r3, r4]
 8008648:	e7bf      	b.n	80085ca <BackEndTask+0xba>
 800864a:	46c0      	nop			; (mov r8, r8)
 800864c:	20001150 	.word	0x20001150
 8008650:	200016dc 	.word	0x200016dc
 8008654:	20006964 	.word	0x20006964
 8008658:	2000115c 	.word	0x2000115c
 800865c:	20001dbc 	.word	0x20001dbc
 8008660:	2000114f 	.word	0x2000114f
 8008664:	20001154 	.word	0x20001154
 8008668:	20000c60 	.word	0x20000c60
 800866c:	20000ca0 	.word	0x20000ca0
 8008670:	20000aa8 	.word	0x20000aa8

08008674 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008674:	2001      	movs	r0, #1
 8008676:	4770      	bx	lr

08008678 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800867a:	464e      	mov	r6, r9
 800867c:	46de      	mov	lr, fp
 800867e:	4645      	mov	r5, r8
 8008680:	4657      	mov	r7, sl
 8008682:	b5e0      	push	{r5, r6, r7, lr}
	port =(int8_t )(unsigned )argument;
 8008684:	b2c3      	uxtb	r3, r0
void PxMessagingTask(void *argument){
 8008686:	b099      	sub	sp, #100	; 0x64
	port =(int8_t )(unsigned )argument;
 8008688:	930d      	str	r3, [sp, #52]	; 0x34
 800868a:	23ff      	movs	r3, #255	; 0xff
 800868c:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 800868e:	1e5c      	subs	r4, r3, #1
 8008690:	930a      	str	r3, [sp, #40]	; 0x28
 8008692:	00e3      	lsls	r3, r4, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008694:	4ae3      	ldr	r2, [pc, #908]	; (8008a24 <PxMessagingTask+0x3ac>)
 8008696:	9306      	str	r3, [sp, #24]
 8008698:	1b1b      	subs	r3, r3, r4
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	4693      	mov	fp, r2
 800869e:	001a      	movs	r2, r3
 80086a0:	445a      	add	r2, fp
 80086a2:	9209      	str	r2, [sp, #36]	; 0x24
	HAL_StatusTypeDef status =HAL_OK;
 80086a4:	2200      	movs	r2, #0
 80086a6:	920f      	str	r2, [sp, #60]	; 0x3c
 80086a8:	4adf      	ldr	r2, [pc, #892]	; (8008a28 <PxMessagingTask+0x3b0>)
 80086aa:	930e      	str	r3, [sp, #56]	; 0x38
 80086ac:	4691      	mov	r9, r2
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	3305      	adds	r3, #5
 80086b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80086b4:	4bdd      	ldr	r3, [pc, #884]	; (8008a2c <PxMessagingTask+0x3b4>)
	BOS_Status result =BOS_OK;
 80086b6:	2600      	movs	r6, #0
 80086b8:	4698      	mov	r8, r3
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80086ba:	2338      	movs	r3, #56	; 0x38
 80086bc:	4363      	muls	r3, r4
 80086be:	9216      	str	r2, [sp, #88]	; 0x58
 80086c0:	445b      	add	r3, fp
 80086c2:	00a2      	lsls	r2, r4, #2
 80086c4:	9210      	str	r2, [sp, #64]	; 0x40
 80086c6:	9305      	str	r3, [sp, #20]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80086c8:	2101      	movs	r1, #1
 80086ca:	2001      	movs	r0, #1
 80086cc:	4249      	negs	r1, r1
 80086ce:	f006 fecf 	bl	800f470 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 80086d2:	464b      	mov	r3, r9
 80086d4:	5d1f      	ldrb	r7, [r3, r4]
 80086d6:	2f00      	cmp	r7, #0
 80086d8:	d100      	bne.n	80086dc <PxMessagingTask+0x64>
 80086da:	e085      	b.n	80087e8 <PxMessagingTask+0x170>
			if(cMessage[port - 1][2] >> 7){
 80086dc:	9b06      	ldr	r3, [sp, #24]
 80086de:	1b1b      	subs	r3, r3, r4
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	445b      	add	r3, fp
 80086e4:	7899      	ldrb	r1, [r3, #2]
 80086e6:	b24b      	sxtb	r3, r1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da01      	bge.n	80086f0 <PxMessagingTask+0x78>
 80086ec:	f000 fcc7 	bl	800907e <PxMessagingTask+0xa06>
				longMessage =0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	4acf      	ldr	r2, [pc, #828]	; (8008a30 <PxMessagingTask+0x3b8>)
 80086f4:	7013      	strb	r3, [r2, #0]
			dst =cMessage[port - 1][0];
 80086f6:	465a      	mov	r2, fp
 80086f8:	9b06      	ldr	r3, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 80086fa:	4fce      	ldr	r7, [pc, #824]	; (8008a34 <PxMessagingTask+0x3bc>)
			dst =cMessage[port - 1][0];
 80086fc:	1b1b      	subs	r3, r3, r4
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	5cd2      	ldrb	r2, [r2, r3]
			src =cMessage[port - 1][1];
 8008702:	445b      	add	r3, fp
			dst =cMessage[port - 1][0];
 8008704:	9207      	str	r2, [sp, #28]
			src =cMessage[port - 1][1];
 8008706:	785a      	ldrb	r2, [r3, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008708:	0708      	lsls	r0, r1, #28
			src =cMessage[port - 1][1];
 800870a:	4692      	mov	sl, r2
 800870c:	2201      	movs	r2, #1
 800870e:	0015      	movs	r5, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008710:	0f80      	lsrs	r0, r0, #30
 8008712:	7078      	strb	r0, [r7, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008714:	0908      	lsrs	r0, r1, #4
 8008716:	400d      	ands	r5, r1
 8008718:	4002      	ands	r2, r0
 800871a:	46ac      	mov	ip, r5
 800871c:	b2d0      	uxtb	r0, r2
 800871e:	70fa      	strb	r2, [r7, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008720:	2260      	movs	r2, #96	; 0x60
 8008722:	4463      	add	r3, ip
 8008724:	400a      	ands	r2, r1
 8008726:	950c      	str	r5, [sp, #48]	; 0x30
 8008728:	703a      	strb	r2, [r7, #0]
 800872a:	002a      	movs	r2, r5
 800872c:	78dd      	ldrb	r5, [r3, #3]
 800872e:	9508      	str	r5, [sp, #32]
			if(extendCode == true){
 8008730:	0789      	lsls	r1, r1, #30
 8008732:	d507      	bpl.n	8008744 <PxMessagingTask+0xcc>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008734:	46ac      	mov	ip, r5
 8008736:	791b      	ldrb	r3, [r3, #4]
				++shift;
 8008738:	3201      	adds	r2, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800873a:	021b      	lsls	r3, r3, #8
 800873c:	4463      	add	r3, ip
 800873e:	b29b      	uxth	r3, r3
 8008740:	9308      	str	r3, [sp, #32]
				++shift;
 8008742:	920c      	str	r2, [sp, #48]	; 0x30
			if(true == BOSMessaging.received_Acknowledgment){
 8008744:	2800      	cmp	r0, #0
 8008746:	d007      	beq.n	8008758 <PxMessagingTask+0xe0>
				BOSMessaging.Acknowledgment =false;
 8008748:	2300      	movs	r3, #0
 800874a:	4aba      	ldr	r2, [pc, #744]	; (8008a34 <PxMessagingTask+0x3bc>)
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800874c:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 800874e:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008750:	4650      	mov	r0, sl
 8008752:	2200      	movs	r2, #0
 8008754:	f7ff fdfc 	bl	8008350 <SendMessageToModule>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008758:	9a07      	ldr	r2, [sp, #28]
 800875a:	1e53      	subs	r3, r2, #1
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2bfc      	cmp	r3, #252	; 0xfc
 8008760:	d801      	bhi.n	8008766 <PxMessagingTask+0xee>
 8008762:	f000 fc71 	bl	8009048 <PxMessagingTask+0x9d0>
 8008766:	464b      	mov	r3, r9
 8008768:	5d1f      	ldrb	r7, [r3, r4]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800876a:	9b07      	ldr	r3, [sp, #28]
 800876c:	2bff      	cmp	r3, #255	; 0xff
 800876e:	d001      	beq.n	8008774 <PxMessagingTask+0xfc>
 8008770:	f000 fcb5 	bl	80090de <PxMessagingTask+0xa66>
 8008774:	9b06      	ldr	r3, [sp, #24]
 8008776:	4ab0      	ldr	r2, [pc, #704]	; (8008a38 <PxMessagingTask+0x3c0>)
 8008778:	1b1d      	subs	r5, r3, r4
 800877a:	00ed      	lsls	r5, r5, #3
 800877c:	445d      	add	r5, fp
 800877e:	19eb      	adds	r3, r5, r7
 8008780:	3b01      	subs	r3, #1
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	7992      	ldrb	r2, [r2, #6]
					result =BOS_ERR_MSG_Reflection;
 8008786:	2603      	movs	r6, #3
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008788:	429a      	cmp	r2, r3
 800878a:	d02d      	beq.n	80087e8 <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800878c:	4aaa      	ldr	r2, [pc, #680]	; (8008a38 <PxMessagingTask+0x3c0>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800878e:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008790:	7193      	strb	r3, [r2, #6]
 8008792:	4aaa      	ldr	r2, [pc, #680]	; (8008a3c <PxMessagingTask+0x3c4>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008794:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008796:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008798:	f7ff fd76 	bl	8008288 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800879c:	464b      	mov	r3, r9
 800879e:	5d1f      	ldrb	r7, [r3, r4]
 80087a0:	2300      	movs	r3, #0
 80087a2:	19ed      	adds	r5, r5, r7
 80087a4:	3d01      	subs	r5, #1
 80087a6:	702b      	strb	r3, [r5, #0]
				shift +=4;
 80087a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087aa:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 80087ac:	1b7a      	subs	r2, r7, r5
 80087ae:	b2d3      	uxtb	r3, r2
 80087b0:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 80087b2:	9b08      	ldr	r3, [sp, #32]
 80087b4:	2b2d      	cmp	r3, #45	; 0x2d
 80087b6:	d901      	bls.n	80087bc <PxMessagingTask+0x144>
 80087b8:	f000 fc79 	bl	80090ae <PxMessagingTask+0xa36>
 80087bc:	4aa0      	ldr	r2, [pc, #640]	; (8008a40 <PxMessagingTask+0x3c8>)
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	58d3      	ldr	r3, [r2, r3]
 80087c2:	469f      	mov	pc, r3
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 80087c4:	9b06      	ldr	r3, [sp, #24]
 80087c6:	1b1b      	subs	r3, r3, r4
 80087c8:	00db      	lsls	r3, r3, #3
 80087ca:	445b      	add	r3, fp
 80087cc:	5d5b      	ldrb	r3, [r3, r5]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <PxMessagingTask+0x15e>
 80087d2:	f000 fd6d 	bl	80092b0 <PxMessagingTask+0xc38>
								myID =cMessage[port - 1][1 + shift];
 80087d6:	9b05      	ldr	r3, [sp, #20]
 80087d8:	4a9a      	ldr	r2, [pc, #616]	; (8008a44 <PxMessagingTask+0x3cc>)
 80087da:	469c      	mov	ip, r3
 80087dc:	4465      	add	r5, ip
 80087de:	786b      	ldrb	r3, [r5, #1]
 80087e0:	7013      	strb	r3, [r2, #0]
 80087e2:	464b      	mov	r3, r9
 80087e4:	2600      	movs	r6, #0
 80087e6:	5d1f      	ldrb	r7, [r3, r4]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80087e8:	003a      	movs	r2, r7
 80087ea:	2100      	movs	r1, #0
 80087ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ee:	f00b f8e3 	bl	80139b8 <memset>
		messageLength[port - 1] =0;
 80087f2:	464b      	mov	r3, r9
 80087f4:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 80087f6:	990a      	ldr	r1, [sp, #40]	; 0x28
		messageLength[port - 1] =0;
 80087f8:	551a      	strb	r2, [r3, r4]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 80087fa:	4b93      	ldr	r3, [pc, #588]	; (8008a48 <PxMessagingTask+0x3d0>)
 80087fc:	5c5b      	ldrb	r3, [r3, r1]
 80087fe:	3b02      	subs	r3, #2
 8008800:	2b02      	cmp	r3, #2
 8008802:	d901      	bls.n	8008808 <PxMessagingTask+0x190>
			portStatus[port] =FREE;
 8008804:	4b90      	ldr	r3, [pc, #576]	; (8008a48 <PxMessagingTask+0x3d0>)
 8008806:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8008808:	f007 f8d6 	bl	800f9b8 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800880c:	e75c      	b.n	80086c8 <PxMessagingTask+0x50>
 800880e:	2308      	movs	r3, #8
 8008810:	469a      	mov	sl, r3
 8008812:	3301      	adds	r3, #1
 8008814:	469c      	mov	ip, r3
 8008816:	44ac      	add	ip, r5
 8008818:	4663      	mov	r3, ip
 800881a:	9308      	str	r3, [sp, #32]
 800881c:	230a      	movs	r3, #10
 800881e:	469c      	mov	ip, r3
 8008820:	44ac      	add	ip, r5
 8008822:	4663      	mov	r3, ip
 8008824:	930c      	str	r3, [sp, #48]	; 0x30
 8008826:	230b      	movs	r3, #11
 8008828:	469c      	mov	ip, r3
 800882a:	44ac      	add	ip, r5
 800882c:	4663      	mov	r3, ip
 800882e:	9307      	str	r3, [sp, #28]
 8008830:	230c      	movs	r3, #12
 8008832:	469c      	mov	ip, r3
 8008834:	9b06      	ldr	r3, [sp, #24]
 8008836:	1da8      	adds	r0, r5, #6
 8008838:	1b1b      	subs	r3, r3, r4
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	445b      	add	r3, fp
 800883e:	195a      	adds	r2, r3, r5
							switch(cMessage[port - 1][0 + shift]){
 8008840:	5d5b      	ldrb	r3, [r3, r5]
 8008842:	1def      	adds	r7, r5, #7
 8008844:	44aa      	add	sl, r5
 8008846:	44ac      	add	ip, r5
 8008848:	7852      	ldrb	r2, [r2, #1]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <PxMessagingTask+0x1da>
 800884e:	f000 fd01 	bl	8009254 <PxMessagingTask+0xbdc>
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <PxMessagingTask+0x1e2>
 8008856:	f000 fccf 	bl	80091f8 <PxMessagingTask+0xb80>
 800885a:	2b02      	cmp	r3, #2
 800885c:	d10c      	bne.n	8008878 <PxMessagingTask+0x200>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800885e:	9b05      	ldr	r3, [sp, #20]
 8008860:	1959      	adds	r1, r3, r5
 8008862:	788b      	ldrb	r3, [r1, #2]
 8008864:	78c8      	ldrb	r0, [r1, #3]
 8008866:	021b      	lsls	r3, r3, #8
 8008868:	0400      	lsls	r0, r0, #16
 800886a:	181b      	adds	r3, r3, r0
 800886c:	189a      	adds	r2, r3, r2
 800886e:	790b      	ldrb	r3, [r1, #4]
 8008870:	061b      	lsls	r3, r3, #24
 8008872:	18d2      	adds	r2, r2, r3
 8008874:	4b75      	ldr	r3, [pc, #468]	; (8008a4c <PxMessagingTask+0x3d4>)
 8008876:	625a      	str	r2, [r3, #36]	; 0x24
							ADCPort =cMessage[port - 1][shift];
 8008878:	9b06      	ldr	r3, [sp, #24]
 800887a:	4a74      	ldr	r2, [pc, #464]	; (8008a4c <PxMessagingTask+0x3d4>)
 800887c:	1b1b      	subs	r3, r3, r4
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	445b      	add	r3, fp
 8008882:	5d58      	ldrb	r0, [r3, r5]
							ADCSide =cMessage[port - 1][shift + 1];
 8008884:	195b      	adds	r3, r3, r5
 8008886:	785b      	ldrb	r3, [r3, #1]
							ADCPort =cMessage[port - 1][shift];
 8008888:	8610      	strh	r0, [r2, #48]	; 0x30
							ADCSide =cMessage[port - 1][shift + 1];
 800888a:	8653      	strh	r3, [r2, #50]	; 0x32
							if(0 == ADCSide){
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <PxMessagingTask+0x21c>
 8008890:	f000 fc7e 	bl	8009190 <PxMessagingTask+0xb18>
							else if(1 == ADCSide){
 8008894:	2b01      	cmp	r3, #1
 8008896:	d10a      	bne.n	80088ae <PxMessagingTask+0x236>
								ADCSelectChannel(ADCPort,"bottom");
 8008898:	496d      	ldr	r1, [pc, #436]	; (8008a50 <PxMessagingTask+0x3d8>)
 800889a:	f004 f8bb 	bl	800ca14 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800889e:	4b6b      	ldr	r3, [pc, #428]	; (8008a4c <PxMessagingTask+0x3d4>)
 80088a0:	4a6a      	ldr	r2, [pc, #424]	; (8008a4c <PxMessagingTask+0x3d4>)
 80088a2:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 80088a4:	3234      	adds	r2, #52	; 0x34
 80088a6:	b2c0      	uxtb	r0, r0
 80088a8:	4969      	ldr	r1, [pc, #420]	; (8008a50 <PxMessagingTask+0x3d8>)
 80088aa:	f004 f903 	bl	800cab4 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 80088ae:	4967      	ldr	r1, [pc, #412]	; (8008a4c <PxMessagingTask+0x3d4>)
 80088b0:	4866      	ldr	r0, [pc, #408]	; (8008a4c <PxMessagingTask+0x3d4>)
 80088b2:	3138      	adds	r1, #56	; 0x38
 80088b4:	303c      	adds	r0, #60	; 0x3c
 80088b6:	f003 fee7 	bl	800c688 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 80088ba:	9b06      	ldr	r3, [sp, #24]
 80088bc:	1b1e      	subs	r6, r3, r4
 80088be:	4b63      	ldr	r3, [pc, #396]	; (8008a4c <PxMessagingTask+0x3d4>)
 80088c0:	00f6      	lsls	r6, r6, #3
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80088c2:	0019      	movs	r1, r3
							ADCPort =cMessage[port - 1][shift];
 80088c4:	445e      	add	r6, fp
 80088c6:	5d70      	ldrb	r0, [r6, r5]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80088c8:	3140      	adds	r1, #64	; 0x40
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80088ca:	1975      	adds	r5, r6, r5
							ADCPort =cMessage[port - 1][shift];
 80088cc:	8618      	strh	r0, [r3, #48]	; 0x30
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80088ce:	f003 ffa1 	bl	800c814 <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80088d2:	79ab      	ldrb	r3, [r5, #6]
 80088d4:	79ea      	ldrb	r2, [r5, #7]
 80088d6:	021b      	lsls	r3, r3, #8
 80088d8:	0412      	lsls	r2, r2, #16
 80088da:	189b      	adds	r3, r3, r2
 80088dc:	796a      	ldrb	r2, [r5, #5]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80088de:	2600      	movs	r6, #0
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80088e0:	189b      	adds	r3, r3, r2
 80088e2:	7a2a      	ldrb	r2, [r5, #8]
 80088e4:	0612      	lsls	r2, r2, #24
 80088e6:	189b      	adds	r3, r3, r2
 80088e8:	4a58      	ldr	r2, [pc, #352]	; (8008a4c <PxMessagingTask+0x3d4>)
 80088ea:	6293      	str	r3, [r2, #40]	; 0x28
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80088ec:	7aab      	ldrb	r3, [r5, #10]
 80088ee:	7aea      	ldrb	r2, [r5, #11]
 80088f0:	021b      	lsls	r3, r3, #8
 80088f2:	0412      	lsls	r2, r2, #16
 80088f4:	189b      	adds	r3, r3, r2
 80088f6:	7a6a      	ldrb	r2, [r5, #9]
 80088f8:	189b      	adds	r3, r3, r2
 80088fa:	7b2a      	ldrb	r2, [r5, #12]
 80088fc:	0612      	lsls	r2, r2, #24
 80088fe:	189b      	adds	r3, r3, r2
 8008900:	4a52      	ldr	r2, [pc, #328]	; (8008a4c <PxMessagingTask+0x3d4>)
 8008902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008904:	464b      	mov	r3, r9
 8008906:	5d1f      	ldrb	r7, [r3, r4]
 8008908:	e76e      	b.n	80087e8 <PxMessagingTask+0x170>
							rejected_FLAG =1;
 800890a:	2301      	movs	r3, #1
 800890c:	4a51      	ldr	r2, [pc, #324]	; (8008a54 <PxMessagingTask+0x3dc>)
 800890e:	7013      	strb	r3, [r2, #0]
 8008910:	e767      	b.n	80087e2 <PxMessagingTask+0x16a>
							ACK_FLAG =1;
 8008912:	2301      	movs	r3, #1
 8008914:	4a50      	ldr	r2, [pc, #320]	; (8008a58 <PxMessagingTask+0x3e0>)
 8008916:	2600      	movs	r6, #0
 8008918:	7013      	strb	r3, [r2, #0]
 800891a:	464b      	mov	r3, r9
 800891c:	5d1f      	ldrb	r7, [r3, r4]
 800891e:	e763      	b.n	80087e8 <PxMessagingTask+0x170>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 8008920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008924:	469c      	mov	ip, r3
 8008926:	9b06      	ldr	r3, [sp, #24]
 8008928:	1c69      	adds	r1, r5, #1
 800892a:	1b1b      	subs	r3, r3, r4
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	445b      	add	r3, fp
 8008930:	5d58      	ldrb	r0, [r3, r5]
 8008932:	230a      	movs	r3, #10
 8008934:	4461      	add	r1, ip
 8008936:	3a01      	subs	r2, #1
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	b292      	uxth	r2, r2
 800893c:	4459      	add	r1, fp
 800893e:	f005 f945 	bl	800dbcc <writePxMutex>
 8008942:	464b      	mov	r3, r9
 8008944:	2600      	movs	r6, #0
 8008946:	5d1f      	ldrb	r7, [r3, r4]
 8008948:	e74e      	b.n	80087e8 <PxMessagingTask+0x170>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800894a:	9b06      	ldr	r3, [sp, #24]
 800894c:	1b1b      	subs	r3, r3, r4
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	445b      	add	r3, fp
 8008952:	5d5b      	ldrb	r3, [r3, r5]
 8008954:	4a41      	ldr	r2, [pc, #260]	; (8008a5c <PxMessagingTask+0x3e4>)
 8008956:	2600      	movs	r6, #0
 8008958:	7013      	strb	r3, [r2, #0]
 800895a:	464b      	mov	r3, r9
 800895c:	5d1f      	ldrb	r7, [r3, r4]
 800895e:	e743      	b.n	80087e8 <PxMessagingTask+0x170>
							responseStatus =BOS_OK; // Initialize response
 8008960:	2300      	movs	r3, #0
 8008962:	4a3e      	ldr	r2, [pc, #248]	; (8008a5c <PxMessagingTask+0x3e4>)
 8008964:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 8008966:	9b06      	ldr	r3, [sp, #24]
 8008968:	1b1b      	subs	r3, r3, r4
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	445b      	add	r3, fp
 800896e:	5d5e      	ldrb	r6, [r3, r5]
 8008970:	2e00      	cmp	r6, #0
 8008972:	d101      	bne.n	8008978 <PxMessagingTask+0x300>
 8008974:	f000 ff54 	bl	8009820 <PxMessagingTask+0x11a8>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 8008978:	2e1e      	cmp	r6, #30
 800897a:	d901      	bls.n	8008980 <PxMessagingTask+0x308>
 800897c:	f000 ff4c 	bl	8009818 <PxMessagingTask+0x11a0>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8008980:	2280      	movs	r2, #128	; 0x80
									switch(cMessage[port - 1][1 + shift]) // requested format
 8008982:	9905      	ldr	r1, [sp, #20]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8008984:	0592      	lsls	r2, r2, #22
 8008986:	4694      	mov	ip, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 8008988:	1c6a      	adds	r2, r5, #1
 800898a:	5c8f      	ldrb	r7, [r1, r2]
 800898c:	9207      	str	r2, [sp, #28]
 800898e:	220f      	movs	r2, #15
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8008990:	3e01      	subs	r6, #1
 8008992:	4b33      	ldr	r3, [pc, #204]	; (8008a60 <PxMessagingTask+0x3e8>)
 8008994:	00b6      	lsls	r6, r6, #2
 8008996:	599b      	ldr	r3, [r3, r6]
 8008998:	0c18      	lsrs	r0, r3, #16
 800899a:	4013      	ands	r3, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 800899c:	1e7a      	subs	r2, r7, #1
 800899e:	b2d2      	uxtb	r2, r2
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 80089a0:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 80089a2:	2a07      	cmp	r2, #7
 80089a4:	d901      	bls.n	80089aa <PxMessagingTask+0x332>
 80089a6:	f000 fdbd 	bl	8009524 <PxMessagingTask+0xeac>
 80089aa:	492e      	ldr	r1, [pc, #184]	; (8008a64 <PxMessagingTask+0x3ec>)
 80089ac:	0092      	lsls	r2, r2, #2
 80089ae:	588a      	ldr	r2, [r1, r2]
 80089b0:	4697      	mov	pc, r2
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 80089b2:	2202      	movs	r2, #2
 80089b4:	4252      	negs	r2, r2
 80089b6:	17d3      	asrs	r3, r2, #31
 80089b8:	4641      	mov	r1, r8
 80089ba:	6808      	ldr	r0, [r1, #0]
 80089bc:	6849      	ldr	r1, [r1, #4]
 80089be:	1812      	adds	r2, r2, r0
 80089c0:	414b      	adcs	r3, r1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <PxMessagingTask+0x352>
 80089c6:	f000 fcb7 	bl	8009338 <PxMessagingTask+0xcc0>
 80089ca:	464b      	mov	r3, r9
 80089cc:	5d1f      	ldrb	r7, [r3, r4]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 80089ce:	4b23      	ldr	r3, [pc, #140]	; (8008a5c <PxMessagingTask+0x3e4>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	2b10      	cmp	r3, #16
 80089d4:	d101      	bne.n	80089da <PxMessagingTask+0x362>
 80089d6:	f000 fcac 	bl	8009332 <PxMessagingTask+0xcba>
								responseStatus =BOS_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	4a1f      	ldr	r2, [pc, #124]	; (8008a5c <PxMessagingTask+0x3e4>)
 80089de:	2600      	movs	r6, #0
 80089e0:	7013      	strb	r3, [r2, #0]
 80089e2:	e701      	b.n	80087e8 <PxMessagingTask+0x170>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 80089e4:	9b06      	ldr	r3, [sp, #24]
 80089e6:	1b1b      	subs	r3, r3, r4
 80089e8:	00db      	lsls	r3, r3, #3
 80089ea:	445b      	add	r3, fp
 80089ec:	5d5b      	ldrb	r3, [r3, r5]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <PxMessagingTask+0x37e>
 80089f2:	f000 fd6a 	bl	80094ca <PxMessagingTask+0xe52>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80089f6:	9b05      	ldr	r3, [sp, #20]
 80089f8:	469c      	mov	ip, r3
 80089fa:	4465      	add	r5, ip
 80089fc:	78ab      	ldrb	r3, [r5, #2]
 80089fe:	78ea      	ldrb	r2, [r5, #3]
 8008a00:	061b      	lsls	r3, r3, #24
 8008a02:	0412      	lsls	r2, r2, #16
 8008a04:	189b      	adds	r3, r3, r2
 8008a06:	796a      	ldrb	r2, [r5, #5]
 8008a08:	189b      	adds	r3, r3, r2
 8008a0a:	792a      	ldrb	r2, [r5, #4]
 8008a0c:	0212      	lsls	r2, r2, #8
 8008a0e:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 8008a10:	786a      	ldrb	r2, [r5, #1]
 8008a12:	3a01      	subs	r2, #1
 8008a14:	b2d2      	uxtb	r2, r2
 8008a16:	2a07      	cmp	r2, #7
 8008a18:	d900      	bls.n	8008a1c <PxMessagingTask+0x3a4>
 8008a1a:	e6e2      	b.n	80087e2 <PxMessagingTask+0x16a>
 8008a1c:	4912      	ldr	r1, [pc, #72]	; (8008a68 <PxMessagingTask+0x3f0>)
 8008a1e:	0092      	lsls	r2, r2, #2
 8008a20:	588a      	ldr	r2, [r1, r2]
 8008a22:	4697      	mov	pc, r2
 8008a24:	20000ca0 	.word	0x20000ca0
 8008a28:	20000c60 	.word	0x20000c60
 8008a2c:	20000c50 	.word	0x20000c50
 8008a30:	20000c5c 	.word	0x20000c5c
 8008a34:	200067fc 	.word	0x200067fc
 8008a38:	20001dbc 	.word	0x20001dbc
 8008a3c:	20000c58 	.word	0x20000c58
 8008a40:	08018568 	.word	0x08018568
 8008a44:	20000aa8 	.word	0x20000aa8
 8008a48:	20000c3c 	.word	0x20000c3c
 8008a4c:	20001e3c 	.word	0x20001e3c
 8008a50:	08019624 	.word	0x08019624
 8008a54:	2000114c 	.word	0x2000114c
 8008a58:	2000114d 	.word	0x2000114d
 8008a5c:	20000c4c 	.word	0x20000c4c
 8008a60:	20006804 	.word	0x20006804
 8008a64:	08018620 	.word	0x08018620
 8008a68:	08018640 	.word	0x08018640
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008a6c:	9b06      	ldr	r3, [sp, #24]
 8008a6e:	49de      	ldr	r1, [pc, #888]	; (8008de8 <PxMessagingTask+0x770>)
 8008a70:	1b18      	subs	r0, r3, r4
 8008a72:	00c0      	lsls	r0, r0, #3
 8008a74:	7809      	ldrb	r1, [r1, #0]
 8008a76:	4458      	add	r0, fp
 8008a78:	1942      	adds	r2, r0, r5
 8008a7a:	468c      	mov	ip, r1
 8008a7c:	7a51      	ldrb	r1, [r2, #9]
 8008a7e:	7ad7      	ldrb	r7, [r2, #11]
 8008a80:	468a      	mov	sl, r1
 8008a82:	7b11      	ldrb	r1, [r2, #12]
 8008a84:	7a93      	ldrb	r3, [r2, #10]
 8008a86:	000e      	movs	r6, r1
 8008a88:	1e71      	subs	r1, r6, #1
 8008a8a:	418e      	sbcs	r6, r1
 8008a8c:	9603      	str	r6, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008a8e:	7916      	ldrb	r6, [r2, #4]
 8008a90:	7951      	ldrb	r1, [r2, #5]
 8008a92:	0636      	lsls	r6, r6, #24
 8008a94:	0409      	lsls	r1, r1, #16
 8008a96:	1871      	adds	r1, r6, r1
 8008a98:	79d6      	ldrb	r6, [r2, #7]
 8008a9a:	1989      	adds	r1, r1, r6
 8008a9c:	7996      	ldrb	r6, [r2, #6]
 8008a9e:	0236      	lsls	r6, r6, #8
 8008aa0:	1989      	adds	r1, r1, r6
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008aa2:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008aa4:	5d41      	ldrb	r1, [r0, r5]
 8008aa6:	78d0      	ldrb	r0, [r2, #3]
 8008aa8:	0609      	lsls	r1, r1, #24
 8008aaa:	1809      	adds	r1, r1, r0
 8008aac:	7850      	ldrb	r0, [r2, #1]
 8008aae:	0400      	lsls	r0, r0, #16
 8008ab0:	1809      	adds	r1, r1, r0
 8008ab2:	7890      	ldrb	r0, [r2, #2]
 8008ab4:	0200      	lsls	r0, r0, #8
 8008ab6:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008ab8:	9101      	str	r1, [sp, #4]
 8008aba:	7a12      	ldrb	r2, [r2, #8]
 8008abc:	4661      	mov	r1, ip
 8008abe:	9200      	str	r2, [sp, #0]
 8008ac0:	4650      	mov	r0, sl
 8008ac2:	003a      	movs	r2, r7
 8008ac4:	f7ff fc68 	bl	8008398 <StartScastDMAStream>
 8008ac8:	e68b      	b.n	80087e2 <PxMessagingTask+0x16a>
							SaveToRO();
 8008aca:	f001 f989 	bl	8009de0 <SaveToRO>
							SaveEEportsDir();
 8008ace:	f7fa fddf 	bl	8003690 <SaveEEportsDir>
							indMode =IND_PING;
 8008ad2:	2301      	movs	r3, #1
							indMode =IND_TOPOLOGY;
 8008ad4:	4ac5      	ldr	r2, [pc, #788]	; (8008dec <PxMessagingTask+0x774>)
 8008ad6:	2600      	movs	r6, #0
 8008ad8:	7013      	strb	r3, [r2, #0]
 8008ada:	464b      	mov	r3, r9
 8008adc:	5d1f      	ldrb	r7, [r3, r4]
 8008ade:	e683      	b.n	80087e8 <PxMessagingTask+0x170>
							for(p =0; p < numOfParams; p++){
 8008ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01d      	beq.n	8008b22 <PxMessagingTask+0x4aa>
 8008ae6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008ae8:	4659      	mov	r1, fp
 8008aea:	46b4      	mov	ip, r6
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8008aec:	4652      	mov	r2, sl
 8008aee:	1970      	adds	r0, r6, r5
 8008af0:	2680      	movs	r6, #128	; 0x80
 8008af2:	3101      	adds	r1, #1
 8008af4:	4461      	add	r1, ip
 8008af6:	194d      	adds	r5, r1, r5
 8008af8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008afa:	3a01      	subs	r2, #1
 8008afc:	4bbc      	ldr	r3, [pc, #752]	; (8008df0 <PxMessagingTask+0x778>)
 8008afe:	0052      	lsls	r2, r2, #1
 8008b00:	3901      	subs	r1, #1
 8008b02:	b2c9      	uxtb	r1, r1
 8008b04:	5a9b      	ldrh	r3, [r3, r2]
 8008b06:	4458      	add	r0, fp
 8008b08:	186d      	adds	r5, r5, r1
 8008b0a:	0236      	lsls	r6, r6, #8
 8008b0c:	0037      	movs	r7, r6
 8008b0e:	7801      	ldrb	r1, [r0, #0]
 8008b10:	3001      	adds	r0, #1
 8008b12:	3901      	subs	r1, #1
 8008b14:	410f      	asrs	r7, r1
 8008b16:	433b      	orrs	r3, r7
 8008b18:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 8008b1a:	4285      	cmp	r5, r0
 8008b1c:	d1f6      	bne.n	8008b0c <PxMessagingTask+0x494>
 8008b1e:	49b4      	ldr	r1, [pc, #720]	; (8008df0 <PxMessagingTask+0x778>)
 8008b20:	528b      	strh	r3, [r1, r2]
							responseStatus =BOS_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	e716      	b.n	8008954 <PxMessagingTask+0x2dc>
							ReadPortsDirMSG(src);
 8008b26:	4650      	mov	r0, sl
 8008b28:	f005 f914 	bl	800dd54 <ReadPortsDirMSG>
 8008b2c:	464b      	mov	r3, r9
 8008b2e:	2600      	movs	r6, #0
 8008b30:	5d1f      	ldrb	r7, [r3, r4]
 8008b32:	e659      	b.n	80087e8 <PxMessagingTask+0x170>
 8008b34:	4baf      	ldr	r3, [pc, #700]	; (8008df4 <PxMessagingTask+0x77c>)
 8008b36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b38:	881e      	ldrh	r6, [r3, #0]
 8008b3a:	4baf      	ldr	r3, [pc, #700]	; (8008df8 <PxMessagingTask+0x780>)
 8008b3c:	4694      	mov	ip, r2
 8008b3e:	1998      	adds	r0, r3, r6
 8008b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b42:	4466      	add	r6, ip
 8008b44:	18e9      	adds	r1, r5, r3
 8008b46:	464b      	mov	r3, r9
 8008b48:	5d1f      	ldrb	r7, [r3, r4]
							if(longMessage){
 8008b4a:	4bac      	ldr	r3, [pc, #688]	; (8008dfc <PxMessagingTask+0x784>)
 8008b4c:	b2b6      	uxth	r6, r6
 8008b4e:	781d      	ldrb	r5, [r3, #0]
 8008b50:	4459      	add	r1, fp
 8008b52:	2d00      	cmp	r5, #0
 8008b54:	d101      	bne.n	8008b5a <PxMessagingTask+0x4e2>
 8008b56:	f000 fc69 	bl	800942c <PxMessagingTask+0xdb4>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008b5a:	f00a ff24 	bl	80139a6 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008b5e:	4ba5      	ldr	r3, [pc, #660]	; (8008df4 <PxMessagingTask+0x77c>)
 8008b60:	801e      	strh	r6, [r3, #0]
 8008b62:	2600      	movs	r6, #0
 8008b64:	e640      	b.n	80087e8 <PxMessagingTask+0x170>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008b66:	2601      	movs	r6, #1
 8008b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b6a:	18ef      	adds	r7, r5, r3
 8008b6c:	445f      	add	r7, fp
								if(p != port)
 8008b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b70:	42b3      	cmp	r3, r6
 8008b72:	d005      	beq.n	8008b80 <PxMessagingTask+0x508>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8008b74:	0030      	movs	r0, r6
 8008b76:	f005 f88d 	bl	800dc94 <GetUart>
 8008b7a:	7839      	ldrb	r1, [r7, #0]
 8008b7c:	f005 f896 	bl	800dcac <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008b80:	3601      	adds	r6, #1
 8008b82:	b2f6      	uxtb	r6, r6
 8008b84:	3701      	adds	r7, #1
 8008b86:	2e06      	cmp	r6, #6
 8008b88:	d1f1      	bne.n	8008b6e <PxMessagingTask+0x4f6>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 8008b8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008b8c:	f005 f882 	bl	800dc94 <GetUart>
 8008b90:	9b06      	ldr	r3, [sp, #24]
 8008b92:	2600      	movs	r6, #0
 8008b94:	1b1b      	subs	r3, r3, r4
 8008b96:	00db      	lsls	r3, r3, #3
 8008b98:	445b      	add	r3, fp
 8008b9a:	195d      	adds	r5, r3, r5
 8008b9c:	7aa9      	ldrb	r1, [r5, #10]
 8008b9e:	f005 f885 	bl	800dcac <SwapUartPins>
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	5d1f      	ldrb	r7, [r3, r4]
 8008ba6:	e61f      	b.n	80087e8 <PxMessagingTask+0x170>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008ba8:	9b06      	ldr	r3, [sp, #24]
 8008baa:	1b1b      	subs	r3, r3, r4
 8008bac:	00db      	lsls	r3, r3, #3
 8008bae:	445b      	add	r3, fp
 8008bb0:	5d5f      	ldrb	r7, [r3, r5]
 8008bb2:	195b      	adds	r3, r3, r5
 8008bb4:	78da      	ldrb	r2, [r3, #3]
 8008bb6:	063f      	lsls	r7, r7, #24
 8008bb8:	18bf      	adds	r7, r7, r2
 8008bba:	785a      	ldrb	r2, [r3, #1]
 8008bbc:	0412      	lsls	r2, r2, #16
 8008bbe:	18bf      	adds	r7, r7, r2
 8008bc0:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008bc2:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008bc4:	0212      	lsls	r2, r2, #8
 8008bc6:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008bc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bca:	2bff      	cmp	r3, #255	; 0xff
 8008bcc:	d101      	bne.n	8008bd2 <PxMessagingTask+0x55a>
 8008bce:	f000 fc4e 	bl	800946e <PxMessagingTask+0xdf6>
								for(p =0; p < numOfParams; p++){
 8008bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	d101      	bne.n	8008bdc <PxMessagingTask+0x564>
 8008bd8:	f000 fc42 	bl	8009460 <PxMessagingTask+0xde8>
 8008bdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bde:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008be0:	195e      	adds	r6, r3, r5
 8008be2:	465b      	mov	r3, fp
 8008be4:	468c      	mov	ip, r1
 8008be6:	3305      	adds	r3, #5
 8008be8:	4463      	add	r3, ip
 8008bea:	195d      	adds	r5, r3, r5
 8008bec:	0013      	movs	r3, r2
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	18ed      	adds	r5, r5, r3
									if(temp > 0 && temp <= NumOfPorts){
 8008bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bf6:	445e      	add	r6, fp
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	d90a      	bls.n	8008c16 <PxMessagingTask+0x59e>
								for(p =0; p < numOfParams; p++){
 8008c00:	42b5      	cmp	r5, r6
 8008c02:	d100      	bne.n	8008c06 <PxMessagingTask+0x58e>
 8008c04:	e5ed      	b.n	80087e2 <PxMessagingTask+0x16a>
 8008c06:	7833      	ldrb	r3, [r6, #0]
 8008c08:	3601      	adds	r6, #1
 8008c0a:	930b      	str	r3, [sp, #44]	; 0x2c
									if(temp > 0 && temp <= NumOfPorts){
 8008c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d8f4      	bhi.n	8008c00 <PxMessagingTask+0x588>
										UpdateBaudrate(temp,temp32);
 8008c16:	0039      	movs	r1, r7
 8008c18:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008c1a:	f005 f829 	bl	800dc70 <UpdateBaudrate>
 8008c1e:	e7ef      	b.n	8008c00 <PxMessagingTask+0x588>
							temp =numOfParams / 5;
 8008c20:	2105      	movs	r1, #5
 8008c22:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c24:	f7f7 fa94 	bl	8000150 <__udivsi3>
 8008c28:	b2c2      	uxtb	r2, r0
 8008c2a:	920b      	str	r2, [sp, #44]	; 0x2c
							for(uint8_t k =0; k < temp; k++){
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	d100      	bne.n	8008c32 <PxMessagingTask+0x5ba>
 8008c30:	e777      	b.n	8008b22 <PxMessagingTask+0x4aa>
 8008c32:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008c34:	465b      	mov	r3, fp
 8008c36:	468c      	mov	ip, r1
 8008c38:	3305      	adds	r3, #5
 8008c3a:	4463      	add	r3, ip
 8008c3c:	194e      	adds	r6, r1, r5
 8008c3e:	195d      	adds	r5, r3, r5
 8008c40:	1e53      	subs	r3, r2, #1
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	009a      	lsls	r2, r3, #2
 8008c46:	18d3      	adds	r3, r2, r3
 8008c48:	445e      	add	r6, fp
 8008c4a:	18ed      	adds	r5, r5, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008c4c:	4b6c      	ldr	r3, [pc, #432]	; (8008e00 <PxMessagingTask+0x788>)
 8008c4e:	7830      	ldrb	r0, [r6, #0]
 8008c50:	469c      	mov	ip, r3
 8008c52:	3801      	subs	r0, #1
 8008c54:	0080      	lsls	r0, r0, #2
 8008c56:	1c71      	adds	r1, r6, #1
 8008c58:	4460      	add	r0, ip
 8008c5a:	2204      	movs	r2, #4
 8008c5c:	3605      	adds	r6, #5
 8008c5e:	f00a fea2 	bl	80139a6 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 8008c62:	42b5      	cmp	r5, r6
 8008c64:	d1f2      	bne.n	8008c4c <PxMessagingTask+0x5d4>
							responseStatus =BOS_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	e674      	b.n	8008954 <PxMessagingTask+0x2dc>
							ExploreNeighbors(port);
 8008c6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008c6c:	f7fa ff88 	bl	8003b80 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008c70:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008c72:	2501      	movs	r5, #1
							temp =0;
 8008c74:	2700      	movs	r7, #0
							indMode =IND_TOPOLOGY;
 8008c76:	4a5d      	ldr	r2, [pc, #372]	; (8008dec <PxMessagingTask+0x774>)
							osDelay(10);
 8008c78:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 8008c7a:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008c7c:	f005 f940 	bl	800df00 <osDelay>
 8008c80:	4e60      	ldr	r6, [pc, #384]	; (8008e04 <PxMessagingTask+0x78c>)
								if(neighbors[p - 1][0]){
 8008c82:	8833      	ldrh	r3, [r6, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00a      	beq.n	8008c9e <PxMessagingTask+0x626>
									messageParams[temp] =p;
 8008c88:	4b5f      	ldr	r3, [pc, #380]	; (8008e08 <PxMessagingTask+0x790>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008c8a:	1c78      	adds	r0, r7, #1
 8008c8c:	469c      	mov	ip, r3
 8008c8e:	2204      	movs	r2, #4
 8008c90:	4460      	add	r0, ip
 8008c92:	0031      	movs	r1, r6
									messageParams[temp] =p;
 8008c94:	55dd      	strb	r5, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008c96:	f00a fe86 	bl	80139a6 <memcpy>
									temp +=5;
 8008c9a:	3705      	adds	r7, #5
 8008c9c:	b2ff      	uxtb	r7, r7
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008c9e:	3501      	adds	r5, #1
 8008ca0:	b2ed      	uxtb	r5, r5
 8008ca2:	3604      	adds	r6, #4
 8008ca4:	2d06      	cmp	r5, #6
 8008ca6:	d1ec      	bne.n	8008c82 <PxMessagingTask+0x60a>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8008ca8:	210d      	movs	r1, #13
 8008caa:	970b      	str	r7, [sp, #44]	; 0x2c
 8008cac:	b2ba      	uxth	r2, r7
										SendMessageToModule(src,
 8008cae:	4650      	mov	r0, sl
 8008cb0:	f7ff fb4e 	bl	8008350 <SendMessageToModule>
 8008cb4:	e595      	b.n	80087e2 <PxMessagingTask+0x16a>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008cb6:	4651      	mov	r1, sl
 8008cb8:	9b06      	ldr	r3, [sp, #24]
 8008cba:	0209      	lsls	r1, r1, #8
 8008cbc:	1b1b      	subs	r3, r3, r4
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	445b      	add	r3, fp
 8008cc2:	1958      	adds	r0, r3, r5
 8008cc4:	7882      	ldrb	r2, [r0, #2]
 8008cc6:	4e4f      	ldr	r6, [pc, #316]	; (8008e04 <PxMessagingTask+0x78c>)
 8008cc8:	1852      	adds	r2, r2, r1
 8008cca:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008ccc:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008cce:	468c      	mov	ip, r1
 8008cd0:	0032      	movs	r2, r6
 8008cd2:	5d59      	ldrb	r1, [r3, r5]
 8008cd4:	7843      	ldrb	r3, [r0, #1]
 8008cd6:	0209      	lsls	r1, r1, #8
 8008cd8:	185b      	adds	r3, r3, r1
 8008cda:	4462      	add	r2, ip
 8008cdc:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	e638      	b.n	8008954 <PxMessagingTask+0x2dc>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008ce2:	4651      	mov	r1, sl
 8008ce4:	9b06      	ldr	r3, [sp, #24]
 8008ce6:	0209      	lsls	r1, r1, #8
 8008ce8:	1b1b      	subs	r3, r3, r4
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	445b      	add	r3, fp
 8008cee:	1958      	adds	r0, r3, r5
 8008cf0:	7882      	ldrb	r2, [r0, #2]
 8008cf2:	4e44      	ldr	r6, [pc, #272]	; (8008e04 <PxMessagingTask+0x78c>)
 8008cf4:	1852      	adds	r2, r2, r1
 8008cf6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008cf8:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008cfa:	468c      	mov	ip, r1
 8008cfc:	0032      	movs	r2, r6
 8008cfe:	5d59      	ldrb	r1, [r3, r5]
 8008d00:	7843      	ldrb	r3, [r0, #1]
 8008d02:	0209      	lsls	r1, r1, #8
 8008d04:	4462      	add	r2, ip
 8008d06:	185b      	adds	r3, r3, r1
 8008d08:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 8008d0a:	4b40      	ldr	r3, [pc, #256]	; (8008e0c <PxMessagingTask+0x794>)
 8008d0c:	4a3e      	ldr	r2, [pc, #248]	; (8008e08 <PxMessagingTask+0x790>)
 8008d0e:	881b      	ldrh	r3, [r3, #0]
							messageParams[2] =port;
 8008d10:	9d0d      	ldr	r5, [sp, #52]	; 0x34
							messageParams[1] =(uint8_t )myPN;
 8008d12:	7053      	strb	r3, [r2, #1]
							osDelay(2);
 8008d14:	2002      	movs	r0, #2
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008d1a:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8008d1c:	f005 f8f0 	bl	800df00 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8008d20:	2303      	movs	r3, #3
 8008d22:	2200      	movs	r2, #0
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	2100      	movs	r1, #0
 8008d28:	3308      	adds	r3, #8
 8008d2a:	0028      	movs	r0, r5
 8008d2c:	f7ff f8b0 	bl	8007e90 <SendMessageFromPort>
 8008d30:	464b      	mov	r3, r9
 8008d32:	2600      	movs	r6, #0
 8008d34:	5d1f      	ldrb	r7, [r3, r4]
 8008d36:	e557      	b.n	80087e8 <PxMessagingTask+0x170>
							IND_toggle();
 8008d38:	2180      	movs	r1, #128	; 0x80
 8008d3a:	2090      	movs	r0, #144	; 0x90
 8008d3c:	0109      	lsls	r1, r1, #4
 8008d3e:	05c0      	lsls	r0, r0, #23
 8008d40:	f008 fc4e 	bl	80115e0 <HAL_GPIO_TogglePin>
 8008d44:	464b      	mov	r3, r9
 8008d46:	2600      	movs	r6, #0
 8008d48:	5d1f      	ldrb	r7, [r3, r4]
 8008d4a:	e54d      	b.n	80087e8 <PxMessagingTask+0x170>
							IND_OFF();
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2180      	movs	r1, #128	; 0x80
 8008d50:	2090      	movs	r0, #144	; 0x90
 8008d52:	0109      	lsls	r1, r1, #4
 8008d54:	05c0      	lsls	r0, r0, #23
 8008d56:	f008 fc3d 	bl	80115d4 <HAL_GPIO_WritePin>
 8008d5a:	e542      	b.n	80087e2 <PxMessagingTask+0x16a>
							IND_ON();
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	e7f6      	b.n	8008d4e <PxMessagingTask+0x6d6>
							if(!moduleAlias[myID][0])
 8008d60:	4b21      	ldr	r3, [pc, #132]	; (8008de8 <PxMessagingTask+0x770>)
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	0093      	lsls	r3, r2, #2
 8008d66:	189b      	adds	r3, r3, r2
 8008d68:	4a29      	ldr	r2, [pc, #164]	; (8008e10 <PxMessagingTask+0x798>)
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	5cd3      	ldrb	r3, [r2, r3]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d000      	beq.n	8008d74 <PxMessagingTask+0x6fc>
 8008d72:	e2d1      	b.n	8009318 <PxMessagingTask+0xca0>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8008d74:	4827      	ldr	r0, [pc, #156]	; (8008e14 <PxMessagingTask+0x79c>)
 8008d76:	4652      	mov	r2, sl
 8008d78:	3008      	adds	r0, #8
 8008d7a:	4927      	ldr	r1, [pc, #156]	; (8008e18 <PxMessagingTask+0x7a0>)
 8008d7c:	f00b f816 	bl	8013dac <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008d80:	4d24      	ldr	r5, [pc, #144]	; (8008e14 <PxMessagingTask+0x79c>)
 8008d82:	3508      	adds	r5, #8
 8008d84:	0028      	movs	r0, r5
 8008d86:	f7f7 f9c7 	bl	8000118 <strlen>
 8008d8a:	4b24      	ldr	r3, [pc, #144]	; (8008e1c <PxMessagingTask+0x7a4>)
 8008d8c:	b282      	uxth	r2, r0
 8008d8e:	7818      	ldrb	r0, [r3, #0]
 8008d90:	2301      	movs	r3, #1
 8008d92:	425b      	negs	r3, r3
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	0029      	movs	r1, r5
 8008d98:	3333      	adds	r3, #51	; 0x33
 8008d9a:	f004 ff17 	bl	800dbcc <writePxMutex>
							responseStatus =BOS_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e5d8      	b.n	8008954 <PxMessagingTask+0x2dc>
							indMode =IND_PING;
 8008da2:	2301      	movs	r3, #1
 8008da4:	4a11      	ldr	r2, [pc, #68]	; (8008dec <PxMessagingTask+0x774>)
							osDelay(10);
 8008da6:	200a      	movs	r0, #10
							indMode =IND_PING;
 8008da8:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008daa:	f005 f8a9 	bl	800df00 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008dae:	2240      	movs	r2, #64	; 0x40
 8008db0:	4b1b      	ldr	r3, [pc, #108]	; (8008e20 <PxMessagingTask+0x7a8>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	4393      	bics	r3, r2
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	d000      	beq.n	8008dbc <PxMessagingTask+0x744>
 8008dba:	e512      	b.n	80087e2 <PxMessagingTask+0x16a>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2102      	movs	r1, #2
 8008dc0:	e775      	b.n	8008cae <PxMessagingTask+0x636>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008dc2:	4b18      	ldr	r3, [pc, #96]	; (8008e24 <PxMessagingTask+0x7ac>)
 8008dc4:	4a18      	ldr	r2, [pc, #96]	; (8008e28 <PxMessagingTask+0x7b0>)
							osDelay(10);
 8008dc6:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008dc8:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	4a07      	ldr	r2, [pc, #28]	; (8008dec <PxMessagingTask+0x774>)
 8008dce:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008dd0:	f005 f896 	bl	800df00 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	4b14      	ldr	r3, [pc, #80]	; (8008e2c <PxMessagingTask+0x7b4>)
 8008dda:	4a15      	ldr	r2, [pc, #84]	; (8008e30 <PxMessagingTask+0x7b8>)
 8008ddc:	60da      	str	r2, [r3, #12]
 8008dde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	e7fd      	b.n	8008de2 <PxMessagingTask+0x76a>
 8008de6:	46c0      	nop			; (mov r8, r8)
 8008de8:	20000aa8 	.word	0x20000aa8
 8008dec:	2000114e 	.word	0x2000114e
 8008df0:	20006d3c 	.word	0x20006d3c
 8008df4:	20000c5a 	.word	0x20000c5a
 8008df8:	20001e80 	.word	0x20001e80
 8008dfc:	20000c5c 	.word	0x20000c5c
 8008e00:	20001124 	.word	0x20001124
 8008e04:	20001138 	.word	0x20001138
 8008e08:	20000b4c 	.word	0x20000b4c
 8008e0c:	20000038 	.word	0x20000038
 8008e10:	20000dd4 	.word	0x20000dd4
 8008e14:	20001dbc 	.word	0x20001dbc
 8008e18:	0801a128 	.word	0x0801a128
 8008e1c:	20000c38 	.word	0x20000c38
 8008e20:	200067fc 	.word	0x200067fc
 8008e24:	20007ff0 	.word	0x20007ff0
 8008e28:	deadbeef 	.word	0xdeadbeef
 8008e2c:	e000ed00 	.word	0xe000ed00
 8008e30:	05fa0004 	.word	0x05fa0004
							temp =cMessage[port - 1][11 + shift];
 8008e34:	230b      	movs	r3, #11
 8008e36:	469c      	mov	ip, r3
 8008e38:	44ac      	add	ip, r5
 8008e3a:	4662      	mov	r2, ip
 8008e3c:	9b06      	ldr	r3, [sp, #24]
 8008e3e:	9207      	str	r2, [sp, #28]
 8008e40:	1b1b      	subs	r3, r3, r4
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	445b      	add	r3, fp
 8008e46:	5c9b      	ldrb	r3, [r3, r2]
							if(numOfParams == 15)
 8008e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e4a:	2a0f      	cmp	r2, #15
 8008e4c:	d100      	bne.n	8008e50 <PxMessagingTask+0x7d8>
 8008e4e:	e318      	b.n	8009482 <PxMessagingTask+0xe0a>
							if(numOfParams == 17)
 8008e50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
							temp =cMessage[port - 1][11 + shift];
 8008e52:	0019      	movs	r1, r3
							if(numOfParams == 17)
 8008e54:	2a11      	cmp	r2, #17
 8008e56:	d100      	bne.n	8008e5a <PxMessagingTask+0x7e2>
 8008e58:	e317      	b.n	800948a <PxMessagingTask+0xe12>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008e5a:	9f06      	ldr	r7, [sp, #24]
 8008e5c:	1caa      	adds	r2, r5, #2
 8008e5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008e60:	1b3a      	subs	r2, r7, r4
 8008e62:	00d2      	lsls	r2, r2, #3
 8008e64:	445a      	add	r2, fp
 8008e66:	1ce8      	adds	r0, r5, #3
 8008e68:	5d57      	ldrb	r7, [r2, r5]
 8008e6a:	9011      	str	r0, [sp, #68]	; 0x44
 8008e6c:	5c10      	ldrb	r0, [r2, r0]
 8008e6e:	1c6e      	adds	r6, r5, #1
 8008e70:	063f      	lsls	r7, r7, #24
 8008e72:	183f      	adds	r7, r7, r0
 8008e74:	5d90      	ldrb	r0, [r2, r6]
 8008e76:	9608      	str	r6, [sp, #32]
 8008e78:	0400      	lsls	r0, r0, #16
 8008e7a:	183f      	adds	r7, r7, r0
 8008e7c:	1ca8      	adds	r0, r5, #2
 8008e7e:	5c10      	ldrb	r0, [r2, r0]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008e80:	1d6e      	adds	r6, r5, #5
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008e82:	0200      	lsls	r0, r0, #8
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008e84:	9613      	str	r6, [sp, #76]	; 0x4c
 8008e86:	1dae      	adds	r6, r5, #6
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008e88:	183f      	adds	r7, r7, r0
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008e8a:	9614      	str	r6, [sp, #80]	; 0x50
 8008e8c:	1d28      	adds	r0, r5, #4
 8008e8e:	1dee      	adds	r6, r5, #7
 8008e90:	9012      	str	r0, [sp, #72]	; 0x48
 8008e92:	9615      	str	r6, [sp, #84]	; 0x54
 8008e94:	5c16      	ldrb	r6, [r2, r0]
 8008e96:	1d68      	adds	r0, r5, #5
 8008e98:	5c10      	ldrb	r0, [r2, r0]
 8008e9a:	0636      	lsls	r6, r6, #24
 8008e9c:	0400      	lsls	r0, r0, #16
 8008e9e:	1836      	adds	r6, r6, r0
 8008ea0:	1de8      	adds	r0, r5, #7
 8008ea2:	5c10      	ldrb	r0, [r2, r0]
 8008ea4:	1836      	adds	r6, r6, r0
 8008ea6:	1da8      	adds	r0, r5, #6
 8008ea8:	5c10      	ldrb	r0, [r2, r0]
 8008eaa:	0200      	lsls	r0, r0, #8
 8008eac:	1836      	adds	r6, r6, r0
 8008eae:	0028      	movs	r0, r5
 8008eb0:	3009      	adds	r0, #9
							if(temp == false){
 8008eb2:	2900      	cmp	r1, #0
 8008eb4:	d000      	beq.n	8008eb8 <PxMessagingTask+0x840>
 8008eb6:	e24f      	b.n	8009358 <PxMessagingTask+0xce0>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008eb8:	5c12      	ldrb	r2, [r2, r0]
 8008eba:	2a00      	cmp	r2, #0
 8008ebc:	d00e      	beq.n	8008edc <PxMessagingTask+0x864>
 8008ebe:	9905      	ldr	r1, [sp, #20]
 8008ec0:	1948      	adds	r0, r1, r5
 8008ec2:	7a81      	ldrb	r1, [r0, #10]
 8008ec4:	2900      	cmp	r1, #0
 8008ec6:	d009      	beq.n	8008edc <PxMessagingTask+0x864>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8008ec8:	0013      	movs	r3, r2
 8008eca:	7a00      	ldrb	r0, [r0, #8]
 8008ecc:	0032      	movs	r2, r6
 8008ece:	9100      	str	r1, [sp, #0]
 8008ed0:	0039      	movs	r1, r7
 8008ed2:	f7fe feed 	bl	8007cb0 <SetupDMAStreams>
 8008ed6:	9b05      	ldr	r3, [sp, #20]
 8008ed8:	9a07      	ldr	r2, [sp, #28]
 8008eda:	5c9b      	ldrb	r3, [r3, r2]
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00a      	beq.n	8008ef6 <PxMessagingTask+0x87e>
 8008ee0:	9a05      	ldr	r2, [sp, #20]
 8008ee2:	1951      	adds	r1, r2, r5
 8008ee4:	7b0a      	ldrb	r2, [r1, #12]
 8008ee6:	2a00      	cmp	r2, #0
 8008ee8:	d005      	beq.n	8008ef6 <PxMessagingTask+0x87e>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8008eea:	7a08      	ldrb	r0, [r1, #8]
 8008eec:	9200      	str	r2, [sp, #0]
 8008eee:	0039      	movs	r1, r7
 8008ef0:	0032      	movs	r2, r6
 8008ef2:	f7fe fedd 	bl	8007cb0 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8008ef6:	9b06      	ldr	r3, [sp, #24]
 8008ef8:	1b1b      	subs	r3, r3, r4
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	445b      	add	r3, fp
 8008efe:	195b      	adds	r3, r3, r5
 8008f00:	7b5b      	ldrb	r3, [r3, #13]
 8008f02:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d100      	bne.n	8008f0a <PxMessagingTask+0x892>
 8008f08:	e46b      	b.n	80087e2 <PxMessagingTask+0x16a>
 8008f0a:	9b05      	ldr	r3, [sp, #20]
 8008f0c:	469c      	mov	ip, r3
 8008f0e:	4465      	add	r5, ip
 8008f10:	7bab      	ldrb	r3, [r5, #14]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d000      	beq.n	8008f18 <PxMessagingTask+0x8a0>
 8008f16:	e29c      	b.n	8009452 <PxMessagingTask+0xdda>
 8008f18:	464a      	mov	r2, r9
 8008f1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f1c:	5d17      	ldrb	r7, [r2, r4]
 8008f1e:	001e      	movs	r6, r3
 8008f20:	e462      	b.n	80087e8 <PxMessagingTask+0x170>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008f22:	9b06      	ldr	r3, [sp, #24]
 8008f24:	2200      	movs	r2, #0
 8008f26:	1b1e      	subs	r6, r3, r4
 8008f28:	2300      	movs	r3, #0
 8008f2a:	00f6      	lsls	r6, r6, #3
 8008f2c:	445e      	add	r6, fp
 8008f2e:	5d70      	ldrb	r0, [r6, r5]
 8008f30:	2100      	movs	r1, #0
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	3319      	adds	r3, #25
 8008f36:	f7fe ffab 	bl	8007e90 <SendMessageFromPort>
							osDelay(100);
 8008f3a:	2064      	movs	r0, #100	; 0x64
 8008f3c:	f004 ffe0 	bl	800df00 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8008f40:	4ae8      	ldr	r2, [pc, #928]	; (80092e4 <PxMessagingTask+0xc6c>)
 8008f42:	5d73      	ldrb	r3, [r6, r5]
 8008f44:	7811      	ldrb	r1, [r2, #0]
 8008f46:	4650      	mov	r0, sl
 8008f48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f4a:	f001 f86d 	bl	800a028 <remoteBootloaderUpdate>
 8008f4e:	464b      	mov	r3, r9
 8008f50:	2600      	movs	r6, #0
 8008f52:	5d1f      	ldrb	r7, [r3, r4]
 8008f54:	e448      	b.n	80087e8 <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008f56:	f005 f8db 	bl	800e110 <FreeRTOS_CLIGetOutputBuffer>
 8008f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f5c:	0006      	movs	r6, r0
 8008f5e:	18e9      	adds	r1, r5, r3
							if(dst == BOS_BROADCAST)
 8008f60:	9b07      	ldr	r3, [sp, #28]
 8008f62:	4459      	add	r1, fp
 8008f64:	2bff      	cmp	r3, #255	; 0xff
 8008f66:	d100      	bne.n	8008f6a <PxMessagingTask+0x8f2>
 8008f68:	e13f      	b.n	80091ea <PxMessagingTask+0xb72>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008f6a:	48df      	ldr	r0, [pc, #892]	; (80092e8 <PxMessagingTask+0xc70>)
							else if(dst == BOS_MULTICAST)
 8008f6c:	9b07      	ldr	r3, [sp, #28]
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008f6e:	3058      	adds	r0, #88	; 0x58
							else if(dst == BOS_MULTICAST)
 8008f70:	2bfe      	cmp	r3, #254	; 0xfe
 8008f72:	d100      	bne.n	8008f76 <PxMessagingTask+0x8fe>
 8008f74:	e132      	b.n	80091dc <PxMessagingTask+0xb64>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f78:	f00a fd15 	bl	80139a6 <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008f7c:	4fda      	ldr	r7, [pc, #872]	; (80092e8 <PxMessagingTask+0xc70>)
 8008f7e:	3758      	adds	r7, #88	; 0x58
 8008f80:	e001      	b.n	8008f86 <PxMessagingTask+0x90e>
							} while(xReturned != pdFALSE);
 8008f82:	2d00      	cmp	r5, #0
 8008f84:	d028      	beq.n	8008fd8 <PxMessagingTask+0x960>
								PcPort =port;
 8008f86:	4ad9      	ldr	r2, [pc, #868]	; (80092ec <PxMessagingTask+0xc74>)
 8008f88:	990d      	ldr	r1, [sp, #52]	; 0x34
								temp =PcPort;
 8008f8a:	4bd8      	ldr	r3, [pc, #864]	; (80092ec <PxMessagingTask+0xc74>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008f8c:	0038      	movs	r0, r7
								temp =PcPort;
 8008f8e:	781b      	ldrb	r3, [r3, #0]
								PcPort =port;
 8008f90:	7011      	strb	r1, [r2, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008f92:	2299      	movs	r2, #153	; 0x99
 8008f94:	0031      	movs	r1, r6
 8008f96:	0092      	lsls	r2, r2, #2
								temp =PcPort;
 8008f98:	930b      	str	r3, [sp, #44]	; 0x2c
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008f9a:	f005 f841 	bl	800e020 <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 8008f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa0:	4ad2      	ldr	r2, [pc, #840]	; (80092ec <PxMessagingTask+0xc74>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008fa2:	0005      	movs	r5, r0
								PcPort =temp;
 8008fa4:	7013      	strb	r3, [r2, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008fa6:	4bd2      	ldr	r3, [pc, #840]	; (80092f0 <PxMessagingTask+0xc78>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b60      	cmp	r3, #96	; 0x60
 8008fac:	d1e9      	bne.n	8008f82 <PxMessagingTask+0x90a>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8008fae:	0030      	movs	r0, r6
 8008fb0:	f7f7 f8b2 	bl	8000118 <strlen>
 8008fb4:	0031      	movs	r1, r6
 8008fb6:	0002      	movs	r2, r0
 8008fb8:	48ce      	ldr	r0, [pc, #824]	; (80092f4 <PxMessagingTask+0xc7c>)
 8008fba:	f00a fcf4 	bl	80139a6 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8008fbe:	0030      	movs	r0, r6
 8008fc0:	f7f7 f8aa 	bl	8000118 <strlen>
 8008fc4:	2118      	movs	r1, #24
 8008fc6:	b282      	uxth	r2, r0
 8008fc8:	4650      	mov	r0, sl
 8008fca:	f7ff f9c1 	bl	8008350 <SendMessageToModule>
									osDelay(10);
 8008fce:	200a      	movs	r0, #10
 8008fd0:	f004 ff96 	bl	800df00 <osDelay>
							} while(xReturned != pdFALSE);
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	d1d6      	bne.n	8008f86 <PxMessagingTask+0x90e>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 8008fd8:	48c3      	ldr	r0, [pc, #780]	; (80092e8 <PxMessagingTask+0xc70>)
 8008fda:	2232      	movs	r2, #50	; 0x32
 8008fdc:	3058      	adds	r0, #88	; 0x58
 8008fde:	2100      	movs	r1, #0
 8008fe0:	f00a fcea 	bl	80139b8 <memset>
 8008fe4:	464b      	mov	r3, r9
 8008fe6:	2600      	movs	r6, #0
 8008fe8:	5d1f      	ldrb	r7, [r3, r4]
 8008fea:	f7ff fbfd 	bl	80087e8 <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008fee:	f005 f88f 	bl	800e110 <FreeRTOS_CLIGetOutputBuffer>
 8008ff2:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8008ff4:	f7f7 f890 	bl	8000118 <strlen>
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	0002      	movs	r2, r0
 8008ffc:	0030      	movs	r0, r6
 8008ffe:	f00a fcdb 	bl	80139b8 <memset>
 8009002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009004:	18e9      	adds	r1, r5, r3
							if(longMessage){
 8009006:	4bbc      	ldr	r3, [pc, #752]	; (80092f8 <PxMessagingTask+0xc80>)
 8009008:	4459      	add	r1, fp
 800900a:	781f      	ldrb	r7, [r3, #0]
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800900c:	4bbb      	ldr	r3, [pc, #748]	; (80092fc <PxMessagingTask+0xc84>)
 800900e:	8818      	ldrh	r0, [r3, #0]
 8009010:	1830      	adds	r0, r6, r0
							if(longMessage){
 8009012:	2f00      	cmp	r7, #0
 8009014:	d100      	bne.n	8009018 <PxMessagingTask+0x9a0>
 8009016:	e0ce      	b.n	80091b6 <PxMessagingTask+0xb3e>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009018:	9d0c      	ldr	r5, [sp, #48]	; 0x30
								longMessageLastPtr +=numOfParams;
 800901a:	2600      	movs	r6, #0
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800901c:	002a      	movs	r2, r5
 800901e:	f00a fcc2 	bl	80139a6 <memcpy>
								longMessageLastPtr +=numOfParams;
 8009022:	46ac      	mov	ip, r5
 8009024:	4bb5      	ldr	r3, [pc, #724]	; (80092fc <PxMessagingTask+0xc84>)
 8009026:	881a      	ldrh	r2, [r3, #0]
 8009028:	4bb4      	ldr	r3, [pc, #720]	; (80092fc <PxMessagingTask+0xc84>)
 800902a:	4462      	add	r2, ip
 800902c:	801a      	strh	r2, [r3, #0]
 800902e:	464b      	mov	r3, r9
 8009030:	5d1f      	ldrb	r7, [r3, r4]
 8009032:	f7ff fbd9 	bl	80087e8 <PxMessagingTask+0x170>
							ClearEEportsDir();
 8009036:	f7fa fc23 	bl	8003880 <ClearEEportsDir>
							ClearROtopology();
 800903a:	f000 ffc9 	bl	8009fd0 <ClearROtopology>
							osDelay(100);
 800903e:	2064      	movs	r0, #100	; 0x64
 8009040:	f004 ff5e 	bl	800df00 <osDelay>
							indMode =IND_TOPOLOGY;
 8009044:	2302      	movs	r3, #2
 8009046:	e545      	b.n	8008ad4 <PxMessagingTask+0x45c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8009048:	4ba6      	ldr	r3, [pc, #664]	; (80092e4 <PxMessagingTask+0xc6c>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	4293      	cmp	r3, r2
 800904e:	d01e      	beq.n	800908e <PxMessagingTask+0xa16>
 8009050:	2b01      	cmp	r3, #1
 8009052:	d019      	beq.n	8009088 <PxMessagingTask+0xa10>
				ForwardReceivedMessage(port);
 8009054:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009056:	f7ff f95b 	bl	8008310 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800905a:	4ba5      	ldr	r3, [pc, #660]	; (80092f0 <PxMessagingTask+0xc78>)
 800905c:	785b      	ldrb	r3, [r3, #1]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <PxMessagingTask+0x9f0>
					indMode =IND_SHORT_BLINK;
 8009062:	2303      	movs	r3, #3
 8009064:	4aa6      	ldr	r2, [pc, #664]	; (8009300 <PxMessagingTask+0xc88>)
 8009066:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 8009068:	9b08      	ldr	r3, [sp, #32]
 800906a:	2b19      	cmp	r3, #25
 800906c:	d07c      	beq.n	8009168 <PxMessagingTask+0xaf0>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800906e:	9b08      	ldr	r3, [sp, #32]
 8009070:	2b1a      	cmp	r3, #26
 8009072:	d100      	bne.n	8009076 <PxMessagingTask+0x9fe>
 8009074:	e082      	b.n	800917c <PxMessagingTask+0xb04>
 8009076:	464b      	mov	r3, r9
 8009078:	5d1f      	ldrb	r7, [r3, r4]
 800907a:	f7ff fbb5 	bl	80087e8 <PxMessagingTask+0x170>
				longMessage =1;
 800907e:	2301      	movs	r3, #1
 8009080:	4a9d      	ldr	r2, [pc, #628]	; (80092f8 <PxMessagingTask+0xc80>)
 8009082:	7013      	strb	r3, [r2, #0]
 8009084:	f7ff fb37 	bl	80086f6 <PxMessagingTask+0x7e>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8009088:	9b08      	ldr	r3, [sp, #32]
 800908a:	2b10      	cmp	r3, #16
 800908c:	d1e2      	bne.n	8009054 <PxMessagingTask+0x9dc>
 800908e:	464b      	mov	r3, r9
 8009090:	5d1f      	ldrb	r7, [r3, r4]
				if(result == BOS_OK){
 8009092:	2e00      	cmp	r6, #0
 8009094:	d001      	beq.n	800909a <PxMessagingTask+0xa22>
 8009096:	f7ff fba7 	bl	80087e8 <PxMessagingTask+0x170>
				shift +=4;
 800909a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800909c:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 800909e:	1b7a      	subs	r2, r7, r5
 80090a0:	b2d3      	uxtb	r3, r2
 80090a2:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 80090a4:	9b08      	ldr	r3, [sp, #32]
 80090a6:	2b2d      	cmp	r3, #45	; 0x2d
 80090a8:	d801      	bhi.n	80090ae <PxMessagingTask+0xa36>
 80090aa:	f7ff fb87 	bl	80087bc <PxMessagingTask+0x144>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 80090ae:	9500      	str	r5, [sp, #0]
 80090b0:	9b07      	ldr	r3, [sp, #28]
 80090b2:	4652      	mov	r2, sl
 80090b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090b6:	9808      	ldr	r0, [sp, #32]
 80090b8:	f7ff fadc 	bl	8008674 <User_MessagingParser>
 80090bc:	0006      	movs	r6, r0
							if(result == BOS_ERR_UnknownMessage){
 80090be:	2801      	cmp	r0, #1
 80090c0:	d1d9      	bne.n	8009076 <PxMessagingTask+0x9fe>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 80090c2:	4652      	mov	r2, sl
 80090c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090c6:	9500      	str	r5, [sp, #0]
 80090c8:	9b07      	ldr	r3, [sp, #28]
 80090ca:	9808      	ldr	r0, [sp, #32]
 80090cc:	f001 fda6 	bl	800ac1c <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 80090d0:	2200      	movs	r2, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 80090d2:	0006      	movs	r6, r0
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 80090d4:	2100      	movs	r1, #0
		if(result == BOS_ERR_UnknownMessage){
 80090d6:	2801      	cmp	r0, #1
 80090d8:	d100      	bne.n	80090dc <PxMessagingTask+0xa64>
 80090da:	e5e8      	b.n	8008cae <PxMessagingTask+0x636>
 80090dc:	e7cb      	b.n	8009076 <PxMessagingTask+0x9fe>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80090de:	9b07      	ldr	r3, [sp, #28]
 80090e0:	2bfe      	cmp	r3, #254	; 0xfe
 80090e2:	d1d6      	bne.n	8009092 <PxMessagingTask+0xa1a>
 80090e4:	9b06      	ldr	r3, [sp, #24]
 80090e6:	4a80      	ldr	r2, [pc, #512]	; (80092e8 <PxMessagingTask+0xc70>)
 80090e8:	1b1d      	subs	r5, r3, r4
 80090ea:	00ed      	lsls	r5, r5, #3
 80090ec:	445d      	add	r5, fp
 80090ee:	19eb      	adds	r3, r5, r7
 80090f0:	3b01      	subs	r3, #1
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	7992      	ldrb	r2, [r2, #6]
					result =BOS_ERR_MSG_Reflection;
 80090f6:	2603      	movs	r6, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d101      	bne.n	8009100 <PxMessagingTask+0xa88>
 80090fc:	f7ff fb74 	bl	80087e8 <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009100:	4a79      	ldr	r2, [pc, #484]	; (80092e8 <PxMessagingTask+0xc70>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8009102:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009104:	7193      	strb	r3, [r2, #6]
 8009106:	4a7f      	ldr	r2, [pc, #508]	; (8009304 <PxMessagingTask+0xc8c>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8009108:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800910a:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800910c:	f7ff f8bc 	bl	8008288 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8009110:	464b      	mov	r3, r9
 8009112:	2200      	movs	r2, #0
 8009114:	5d1f      	ldrb	r7, [r3, r4]
 8009116:	19eb      	adds	r3, r5, r7
 8009118:	3b01      	subs	r3, #1
 800911a:	701a      	strb	r2, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800911c:	1eb8      	subs	r0, r7, #2
 800911e:	5c2e      	ldrb	r6, [r5, r0]
 8009120:	960b      	str	r6, [sp, #44]	; 0x2c
					for(i =0; i < temp; i++){
 8009122:	2e00      	cmp	r6, #0
 8009124:	d01d      	beq.n	8009162 <PxMessagingTask+0xaea>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8009126:	4b6f      	ldr	r3, [pc, #444]	; (80092e4 <PxMessagingTask+0xc6c>)
 8009128:	1b80      	subs	r0, r0, r6
 800912a:	7819      	ldrb	r1, [r3, #0]
 800912c:	5c2b      	ldrb	r3, [r5, r0]
 800912e:	428b      	cmp	r3, r1
 8009130:	d101      	bne.n	8009136 <PxMessagingTask+0xabe>
 8009132:	f7ff fb39 	bl	80087a8 <PxMessagingTask+0x130>
 8009136:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009138:	465a      	mov	r2, fp
 800913a:	46ac      	mov	ip, r5
 800913c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800913e:	3201      	adds	r2, #1
 8009140:	1e75      	subs	r5, r6, #1
 8009142:	4462      	add	r2, ip
 8009144:	b2ed      	uxtb	r5, r5
 8009146:	181b      	adds	r3, r3, r0
 8009148:	1952      	adds	r2, r2, r5
 800914a:	445b      	add	r3, fp
 800914c:	1812      	adds	r2, r2, r0
 800914e:	e006      	b.n	800915e <PxMessagingTask+0xae6>
 8009150:	3301      	adds	r3, #1
 8009152:	1e58      	subs	r0, r3, #1
 8009154:	7800      	ldrb	r0, [r0, #0]
 8009156:	4288      	cmp	r0, r1
 8009158:	d101      	bne.n	800915e <PxMessagingTask+0xae6>
 800915a:	f7ff fb25 	bl	80087a8 <PxMessagingTask+0x130>
					for(i =0; i < temp; i++){
 800915e:	429a      	cmp	r2, r3
 8009160:	d1f6      	bne.n	8009150 <PxMessagingTask+0xad8>
					result =BOS_ERR_WrongID;
 8009162:	2666      	movs	r6, #102	; 0x66
 8009164:	f7ff fb40 	bl	80087e8 <PxMessagingTask+0x170>
					Delay_ms(100);
 8009168:	2064      	movs	r0, #100	; 0x64
 800916a:	f006 fd71 	bl	800fc50 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800916e:	2300      	movs	r3, #0
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8009170:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009172:	9907      	ldr	r1, [sp, #28]
 8009174:	4650      	mov	r0, sl
 8009176:	f000 ff57 	bl	800a028 <remoteBootloaderUpdate>
 800917a:	e77c      	b.n	8009076 <PxMessagingTask+0x9fe>
					Delay_ms(100);
 800917c:	2064      	movs	r0, #100	; 0x64
 800917e:	f006 fd67 	bl	800fc50 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8009182:	9b06      	ldr	r3, [sp, #24]
 8009184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009186:	1b1b      	subs	r3, r3, r4
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	445b      	add	r3, fp
 800918c:	5c9b      	ldrb	r3, [r3, r2]
 800918e:	e7ef      	b.n	8009170 <PxMessagingTask+0xaf8>
								ADCSelectChannel(ADCPort,"top");
 8009190:	495d      	ldr	r1, [pc, #372]	; (8009308 <PxMessagingTask+0xc90>)
 8009192:	f003 fc3f 	bl	800ca14 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 8009196:	4b5d      	ldr	r3, [pc, #372]	; (800930c <PxMessagingTask+0xc94>)
 8009198:	4a5c      	ldr	r2, [pc, #368]	; (800930c <PxMessagingTask+0xc94>)
 800919a:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800919c:	3234      	adds	r2, #52	; 0x34
 800919e:	b2c0      	uxtb	r0, r0
 80091a0:	4959      	ldr	r1, [pc, #356]	; (8009308 <PxMessagingTask+0xc90>)
 80091a2:	f003 fc87 	bl	800cab4 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 80091a6:	4959      	ldr	r1, [pc, #356]	; (800930c <PxMessagingTask+0xc94>)
 80091a8:	4858      	ldr	r0, [pc, #352]	; (800930c <PxMessagingTask+0xc94>)
 80091aa:	3138      	adds	r1, #56	; 0x38
 80091ac:	303c      	adds	r0, #60	; 0x3c
 80091ae:	f003 fa6b 	bl	800c688 <ReadTempAndVref>
 80091b2:	f7ff fb82 	bl	80088ba <PxMessagingTask+0x242>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 80091b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091b8:	f00a fbf5 	bl	80139a6 <memcpy>
								longMessageLastPtr =0;
 80091bc:	4b4f      	ldr	r3, [pc, #316]	; (80092fc <PxMessagingTask+0xc84>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 80091be:	4854      	ldr	r0, [pc, #336]	; (8009310 <PxMessagingTask+0xc98>)
								longMessageLastPtr =0;
 80091c0:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 80091c2:	4b54      	ldr	r3, [pc, #336]	; (8009314 <PxMessagingTask+0xc9c>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 80091c4:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 80091c6:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 80091c8:	2300      	movs	r3, #0
 80091ca:	001a      	movs	r2, r3
 80091cc:	0019      	movs	r1, r3
 80091ce:	f006 f98f 	bl	800f4f0 <xTaskGenericNotify>
 80091d2:	464b      	mov	r3, r9
 80091d4:	2600      	movs	r6, #0
 80091d6:	5d1f      	ldrb	r7, [r3, r4]
 80091d8:	f7ff fb06 	bl	80087e8 <PxMessagingTask+0x170>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 80091dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091e0:	1a9a      	subs	r2, r3, r2
 80091e2:	3a02      	subs	r2, #2
 80091e4:	f00a fbdf 	bl	80139a6 <memcpy>
 80091e8:	e6c8      	b.n	8008f7c <PxMessagingTask+0x904>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 80091ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091ec:	483e      	ldr	r0, [pc, #248]	; (80092e8 <PxMessagingTask+0xc70>)
 80091ee:	3a01      	subs	r2, #1
 80091f0:	3058      	adds	r0, #88	; 0x58
 80091f2:	f00a fbd8 	bl	80139a6 <memcpy>
 80091f6:	e6c1      	b.n	8008f7c <PxMessagingTask+0x904>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80091f8:	9905      	ldr	r1, [sp, #20]
 80091fa:	1949      	adds	r1, r1, r5
 80091fc:	788b      	ldrb	r3, [r1, #2]
 80091fe:	78ce      	ldrb	r6, [r1, #3]
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	0436      	lsls	r6, r6, #16
 8009204:	199b      	adds	r3, r3, r6
 8009206:	189b      	adds	r3, r3, r2
 8009208:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800920a:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800920c:	0612      	lsls	r2, r2, #24
 800920e:	189b      	adds	r3, r3, r2
 8009210:	4a3e      	ldr	r2, [pc, #248]	; (800930c <PxMessagingTask+0xc94>)
 8009212:	60d3      	str	r3, [r2, #12]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009214:	5c0b      	ldrb	r3, [r1, r0]
 8009216:	5dca      	ldrb	r2, [r1, r7]
 8009218:	021b      	lsls	r3, r3, #8
 800921a:	0412      	lsls	r2, r2, #16
 800921c:	189b      	adds	r3, r3, r2
 800921e:	1d6a      	adds	r2, r5, #5
 8009220:	5c8a      	ldrb	r2, [r1, r2]
 8009222:	189b      	adds	r3, r3, r2
 8009224:	4652      	mov	r2, sl
 8009226:	5c8a      	ldrb	r2, [r1, r2]
 8009228:	0612      	lsls	r2, r2, #24
 800922a:	189b      	adds	r3, r3, r2
 800922c:	4a37      	ldr	r2, [pc, #220]	; (800930c <PxMessagingTask+0xc94>)
 800922e:	6113      	str	r3, [r2, #16]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009232:	9a07      	ldr	r2, [sp, #28]
 8009234:	5ccb      	ldrb	r3, [r1, r3]
 8009236:	5c8a      	ldrb	r2, [r1, r2]
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	0412      	lsls	r2, r2, #16
 800923c:	189b      	adds	r3, r3, r2
 800923e:	9a08      	ldr	r2, [sp, #32]
 8009240:	5c8a      	ldrb	r2, [r1, r2]
 8009242:	189b      	adds	r3, r3, r2
 8009244:	4662      	mov	r2, ip
 8009246:	5c8a      	ldrb	r2, [r1, r2]
 8009248:	0612      	lsls	r2, r2, #24
 800924a:	189b      	adds	r3, r3, r2
 800924c:	4a2f      	ldr	r2, [pc, #188]	; (800930c <PxMessagingTask+0xc94>)
 800924e:	6153      	str	r3, [r2, #20]
									break;
 8009250:	f7ff fb12 	bl	8008878 <PxMessagingTask+0x200>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009254:	9905      	ldr	r1, [sp, #20]
 8009256:	1949      	adds	r1, r1, r5
 8009258:	788b      	ldrb	r3, [r1, #2]
 800925a:	78ce      	ldrb	r6, [r1, #3]
 800925c:	021b      	lsls	r3, r3, #8
 800925e:	0436      	lsls	r6, r6, #16
 8009260:	199b      	adds	r3, r3, r6
 8009262:	189b      	adds	r3, r3, r2
 8009264:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009266:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009268:	0612      	lsls	r2, r2, #24
 800926a:	189b      	adds	r3, r3, r2
 800926c:	4a27      	ldr	r2, [pc, #156]	; (800930c <PxMessagingTask+0xc94>)
 800926e:	6193      	str	r3, [r2, #24]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009270:	5c0b      	ldrb	r3, [r1, r0]
 8009272:	5dca      	ldrb	r2, [r1, r7]
 8009274:	021b      	lsls	r3, r3, #8
 8009276:	0412      	lsls	r2, r2, #16
 8009278:	189b      	adds	r3, r3, r2
 800927a:	1d6a      	adds	r2, r5, #5
 800927c:	5c8a      	ldrb	r2, [r1, r2]
 800927e:	189b      	adds	r3, r3, r2
 8009280:	4652      	mov	r2, sl
 8009282:	5c8a      	ldrb	r2, [r1, r2]
 8009284:	0612      	lsls	r2, r2, #24
 8009286:	189b      	adds	r3, r3, r2
 8009288:	4a20      	ldr	r2, [pc, #128]	; (800930c <PxMessagingTask+0xc94>)
 800928a:	61d3      	str	r3, [r2, #28]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800928c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800928e:	9a07      	ldr	r2, [sp, #28]
 8009290:	5ccb      	ldrb	r3, [r1, r3]
 8009292:	5c8a      	ldrb	r2, [r1, r2]
 8009294:	021b      	lsls	r3, r3, #8
 8009296:	0412      	lsls	r2, r2, #16
 8009298:	189b      	adds	r3, r3, r2
 800929a:	9a08      	ldr	r2, [sp, #32]
 800929c:	5c8a      	ldrb	r2, [r1, r2]
 800929e:	189b      	adds	r3, r3, r2
 80092a0:	4662      	mov	r2, ip
 80092a2:	5c8a      	ldrb	r2, [r1, r2]
 80092a4:	0612      	lsls	r2, r2, #24
 80092a6:	189b      	adds	r3, r3, r2
 80092a8:	4a18      	ldr	r2, [pc, #96]	; (800930c <PxMessagingTask+0xc94>)
 80092aa:	6213      	str	r3, [r2, #32]
									break;
 80092ac:	f7ff fae4 	bl	8008878 <PxMessagingTask+0x200>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d001      	beq.n	80092b8 <PxMessagingTask+0xc40>
 80092b4:	f7ff fa95 	bl	80087e2 <PxMessagingTask+0x16a>
								messageParams[0] =0; /* change own ID */
 80092b8:	2600      	movs	r6, #0
 80092ba:	4b0e      	ldr	r3, [pc, #56]	; (80092f4 <PxMessagingTask+0xc7c>)
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80092bc:	4a0d      	ldr	r2, [pc, #52]	; (80092f4 <PxMessagingTask+0xc7c>)
								messageParams[0] =0; /* change own ID */
 80092be:	701e      	strb	r6, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80092c0:	9b05      	ldr	r3, [sp, #20]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80092c2:	0031      	movs	r1, r6
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80092c4:	469c      	mov	ip, r3
 80092c6:	4465      	add	r5, ip
 80092c8:	786b      	ldrb	r3, [r5, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80092ca:	78a8      	ldrb	r0, [r5, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80092cc:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80092ce:	2303      	movs	r3, #3
 80092d0:	0032      	movs	r2, r6
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	330d      	adds	r3, #13
 80092d6:	f7fe fddb 	bl	8007e90 <SendMessageFromPort>
 80092da:	464b      	mov	r3, r9
 80092dc:	5d1f      	ldrb	r7, [r3, r4]
 80092de:	f7ff fa83 	bl	80087e8 <PxMessagingTask+0x170>
 80092e2:	46c0      	nop			; (mov r8, r8)
 80092e4:	20000aa8 	.word	0x20000aa8
 80092e8:	20001dbc 	.word	0x20001dbc
 80092ec:	20000c38 	.word	0x20000c38
 80092f0:	200067fc 	.word	0x200067fc
 80092f4:	20000b4c 	.word	0x20000b4c
 80092f8:	20000c5c 	.word	0x20000c5c
 80092fc:	20000c5a 	.word	0x20000c5a
 8009300:	2000114e 	.word	0x2000114e
 8009304:	20000c58 	.word	0x20000c58
 8009308:	08019620 	.word	0x08019620
 800930c:	20001e3c 	.word	0x20001e3c
 8009310:	20001cb8 	.word	0x20001cb8
 8009314:	20000c4c 	.word	0x20000c4c
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 8009318:	4652      	mov	r2, sl
 800931a:	230a      	movs	r3, #10
 800931c:	4353      	muls	r3, r2
 800931e:	4adf      	ldr	r2, [pc, #892]	; (800969c <PxMessagingTask+0x1024>)
 8009320:	48df      	ldr	r0, [pc, #892]	; (80096a0 <PxMessagingTask+0x1028>)
 8009322:	4694      	mov	ip, r2
 8009324:	49df      	ldr	r1, [pc, #892]	; (80096a4 <PxMessagingTask+0x102c>)
 8009326:	4463      	add	r3, ip
 8009328:	4652      	mov	r2, sl
 800932a:	3008      	adds	r0, #8
 800932c:	f00a fd3e 	bl	8013dac <sprintf>
 8009330:	e526      	b.n	8008d80 <PxMessagingTask+0x708>
 8009332:	2600      	movs	r6, #0
 8009334:	f7ff fa58 	bl	80087e8 <PxMessagingTask+0x170>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009338:	2a01      	cmp	r2, #1
 800933a:	d901      	bls.n	8009340 <PxMessagingTask+0xcc8>
 800933c:	f7ff fb45 	bl	80089ca <PxMessagingTask+0x352>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 8009340:	9b05      	ldr	r3, [sp, #20]
 8009342:	4ad9      	ldr	r2, [pc, #868]	; (80096a8 <PxMessagingTask+0x1030>)
 8009344:	5d5b      	ldrb	r3, [r3, r5]
 8009346:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 8009348:	2b08      	cmp	r3, #8
 800934a:	d901      	bls.n	8009350 <PxMessagingTask+0xcd8>
 800934c:	f7ff fb3d 	bl	80089ca <PxMessagingTask+0x352>
 8009350:	4ad6      	ldr	r2, [pc, #856]	; (80096ac <PxMessagingTask+0x1034>)
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	58d3      	ldr	r3, [r2, r3]
 8009356:	469f      	mov	pc, r3
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 8009358:	2338      	movs	r3, #56	; 0x38
 800935a:	46aa      	mov	sl, r5
 800935c:	435c      	muls	r4, r3
 800935e:	445c      	add	r4, fp
 8009360:	1965      	adds	r5, r4, r5
 8009362:	0007      	movs	r7, r0
 8009364:	7a29      	ldrb	r1, [r5, #8]
 8009366:	20e4      	movs	r0, #228	; 0xe4
 8009368:	f002 fb90 	bl	800ba8c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800936c:	4653      	mov	r3, sl
 800936e:	9a08      	ldr	r2, [sp, #32]
 8009370:	5ce3      	ldrb	r3, [r4, r3]
 8009372:	5ca1      	ldrb	r1, [r4, r2]
 8009374:	021b      	lsls	r3, r3, #8
 8009376:	18c9      	adds	r1, r1, r3
 8009378:	b289      	uxth	r1, r1
 800937a:	20e5      	movs	r0, #229	; 0xe5
 800937c:	f002 fb86 	bl	800ba8c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 8009380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009382:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009384:	5ce3      	ldrb	r3, [r4, r3]
 8009386:	5ca1      	ldrb	r1, [r4, r2]
 8009388:	021b      	lsls	r3, r3, #8
 800938a:	18c9      	adds	r1, r1, r3
 800938c:	b289      	uxth	r1, r1
 800938e:	20e6      	movs	r0, #230	; 0xe6
 8009390:	f002 fb7c 	bl	800ba8c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 8009394:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009396:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009398:	5ce3      	ldrb	r3, [r4, r3]
 800939a:	5ca1      	ldrb	r1, [r4, r2]
 800939c:	021b      	lsls	r3, r3, #8
 800939e:	18c9      	adds	r1, r1, r3
 80093a0:	b289      	uxth	r1, r1
 80093a2:	20e7      	movs	r0, #231	; 0xe7
 80093a4:	f002 fb72 	bl	800ba8c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 80093a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80093ac:	5ce3      	ldrb	r3, [r4, r3]
 80093ae:	5ca1      	ldrb	r1, [r4, r2]
 80093b0:	021b      	lsls	r3, r3, #8
 80093b2:	18c9      	adds	r1, r1, r3
 80093b4:	b289      	uxth	r1, r1
 80093b6:	20e8      	movs	r0, #232	; 0xe8
 80093b8:	f002 fb68 	bl	800ba8c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 80093bc:	5de3      	ldrb	r3, [r4, r7]
 80093be:	7aa9      	ldrb	r1, [r5, #10]
 80093c0:	021b      	lsls	r3, r3, #8
 80093c2:	18c9      	adds	r1, r1, r3
 80093c4:	b289      	uxth	r1, r1
 80093c6:	20e9      	movs	r0, #233	; 0xe9
 80093c8:	f002 fb60 	bl	800ba8c <EE_WriteVariable>
								if(numOfParams == 19)
 80093cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ce:	2b13      	cmp	r3, #19
 80093d0:	d013      	beq.n	80093fa <PxMessagingTask+0xd82>
								if(numOfParams == 21)
 80093d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093d4:	2b15      	cmp	r3, #21
 80093d6:	d107      	bne.n	80093e8 <PxMessagingTask+0xd70>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 80093d8:	7b6b      	ldrb	r3, [r5, #13]
 80093da:	7ba9      	ldrb	r1, [r5, #14]
 80093dc:	021b      	lsls	r3, r3, #8
 80093de:	18c9      	adds	r1, r1, r3
 80093e0:	b289      	uxth	r1, r1
 80093e2:	20eb      	movs	r0, #235	; 0xeb
 80093e4:	f002 fb52 	bl	800ba8c <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	4bb0      	ldr	r3, [pc, #704]	; (80096b0 <PxMessagingTask+0x1038>)
 80093ee:	4ab1      	ldr	r2, [pc, #708]	; (80096b4 <PxMessagingTask+0x103c>)
 80093f0:	60da      	str	r2, [r3, #12]
 80093f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	e7fd      	b.n	80093f6 <PxMessagingTask+0xd7e>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 80093fa:	9b07      	ldr	r3, [sp, #28]
 80093fc:	7b29      	ldrb	r1, [r5, #12]
 80093fe:	5ce3      	ldrb	r3, [r4, r3]
 8009400:	20ea      	movs	r0, #234	; 0xea
 8009402:	021b      	lsls	r3, r3, #8
 8009404:	18c9      	adds	r1, r1, r3
 8009406:	b289      	uxth	r1, r1
 8009408:	f002 fb40 	bl	800ba8c <EE_WriteVariable>
 800940c:	e7ec      	b.n	80093e8 <PxMessagingTask+0xd70>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	49a9      	ldr	r1, [pc, #676]	; (80096b8 <PxMessagingTask+0x1040>)
 8009412:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	0a12      	lsrs	r2, r2, #8
 8009418:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	0c12      	lsrs	r2, r2, #16
 800941e:	708a      	strb	r2, [r1, #2]
										SendMessageToModule(src,
 8009420:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	0e1b      	lsrs	r3, r3, #24
 8009426:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 8009428:	211f      	movs	r1, #31
 800942a:	e440      	b.n	8008cae <PxMessagingTask+0x636>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800942c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800942e:	f00a faba 	bl	80139a6 <memcpy>
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8009432:	2116      	movs	r1, #22
 8009434:	0030      	movs	r0, r6
 8009436:	f7f6 fe8b 	bl	8000150 <__udivsi3>
 800943a:	4ba0      	ldr	r3, [pc, #640]	; (80096bc <PxMessagingTask+0x1044>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800943c:	0032      	movs	r2, r6
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800943e:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009440:	499f      	ldr	r1, [pc, #636]	; (80096c0 <PxMessagingTask+0x1048>)
 8009442:	48a0      	ldr	r0, [pc, #640]	; (80096c4 <PxMessagingTask+0x104c>)
 8009444:	f00a faaf 	bl	80139a6 <memcpy>
								longMessageLastPtr =0;
 8009448:	4b9f      	ldr	r3, [pc, #636]	; (80096c8 <PxMessagingTask+0x1050>)
 800944a:	2600      	movs	r6, #0
 800944c:	801d      	strh	r5, [r3, #0]
 800944e:	f7ff f9cb 	bl	80087e8 <PxMessagingTask+0x170>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 8009452:	7a28      	ldrb	r0, [r5, #8]
 8009454:	0032      	movs	r2, r6
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	0039      	movs	r1, r7
 800945a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800945c:	f7fe fc28 	bl	8007cb0 <SetupDMAStreams>
 8009460:	464b      	mov	r3, r9
 8009462:	5d1f      	ldrb	r7, [r3, r4]
 8009464:	2300      	movs	r3, #0
 8009466:	930b      	str	r3, [sp, #44]	; 0x2c
 8009468:	001e      	movs	r6, r3
 800946a:	f7ff f9bd 	bl	80087e8 <PxMessagingTask+0x170>
								for(p =1; p <= NumOfPorts; p++){
 800946e:	2501      	movs	r5, #1
									UpdateBaudrate(p,temp32);
 8009470:	0028      	movs	r0, r5
								for(p =1; p <= NumOfPorts; p++){
 8009472:	3501      	adds	r5, #1
									UpdateBaudrate(p,temp32);
 8009474:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 8009476:	b2ed      	uxtb	r5, r5
									UpdateBaudrate(p,temp32);
 8009478:	f004 fbfa 	bl	800dc70 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800947c:	2d06      	cmp	r5, #6
 800947e:	d1f7      	bne.n	8009470 <PxMessagingTask+0xdf8>
 8009480:	e7ee      	b.n	8009460 <PxMessagingTask+0xde8>
								temp =cMessage[port - 1][13 + shift];
 8009482:	9a05      	ldr	r2, [sp, #20]
 8009484:	1952      	adds	r2, r2, r5
 8009486:	7b51      	ldrb	r1, [r2, #13]
 8009488:	e4e7      	b.n	8008e5a <PxMessagingTask+0x7e2>
								temp =cMessage[port - 1][15 + shift];
 800948a:	9a05      	ldr	r2, [sp, #20]
 800948c:	1952      	adds	r2, r2, r5
 800948e:	7bd1      	ldrb	r1, [r2, #15]
 8009490:	e4e3      	b.n	8008e5a <PxMessagingTask+0x7e2>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009492:	881a      	ldrh	r2, [r3, #0]
 8009494:	4988      	ldr	r1, [pc, #544]	; (80096b8 <PxMessagingTask+0x1040>)
 8009496:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009498:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 800949a:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800949c:	b21b      	sxth	r3, r3
 800949e:	121b      	asrs	r3, r3, #8
 80094a0:	704b      	strb	r3, [r1, #1]
 80094a2:	e7c1      	b.n	8009428 <PxMessagingTask+0xdb0>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80094a4:	881a      	ldrh	r2, [r3, #0]
 80094a6:	4984      	ldr	r1, [pc, #528]	; (80096b8 <PxMessagingTask+0x1040>)
 80094a8:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80094aa:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 80094ac:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80094ae:	0a1b      	lsrs	r3, r3, #8
 80094b0:	704b      	strb	r3, [r1, #1]
 80094b2:	e7b9      	b.n	8009428 <PxMessagingTask+0xdb0>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 80094b4:	781a      	ldrb	r2, [r3, #0]
 80094b6:	4980      	ldr	r1, [pc, #512]	; (80096b8 <PxMessagingTask+0x1040>)
 80094b8:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 80094ba:	785a      	ldrb	r2, [r3, #1]
 80094bc:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 80094be:	789a      	ldrb	r2, [r3, #2]
 80094c0:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 80094c2:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 80094c4:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 80094c6:	70cb      	strb	r3, [r1, #3]
 80094c8:	e7ae      	b.n	8009428 <PxMessagingTask+0xdb0>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d100      	bne.n	80094d0 <PxMessagingTask+0xe58>
 80094ce:	e0be      	b.n	800964e <PxMessagingTask+0xfd6>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 80094d0:	d801      	bhi.n	80094d6 <PxMessagingTask+0xe5e>
 80094d2:	f7ff f986 	bl	80087e2 <PxMessagingTask+0x16a>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 80094d6:	260f      	movs	r6, #15
 80094d8:	3b04      	subs	r3, #4
 80094da:	4a7c      	ldr	r2, [pc, #496]	; (80096cc <PxMessagingTask+0x1054>)
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	58d2      	ldr	r2, [r2, r3]
 80094e0:	4b75      	ldr	r3, [pc, #468]	; (80096b8 <PxMessagingTask+0x1040>)
 80094e2:	4016      	ands	r6, r2
 80094e4:	701e      	strb	r6, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 80094e6:	d100      	bne.n	80094ea <PxMessagingTask+0xe72>
 80094e8:	e0a8      	b.n	800963c <PxMessagingTask+0xfc4>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80094ea:	2380      	movs	r3, #128	; 0x80
									switch(messageParams[0]) // requested format
 80094ec:	3e01      	subs	r6, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80094ee:	0c12      	lsrs	r2, r2, #16
 80094f0:	059b      	lsls	r3, r3, #22
									switch(messageParams[0]) // requested format
 80094f2:	b2f6      	uxtb	r6, r6
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80094f4:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 80094f6:	2e07      	cmp	r6, #7
 80094f8:	d901      	bls.n	80094fe <PxMessagingTask+0xe86>
 80094fa:	f7ff f972 	bl	80087e2 <PxMessagingTask+0x16a>
 80094fe:	4974      	ldr	r1, [pc, #464]	; (80096d0 <PxMessagingTask+0x1058>)
 8009500:	00b6      	lsls	r6, r6, #2
 8009502:	5989      	ldr	r1, [r1, r6]
 8009504:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009506:	2b00      	cmp	r3, #0
 8009508:	d031      	beq.n	800956e <PxMessagingTask+0xef6>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800950a:	9b05      	ldr	r3, [sp, #20]
 800950c:	195a      	adds	r2, r3, r5
 800950e:	78d3      	ldrb	r3, [r2, #3]
 8009510:	7891      	ldrb	r1, [r2, #2]
 8009512:	021b      	lsls	r3, r3, #8
 8009514:	185b      	adds	r3, r3, r1
 8009516:	7911      	ldrb	r1, [r2, #4]
 8009518:	0409      	lsls	r1, r1, #16
 800951a:	7952      	ldrb	r2, [r2, #5]
 800951c:	185b      	adds	r3, r3, r1
 800951e:	0612      	lsls	r2, r2, #24
 8009520:	189b      	adds	r3, r3, r2
 8009522:	6003      	str	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009524:	9905      	ldr	r1, [sp, #20]
 8009526:	9807      	ldr	r0, [sp, #28]
 8009528:	5d4b      	ldrb	r3, [r1, r5]
 800952a:	5c09      	ldrb	r1, [r1, r0]
 800952c:	200f      	movs	r0, #15
 800952e:	3b01      	subs	r3, #1
 8009530:	4a66      	ldr	r2, [pc, #408]	; (80096cc <PxMessagingTask+0x1054>)
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	58d2      	ldr	r2, [r2, r3]
 8009536:	4010      	ands	r0, r2
 8009538:	4288      	cmp	r0, r1
 800953a:	d008      	beq.n	800954e <PxMessagingTask+0xed6>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800953c:	4865      	ldr	r0, [pc, #404]	; (80096d4 <PxMessagingTask+0x105c>)
 800953e:	4684      	mov	ip, r0
 8009540:	4461      	add	r1, ip
 8009542:	400a      	ands	r2, r1
 8009544:	4961      	ldr	r1, [pc, #388]	; (80096cc <PxMessagingTask+0x1054>)
 8009546:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 8009548:	2314      	movs	r3, #20
 800954a:	4a63      	ldr	r2, [pc, #396]	; (80096d8 <PxMessagingTask+0x1060>)
 800954c:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800954e:	2240      	movs	r2, #64	; 0x40
 8009550:	4b62      	ldr	r3, [pc, #392]	; (80096dc <PxMessagingTask+0x1064>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	4393      	bics	r3, r2
 8009556:	2b20      	cmp	r3, #32
 8009558:	d001      	beq.n	800955e <PxMessagingTask+0xee6>
 800955a:	f7ff f942 	bl	80087e2 <PxMessagingTask+0x16a>
								messageParams[0] =responseStatus;
 800955e:	4b5e      	ldr	r3, [pc, #376]	; (80096d8 <PxMessagingTask+0x1060>)
 8009560:	4a55      	ldr	r2, [pc, #340]	; (80096b8 <PxMessagingTask+0x1040>)
 8009562:	781b      	ldrb	r3, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8009564:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 8009566:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8009568:	2201      	movs	r2, #1
 800956a:	f7ff fba0 	bl	8008cae <PxMessagingTask+0x636>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800956e:	2004      	movs	r0, #4
 8009570:	f009 ffcc 	bl	801350c <malloc>
												if(temp32 != 0){
 8009574:	2800      	cmp	r0, #0
 8009576:	d00f      	beq.n	8009598 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009578:	0403      	lsls	r3, r0, #16
 800957a:	4a54      	ldr	r2, [pc, #336]	; (80096cc <PxMessagingTask+0x1054>)
 800957c:	3306      	adds	r3, #6
 800957e:	5193      	str	r3, [r2, r6]
 8009580:	e7c3      	b.n	800950a <PxMessagingTask+0xe92>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00c      	beq.n	80095a0 <PxMessagingTask+0xf28>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009586:	9b05      	ldr	r3, [sp, #20]
 8009588:	195a      	adds	r2, r3, r5
 800958a:	78d3      	ldrb	r3, [r2, #3]
 800958c:	7911      	ldrb	r1, [r2, #4]
 800958e:	021b      	lsls	r3, r3, #8
 8009590:	0409      	lsls	r1, r1, #16
 8009592:	185b      	adds	r3, r3, r1
 8009594:	7891      	ldrb	r1, [r2, #2]
 8009596:	e7c0      	b.n	800951a <PxMessagingTask+0xea2>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009598:	2312      	movs	r3, #18
 800959a:	4a4f      	ldr	r2, [pc, #316]	; (80096d8 <PxMessagingTask+0x1060>)
 800959c:	7013      	strb	r3, [r2, #0]
 800959e:	e7c1      	b.n	8009524 <PxMessagingTask+0xeac>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 80095a0:	2004      	movs	r0, #4
 80095a2:	f009 ffb3 	bl	801350c <malloc>
												if(temp32 != 0){
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d0f6      	beq.n	8009598 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095aa:	0403      	lsls	r3, r0, #16
 80095ac:	4a47      	ldr	r2, [pc, #284]	; (80096cc <PxMessagingTask+0x1054>)
 80095ae:	3305      	adds	r3, #5
 80095b0:	5193      	str	r3, [r2, r6]
 80095b2:	e7e8      	b.n	8009586 <PxMessagingTask+0xf0e>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	4940      	ldr	r1, [pc, #256]	; (80096b8 <PxMessagingTask+0x1040>)
 80095b8:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	0a12      	lsrs	r2, r2, #8
 80095be:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	0c12      	lsrs	r2, r2, #16
 80095c4:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80095c6:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 80095c8:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80095ca:	0e1b      	lsrs	r3, r3, #24
 80095cc:	710b      	strb	r3, [r1, #4]
 80095ce:	e72b      	b.n	8009428 <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80095d0:	881a      	ldrh	r2, [r3, #0]
 80095d2:	4939      	ldr	r1, [pc, #228]	; (80096b8 <PxMessagingTask+0x1040>)
 80095d4:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80095d6:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 80095d8:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80095da:	b21b      	sxth	r3, r3
 80095dc:	121b      	asrs	r3, r3, #8
 80095de:	708b      	strb	r3, [r1, #2]
 80095e0:	e722      	b.n	8009428 <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80095e2:	881a      	ldrh	r2, [r3, #0]
 80095e4:	4934      	ldr	r1, [pc, #208]	; (80096b8 <PxMessagingTask+0x1040>)
 80095e6:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80095e8:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 80095ea:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80095ec:	0a1b      	lsrs	r3, r3, #8
 80095ee:	708b      	strb	r3, [r1, #2]
 80095f0:	e71a      	b.n	8009428 <PxMessagingTask+0xdb0>
											messageParams[1] =*(__IO int8_t* )temp32;
 80095f2:	4a31      	ldr	r2, [pc, #196]	; (80096b8 <PxMessagingTask+0x1040>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 80095f8:	2202      	movs	r2, #2
 80095fa:	e715      	b.n	8009428 <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	492e      	ldr	r1, [pc, #184]	; (80096b8 <PxMessagingTask+0x1040>)
 8009600:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	1212      	asrs	r2, r2, #8
 8009606:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	1412      	asrs	r2, r2, #16
 800960c:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800960e:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 8009610:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009612:	161b      	asrs	r3, r3, #24
 8009614:	710b      	strb	r3, [r1, #4]
 8009616:	e707      	b.n	8009428 <PxMessagingTask+0xdb0>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	4927      	ldr	r1, [pc, #156]	; (80096b8 <PxMessagingTask+0x1040>)
 800961c:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800961e:	4b30      	ldr	r3, [pc, #192]	; (80096e0 <PxMessagingTask+0x1068>)
 8009620:	18d3      	adds	r3, r2, r3
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009626:	4b2f      	ldr	r3, [pc, #188]	; (80096e4 <PxMessagingTask+0x106c>)
 8009628:	18d3      	adds	r3, r2, r3
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800962e:	4b2e      	ldr	r3, [pc, #184]	; (80096e8 <PxMessagingTask+0x1070>)
 8009630:	469c      	mov	ip, r3
 8009632:	4462      	add	r2, ip
 8009634:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 8009636:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009638:	710b      	strb	r3, [r1, #4]
 800963a:	e6f5      	b.n	8009428 <PxMessagingTask+0xdb0>
									SendMessageToModule(src,
 800963c:	2201      	movs	r2, #1
 800963e:	211f      	movs	r1, #31
 8009640:	4650      	mov	r0, sl
 8009642:	f7fe fe85 	bl	8008350 <SendMessageToModule>
 8009646:	464b      	mov	r3, r9
 8009648:	5d1f      	ldrb	r7, [r3, r4]
 800964a:	f7ff f8cd 	bl	80087e8 <PxMessagingTask+0x170>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800964e:	9b05      	ldr	r3, [sp, #20]
 8009650:	2600      	movs	r6, #0
 8009652:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009656:	4467      	add	r7, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009658:	469c      	mov	ip, r3
 800965a:	1c68      	adds	r0, r5, #1
 800965c:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800965e:	3f01      	subs	r7, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009660:	4458      	add	r0, fp
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009662:	703e      	strb	r6, [r7, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009664:	f7fa f982 	bl	800396c <IsModuleParameter>
 8009668:	900b      	str	r0, [sp, #44]	; 0x2c
								if(temp == 0){ // Parameter does not exist
 800966a:	42b0      	cmp	r0, r6
 800966c:	d100      	bne.n	8009670 <PxMessagingTask+0xff8>
 800966e:	e0a4      	b.n	80097ba <PxMessagingTask+0x1142>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009670:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009672:	491e      	ldr	r1, [pc, #120]	; (80096ec <PxMessagingTask+0x1074>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009676:	468c      	mov	ip, r1
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009678:	3b01      	subs	r3, #1
 800967a:	435a      	muls	r2, r3
 800967c:	4b1b      	ldr	r3, [pc, #108]	; (80096ec <PxMessagingTask+0x1074>)
									messageParams[0] =modParam[temp - 1].paramFormat;
 800967e:	490e      	ldr	r1, [pc, #56]	; (80096b8 <PxMessagingTask+0x1040>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009680:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009682:	4462      	add	r2, ip
 8009684:	7912      	ldrb	r2, [r2, #4]
 8009686:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 8009688:	3a01      	subs	r2, #1
 800968a:	b2d2      	uxtb	r2, r2
 800968c:	2a07      	cmp	r2, #7
 800968e:	d900      	bls.n	8009692 <PxMessagingTask+0x101a>
 8009690:	e4f1      	b.n	8009076 <PxMessagingTask+0x9fe>
 8009692:	4917      	ldr	r1, [pc, #92]	; (80096f0 <PxMessagingTask+0x1078>)
 8009694:	0092      	lsls	r2, r2, #2
 8009696:	588a      	ldr	r2, [r1, r2]
 8009698:	4697      	mov	pc, r2
 800969a:	46c0      	nop			; (mov r8, r8)
 800969c:	20000dd4 	.word	0x20000dd4
 80096a0:	20001dbc 	.word	0x20001dbc
 80096a4:	0801a13c 	.word	0x0801a13c
 80096a8:	2000003a 	.word	0x2000003a
 80096ac:	08018660 	.word	0x08018660
 80096b0:	e000ed00 	.word	0xe000ed00
 80096b4:	05fa0004 	.word	0x05fa0004
 80096b8:	20000b4c 	.word	0x20000b4c
 80096bc:	20000010 	.word	0x20000010
 80096c0:	20001e80 	.word	0x20001e80
 80096c4:	20000ee4 	.word	0x20000ee4
 80096c8:	20000c5a 	.word	0x20000c5a
 80096cc:	20006804 	.word	0x20006804
 80096d0:	08018684 	.word	0x08018684
 80096d4:	0000fff0 	.word	0x0000fff0
 80096d8:	20000c4c 	.word	0x20000c4c
 80096dc:	200067fc 	.word	0x200067fc
 80096e0:	20000001 	.word	0x20000001
 80096e4:	20000002 	.word	0x20000002
 80096e8:	20000003 	.word	0x20000003
 80096ec:	200000a4 	.word	0x200000a4
 80096f0:	080186a4 	.word	0x080186a4
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d100      	bne.n	80096fa <PxMessagingTask+0x1082>
 80096f8:	e0ce      	b.n	8009898 <PxMessagingTask+0x1220>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 80096fa:	9b05      	ldr	r3, [sp, #20]
 80096fc:	1959      	adds	r1, r3, r5
 80096fe:	78ca      	ldrb	r2, [r1, #3]
 8009700:	788b      	ldrb	r3, [r1, #2]
 8009702:	0212      	lsls	r2, r2, #8
 8009704:	189b      	adds	r3, r3, r2
 8009706:	b21b      	sxth	r3, r3
 8009708:	8003      	strh	r3, [r0, #0]
 800970a:	e70b      	b.n	8009524 <PxMessagingTask+0xeac>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	49d7      	ldr	r1, [pc, #860]	; (8009a6c <PxMessagingTask+0x13f4>)
 8009710:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	1212      	asrs	r2, r2, #8
 8009716:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	1412      	asrs	r2, r2, #16
 800971c:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800971e:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 8009720:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009722:	161b      	asrs	r3, r3, #24
 8009724:	70cb      	strb	r3, [r1, #3]
 8009726:	e67f      	b.n	8009428 <PxMessagingTask+0xdb0>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009728:	2b00      	cmp	r3, #0
 800972a:	d100      	bne.n	800972e <PxMessagingTask+0x10b6>
 800972c:	e0df      	b.n	80098ee <PxMessagingTask+0x1276>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800972e:	9b05      	ldr	r3, [sp, #20]
 8009730:	195a      	adds	r2, r3, r5
 8009732:	78d3      	ldrb	r3, [r2, #3]
 8009734:	7911      	ldrb	r1, [r2, #4]
 8009736:	021b      	lsls	r3, r3, #8
 8009738:	0409      	lsls	r1, r1, #16
 800973a:	185b      	adds	r3, r3, r1
 800973c:	7891      	ldrb	r1, [r2, #2]
 800973e:	7952      	ldrb	r2, [r2, #5]
 8009740:	185b      	adds	r3, r3, r1
 8009742:	0612      	lsls	r2, r2, #24
 8009744:	189b      	adds	r3, r3, r2
 8009746:	4642      	mov	r2, r8
 8009748:	4641      	mov	r1, r8
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	2200      	movs	r2, #0
 800974e:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 8009750:	6003      	str	r3, [r0, #0]
 8009752:	e6e7      	b.n	8009524 <PxMessagingTask+0xeac>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 8009754:	9b05      	ldr	r3, [sp, #20]
 8009756:	4642      	mov	r2, r8
 8009758:	469c      	mov	ip, r3
 800975a:	2301      	movs	r3, #1
 800975c:	4465      	add	r5, ip
 800975e:	56eb      	ldrsb	r3, [r5, r3]
 8009760:	6013      	str	r3, [r2, #0]
 8009762:	17db      	asrs	r3, r3, #31
 8009764:	6053      	str	r3, [r2, #4]
										break;
 8009766:	f7ff f930 	bl	80089ca <PxMessagingTask+0x352>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00f      	beq.n	800978e <PxMessagingTask+0x1116>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800976e:	9b05      	ldr	r3, [sp, #20]
 8009770:	1959      	adds	r1, r3, r5
 8009772:	78ca      	ldrb	r2, [r1, #3]
 8009774:	788b      	ldrb	r3, [r1, #2]
 8009776:	0212      	lsls	r2, r2, #8
 8009778:	189b      	adds	r3, r3, r2
 800977a:	b29b      	uxth	r3, r3
 800977c:	8003      	strh	r3, [r0, #0]
 800977e:	e6d1      	b.n	8009524 <PxMessagingTask+0xeac>
											messageParams[1] =*(__IO uint8_t* )temp32;
 8009780:	4aba      	ldr	r2, [pc, #744]	; (8009a6c <PxMessagingTask+0x13f4>)
 8009782:	781b      	ldrb	r3, [r3, #0]
											SendMessageToModule(src,
 8009784:	211f      	movs	r1, #31
											messageParams[1] =*(__IO uint8_t* )temp32;
 8009786:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 8009788:	2202      	movs	r2, #2
 800978a:	f7ff fa90 	bl	8008cae <PxMessagingTask+0x636>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800978e:	2002      	movs	r0, #2
 8009790:	f009 febc 	bl	801350c <malloc>
												if(temp32 != 0){
 8009794:	2800      	cmp	r0, #0
 8009796:	d100      	bne.n	800979a <PxMessagingTask+0x1122>
 8009798:	e6fe      	b.n	8009598 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800979a:	0403      	lsls	r3, r0, #16
 800979c:	4ab4      	ldr	r2, [pc, #720]	; (8009a70 <PxMessagingTask+0x13f8>)
 800979e:	3303      	adds	r3, #3
 80097a0:	5193      	str	r3, [r2, r6]
 80097a2:	e7e4      	b.n	800976e <PxMessagingTask+0x10f6>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 80097a4:	781a      	ldrb	r2, [r3, #0]
 80097a6:	49b1      	ldr	r1, [pc, #708]	; (8009a6c <PxMessagingTask+0x13f4>)
 80097a8:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 80097aa:	785a      	ldrb	r2, [r3, #1]
 80097ac:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 80097ae:	789a      	ldrb	r2, [r3, #2]
 80097b0:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80097b2:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 80097b4:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80097b6:	710b      	strb	r3, [r1, #4]
 80097b8:	e636      	b.n	8009428 <PxMessagingTask+0xdb0>
									SendMessageToModule(src,
 80097ba:	2201      	movs	r2, #1
 80097bc:	211f      	movs	r1, #31
 80097be:	4650      	mov	r0, sl
 80097c0:	f7fe fdc6 	bl	8008350 <SendMessageToModule>
 80097c4:	464b      	mov	r3, r9
 80097c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80097c8:	5d1f      	ldrb	r7, [r3, r4]
 80097ca:	f7ff f80d 	bl	80087e8 <PxMessagingTask+0x170>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00c      	beq.n	80097ec <PxMessagingTask+0x1174>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 80097d2:	9b05      	ldr	r3, [sp, #20]
 80097d4:	195b      	adds	r3, r3, r5
 80097d6:	789b      	ldrb	r3, [r3, #2]
 80097d8:	b25b      	sxtb	r3, r3
 80097da:	7003      	strb	r3, [r0, #0]
 80097dc:	e6a2      	b.n	8009524 <PxMessagingTask+0xeac>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00f      	beq.n	8009802 <PxMessagingTask+0x118a>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 80097e2:	9b05      	ldr	r3, [sp, #20]
 80097e4:	195b      	adds	r3, r3, r5
 80097e6:	789b      	ldrb	r3, [r3, #2]
 80097e8:	7003      	strb	r3, [r0, #0]
 80097ea:	e69b      	b.n	8009524 <PxMessagingTask+0xeac>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 80097ec:	2001      	movs	r0, #1
 80097ee:	f009 fe8d 	bl	801350c <malloc>
												if(temp32 != 0){
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d100      	bne.n	80097f8 <PxMessagingTask+0x1180>
 80097f6:	e6cf      	b.n	8009598 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80097f8:	0403      	lsls	r3, r0, #16
 80097fa:	4a9d      	ldr	r2, [pc, #628]	; (8009a70 <PxMessagingTask+0x13f8>)
 80097fc:	3302      	adds	r3, #2
 80097fe:	5193      	str	r3, [r2, r6]
 8009800:	e7e7      	b.n	80097d2 <PxMessagingTask+0x115a>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 8009802:	2001      	movs	r0, #1
 8009804:	f009 fe82 	bl	801350c <malloc>
												if(temp32 != 0){
 8009808:	2800      	cmp	r0, #0
 800980a:	d100      	bne.n	800980e <PxMessagingTask+0x1196>
 800980c:	e6c4      	b.n	8009598 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800980e:	0403      	lsls	r3, r0, #16
 8009810:	19df      	adds	r7, r3, r7
 8009812:	4b97      	ldr	r3, [pc, #604]	; (8009a70 <PxMessagingTask+0x13f8>)
 8009814:	519f      	str	r7, [r3, r6]
 8009816:	e7e4      	b.n	80097e2 <PxMessagingTask+0x116a>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 8009818:	2313      	movs	r3, #19
 800981a:	4a96      	ldr	r2, [pc, #600]	; (8009a74 <PxMessagingTask+0x13fc>)
 800981c:	7013      	strb	r3, [r2, #0]
 800981e:	e696      	b.n	800954e <PxMessagingTask+0xed6>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8009820:	9b05      	ldr	r3, [sp, #20]
 8009822:	195b      	adds	r3, r3, r5
 8009824:	789e      	ldrb	r6, [r3, #2]
 8009826:	78da      	ldrb	r2, [r3, #3]
 8009828:	0636      	lsls	r6, r6, #24
 800982a:	0412      	lsls	r2, r2, #16
 800982c:	18b6      	adds	r6, r6, r2
 800982e:	795a      	ldrb	r2, [r3, #5]
 8009830:	18b6      	adds	r6, r6, r2
 8009832:	791a      	ldrb	r2, [r3, #4]
 8009834:	0212      	lsls	r2, r2, #8
 8009836:	18b6      	adds	r6, r6, r2
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 8009838:	22e0      	movs	r2, #224	; 0xe0
 800983a:	0612      	lsls	r2, r2, #24
 800983c:	18b1      	adds	r1, r6, r2
 800983e:	4a8e      	ldr	r2, [pc, #568]	; (8009a78 <PxMessagingTask+0x1400>)
 8009840:	4291      	cmp	r1, r2
 8009842:	d900      	bls.n	8009846 <PxMessagingTask+0x11ce>
 8009844:	e0ac      	b.n	80099a0 <PxMessagingTask+0x1328>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 8009846:	785b      	ldrb	r3, [r3, #1]
 8009848:	3b01      	subs	r3, #1
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b07      	cmp	r3, #7
 800984e:	d900      	bls.n	8009852 <PxMessagingTask+0x11da>
 8009850:	e67d      	b.n	800954e <PxMessagingTask+0xed6>
 8009852:	4a8a      	ldr	r2, [pc, #552]	; (8009a7c <PxMessagingTask+0x1404>)
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	58d3      	ldr	r3, [r2, r3]
 8009858:	469f      	mov	pc, r3
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800985a:	9b05      	ldr	r3, [sp, #20]
 800985c:	469c      	mov	ip, r3
 800985e:	4465      	add	r5, ip
 8009860:	78ab      	ldrb	r3, [r5, #2]
 8009862:	786a      	ldrb	r2, [r5, #1]
 8009864:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009866:	189b      	adds	r3, r3, r2
 8009868:	4642      	mov	r2, r8
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	17db      	asrs	r3, r3, #31
 800986e:	6053      	str	r3, [r2, #4]
										break;
 8009870:	f7ff f8ab 	bl	80089ca <PxMessagingTask+0x352>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009874:	9b05      	ldr	r3, [sp, #20]
 8009876:	469c      	mov	ip, r3
 8009878:	4465      	add	r5, ip
 800987a:	78ab      	ldrb	r3, [r5, #2]
 800987c:	786a      	ldrb	r2, [r5, #1]
 800987e:	021b      	lsls	r3, r3, #8
 8009880:	189b      	adds	r3, r3, r2
 8009882:	78ea      	ldrb	r2, [r5, #3]
 8009884:	0412      	lsls	r2, r2, #16
 8009886:	189b      	adds	r3, r3, r2
 8009888:	792a      	ldrb	r2, [r5, #4]
 800988a:	0612      	lsls	r2, r2, #24
 800988c:	e7eb      	b.n	8009866 <PxMessagingTask+0x11ee>
										messageParams[0] =*(__IO uint8_t* )temp32;
 800988e:	4a77      	ldr	r2, [pc, #476]	; (8009a6c <PxMessagingTask+0x13f4>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 8009894:	2201      	movs	r2, #1
 8009896:	e5c7      	b.n	8009428 <PxMessagingTask+0xdb0>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 8009898:	2002      	movs	r0, #2
 800989a:	f009 fe37 	bl	801350c <malloc>
												if(temp32 != 0){
 800989e:	2800      	cmp	r0, #0
 80098a0:	d100      	bne.n	80098a4 <PxMessagingTask+0x122c>
 80098a2:	e679      	b.n	8009598 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80098a4:	0403      	lsls	r3, r0, #16
 80098a6:	4a72      	ldr	r2, [pc, #456]	; (8009a70 <PxMessagingTask+0x13f8>)
 80098a8:	3304      	adds	r3, #4
 80098aa:	5193      	str	r3, [r2, r6]
 80098ac:	e725      	b.n	80096fa <PxMessagingTask+0x1082>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 80098ae:	2310      	movs	r3, #16
 80098b0:	f7ff f850 	bl	8008954 <PxMessagingTask+0x2dc>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80098b4:	9b05      	ldr	r3, [sp, #20]
 80098b6:	469c      	mov	ip, r3
 80098b8:	4465      	add	r5, ip
 80098ba:	78ab      	ldrb	r3, [r5, #2]
 80098bc:	78ea      	ldrb	r2, [r5, #3]
 80098be:	021b      	lsls	r3, r3, #8
 80098c0:	0412      	lsls	r2, r2, #16
 80098c2:	189b      	adds	r3, r3, r2
 80098c4:	786a      	ldrb	r2, [r5, #1]
 80098c6:	189b      	adds	r3, r3, r2
 80098c8:	792a      	ldrb	r2, [r5, #4]
 80098ca:	0612      	lsls	r2, r2, #24
 80098cc:	189b      	adds	r3, r3, r2
 80098ce:	4642      	mov	r2, r8
 80098d0:	6013      	str	r3, [r2, #0]
 80098d2:	2300      	movs	r3, #0
 80098d4:	6053      	str	r3, [r2, #4]
										break;
 80098d6:	f7ff f878 	bl	80089ca <PxMessagingTask+0x352>
										remoteBuffer =cMessage[port - 1][1 + shift];
 80098da:	9b05      	ldr	r3, [sp, #20]
 80098dc:	4642      	mov	r2, r8
 80098de:	469c      	mov	ip, r3
 80098e0:	4465      	add	r5, ip
 80098e2:	786b      	ldrb	r3, [r5, #1]
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	2300      	movs	r3, #0
 80098e8:	6053      	str	r3, [r2, #4]
										break;
 80098ea:	f7ff f86e 	bl	80089ca <PxMessagingTask+0x352>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 80098ee:	2004      	movs	r0, #4
 80098f0:	f009 fe0c 	bl	801350c <malloc>
												if(temp32 != 0){
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d100      	bne.n	80098fa <PxMessagingTask+0x1282>
 80098f8:	e64e      	b.n	8009598 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80098fa:	0403      	lsls	r3, r0, #16
 80098fc:	4a5c      	ldr	r2, [pc, #368]	; (8009a70 <PxMessagingTask+0x13f8>)
 80098fe:	3307      	adds	r3, #7
 8009900:	5193      	str	r3, [r2, r6]
 8009902:	e714      	b.n	800972e <PxMessagingTask+0x10b6>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 8009904:	9b05      	ldr	r3, [sp, #20]
 8009906:	469c      	mov	ip, r3
 8009908:	4465      	add	r5, ip
 800990a:	79eb      	ldrb	r3, [r5, #7]
 800990c:	79aa      	ldrb	r2, [r5, #6]
 800990e:	021b      	lsls	r3, r3, #8
 8009910:	189b      	adds	r3, r3, r2
 8009912:	7a2a      	ldrb	r2, [r5, #8]
 8009914:	0412      	lsls	r2, r2, #16
 8009916:	189b      	adds	r3, r3, r2
 8009918:	7a6a      	ldrb	r2, [r5, #9]
 800991a:	0612      	lsls	r2, r2, #24
 800991c:	189b      	adds	r3, r3, r2
 800991e:	6033      	str	r3, [r6, #0]
											break;
 8009920:	e615      	b.n	800954e <PxMessagingTask+0xed6>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009922:	9b05      	ldr	r3, [sp, #20]
 8009924:	469c      	mov	ip, r3
 8009926:	4465      	add	r5, ip
 8009928:	79eb      	ldrb	r3, [r5, #7]
 800992a:	7a2a      	ldrb	r2, [r5, #8]
 800992c:	021b      	lsls	r3, r3, #8
 800992e:	0412      	lsls	r2, r2, #16
 8009930:	189b      	adds	r3, r3, r2
 8009932:	79aa      	ldrb	r2, [r5, #6]
 8009934:	e7ef      	b.n	8009916 <PxMessagingTask+0x129e>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 8009936:	9b05      	ldr	r3, [sp, #20]
 8009938:	469c      	mov	ip, r3
 800993a:	4465      	add	r5, ip
 800993c:	79ea      	ldrb	r2, [r5, #7]
 800993e:	79ab      	ldrb	r3, [r5, #6]
 8009940:	0212      	lsls	r2, r2, #8
 8009942:	189b      	adds	r3, r3, r2
 8009944:	b21b      	sxth	r3, r3
 8009946:	8033      	strh	r3, [r6, #0]
											break;
 8009948:	e601      	b.n	800954e <PxMessagingTask+0xed6>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800994a:	9b05      	ldr	r3, [sp, #20]
 800994c:	469c      	mov	ip, r3
 800994e:	4465      	add	r5, ip
 8009950:	79ea      	ldrb	r2, [r5, #7]
 8009952:	79ab      	ldrb	r3, [r5, #6]
 8009954:	0212      	lsls	r2, r2, #8
 8009956:	189b      	adds	r3, r3, r2
 8009958:	b29b      	uxth	r3, r3
 800995a:	8033      	strh	r3, [r6, #0]
											break;
 800995c:	e5f7      	b.n	800954e <PxMessagingTask+0xed6>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800995e:	9b05      	ldr	r3, [sp, #20]
 8009960:	469c      	mov	ip, r3
 8009962:	2306      	movs	r3, #6
 8009964:	4465      	add	r5, ip
 8009966:	56eb      	ldrsb	r3, [r5, r3]
 8009968:	7033      	strb	r3, [r6, #0]
											break;
 800996a:	e5f0      	b.n	800954e <PxMessagingTask+0xed6>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800996c:	9b05      	ldr	r3, [sp, #20]
 800996e:	469c      	mov	ip, r3
 8009970:	4465      	add	r5, ip
 8009972:	79ab      	ldrb	r3, [r5, #6]
 8009974:	7033      	strb	r3, [r6, #0]
											break;
 8009976:	e5ea      	b.n	800954e <PxMessagingTask+0xed6>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009978:	9b05      	ldr	r3, [sp, #20]
 800997a:	4641      	mov	r1, r8
 800997c:	469c      	mov	ip, r3
 800997e:	4465      	add	r5, ip
 8009980:	79eb      	ldrb	r3, [r5, #7]
 8009982:	7a2a      	ldrb	r2, [r5, #8]
 8009984:	021b      	lsls	r3, r3, #8
 8009986:	0412      	lsls	r2, r2, #16
 8009988:	189b      	adds	r3, r3, r2
 800998a:	79aa      	ldrb	r2, [r5, #6]
 800998c:	189b      	adds	r3, r3, r2
 800998e:	7a6a      	ldrb	r2, [r5, #9]
 8009990:	0612      	lsls	r2, r2, #24
 8009992:	189b      	adds	r3, r3, r2
 8009994:	4642      	mov	r2, r8
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	2200      	movs	r2, #0
 800999a:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800999c:	6033      	str	r3, [r6, #0]
											break;
 800999e:	e5d6      	b.n	800954e <PxMessagingTask+0xed6>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 80099a0:	23f8      	movs	r3, #248	; 0xf8
 80099a2:	4a37      	ldr	r2, [pc, #220]	; (8009a80 <PxMessagingTask+0x1408>)
 80099a4:	061b      	lsls	r3, r3, #24
 80099a6:	18f3      	adds	r3, r6, r3
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d903      	bls.n	80099b4 <PxMessagingTask+0x133c>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 80099ac:	2215      	movs	r2, #21
 80099ae:	4b31      	ldr	r3, [pc, #196]	; (8009a74 <PxMessagingTask+0x13fc>)
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	e5cc      	b.n	800954e <PxMessagingTask+0xed6>
									HAL_FLASH_Unlock();
 80099b4:	f007 fb2c 	bl	8011010 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 80099b8:	9b08      	ldr	r3, [sp, #32]
 80099ba:	2b22      	cmp	r3, #34	; 0x22
 80099bc:	d102      	bne.n	80099c4 <PxMessagingTask+0x134c>
										EraseSector(temp32);
 80099be:	0030      	movs	r0, r6
 80099c0:	f002 faa2 	bl	800bf08 <EraseSector>
									if(responseStatus == BOS_OK){
 80099c4:	4b2b      	ldr	r3, [pc, #172]	; (8009a74 <PxMessagingTask+0x13fc>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d110      	bne.n	80099ee <PxMessagingTask+0x1376>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 80099cc:	9b05      	ldr	r3, [sp, #20]
 80099ce:	195b      	adds	r3, r3, r5
 80099d0:	785b      	ldrb	r3, [r3, #1]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b07      	cmp	r3, #7
 80099d8:	d809      	bhi.n	80099ee <PxMessagingTask+0x1376>
 80099da:	4a2a      	ldr	r2, [pc, #168]	; (8009a84 <PxMessagingTask+0x140c>)
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	58d3      	ldr	r3, [r2, r3]
 80099e0:	469f      	mov	pc, r3
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 80099e2:	6833      	ldr	r3, [r6, #0]
 80099e4:	3301      	adds	r3, #1
 80099e6:	d020      	beq.n	8009a2a <PxMessagingTask+0x13b2>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80099e8:	2216      	movs	r2, #22
 80099ea:	4b22      	ldr	r3, [pc, #136]	; (8009a74 <PxMessagingTask+0x13fc>)
 80099ec:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 80099ee:	f007 fb21 	bl	8011034 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 80099f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d100      	bne.n	80099fa <PxMessagingTask+0x1382>
 80099f8:	e5a9      	b.n	800954e <PxMessagingTask+0xed6>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80099fa:	2216      	movs	r2, #22
 80099fc:	4b1d      	ldr	r3, [pc, #116]	; (8009a74 <PxMessagingTask+0x13fc>)
 80099fe:	701a      	strb	r2, [r3, #0]
 8009a00:	e5a5      	b.n	800954e <PxMessagingTask+0xed6>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009a02:	8832      	ldrh	r2, [r6, #0]
 8009a04:	4b20      	ldr	r3, [pc, #128]	; (8009a88 <PxMessagingTask+0x1410>)
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d1ee      	bne.n	80099e8 <PxMessagingTask+0x1370>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009a0a:	9b05      	ldr	r3, [sp, #20]
 8009a0c:	469c      	mov	ip, r3
 8009a0e:	4465      	add	r5, ip
 8009a10:	79ea      	ldrb	r2, [r5, #7]
 8009a12:	79ab      	ldrb	r3, [r5, #6]
 8009a14:	0212      	lsls	r2, r2, #8
 8009a16:	18d2      	adds	r2, r2, r3
 8009a18:	17d3      	asrs	r3, r2, #31
 8009a1a:	4641      	mov	r1, r8
													status =HAL_FLASH_Program(
 8009a1c:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009a1e:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009a20:	0031      	movs	r1, r6
 8009a22:	f007 fb55 	bl	80110d0 <HAL_FLASH_Program>
 8009a26:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009a28:	e7e1      	b.n	80099ee <PxMessagingTask+0x1376>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009a2a:	9b05      	ldr	r3, [sp, #20]
 8009a2c:	4641      	mov	r1, r8
 8009a2e:	469c      	mov	ip, r3
 8009a30:	4465      	add	r5, ip
 8009a32:	79ea      	ldrb	r2, [r5, #7]
 8009a34:	7a2b      	ldrb	r3, [r5, #8]
 8009a36:	0212      	lsls	r2, r2, #8
 8009a38:	041b      	lsls	r3, r3, #16
 8009a3a:	18d2      	adds	r2, r2, r3
 8009a3c:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 8009a3e:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009a40:	18d2      	adds	r2, r2, r3
 8009a42:	7a6b      	ldrb	r3, [r5, #9]
 8009a44:	061b      	lsls	r3, r3, #24
 8009a46:	18d2      	adds	r2, r2, r3
 8009a48:	2300      	movs	r3, #0
 8009a4a:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009a4c:	0031      	movs	r1, r6
 8009a4e:	f007 fb3f 	bl	80110d0 <HAL_FLASH_Program>
 8009a52:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009a54:	e7cb      	b.n	80099ee <PxMessagingTask+0x1376>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009a56:	8832      	ldrh	r2, [r6, #0]
 8009a58:	4b0b      	ldr	r3, [pc, #44]	; (8009a88 <PxMessagingTask+0x1410>)
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d1c4      	bne.n	80099e8 <PxMessagingTask+0x1370>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009a5e:	9b05      	ldr	r3, [sp, #20]
 8009a60:	469c      	mov	ip, r3
 8009a62:	4465      	add	r5, ip
 8009a64:	79aa      	ldrb	r2, [r5, #6]
 8009a66:	2300      	movs	r3, #0
 8009a68:	e7d7      	b.n	8009a1a <PxMessagingTask+0x13a2>
 8009a6a:	46c0      	nop			; (mov r8, r8)
 8009a6c:	20000b4c 	.word	0x20000b4c
 8009a70:	20006804 	.word	0x20006804
 8009a74:	20000c4c 	.word	0x20000c4c
 8009a78:	00007fff 	.word	0x00007fff
 8009a7c:	080186c4 	.word	0x080186c4
 8009a80:	0001ffff 	.word	0x0001ffff
 8009a84:	080186e4 	.word	0x080186e4
 8009a88:	0000ffff 	.word	0x0000ffff
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009a8c:	6833      	ldr	r3, [r6, #0]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	d1aa      	bne.n	80099e8 <PxMessagingTask+0x1370>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009a92:	9b05      	ldr	r3, [sp, #20]
 8009a94:	4641      	mov	r1, r8
 8009a96:	469c      	mov	ip, r3
 8009a98:	4465      	add	r5, ip
 8009a9a:	79ea      	ldrb	r2, [r5, #7]
 8009a9c:	7a2b      	ldrb	r3, [r5, #8]
 8009a9e:	0212      	lsls	r2, r2, #8
 8009aa0:	041b      	lsls	r3, r3, #16
 8009aa2:	18d2      	adds	r2, r2, r3
 8009aa4:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 8009aa6:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009aa8:	18d2      	adds	r2, r2, r3
 8009aaa:	7a6b      	ldrb	r3, [r5, #9]
 8009aac:	061b      	lsls	r3, r3, #24
 8009aae:	18d2      	adds	r2, r2, r3
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009ab4:	0031      	movs	r1, r6
 8009ab6:	f007 fb0b 	bl	80110d0 <HAL_FLASH_Program>
 8009aba:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009abc:	e797      	b.n	80099ee <PxMessagingTask+0x1376>
 8009abe:	46c0      	nop			; (mov r8, r8)

08009ac0 <CheckForEnterKey>:
}
/*-----------------------------------------------------------*/

/* --- Check for CLI stop key --- */
static void CheckForEnterKey(void) {
	stopB = 0;
 8009ac0:	2300      	movs	r3, #0
static void CheckForEnterKey(void) {
 8009ac2:	b570      	push	{r4, r5, r6, lr}
	stopB = 0;
 8009ac4:	4c12      	ldr	r4, [pc, #72]	; (8009b10 <CheckForEnterKey+0x50>)
 8009ac6:	4e13      	ldr	r6, [pc, #76]	; (8009b14 <CheckForEnterKey+0x54>)
 8009ac8:	7023      	strb	r3, [r4, #0]
	// Look for ENTER key to stop the stream
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 8009aca:	4b13      	ldr	r3, [pc, #76]	; (8009b18 <CheckForEnterKey+0x58>)
static void CheckForEnterKey(void) {
 8009acc:	b082      	sub	sp, #8
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 8009ace:	781d      	ldrb	r5, [r3, #0]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	3d01      	subs	r5, #1
 8009ad4:	0068      	lsls	r0, r5, #1
 8009ad6:	1941      	adds	r1, r0, r5
 8009ad8:	0189      	lsls	r1, r1, #6
 8009ada:	1871      	adds	r1, r6, r1
 8009adc:	e002      	b.n	8009ae4 <CheckForEnterKey+0x24>
 8009ade:	3301      	adds	r3, #1
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 8009ae0:	2bc0      	cmp	r3, #192	; 0xc0
 8009ae2:	d012      	beq.n	8009b0a <CheckForEnterKey+0x4a>
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 8009ae4:	5cca      	ldrb	r2, [r1, r3]
 8009ae6:	2a0d      	cmp	r2, #13
 8009ae8:	d1f9      	bne.n	8009ade <CheckForEnterKey+0x1e>
			UARTRxBuf[PcPort - 1][chr] = 0;
 8009aea:	2200      	movs	r2, #0
			mosfetMode = REQ_STOP;		// Stop the streaming task
 8009aec:	210e      	movs	r1, #14
			UARTRxBuf[PcPort - 1][chr] = 0;
 8009aee:	1940      	adds	r0, r0, r5
 8009af0:	0180      	lsls	r0, r0, #6
 8009af2:	1830      	adds	r0, r6, r0
 8009af4:	54c2      	strb	r2, [r0, r3]
			mosfetMode = REQ_STOP;		// Stop the streaming task
 8009af6:	4b09      	ldr	r3, [pc, #36]	; (8009b1c <CheckForEnterKey+0x5c>)
 8009af8:	7019      	strb	r1, [r3, #0]
			xTimerStop(xTimerSwitch, 0); // Stop any running timeout timer
 8009afa:	9200      	str	r2, [sp, #0]
 8009afc:	2300      	movs	r3, #0
 8009afe:	390b      	subs	r1, #11
 8009b00:	6860      	ldr	r0, [r4, #4]
 8009b02:	f005 fdc5 	bl	800f690 <xTimerGenericCommand>
			stopB = 1;
 8009b06:	2301      	movs	r3, #1
 8009b08:	7023      	strb	r3, [r4, #0]
			break;
		}
	}
}
 8009b0a:	b002      	add	sp, #8
 8009b0c:	bd70      	pop	{r4, r5, r6, pc}
 8009b0e:	46c0      	nop			; (mov r8, r8)
 8009b10:	20001fbc 	.word	0x20001fbc
 8009b14:	200018e4 	.word	0x200018e4
 8009b18:	20000c38 	.word	0x20000c38
 8009b1c:	20006bbc 	.word	0x20006bbc

08009b20 <ledModeCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE ledModeCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8009b20:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 8009b22:	b530      	push	{r4, r5, lr}
 8009b24:	b083      	sub	sp, #12
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009b26:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 8009b28:	0005      	movs	r5, r0
 8009b2a:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009b2c:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 8009b2e:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009b30:	f004 faf2 	bl	800e118 <FreeRTOS_CLIGetParameter>
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);
	if (!strcmp((char*) pcParameterString1, "on")
 8009b34:	4918      	ldr	r1, [pc, #96]	; (8009b98 <ledModeCommand+0x78>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009b36:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "on")
 8009b38:	f7f6 fae4 	bl	8000104 <strcmp>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d005      	beq.n	8009b4c <ledModeCommand+0x2c>
			|| !strcmp((char*) pcParameterString1, "ON"))
 8009b40:	4916      	ldr	r1, [pc, #88]	; (8009b9c <ledModeCommand+0x7c>)
 8009b42:	0020      	movs	r0, r4
 8009b44:	f7f6 fade 	bl	8000104 <strcmp>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d10a      	bne.n	8009b62 <ledModeCommand+0x42>
		SwitchindMode = 1;
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	4b14      	ldr	r3, [pc, #80]	; (8009ba0 <ledModeCommand+0x80>)
 8009b50:	721a      	strb	r2, [r3, #8]
			|| !strcmp((char*) pcParameterString1, "OFF"))
		SwitchindMode = 0;

	/* Respond to the command */
	if (SwitchindMode) {
		strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 8009b52:	222e      	movs	r2, #46	; 0x2e
 8009b54:	4913      	ldr	r1, [pc, #76]	; (8009ba4 <ledModeCommand+0x84>)
 8009b56:	0028      	movs	r0, r5
 8009b58:	f009 ff25 	bl	80139a6 <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	b003      	add	sp, #12
 8009b60:	bd30      	pop	{r4, r5, pc}
	else if (!strcmp((char*) pcParameterString1, "off")
 8009b62:	4911      	ldr	r1, [pc, #68]	; (8009ba8 <ledModeCommand+0x88>)
 8009b64:	0020      	movs	r0, r4
 8009b66:	f7f6 facd 	bl	8000104 <strcmp>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d108      	bne.n	8009b80 <ledModeCommand+0x60>
		SwitchindMode = 0;
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <ledModeCommand+0x80>)
 8009b72:	721a      	strb	r2, [r3, #8]
		strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 8009b74:	222f      	movs	r2, #47	; 0x2f
 8009b76:	490d      	ldr	r1, [pc, #52]	; (8009bac <ledModeCommand+0x8c>)
 8009b78:	0028      	movs	r0, r5
 8009b7a:	f009 ff14 	bl	80139a6 <memcpy>
 8009b7e:	e7ed      	b.n	8009b5c <ledModeCommand+0x3c>
			|| !strcmp((char*) pcParameterString1, "OFF"))
 8009b80:	490b      	ldr	r1, [pc, #44]	; (8009bb0 <ledModeCommand+0x90>)
 8009b82:	0020      	movs	r0, r4
 8009b84:	f7f6 fabe 	bl	8000104 <strcmp>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d0f0      	beq.n	8009b6e <ledModeCommand+0x4e>
	if (SwitchindMode) {
 8009b8c:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <ledModeCommand+0x80>)
 8009b8e:	7a1b      	ldrb	r3, [r3, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0ef      	beq.n	8009b74 <ledModeCommand+0x54>
 8009b94:	e7dd      	b.n	8009b52 <ledModeCommand+0x32>
 8009b96:	46c0      	nop			; (mov r8, r8)
 8009b98:	0801a92c 	.word	0x0801a92c
 8009b9c:	0801af98 	.word	0x0801af98
 8009ba0:	20001fbc 	.word	0x20001fbc
 8009ba4:	0801afa4 	.word	0x0801afa4
 8009ba8:	0801af9c 	.word	0x0801af9c
 8009bac:	0801afd4 	.word	0x0801afd4
 8009bb0:	0801afa0 	.word	0x0801afa0

08009bb4 <SendMeasurementResult.isra.0>:
static Module_Status SendMeasurementResult(uint8_t request, float value, uint8_t module,
 8009bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bb6:	46c6      	mov	lr, r8
 8009bb8:	b500      	push	{lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	1c05      	adds	r5, r0, #0
 8009bbe:	001f      	movs	r7, r3
 8009bc0:	000e      	movs	r6, r1
 8009bc2:	4690      	mov	r8, r2
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009bc4:	f004 faa4 	bl	800e110 <FreeRTOS_CLIGetOutputBuffer>
	switch (mosfetMode) {
 8009bc8:	4b3b      	ldr	r3, [pc, #236]	; (8009cb8 <SendMeasurementResult.isra.0+0x104>)
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009bca:	0004      	movs	r4, r0
	switch (mosfetMode) {
 8009bcc:	781b      	ldrb	r3, [r3, #0]
	message = value;
 8009bce:	9503      	str	r5, [sp, #12]
	switch (mosfetMode) {
 8009bd0:	2b0c      	cmp	r3, #12
 8009bd2:	d817      	bhi.n	8009c04 <SendMeasurementResult.isra.0+0x50>
 8009bd4:	4a39      	ldr	r2, [pc, #228]	; (8009cbc <SendMeasurementResult.isra.0+0x108>)
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	58d3      	ldr	r3, [r2, r3]
 8009bda:	469f      	mov	pc, r3
			sprintf((char*) pcOutputString, (char*) pcCurrentVerboseMsg, 0);
 8009bdc:	2200      	movs	r2, #0
 8009bde:	4938      	ldr	r1, [pc, #224]	; (8009cc0 <SendMeasurementResult.isra.0+0x10c>)
 8009be0:	f00a f8e4 	bl	8013dac <sprintf>
				strlen((char*) pcOutputString), cmd500ms, HAL_MAX_DELAY);
 8009be4:	0020      	movs	r0, r4
 8009be6:	f7f6 fa97 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 8009bea:	4b36      	ldr	r3, [pc, #216]	; (8009cc4 <SendMeasurementResult.isra.0+0x110>)
 8009bec:	b282      	uxth	r2, r0
 8009bee:	7818      	ldrb	r0, [r3, #0]
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	425b      	negs	r3, r3
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	33f6      	adds	r3, #246	; 0xf6
 8009bf8:	33ff      	adds	r3, #255	; 0xff
 8009bfa:	0021      	movs	r1, r4
 8009bfc:	f003 ffe6 	bl	800dbcc <writePxMutex>
			CheckForEnterKey();
 8009c00:	f7ff ff5e 	bl	8009ac0 <CheckForEnterKey>
}
 8009c04:	2000      	movs	r0, #0
 8009c06:	b004      	add	sp, #16
 8009c08:	bc04      	pop	{r2}
 8009c0a:	4690      	mov	r8, r2
 8009c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memcpy(Buffer, &message, sizeof(float));
 8009c0e:	2204      	movs	r2, #4
 8009c10:	a903      	add	r1, sp, #12
 8009c12:	0038      	movs	r0, r7
 8009c14:	f009 fec7 	bl	80139a6 <memcpy>
 8009c18:	e7f4      	b.n	8009c04 <SendMeasurementResult.isra.0+0x50>
			if (module == myID) {
 8009c1a:	4b2b      	ldr	r3, [pc, #172]	; (8009cc8 <SendMeasurementResult.isra.0+0x114>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	42b3      	cmp	r3, r6
 8009c20:	d037      	beq.n	8009c92 <SendMeasurementResult.isra.0+0xde>
				messageParams[0] = port;
 8009c22:	4642      	mov	r2, r8
 8009c24:	4b29      	ldr	r3, [pc, #164]	; (8009ccc <SendMeasurementResult.isra.0+0x118>)
				SendMessageToModule(module, CODE_PORT_FORWARD,
 8009c26:	0030      	movs	r0, r6
				messageParams[0] = port;
 8009c28:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&message) + 3);
 8009c2a:	aa03      	add	r2, sp, #12
 8009c2c:	78d1      	ldrb	r1, [r2, #3]
 8009c2e:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&message) + 2);
 8009c30:	7891      	ldrb	r1, [r2, #2]
 8009c32:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&message) + 1);
 8009c34:	7851      	ldrb	r1, [r2, #1]
				messageParams[4] = *((__IO uint8_t*) (&message) + 0);
 8009c36:	7812      	ldrb	r2, [r2, #0]
				messageParams[3] = *((__IO uint8_t*) (&message) + 1);
 8009c38:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&message) + 0);
 8009c3a:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(module, CODE_PORT_FORWARD,
 8009c3c:	2123      	movs	r1, #35	; 0x23
 8009c3e:	2205      	movs	r2, #5
 8009c40:	f7fe fb86 	bl	8008350 <SendMessageToModule>
 8009c44:	e7de      	b.n	8009c04 <SendMeasurementResult.isra.0+0x50>
			sprintf((char*) pcOutputString, (char*) pcCurrentMsg, message);
 8009c46:	1c28      	adds	r0, r5, #0
 8009c48:	f7f9 f87e 	bl	8002d48 <__aeabi_f2d>
 8009c4c:	0002      	movs	r2, r0
 8009c4e:	000b      	movs	r3, r1
 8009c50:	0020      	movs	r0, r4
 8009c52:	491f      	ldr	r1, [pc, #124]	; (8009cd0 <SendMeasurementResult.isra.0+0x11c>)
 8009c54:	f00a f8aa 	bl	8013dac <sprintf>
 8009c58:	e7c4      	b.n	8009be4 <SendMeasurementResult.isra.0+0x30>
			sprintf((char*) pcOutputString, (char*) pcCurrentVerboseMsg, message);
 8009c5a:	1c28      	adds	r0, r5, #0
 8009c5c:	f7f9 f874 	bl	8002d48 <__aeabi_f2d>
 8009c60:	0002      	movs	r2, r0
 8009c62:	000b      	movs	r3, r1
 8009c64:	0020      	movs	r0, r4
 8009c66:	4916      	ldr	r1, [pc, #88]	; (8009cc0 <SendMeasurementResult.isra.0+0x10c>)
 8009c68:	f00a f8a0 	bl	8013dac <sprintf>
 8009c6c:	e7ba      	b.n	8009be4 <SendMeasurementResult.isra.0+0x30>
			strcpy((char*) pcOutputString, (char*) pcOutTimeout);
 8009c6e:	220a      	movs	r2, #10
 8009c70:	4918      	ldr	r1, [pc, #96]	; (8009cd4 <SendMeasurementResult.isra.0+0x120>)
 8009c72:	f009 fe98 	bl	80139a6 <memcpy>
			writePxMutex(PcPort, (char*) pcOutputString,
 8009c76:	4b13      	ldr	r3, [pc, #76]	; (8009cc4 <SendMeasurementResult.isra.0+0x110>)
 8009c78:	2209      	movs	r2, #9
 8009c7a:	7818      	ldrb	r0, [r3, #0]
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	425b      	negs	r3, r3
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	33f6      	adds	r3, #246	; 0xf6
 8009c84:	33ff      	adds	r3, #255	; 0xff
 8009c86:	0021      	movs	r1, r4
 8009c88:	f003 ffa0 	bl	800dbcc <writePxMutex>
			CheckForEnterKey();
 8009c8c:	f7ff ff18 	bl	8009ac0 <CheckForEnterKey>
 8009c90:	e7b8      	b.n	8009c04 <SendMeasurementResult.isra.0+0x50>
				temp[0] = *((__IO uint8_t*) (&message) + 3);
 8009c92:	ab03      	add	r3, sp, #12
 8009c94:	78da      	ldrb	r2, [r3, #3]
 8009c96:	4910      	ldr	r1, [pc, #64]	; (8009cd8 <SendMeasurementResult.isra.0+0x124>)
				writePxMutex(port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 8009c98:	4640      	mov	r0, r8
				temp[0] = *((__IO uint8_t*) (&message) + 3);
 8009c9a:	730a      	strb	r2, [r1, #12]
				temp[1] = *((__IO uint8_t*) (&message) + 2);
 8009c9c:	789a      	ldrb	r2, [r3, #2]
				writePxMutex(port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 8009c9e:	310c      	adds	r1, #12
				temp[1] = *((__IO uint8_t*) (&message) + 2);
 8009ca0:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&message) + 1);
 8009ca2:	785a      	ldrb	r2, [r3, #1]
				temp[3] = *((__IO uint8_t*) (&message) + 0);
 8009ca4:	781b      	ldrb	r3, [r3, #0]
				temp[2] = *((__IO uint8_t*) (&message) + 1);
 8009ca6:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&message) + 0);
 8009ca8:	70cb      	strb	r3, [r1, #3]
				writePxMutex(port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 8009caa:	230a      	movs	r3, #10
 8009cac:	2204      	movs	r2, #4
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	f003 ff8c 	bl	800dbcc <writePxMutex>
 8009cb4:	e7a6      	b.n	8009c04 <SendMeasurementResult.isra.0+0x50>
 8009cb6:	46c0      	nop			; (mov r8, r8)
 8009cb8:	20006bbc 	.word	0x20006bbc
 8009cbc:	08018704 	.word	0x08018704
 8009cc0:	0801b014 	.word	0x0801b014
 8009cc4:	20000c38 	.word	0x20000c38
 8009cc8:	20000aa8 	.word	0x20000aa8
 8009ccc:	20000b4c 	.word	0x20000b4c
 8009cd0:	0801b004 	.word	0x0801b004
 8009cd4:	0801b01c 	.word	0x0801b01c
 8009cd8:	20001fbc 	.word	0x20001fbc

08009cdc <Stream_current_To_Buffer.part.9>:
float Stream_current_To_Port(uint8_t Port, uint8_t Module, uint32_t Period,
 8009cdc:	0002      	movs	r2, r0
		xTimerSwitch = xTimerCreate("mosfetTimer",
 8009cde:	21fa      	movs	r1, #250	; 0xfa
float Stream_current_To_Port(uint8_t Port, uint8_t Module, uint32_t Period,
 8009ce0:	b510      	push	{r4, lr}
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 8009ce2:	0140      	lsls	r0, r0, #5
 8009ce4:	1a80      	subs	r0, r0, r2
 8009ce6:	0080      	lsls	r0, r0, #2
 8009ce8:	1880      	adds	r0, r0, r2
float Stream_current_To_Port(uint8_t Port, uint8_t Module, uint32_t Period,
 8009cea:	b082      	sub	sp, #8
		xTimerSwitch = xTimerCreate("mosfetTimer",
 8009cec:	0089      	lsls	r1, r1, #2
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 8009cee:	00c0      	lsls	r0, r0, #3
		xTimerSwitch = xTimerCreate("mosfetTimer",
 8009cf0:	f7f6 fa2e 	bl	8000150 <__udivsi3>
 8009cf4:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <Stream_current_To_Buffer.part.9+0x48>)
 8009cf6:	0001      	movs	r1, r0
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	23ff      	movs	r3, #255	; 0xff
 8009cfe:	480a      	ldr	r0, [pc, #40]	; (8009d28 <Stream_current_To_Buffer.part.9+0x4c>)
 8009d00:	f005 fca6 	bl	800f650 <xTimerCreate>
 8009d04:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <Stream_current_To_Buffer.part.9+0x50>)
 8009d06:	0004      	movs	r4, r0
 8009d08:	6058      	str	r0, [r3, #4]
		xTimerStart(xTimerSwitch, portMAX_DELAY);
 8009d0a:	f005 f81f 	bl	800ed4c <xTaskGetTickCount>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	425b      	negs	r3, r3
 8009d12:	0002      	movs	r2, r0
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	2101      	movs	r1, #1
 8009d18:	2300      	movs	r3, #0
 8009d1a:	0020      	movs	r0, r4
 8009d1c:	f005 fcb8 	bl	800f690 <xTimerGenericCommand>
}
 8009d20:	b002      	add	sp, #8
 8009d22:	bd10      	pop	{r4, pc}
 8009d24:	0800a60d 	.word	0x0800a60d
 8009d28:	0801b028 	.word	0x0801b028
 8009d2c:	20001fbc 	.word	0x20001fbc

08009d30 <SystemClock_Config>:
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8009d30:	2310      	movs	r3, #16
void SystemClock_Config(void) {
 8009d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d34:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8009d36:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009d38:	2680      	movs	r6, #128	; 0x80
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009d3a:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8009d3c:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009d3e:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d40:	2702      	movs	r7, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009d42:	0276      	lsls	r6, r6, #9
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009d44:	035b      	lsls	r3, r3, #13
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009d46:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009d48:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009d4a:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009d4c:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009d4e:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8009d50:	9519      	str	r5, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d52:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009d54:	9617      	str	r6, [sp, #92]	; 0x5c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009d56:	f007 fc53 	bl	8011600 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8009d5a:	2307      	movs	r3, #7
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8009d60:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009d62:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009d64:	9505      	str	r5, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009d66:	9703      	str	r7, [sp, #12]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009d68:	f007 feec 	bl	8011b44 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8009d6c:	4b1a      	ldr	r3, [pc, #104]	; (8009dd8 <SystemClock_Config+0xa8>)
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009d6e:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8009d70:	9306      	str	r3, [sp, #24]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8009d72:	9508      	str	r5, [sp, #32]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009d74:	9509      	str	r5, [sp, #36]	; 0x24
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009d76:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009d78:	f008 f870 	bl	8011e5c <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 8009d7c:	2180      	movs	r1, #128	; 0x80
 8009d7e:	4d17      	ldr	r5, [pc, #92]	; (8009ddc <SystemClock_Config+0xac>)
 8009d80:	0549      	lsls	r1, r1, #21
 8009d82:	69ea      	ldr	r2, [r5, #28]
 8009d84:	430a      	orrs	r2, r1
 8009d86:	61ea      	str	r2, [r5, #28]
 8009d88:	69eb      	ldr	r3, [r5, #28]
 8009d8a:	400b      	ands	r3, r1
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 8009d90:	f007 fc2c 	bl	80115ec <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009d94:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009d96:	a806      	add	r0, sp, #24
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009d9c:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009d9e:	f008 f85d 	bl	8011e5c <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8009da2:	f008 f82d 	bl	8011e00 <HAL_RCC_GetHCLKFreq>
 8009da6:	21fa      	movs	r1, #250	; 0xfa
 8009da8:	0089      	lsls	r1, r1, #2
 8009daa:	f7f6 f9d1 	bl	8000150 <__udivsi3>
 8009dae:	f006 fac7 	bl	8010340 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8009db2:	2004      	movs	r0, #4
 8009db4:	f006 fae0 	bl	8010378 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009db8:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE()
 8009dba:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009dbc:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE()
 8009dbe:	4323      	orrs	r3, r4
 8009dc0:	61ab      	str	r3, [r5, #24]
 8009dc2:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009dc4:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE()
 8009dc6:	401c      	ands	r4, r3
 8009dc8:	9401      	str	r4, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009dca:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE()
 8009dcc:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009dce:	f006 fa77 	bl	80102c0 <HAL_NVIC_SetPriority>
}
 8009dd2:	b01b      	add	sp, #108	; 0x6c
 8009dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dd6:	46c0      	nop			; (mov r8, r8)
 8009dd8:	00040003 	.word	0x00040003
 8009ddc:	40021000 	.word	0x40021000

08009de0 <SaveToRO>:
uint8_t SaveToRO(void) {
 8009de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009de2:	46de      	mov	lr, fp
 8009de4:	4657      	mov	r7, sl
 8009de6:	464e      	mov	r6, r9
 8009de8:	4645      	mov	r5, r8
 8009dea:	b5e0      	push	{r5, r6, r7, lr}
 8009dec:	b087      	sub	sp, #28
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 8009dee:	2215      	movs	r2, #21
 8009df0:	2100      	movs	r1, #0
 8009df2:	4668      	mov	r0, sp
 8009df4:	f009 fde0 	bl	80139b8 <memset>
	HAL_FLASH_Unlock();
 8009df8:	f007 f90a 	bl	8011010 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 8009dfc:	486a      	ldr	r0, [pc, #424]	; (8009fa8 <SaveToRO+0x1c8>)
 8009dfe:	f007 fa37 	bl	8011270 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 8009e02:	486a      	ldr	r0, [pc, #424]	; (8009fac <SaveToRO+0x1cc>)
 8009e04:	f007 f920 	bl	8011048 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d16e      	bne.n	8009eea <SaveToRO+0x10a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009e0c:	2202      	movs	r2, #2
 8009e0e:	4c68      	ldr	r4, [pc, #416]	; (8009fb0 <SaveToRO+0x1d0>)
 8009e10:	6923      	ldr	r3, [r4, #16]
 8009e12:	4393      	bics	r3, r2
 8009e14:	6123      	str	r3, [r4, #16]
	if (myID) {
 8009e16:	4b67      	ldr	r3, [pc, #412]	; (8009fb4 <SaveToRO+0x1d4>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d000      	beq.n	8009e20 <SaveToRO+0x40>
 8009e1e:	e06e      	b.n	8009efe <SaveToRO+0x11e>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8009e20:	4b65      	ldr	r3, [pc, #404]	; (8009fb8 <SaveToRO+0x1d8>)
 8009e22:	469a      	mov	sl, r3
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d100      	bne.n	8009e2c <SaveToRO+0x4c>
 8009e2a:	e0b8      	b.n	8009f9e <SaveToRO+0x1be>
 8009e2c:	4b63      	ldr	r3, [pc, #396]	; (8009fbc <SaveToRO+0x1dc>)
 8009e2e:	2500      	movs	r5, #0
 8009e30:	4c63      	ldr	r4, [pc, #396]	; (8009fc0 <SaveToRO+0x1e0>)
 8009e32:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009e34:	4f5e      	ldr	r7, [pc, #376]	; (8009fb0 <SaveToRO+0x1d0>)
 8009e36:	e006      	b.n	8009e46 <SaveToRO+0x66>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8009e38:	4653      	mov	r3, sl
 8009e3a:	3501      	adds	r5, #1
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	b2ed      	uxtb	r5, r5
 8009e40:	42ab      	cmp	r3, r5
 8009e42:	d800      	bhi.n	8009e46 <SaveToRO+0x66>
 8009e44:	e0ab      	b.n	8009f9e <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) {
 8009e46:	00ab      	lsls	r3, r5, #2
 8009e48:	1959      	adds	r1, r3, r5
 8009e4a:	4698      	mov	r8, r3
 8009e4c:	464b      	mov	r3, r9
 8009e4e:	0089      	lsls	r1, r1, #2
 8009e50:	5c5b      	ldrb	r3, [r3, r1]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0f0      	beq.n	8009e38 <SaveToRO+0x58>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009e56:	466b      	mov	r3, sp
 8009e58:	22fe      	movs	r2, #254	; 0xfe
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 8009e5a:	1c58      	adds	r0, r3, #1
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009e5c:	701a      	strb	r2, [r3, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 8009e5e:	4449      	add	r1, r9
 8009e60:	2214      	movs	r2, #20
 8009e62:	f009 fda0 	bl	80139a6 <memcpy>
 8009e66:	2314      	movs	r3, #20
 8009e68:	469b      	mov	fp, r3
						*(uint16_t*) &snipBuffer[j * 2]);
 8009e6a:	466b      	mov	r3, sp
 8009e6c:	44a3      	add	fp, r4
 8009e6e:	1b1e      	subs	r6, r3, r4
 8009e70:	465b      	mov	r3, fp
 8009e72:	46ab      	mov	fp, r5
 8009e74:	001d      	movs	r5, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 8009e76:	5b32      	ldrh	r2, [r6, r4]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	0021      	movs	r1, r4
 8009e7c:	2001      	movs	r0, #1
 8009e7e:	f007 f927 	bl	80110d0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 8009e82:	484a      	ldr	r0, [pc, #296]	; (8009fac <SaveToRO+0x1cc>)
 8009e84:	f007 f8e0 	bl	8011048 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d12e      	bne.n	8009eea <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 8009e90:	3402      	adds	r4, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009e92:	4393      	bics	r3, r2
 8009e94:	613b      	str	r3, [r7, #16]
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 8009e96:	42ac      	cmp	r4, r5
 8009e98:	d1ed      	bne.n	8009e76 <SaveToRO+0x96>
 8009e9a:	465d      	mov	r5, fp
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009e9c:	4643      	mov	r3, r8
 8009e9e:	195b      	adds	r3, r3, r5
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	444b      	add	r3, r9
 8009ea4:	2600      	movs	r6, #0
 8009ea6:	4698      	mov	r8, r3
 8009ea8:	0025      	movs	r5, r4
 8009eaa:	e012      	b.n	8009ed2 <SaveToRO+0xf2>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 8009eac:	0073      	lsls	r3, r6, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 8009eae:	5ae2      	ldrh	r2, [r4, r3]
 8009eb0:	0029      	movs	r1, r5
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2001      	movs	r0, #1
 8009eb6:	f007 f90b 	bl	80110d0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 8009eba:	483c      	ldr	r0, [pc, #240]	; (8009fac <SaveToRO+0x1cc>)
 8009ebc:	f007 f8c4 	bl	8011048 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d112      	bne.n	8009eea <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	693b      	ldr	r3, [r7, #16]
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009ec8:	3601      	adds	r6, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009eca:	4393      	bics	r3, r2
 8009ecc:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 8009ece:	3502      	adds	r5, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009ed0:	b2f6      	uxtb	r6, r6
 8009ed2:	4643      	mov	r3, r8
 8009ed4:	68dc      	ldr	r4, [r3, #12]
 8009ed6:	0020      	movs	r0, r4
 8009ed8:	f7f6 f91e 	bl	8000118 <strlen>
 8009edc:	3001      	adds	r0, #1
 8009ede:	0840      	lsrs	r0, r0, #1
 8009ee0:	4286      	cmp	r6, r0
 8009ee2:	d3e3      	bcc.n	8009eac <SaveToRO+0xcc>
 8009ee4:	002c      	movs	r4, r5
 8009ee6:	465d      	mov	r5, fp
 8009ee8:	e7a6      	b.n	8009e38 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 8009eea:	4b36      	ldr	r3, [pc, #216]	; (8009fc4 <SaveToRO+0x1e4>)
 8009eec:	69d8      	ldr	r0, [r3, #28]
 8009eee:	b2c0      	uxtb	r0, r0
}
 8009ef0:	b007      	add	sp, #28
 8009ef2:	bc3c      	pop	{r2, r3, r4, r5}
 8009ef4:	4690      	mov	r8, r2
 8009ef6:	4699      	mov	r9, r3
 8009ef8:	46a2      	mov	sl, r4
 8009efa:	46ab      	mov	fp, r5
 8009efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 8009efe:	4a32      	ldr	r2, [pc, #200]	; (8009fc8 <SaveToRO+0x1e8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009f00:	4929      	ldr	r1, [pc, #164]	; (8009fa8 <SaveToRO+0x1c8>)
		temp = (uint16_t) (N << 8) + myID;
 8009f02:	4693      	mov	fp, r2
 8009f04:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009f06:	2001      	movs	r0, #1
		temp = (uint16_t) (N << 8) + myID;
 8009f08:	0212      	lsls	r2, r2, #8
 8009f0a:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009f0c:	b292      	uxth	r2, r2
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f007 f8de 	bl	80110d0 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 8009f14:	4825      	ldr	r0, [pc, #148]	; (8009fac <SaveToRO+0x1cc>)
 8009f16:	f007 f897 	bl	8011048 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d1e5      	bne.n	8009eea <SaveToRO+0x10a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009f1e:	2201      	movs	r2, #1
 8009f20:	6923      	ldr	r3, [r4, #16]
 8009f22:	4393      	bics	r3, r2
 8009f24:	6123      	str	r3, [r4, #16]
		for (uint8_t i = 1; i <= N; i++) {
 8009f26:	465b      	mov	r3, fp
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d100      	bne.n	8009f30 <SaveToRO+0x150>
 8009f2e:	e777      	b.n	8009e20 <SaveToRO+0x40>
 8009f30:	2301      	movs	r3, #1
 8009f32:	469a      	mov	sl, r3
 8009f34:	4b25      	ldr	r3, [pc, #148]	; (8009fcc <SaveToRO+0x1ec>)
	uint16_t add = 2, temp = 0;
 8009f36:	2602      	movs	r6, #2
 8009f38:	4699      	mov	r9, r3
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009f3a:	46a0      	mov	r8, r4
 8009f3c:	4653      	mov	r3, sl
 8009f3e:	1e5d      	subs	r5, r3, #1
 8009f40:	2316      	movs	r3, #22
 8009f42:	464f      	mov	r7, r9
 8009f44:	435d      	muls	r5, r3
 8009f46:	464b      	mov	r3, r9
 8009f48:	3716      	adds	r7, #22
 8009f4a:	195c      	adds	r4, r3, r5
 8009f4c:	197f      	adds	r7, r7, r5
 8009f4e:	e002      	b.n	8009f56 <SaveToRO+0x176>
 8009f50:	3402      	adds	r4, #2
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8009f52:	42a7      	cmp	r7, r4
 8009f54:	d01a      	beq.n	8009f8c <SaveToRO+0x1ac>
				if (array[i - 1][0]) {
 8009f56:	464b      	mov	r3, r9
 8009f58:	5b5b      	ldrh	r3, [r3, r5]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0f8      	beq.n	8009f50 <SaveToRO+0x170>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8009f5e:	4b12      	ldr	r3, [pc, #72]	; (8009fa8 <SaveToRO+0x1c8>)
 8009f60:	8822      	ldrh	r2, [r4, #0]
 8009f62:	18f1      	adds	r1, r6, r3
 8009f64:	2001      	movs	r0, #1
 8009f66:	2300      	movs	r3, #0
 8009f68:	f007 f8b2 	bl	80110d0 <HAL_FLASH_Program>
					add += 2;
 8009f6c:	3602      	adds	r6, #2
					FlashStatus = FLASH_WaitForLastOperation(
 8009f6e:	480f      	ldr	r0, [pc, #60]	; (8009fac <SaveToRO+0x1cc>)
					add += 2;
 8009f70:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation(
 8009f72:	f007 f869 	bl	8011048 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d1b7      	bne.n	8009eea <SaveToRO+0x10a>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009f7a:	4643      	mov	r3, r8
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	3402      	adds	r4, #2
 8009f82:	4393      	bics	r3, r2
 8009f84:	4642      	mov	r2, r8
 8009f86:	6113      	str	r3, [r2, #16]
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8009f88:	42a7      	cmp	r7, r4
 8009f8a:	d1e4      	bne.n	8009f56 <SaveToRO+0x176>
		for (uint8_t i = 1; i <= N; i++) {
 8009f8c:	4653      	mov	r3, sl
 8009f8e:	3301      	adds	r3, #1
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	469a      	mov	sl, r3
 8009f94:	465b      	mov	r3, fp
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	4553      	cmp	r3, sl
 8009f9a:	d2cf      	bcs.n	8009f3c <SaveToRO+0x15c>
 8009f9c:	e740      	b.n	8009e20 <SaveToRO+0x40>
	HAL_FLASH_Lock();
 8009f9e:	f007 f849 	bl	8011034 <HAL_FLASH_Lock>
	return result;
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	e7a4      	b.n	8009ef0 <SaveToRO+0x110>
 8009fa6:	46c0      	nop			; (mov r8, r8)
 8009fa8:	0801d800 	.word	0x0801d800
 8009fac:	0000c350 	.word	0x0000c350
 8009fb0:	40022000 	.word	0x40022000
 8009fb4:	20000aa8 	.word	0x20000aa8
 8009fb8:	200016e4 	.word	0x200016e4
 8009fbc:	20006898 	.word	0x20006898
 8009fc0:	0801dc00 	.word	0x0801dc00
 8009fc4:	20006db0 	.word	0x20006db0
 8009fc8:	20000010 	.word	0x20000010
 8009fcc:	20000ee4 	.word	0x20000ee4

08009fd0 <ClearROtopology>:
	memset(array, 0, sizeof(array));
 8009fd0:	228f      	movs	r2, #143	; 0x8f
uint8_t ClearROtopology(void) {
 8009fd2:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 8009fd4:	0092      	lsls	r2, r2, #2
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	4805      	ldr	r0, [pc, #20]	; (8009ff0 <ClearROtopology+0x20>)
 8009fda:	f009 fced 	bl	80139b8 <memset>
	N = 1;
 8009fde:	2201      	movs	r2, #1
 8009fe0:	4b04      	ldr	r3, [pc, #16]	; (8009ff4 <ClearROtopology+0x24>)
 8009fe2:	701a      	strb	r2, [r3, #0]
	myID = 0;
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	4b04      	ldr	r3, [pc, #16]	; (8009ff8 <ClearROtopology+0x28>)
 8009fe8:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 8009fea:	f7ff fef9 	bl	8009de0 <SaveToRO>
}
 8009fee:	bd10      	pop	{r4, pc}
 8009ff0:	20000ee4 	.word	0x20000ee4
 8009ff4:	20000010 	.word	0x20000010
 8009ff8:	20000aa8 	.word	0x20000aa8

08009ffc <SetupPortForRemoteBootloaderUpdate>:
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8009ffc:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8009ffe:	f003 fe49 	bl	800dc94 <GetUart>
	huart->Init.BaudRate =57600;
 800a002:	23e1      	movs	r3, #225	; 0xe1
 800a004:	021b      	lsls	r3, r3, #8
 800a006:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800a008:	2380      	movs	r3, #128	; 0x80
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a00e:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 800a010:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a012:	015b      	lsls	r3, r3, #5
 800a014:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800a016:	f009 f8ab 	bl	8013170 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a01a:	2120      	movs	r1, #32
 800a01c:	6822      	ldr	r2, [r4, #0]
 800a01e:	6813      	ldr	r3, [r2, #0]
 800a020:	430b      	orrs	r3, r1
 800a022:	6013      	str	r3, [r2, #0]
}
 800a024:	bd10      	pop	{r4, pc}
 800a026:	46c0      	nop			; (mov r8, r8)

0800a028 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a02a:	46ce      	mov	lr, r9
 800a02c:	4647      	mov	r7, r8
 800a02e:	4698      	mov	r8, r3
 800a030:	b580      	push	{r7, lr}
	myOutport =FindRoute(myID,dst);
 800a032:	4c2a      	ldr	r4, [pc, #168]	; (800a0dc <remoteBootloaderUpdate+0xb4>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a034:	b085      	sub	sp, #20
 800a036:	4681      	mov	r9, r0
	myOutport =FindRoute(myID,dst);
 800a038:	7820      	ldrb	r0, [r4, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a03a:	000f      	movs	r7, r1
 800a03c:	0015      	movs	r5, r2
	myOutport =FindRoute(myID,dst);
 800a03e:	f7f9 fe73 	bl	8003d28 <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a042:	4643      	mov	r3, r8
	myOutport =FindRoute(myID,dst);
 800a044:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a046:	2b00      	cmp	r3, #0
 800a048:	d11a      	bne.n	800a080 <remoteBootloaderUpdate+0x58>
	if(src == myID){
 800a04a:	7823      	ldrb	r3, [r4, #0]
 800a04c:	454b      	cmp	r3, r9
 800a04e:	d03b      	beq.n	800a0c8 <remoteBootloaderUpdate+0xa0>
	SetupPortForRemoteBootloaderUpdate(inport);
 800a050:	0028      	movs	r0, r5
 800a052:	f7ff ffd3 	bl	8009ffc <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 800a056:	0030      	movs	r0, r6
 800a058:	f7ff ffd0 	bl	8009ffc <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 800a05c:	2300      	movs	r3, #0
 800a05e:	7821      	ldrb	r1, [r4, #0]
 800a060:	9303      	str	r3, [sp, #12]
 800a062:	3b01      	subs	r3, #1
 800a064:	9302      	str	r3, [sp, #8]
 800a066:	9301      	str	r3, [sp, #4]
 800a068:	3303      	adds	r3, #3
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	0032      	movs	r2, r6
 800a06e:	000b      	movs	r3, r1
 800a070:	0028      	movs	r0, r5
 800a072:	f7fe f991 	bl	8008398 <StartScastDMAStream>
}
 800a076:	b005      	add	sp, #20
 800a078:	bc0c      	pop	{r2, r3}
 800a07a:	4690      	mov	r8, r2
 800a07c:	4699      	mov	r9, r3
 800a07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a080:	7823      	ldrb	r3, [r4, #0]
 800a082:	42bb      	cmp	r3, r7
 800a084:	d01c      	beq.n	800a0c0 <remoteBootloaderUpdate+0x98>
	if(src == myID){
 800a086:	454b      	cmp	r3, r9
 800a088:	d1e2      	bne.n	800a050 <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a08a:	f004 f841 	bl	800e110 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800a08e:	4b14      	ldr	r3, [pc, #80]	; (800a0e0 <remoteBootloaderUpdate+0xb8>)
 800a090:	003a      	movs	r2, r7
 800a092:	6819      	ldr	r1, [r3, #0]
 800a094:	4643      	mov	r3, r8
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a096:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800a098:	f009 fe88 	bl	8013dac <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 800a09c:	4b11      	ldr	r3, [pc, #68]	; (800a0e4 <remoteBootloaderUpdate+0xbc>)
 800a09e:	4648      	mov	r0, r9
 800a0a0:	6819      	ldr	r1, [r3, #0]
 800a0a2:	f009 fea3 	bl	8013dec <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 800a0a6:	4648      	mov	r0, r9
 800a0a8:	f7f6 f836 	bl	8000118 <strlen>
 800a0ac:	2332      	movs	r3, #50	; 0x32
 800a0ae:	b282      	uxth	r2, r0
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	0028      	movs	r0, r5
 800a0b4:	f003 fdbc 	bl	800dc30 <writePxITMutex>
		Delay_ms(100);
 800a0b8:	2064      	movs	r0, #100	; 0x64
 800a0ba:	f005 fdc9 	bl	800fc50 <HAL_Delay>
 800a0be:	e7c7      	b.n	800a050 <remoteBootloaderUpdate+0x28>
 800a0c0:	4646      	mov	r6, r8
	if(src == myID){
 800a0c2:	454f      	cmp	r7, r9
 800a0c4:	d1c4      	bne.n	800a050 <remoteBootloaderUpdate+0x28>
 800a0c6:	e7e0      	b.n	800a08a <remoteBootloaderUpdate+0x62>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a0c8:	f004 f822 	bl	800e110 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800a0cc:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <remoteBootloaderUpdate+0xc0>)
 800a0ce:	003a      	movs	r2, r7
 800a0d0:	6819      	ldr	r1, [r3, #0]
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a0d2:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800a0d4:	f009 fe6a 	bl	8013dac <sprintf>
 800a0d8:	e7e0      	b.n	800a09c <remoteBootloaderUpdate+0x74>
 800a0da:	46c0      	nop			; (mov r8, r8)
 800a0dc:	20000aa8 	.word	0x20000aa8
 800a0e0:	20000060 	.word	0x20000060
 800a0e4:	2000005c 	.word	0x2000005c
 800a0e8:	20000064 	.word	0x20000064

0800a0ec <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 800a0ec:	b510      	push	{r4, lr}
 800a0ee:	b084      	sub	sp, #16
	MX_USART1_UART_Init();
 800a0f0:	f003 fc02 	bl	800d8f8 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800a0f4:	f003 fc18 	bl	800d928 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800a0f8:	f003 fc2e 	bl	800d958 <MX_USART3_UART_Init>
	MX_USART5_UART_Init();
 800a0fc:	f003 fc44 	bl	800d988 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800a100:	f003 fc5a 	bl	800d9b8 <MX_USART6_UART_Init>
	MX_ADC_Init();
 800a104:	f002 fa66 	bl	800c5d4 <MX_ADC_Init>
	xTaskCreate(MosfetTask,(const char* ) "MosfetTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&MosfetHandle);
 800a108:	2300      	movs	r3, #0
 800a10a:	4c0e      	ldr	r4, [pc, #56]	; (800a144 <Module_Peripheral_Init+0x58>)
 800a10c:	9303      	str	r3, [sp, #12]
 800a10e:	9302      	str	r3, [sp, #8]
 800a110:	0023      	movs	r3, r4
 800a112:	3310      	adds	r3, #16
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	2296      	movs	r2, #150	; 0x96
 800a118:	2303      	movs	r3, #3
 800a11a:	0052      	lsls	r2, r2, #1
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	490a      	ldr	r1, [pc, #40]	; (800a148 <Module_Peripheral_Init+0x5c>)
 800a120:	2300      	movs	r3, #0
 800a122:	480a      	ldr	r0, [pc, #40]	; (800a14c <Module_Peripheral_Init+0x60>)
 800a124:	f004 fcaa 	bl	800ea7c <xTaskGenericCreate>
	xTimerSwitch =xTimerCreate("SwitchTimer",pdMS_TO_TICKS(1000),pdFALSE,(void* )1,SwitchTimerCallback);
 800a128:	21fa      	movs	r1, #250	; 0xfa
 800a12a:	4b09      	ldr	r3, [pc, #36]	; (800a150 <Module_Peripheral_Init+0x64>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	0089      	lsls	r1, r1, #2
 800a132:	2301      	movs	r3, #1
 800a134:	4807      	ldr	r0, [pc, #28]	; (800a154 <Module_Peripheral_Init+0x68>)
 800a136:	f005 fa8b 	bl	800f650 <xTimerCreate>
 800a13a:	6060      	str	r0, [r4, #4]
	Switch_Init();
 800a13c:	f001 ff3e 	bl	800bfbc <Switch_Init>
}
 800a140:	b004      	add	sp, #16
 800a142:	bd10      	pop	{r4, pc}
 800a144:	20001fbc 	.word	0x20001fbc
 800a148:	0801b034 	.word	0x0801b034
 800a14c:	0800aae5 	.word	0x0800aae5
 800a150:	0800a60d 	.word	0x0800a60d
 800a154:	0801b040 	.word	0x0801b040

0800a158 <initialValue>:
	mosfetCurrent=0;
 800a158:	2200      	movs	r2, #0
 800a15a:	4b01      	ldr	r3, [pc, #4]	; (800a160 <initialValue+0x8>)
 800a15c:	601a      	str	r2, [r3, #0]
}
 800a15e:	4770      	bx	lr
 800a160:	20000008 	.word	0x20000008

0800a164 <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800a164:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&onCommandDefinition);
 800a166:	4c10      	ldr	r4, [pc, #64]	; (800a1a8 <RegisterModuleCLICommands+0x44>)
 800a168:	0020      	movs	r0, r4
 800a16a:	f003 ff41 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&offCommandDefinition);
 800a16e:	0020      	movs	r0, r4
 800a170:	3010      	adds	r0, #16
 800a172:	f003 ff3d 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&toggleCommandDefinition);
 800a176:	0020      	movs	r0, r4
 800a178:	3020      	adds	r0, #32
 800a17a:	f003 ff39 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ledModeCommandDefinition);
 800a17e:	0020      	movs	r0, r4
 800a180:	3030      	adds	r0, #48	; 0x30
 800a182:	f003 ff35 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pwmCommandDefinition);
 800a186:	0020      	movs	r0, r4
 800a188:	3040      	adds	r0, #64	; 0x40
 800a18a:	f003 ff31 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&mosfetSampleCommandDefinition);
 800a18e:	0020      	movs	r0, r4
 800a190:	3050      	adds	r0, #80	; 0x50
 800a192:	f003 ff2d 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&mosfetStreamCommandDefinition);
 800a196:	0020      	movs	r0, r4
 800a198:	3060      	adds	r0, #96	; 0x60
 800a19a:	f003 ff29 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&mosfetStopCommandDefinition);
 800a19e:	0020      	movs	r0, r4
 800a1a0:	3070      	adds	r0, #112	; 0x70
 800a1a2:	f003 ff25 	bl	800dff0 <FreeRTOS_CLIRegisterCommand>
}
 800a1a6:	bd10      	pop	{r4, pc}
 800a1a8:	08018780 	.word	0x08018780

0800a1ac <GetPort>:
	if (huart->Instance == USART5)
 800a1ac:	6800      	ldr	r0, [r0, #0]
 800a1ae:	4b0e      	ldr	r3, [pc, #56]	; (800a1e8 <GetPort+0x3c>)
 800a1b0:	4298      	cmp	r0, r3
 800a1b2:	d011      	beq.n	800a1d8 <GetPort+0x2c>
	else if (huart->Instance == USART2)
 800a1b4:	4b0d      	ldr	r3, [pc, #52]	; (800a1ec <GetPort+0x40>)
 800a1b6:	4298      	cmp	r0, r3
 800a1b8:	d012      	beq.n	800a1e0 <GetPort+0x34>
	else if (huart->Instance == USART6)
 800a1ba:	4b0d      	ldr	r3, [pc, #52]	; (800a1f0 <GetPort+0x44>)
 800a1bc:	4298      	cmp	r0, r3
 800a1be:	d011      	beq.n	800a1e4 <GetPort+0x38>
	else if (huart->Instance == USART3)
 800a1c0:	4b0c      	ldr	r3, [pc, #48]	; (800a1f4 <GetPort+0x48>)
 800a1c2:	4298      	cmp	r0, r3
 800a1c4:	d00a      	beq.n	800a1dc <GetPort+0x30>
	return 0;
 800a1c6:	4b0c      	ldr	r3, [pc, #48]	; (800a1f8 <GetPort+0x4c>)
 800a1c8:	469c      	mov	ip, r3
 800a1ca:	4460      	add	r0, ip
 800a1cc:	4243      	negs	r3, r0
 800a1ce:	4158      	adcs	r0, r3
 800a1d0:	2305      	movs	r3, #5
 800a1d2:	4240      	negs	r0, r0
 800a1d4:	4018      	ands	r0, r3
}
 800a1d6:	4770      	bx	lr
		return P1;
 800a1d8:	2001      	movs	r0, #1
 800a1da:	e7fc      	b.n	800a1d6 <GetPort+0x2a>
		return P4;
 800a1dc:	2004      	movs	r0, #4
 800a1de:	e7fa      	b.n	800a1d6 <GetPort+0x2a>
		return P2;
 800a1e0:	2002      	movs	r0, #2
 800a1e2:	e7f8      	b.n	800a1d6 <GetPort+0x2a>
		return P3;
 800a1e4:	2003      	movs	r0, #3
 800a1e6:	e7f6      	b.n	800a1d6 <GetPort+0x2a>
 800a1e8:	40005000 	.word	0x40005000
 800a1ec:	40004400 	.word	0x40004400
 800a1f0:	40011400 	.word	0x40011400
 800a1f4:	40004800 	.word	0x40004800
 800a1f8:	bffec800 	.word	0xbffec800

0800a1fc <TIM3_Init>:
	__TIM3_CLK_ENABLE()
 800a1fc:	2302      	movs	r3, #2
void TIM3_Init(void) {
 800a1fe:	b530      	push	{r4, r5, lr}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a200:	2500      	movs	r5, #0
	__TIM3_CLK_ENABLE()
 800a202:	4a24      	ldr	r2, [pc, #144]	; (800a294 <TIM3_Init+0x98>)
void TIM3_Init(void) {
 800a204:	b095      	sub	sp, #84	; 0x54
	__TIM3_CLK_ENABLE()
 800a206:	69d1      	ldr	r1, [r2, #28]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800a208:	4823      	ldr	r0, [pc, #140]	; (800a298 <TIM3_Init+0x9c>)
	__TIM3_CLK_ENABLE()
 800a20a:	4319      	orrs	r1, r3
 800a20c:	61d1      	str	r1, [r2, #28]
 800a20e:	69d2      	ldr	r2, [r2, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a210:	9309      	str	r3, [sp, #36]	; 0x24
	__TIM3_CLK_ENABLE()
 800a212:	401a      	ands	r2, r3
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a214:	3301      	adds	r3, #1
	__TIM3_CLK_ENABLE()
 800a216:	9201      	str	r2, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a218:	930b      	str	r3, [sp, #44]	; 0x2c
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800a21a:	a908      	add	r1, sp, #32
	GPIO_InitStruct.Pin = _Switch_PIN;
 800a21c:	3b02      	subs	r3, #2
 800a21e:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800a220:	930c      	str	r3, [sp, #48]	; 0x30
	__TIM3_CLK_ENABLE()
 800a222:	9a01      	ldr	r2, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a224:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800a226:	f007 f835 	bl	8011294 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a22a:	2200      	movs	r2, #0
 800a22c:	2100      	movs	r1, #0
 800a22e:	2010      	movs	r0, #16
 800a230:	f006 f846 	bl	80102c0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a234:	2010      	movs	r0, #16
 800a236:	f006 f86f 	bl	8010318 <HAL_NVIC_EnableIRQ>
	htim3.Instance = TIM3;
 800a23a:	4c18      	ldr	r4, [pc, #96]	; (800a29c <TIM3_Init+0xa0>)
 800a23c:	4b18      	ldr	r3, [pc, #96]	; (800a2a0 <TIM3_Init+0xa4>)
 800a23e:	6023      	str	r3, [r4, #0]
	htim3.Init.Prescaler = (uint32_t) (HAL_RCC_GetSysClockFreq()
 800a240:	f007 fd98 	bl	8011d74 <HAL_RCC_GetSysClockFreq>
 800a244:	4917      	ldr	r1, [pc, #92]	; (800a2a4 <TIM3_Init+0xa8>)
 800a246:	f7f5 ff83 	bl	8000150 <__udivsi3>
			/ PWM_TIMER_CLOCK) - 1;
 800a24a:	3801      	subs	r0, #1
	htim3.Init.Prescaler = (uint32_t) (HAL_RCC_GetSysClockFreq()
 800a24c:	6060      	str	r0, [r4, #4]
	HAL_TIM_Base_Init(&htim3);
 800a24e:	0020      	movs	r0, r4
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a250:	60a5      	str	r5, [r4, #8]
	htim3.Init.Period = 0;
 800a252:	60e5      	str	r5, [r4, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a254:	6125      	str	r5, [r4, #16]
	HAL_TIM_Base_Init(&htim3);
 800a256:	f008 fb25 	bl	80128a4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a25a:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800a25c:	a904      	add	r1, sp, #16
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a25e:	015b      	lsls	r3, r3, #5
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800a260:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a262:	9304      	str	r3, [sp, #16]
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800a264:	f008 fa04 	bl	8012670 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim3);
 800a268:	0020      	movs	r0, r4
 800a26a:	f008 fb35 	bl	80128d8 <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800a26e:	a902      	add	r1, sp, #8
 800a270:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a272:	9502      	str	r5, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a274:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800a276:	f008 fbf1 	bl	8012a5c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a27a:	2360      	movs	r3, #96	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _Switch_TIM_CH);
 800a27c:	2208      	movs	r2, #8
 800a27e:	a90d      	add	r1, sp, #52	; 0x34
 800a280:	0020      	movs	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a282:	930d      	str	r3, [sp, #52]	; 0x34
	sConfigOC.Pulse = 0;
 800a284:	950e      	str	r5, [sp, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a286:	950f      	str	r5, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a288:	9511      	str	r5, [sp, #68]	; 0x44
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _Switch_TIM_CH);
 800a28a:	f008 fb7f 	bl	801298c <HAL_TIM_PWM_ConfigChannel>
}
 800a28e:	b015      	add	sp, #84	; 0x54
 800a290:	bd30      	pop	{r4, r5, pc}
 800a292:	46c0      	nop			; (mov r8, r8)
 800a294:	40021000 	.word	0x40021000
 800a298:	48000400 	.word	0x48000400
 800a29c:	20006a1c 	.word	0x20006a1c
 800a2a0:	40000400 	.word	0x40000400
 800a2a4:	00f42400 	.word	0x00f42400

0800a2a8 <TIM3_DeInit>:
void TIM3_DeInit(void) {
 800a2a8:	b510      	push	{r4, lr}
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800a2aa:	2010      	movs	r0, #16
 800a2ac:	f006 f83e 	bl	801032c <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_DeInit(&htim3);
 800a2b0:	4c06      	ldr	r4, [pc, #24]	; (800a2cc <TIM3_DeInit+0x24>)
 800a2b2:	0020      	movs	r0, r4
 800a2b4:	f008 f91e 	bl	80124f4 <HAL_TIM_Base_DeInit>
	HAL_TIM_PWM_DeInit(&htim3);
 800a2b8:	0020      	movs	r0, r4
 800a2ba:	f008 f973 	bl	80125a4 <HAL_TIM_PWM_DeInit>
	__TIM3_CLK_DISABLE();
 800a2be:	2102      	movs	r1, #2
 800a2c0:	4a03      	ldr	r2, [pc, #12]	; (800a2d0 <TIM3_DeInit+0x28>)
 800a2c2:	69d3      	ldr	r3, [r2, #28]
 800a2c4:	438b      	bics	r3, r1
 800a2c6:	61d3      	str	r3, [r2, #28]
}
 800a2c8:	bd10      	pop	{r4, pc}
 800a2ca:	46c0      	nop			; (mov r8, r8)
 800a2cc:	20006a1c 	.word	0x20006a1c
 800a2d0:	40021000 	.word	0x40021000

0800a2d4 <Set_Switch_PWM>:
Module_Status Set_Switch_PWM(uint32_t freq, float dutycycle) {
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	1c0f      	adds	r7, r1, #0
	uint32_t ARR = PWM_TIMER_CLOCK / freq;
 800a2d8:	0001      	movs	r1, r0
 800a2da:	4813      	ldr	r0, [pc, #76]	; (800a328 <Set_Switch_PWM+0x54>)
 800a2dc:	f7f5 ff38 	bl	8000150 <__udivsi3>
	if (Switch_state != STATE_PWM)
 800a2e0:	4b12      	ldr	r3, [pc, #72]	; (800a32c <Set_Switch_PWM+0x58>)
	uint32_t ARR = PWM_TIMER_CLOCK / freq;
 800a2e2:	0006      	movs	r6, r0
	if (Switch_state != STATE_PWM)
 800a2e4:	7d1b      	ldrb	r3, [r3, #20]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d001      	beq.n	800a2ee <Set_Switch_PWM+0x1a>
		TIM3_Init();
 800a2ea:	f7ff ff87 	bl	800a1fc <TIM3_Init>
	htim3.Instance->ARR = ARR - 1;
 800a2ee:	4c10      	ldr	r4, [pc, #64]	; (800a330 <Set_Switch_PWM+0x5c>)
 800a2f0:	1e73      	subs	r3, r6, #1
 800a2f2:	6825      	ldr	r5, [r4, #0]
	htim3.Instance->CCR3 = ((float) dutycycle / 100.0f) * ARR;
 800a2f4:	490f      	ldr	r1, [pc, #60]	; (800a334 <Set_Switch_PWM+0x60>)
	htim3.Instance->ARR = ARR - 1;
 800a2f6:	62eb      	str	r3, [r5, #44]	; 0x2c
	htim3.Instance->CCR3 = ((float) dutycycle / 100.0f) * ARR;
 800a2f8:	1c38      	adds	r0, r7, #0
 800a2fa:	f7f6 fa59 	bl	80007b0 <__aeabi_fdiv>
 800a2fe:	1c07      	adds	r7, r0, #0
 800a300:	0030      	movs	r0, r6
 800a302:	f7f6 ff43 	bl	800118c <__aeabi_ui2f>
 800a306:	1c01      	adds	r1, r0, #0
 800a308:	1c38      	adds	r0, r7, #0
 800a30a:	f7f6 fc29 	bl	8000b60 <__aeabi_fmul>
 800a30e:	f7f6 f957 	bl	80005c0 <__aeabi_f2uiz>
	if (HAL_TIM_PWM_Start(&htim3, _Switch_TIM_CH) != HAL_OK)
 800a312:	2108      	movs	r1, #8
	htim3.Instance->CCR3 = ((float) dutycycle / 100.0f) * ARR;
 800a314:	63e8      	str	r0, [r5, #60]	; 0x3c
	if (HAL_TIM_PWM_Start(&htim3, _Switch_TIM_CH) != HAL_OK)
 800a316:	0020      	movs	r0, r4
 800a318:	f008 f964 	bl	80125e4 <HAL_TIM_PWM_Start>
 800a31c:	1e43      	subs	r3, r0, #1
 800a31e:	4198      	sbcs	r0, r3
 800a320:	4240      	negs	r0, r0
 800a322:	b2c0      	uxtb	r0, r0
}
 800a324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a326:	46c0      	nop			; (mov r8, r8)
 800a328:	00f42400 	.word	0x00f42400
 800a32c:	20001fbc 	.word	0x20001fbc
 800a330:	20006a1c 	.word	0x20006a1c
 800a334:	42c80000 	.word	0x42c80000

0800a338 <Output_PWM.part.3>:
Module_Status Output_PWM(float dutyCycle) {
 800a338:	b570      	push	{r4, r5, r6, lr}
	result = Set_Switch_PWM(Switch_PWM_DEF_FREQ, dutyCycle);
 800a33a:	1c01      	adds	r1, r0, #0
Module_Status Output_PWM(float dutyCycle) {
 800a33c:	1c05      	adds	r5, r0, #0
	result = Set_Switch_PWM(Switch_PWM_DEF_FREQ, dutyCycle);
 800a33e:	20f5      	movs	r0, #245	; 0xf5
 800a340:	0080      	lsls	r0, r0, #2
 800a342:	f7ff ffc7 	bl	800a2d4 <Set_Switch_PWM>
 800a346:	1e04      	subs	r4, r0, #0
	if (result == H0FR7_OK) {
 800a348:	d109      	bne.n	800a35e <Output_PWM.part.3+0x26>
		Switch_state = STATE_PWM;
 800a34a:	2202      	movs	r2, #2
		Switch_OldDC = dutyCycle;
 800a34c:	4b09      	ldr	r3, [pc, #36]	; (800a374 <Output_PWM.part.3+0x3c>)
		Switch_Oldstate = Switch_state;
 800a34e:	490a      	ldr	r1, [pc, #40]	; (800a378 <Output_PWM.part.3+0x40>)
		Switch_OldDC = dutyCycle;
 800a350:	601d      	str	r5, [r3, #0]
		Switch_state = STATE_PWM;
 800a352:	4b0a      	ldr	r3, [pc, #40]	; (800a37c <Output_PWM.part.3+0x44>)
		Switch_Oldstate = Switch_state;
 800a354:	700a      	strb	r2, [r1, #0]
		Switch_state = STATE_PWM;
 800a356:	751a      	strb	r2, [r3, #20]
		if (SwitchindMode)
 800a358:	7a1b      	ldrb	r3, [r3, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <Output_PWM.part.3+0x2a>
}
 800a35e:	0020      	movs	r0, r4
 800a360:	bd70      	pop	{r4, r5, r6, pc}
			IND_ON();
 800a362:	2180      	movs	r1, #128	; 0x80
 800a364:	2090      	movs	r0, #144	; 0x90
 800a366:	3a01      	subs	r2, #1
 800a368:	0109      	lsls	r1, r1, #4
 800a36a:	05c0      	lsls	r0, r0, #23
 800a36c:	f007 f932 	bl	80115d4 <HAL_GPIO_WritePin>
 800a370:	e7f5      	b.n	800a35e <Output_PWM.part.3+0x26>
 800a372:	46c0      	nop			; (mov r8, r8)
 800a374:	20006a14 	.word	0x20006a14
 800a378:	2000009c 	.word	0x2000009c
 800a37c:	20001fbc 	.word	0x20001fbc

0800a380 <pwmCommand>:
portBASE_TYPE pwmCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
	Module_Status result = H0FR7_OK;

	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800a380:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800a382:	b530      	push	{r4, r5, lr}
 800a384:	b083      	sub	sp, #12
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a386:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 800a388:	0005      	movs	r5, r0
 800a38a:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a38c:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 800a38e:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a390:	f003 fec2 	bl	800e118 <FreeRTOS_CLIGetParameter>
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);

	dutycycle = (float) atof((char*) pcParameterString1);
 800a394:	f009 f83c 	bl	8013410 <atof>
 800a398:	f7f8 fd28 	bl	8002dec <__aeabi_d2f>

	if (dutycycle < 0.0f || dutycycle > 100.0f)
 800a39c:	2100      	movs	r1, #0
	dutycycle = (float) atof((char*) pcParameterString1);
 800a39e:	1c04      	adds	r4, r0, #0
	if (dutycycle < 0.0f || dutycycle > 100.0f)
 800a3a0:	f7f6 f89c 	bl	80004dc <__aeabi_fcmplt>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d105      	bne.n	800a3b4 <pwmCommand+0x34>
 800a3a8:	490f      	ldr	r1, [pc, #60]	; (800a3e8 <pwmCommand+0x68>)
 800a3aa:	1c20      	adds	r0, r4, #0
 800a3ac:	f7f6 f8aa 	bl	8000504 <__aeabi_fcmpgt>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d007      	beq.n	800a3c4 <pwmCommand+0x44>

	/* Respond to the command */
	if (result == H0FR7_OK) {
		sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, dutycycle);
	} else if (result == H0FR7_ERR_Wrong_Value) {
		strcpy((char*) pcWriteBuffer, (char*) pcWrongValue);
 800a3b4:	2237      	movs	r2, #55	; 0x37
 800a3b6:	490d      	ldr	r1, [pc, #52]	; (800a3ec <pwmCommand+0x6c>)
 800a3b8:	0028      	movs	r0, r5
 800a3ba:	f009 faf4 	bl	80139a6 <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800a3be:	2000      	movs	r0, #0
 800a3c0:	b003      	add	sp, #12
 800a3c2:	bd30      	pop	{r4, r5, pc}
 800a3c4:	1c20      	adds	r0, r4, #0
 800a3c6:	f7ff ffb7 	bl	800a338 <Output_PWM.part.3>
	if (result == H0FR7_OK) {
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d002      	beq.n	800a3d4 <pwmCommand+0x54>
	} else if (result == H0FR7_ERR_Wrong_Value) {
 800a3ce:	2802      	cmp	r0, #2
 800a3d0:	d1f5      	bne.n	800a3be <pwmCommand+0x3e>
 800a3d2:	e7ef      	b.n	800a3b4 <pwmCommand+0x34>
		sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, dutycycle);
 800a3d4:	1c20      	adds	r0, r4, #0
 800a3d6:	f7f8 fcb7 	bl	8002d48 <__aeabi_f2d>
 800a3da:	0002      	movs	r2, r0
 800a3dc:	000b      	movs	r3, r1
 800a3de:	0028      	movs	r0, r5
 800a3e0:	4903      	ldr	r1, [pc, #12]	; (800a3f0 <pwmCommand+0x70>)
 800a3e2:	f009 fce3 	bl	8013dac <sprintf>
 800a3e6:	e7ea      	b.n	800a3be <pwmCommand+0x3e>
 800a3e8:	42c80000 	.word	0x42c80000
 800a3ec:	0801b04c 	.word	0x0801b04c
 800a3f0:	0801b084 	.word	0x0801b084

0800a3f4 <Output_on>:
Module_Status Output_on(uint32_t timeout) {
 800a3f4:	b530      	push	{r4, r5, lr}
	if (Switch_state == STATE_PWM) {
 800a3f6:	4c23      	ldr	r4, [pc, #140]	; (800a484 <Output_on+0x90>)
Module_Status Output_on(uint32_t timeout) {
 800a3f8:	b083      	sub	sp, #12
	if (Switch_state == STATE_PWM) {
 800a3fa:	7d23      	ldrb	r3, [r4, #20]
Module_Status Output_on(uint32_t timeout) {
 800a3fc:	0005      	movs	r5, r0
	if (Switch_state == STATE_PWM) {
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d02e      	beq.n	800a460 <Output_on+0x6c>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800a402:	2201      	movs	r2, #1
 800a404:	2101      	movs	r1, #1
 800a406:	4820      	ldr	r0, [pc, #128]	; (800a488 <Output_on+0x94>)
 800a408:	f007 f8e4 	bl	80115d4 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a40c:	7a23      	ldrb	r3, [r4, #8]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d11e      	bne.n	800a450 <Output_on+0x5c>
	if (timeout != portMAX_DELAY) {
 800a412:	1c6b      	adds	r3, r5, #1
 800a414:	d015      	beq.n	800a442 <Output_on+0x4e>
		if (xTimerIsTimerActive(xTimerSwitch))
 800a416:	6860      	ldr	r0, [r4, #4]
 800a418:	f005 fa6a 	bl	800f8f0 <xTimerIsTimerActive>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d128      	bne.n	800a472 <Output_on+0x7e>
		xTimerChangePeriod(xTimerSwitch, pdMS_TO_TICKS(timeout), 100);
 800a420:	21fa      	movs	r1, #250	; 0xfa
 800a422:	0168      	lsls	r0, r5, #5
 800a424:	1b40      	subs	r0, r0, r5
 800a426:	0080      	lsls	r0, r0, #2
 800a428:	1940      	adds	r0, r0, r5
 800a42a:	0089      	lsls	r1, r1, #2
 800a42c:	00c0      	lsls	r0, r0, #3
 800a42e:	f7f5 fe8f 	bl	8000150 <__udivsi3>
 800a432:	2364      	movs	r3, #100	; 0x64
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	0002      	movs	r2, r0
 800a438:	2300      	movs	r3, #0
 800a43a:	2104      	movs	r1, #4
 800a43c:	6860      	ldr	r0, [r4, #4]
 800a43e:	f005 f927 	bl	800f690 <xTimerGenericCommand>
	Switch_state = STATE_ON;
 800a442:	2301      	movs	r3, #1
}
 800a444:	2000      	movs	r0, #0
	Switch_Oldstate = Switch_state;
 800a446:	4a11      	ldr	r2, [pc, #68]	; (800a48c <Output_on+0x98>)
	Switch_state = STATE_ON;
 800a448:	7523      	strb	r3, [r4, #20]
	Switch_Oldstate = Switch_state;
 800a44a:	7013      	strb	r3, [r2, #0]
}
 800a44c:	b003      	add	sp, #12
 800a44e:	bd30      	pop	{r4, r5, pc}
		IND_ON();
 800a450:	2180      	movs	r1, #128	; 0x80
 800a452:	2090      	movs	r0, #144	; 0x90
 800a454:	2201      	movs	r2, #1
 800a456:	0109      	lsls	r1, r1, #4
 800a458:	05c0      	lsls	r0, r0, #23
 800a45a:	f007 f8bb 	bl	80115d4 <HAL_GPIO_WritePin>
 800a45e:	e7d8      	b.n	800a412 <Output_on+0x1e>
		HAL_TIM_PWM_Stop(&htim3, _Switch_TIM_CH);
 800a460:	2108      	movs	r1, #8
 800a462:	480b      	ldr	r0, [pc, #44]	; (800a490 <Output_on+0x9c>)
 800a464:	f008 f8c2 	bl	80125ec <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800a468:	f7ff ff1e 	bl	800a2a8 <TIM3_DeInit>
		Switch_Init();
 800a46c:	f001 fda6 	bl	800bfbc <Switch_Init>
 800a470:	e7c7      	b.n	800a402 <Output_on+0xe>
			xTimerStop(xTimerSwitch, 100);
 800a472:	2364      	movs	r3, #100	; 0x64
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	2200      	movs	r2, #0
 800a478:	2300      	movs	r3, #0
 800a47a:	2103      	movs	r1, #3
 800a47c:	6860      	ldr	r0, [r4, #4]
 800a47e:	f005 f907 	bl	800f690 <xTimerGenericCommand>
 800a482:	e7cd      	b.n	800a420 <Output_on+0x2c>
 800a484:	20001fbc 	.word	0x20001fbc
 800a488:	48000400 	.word	0x48000400
 800a48c:	2000009c 	.word	0x2000009c
 800a490:	20006a1c 	.word	0x20006a1c

0800a494 <Current_Calculation>:
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a494:	2380      	movs	r3, #128	; 0x80
static float Current_Calculation(void) {
 800a496:	b5f0      	push	{r4, r5, r6, r7, lr}
	ADC_ChannelConfTypeDef sConfig ={0};
 800a498:	2700      	movs	r7, #0
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800a49a:	2603      	movs	r6, #3
	HAL_ADC_ConfigChannel(&hadc,&sConfig);
 800a49c:	4c19      	ldr	r4, [pc, #100]	; (800a504 <Current_Calculation+0x70>)
static float Current_Calculation(void) {
 800a49e:	b085      	sub	sp, #20
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a4a0:	015b      	lsls	r3, r3, #5
	HAL_ADC_ConfigChannel(&hadc,&sConfig);
 800a4a2:	a901      	add	r1, sp, #4
 800a4a4:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a4a6:	9302      	str	r3, [sp, #8]
	ADC_ChannelConfTypeDef sConfig ={0};
 800a4a8:	9701      	str	r7, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800a4aa:	9603      	str	r6, [sp, #12]
	HAL_ADC_ConfigChannel(&hadc,&sConfig);
 800a4ac:	f005 fe78 	bl	80101a0 <HAL_ADC_ConfigChannel>
	Output_on(3000);
 800a4b0:	4815      	ldr	r0, [pc, #84]	; (800a508 <Current_Calculation+0x74>)
 800a4b2:	f7ff ff9f 	bl	800a3f4 <Output_on>
	Delay_ms(1000);
 800a4b6:	20fa      	movs	r0, #250	; 0xfa
 800a4b8:	0080      	lsls	r0, r0, #2
 800a4ba:	f005 fbc9 	bl	800fc50 <HAL_Delay>
	HAL_ADC_Start(&hadc);
 800a4be:	0020      	movs	r0, r4
 800a4c0:	f005 fd42 	bl	800ff48 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,10);
 800a4c4:	210a      	movs	r1, #10
 800a4c6:	0020      	movs	r0, r4
 800a4c8:	f005 fd8a 	bl	800ffe0 <HAL_ADC_PollForConversion>
	rawValues =HAL_ADC_GetValue(&hadc);
 800a4cc:	0020      	movs	r0, r4
 800a4ce:	f005 fdeb 	bl	80100a8 <HAL_ADC_GetValue>
 800a4d2:	4d0e      	ldr	r5, [pc, #56]	; (800a50c <Current_Calculation+0x78>)
 800a4d4:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800a4d6:	0020      	movs	r0, r4
 800a4d8:	f005 fd62 	bl	800ffa0 <HAL_ADC_Stop>
	sConfig.Rank = ADC_RANK_NONE;
 800a4dc:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <Current_Calculation+0x7c>)
	HAL_ADC_ConfigChannel(&hadc,&sConfig);
 800a4de:	a901      	add	r1, sp, #4
 800a4e0:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_NONE;
 800a4e2:	9302      	str	r3, [sp, #8]
	sConfig.Channel = ADC_CHANNEL_0;
 800a4e4:	9701      	str	r7, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800a4e6:	9603      	str	r6, [sp, #12]
	HAL_ADC_ConfigChannel(&hadc,&sConfig);
 800a4e8:	f005 fe5a 	bl	80101a0 <HAL_ADC_ConfigChannel>
	return (rawValues * ADC_CONVERSION);
 800a4ec:	6828      	ldr	r0, [r5, #0]
 800a4ee:	f7f8 fbf9 	bl	8002ce4 <__aeabi_ui2d>
 800a4f2:	4a08      	ldr	r2, [pc, #32]	; (800a514 <Current_Calculation+0x80>)
 800a4f4:	4b08      	ldr	r3, [pc, #32]	; (800a518 <Current_Calculation+0x84>)
 800a4f6:	f7f7 fdaf 	bl	8002058 <__aeabi_dmul>
 800a4fa:	f7f8 fc77 	bl	8002dec <__aeabi_d2f>
}
 800a4fe:	b005      	add	sp, #20
 800a500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a502:	46c0      	nop			; (mov r8, r8)
 800a504:	20006c58 	.word	0x20006c58
 800a508:	00000bb8 	.word	0x00000bb8
 800a50c:	2000699c 	.word	0x2000699c
 800a510:	00001001 	.word	0x00001001
 800a514:	a5119ce0 	.word	0xa5119ce0
 800a518:	3f77c1bd 	.word	0x3f77c1bd

0800a51c <mosfetSampleCommand>:
#endif
/*-----------------------------------------------------------*/

static portBASE_TYPE mosfetSampleCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a51c:	b510      	push	{r4, lr}
 800a51e:	0004      	movs	r4, r0
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* Obtain the value. */
	Current = Current_Calculation();
 800a520:	f7ff ffb8 	bl	800a494 <Current_Calculation>
	mosfetCurrent = Current;
 800a524:	4b05      	ldr	r3, [pc, #20]	; (800a53c <mosfetSampleCommand+0x20>)
 800a526:	6018      	str	r0, [r3, #0]

	/* Respond to the command */
	sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, Current);
 800a528:	f7f8 fc0e 	bl	8002d48 <__aeabi_f2d>
 800a52c:	0002      	movs	r2, r0
 800a52e:	000b      	movs	r3, r1
 800a530:	0020      	movs	r0, r4
 800a532:	4903      	ldr	r1, [pc, #12]	; (800a540 <mosfetSampleCommand+0x24>)
 800a534:	f009 fc3a 	bl	8013dac <sprintf>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800a538:	2000      	movs	r0, #0
 800a53a:	bd10      	pop	{r4, pc}
 800a53c:	20000008 	.word	0x20000008
 800a540:	0801b0cc 	.word	0x0801b0cc

0800a544 <onCommand>:
	portBASE_TYPE xParameterStringLength1 = 0;
 800a544:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800a546:	b530      	push	{r4, r5, lr}
 800a548:	b083      	sub	sp, #12
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a54a:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 800a54c:	0005      	movs	r5, r0
 800a54e:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a550:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 800a552:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a554:	f003 fde0 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if (!strcmp((char*) pcParameterString1, "inf")
 800a558:	4914      	ldr	r1, [pc, #80]	; (800a5ac <onCommand+0x68>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a55a:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "inf")
 800a55c:	f7f5 fdd2 	bl	8000104 <strcmp>
 800a560:	2800      	cmp	r0, #0
 800a562:	d005      	beq.n	800a570 <onCommand+0x2c>
			|| !strcmp((char*) pcParameterString1, "INF"))
 800a564:	4912      	ldr	r1, [pc, #72]	; (800a5b0 <onCommand+0x6c>)
 800a566:	0020      	movs	r0, r4
 800a568:	f7f5 fdcc 	bl	8000104 <strcmp>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d10d      	bne.n	800a58c <onCommand+0x48>
	result = Output_on(timeout);
 800a570:	2001      	movs	r0, #1
 800a572:	4240      	negs	r0, r0
 800a574:	f7ff ff3e 	bl	800a3f4 <Output_on>
	if (result == H0FR7_OK) {
 800a578:	2800      	cmp	r0, #0
 800a57a:	d104      	bne.n	800a586 <onCommand+0x42>
			strcpy((char*) pcWriteBuffer, (char*) pcOKMessageInf);
 800a57c:	2232      	movs	r2, #50	; 0x32
 800a57e:	490d      	ldr	r1, [pc, #52]	; (800a5b4 <onCommand+0x70>)
 800a580:	0028      	movs	r0, r5
 800a582:	f009 fa10 	bl	80139a6 <memcpy>
}
 800a586:	2000      	movs	r0, #0
 800a588:	b003      	add	sp, #12
 800a58a:	bd30      	pop	{r4, r5, pc}
		timeout = (uint32_t) atol((char*) pcParameterString1);
 800a58c:	0020      	movs	r0, r4
 800a58e:	f008 ff4a 	bl	8013426 <atol>
 800a592:	0004      	movs	r4, r0
	result = Output_on(timeout);
 800a594:	f7ff ff2e 	bl	800a3f4 <Output_on>
	if (result == H0FR7_OK) {
 800a598:	2800      	cmp	r0, #0
 800a59a:	d1f4      	bne.n	800a586 <onCommand+0x42>
		if (timeout != portMAX_DELAY) {
 800a59c:	1c63      	adds	r3, r4, #1
 800a59e:	d0ed      	beq.n	800a57c <onCommand+0x38>
			sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, timeout);
 800a5a0:	0022      	movs	r2, r4
 800a5a2:	4905      	ldr	r1, [pc, #20]	; (800a5b8 <onCommand+0x74>)
 800a5a4:	0028      	movs	r0, r5
 800a5a6:	f009 fc01 	bl	8013dac <sprintf>
 800a5aa:	e7ec      	b.n	800a586 <onCommand+0x42>
 800a5ac:	0801b0e0 	.word	0x0801b0e0
 800a5b0:	0801b0e4 	.word	0x0801b0e4
 800a5b4:	0801b120 	.word	0x0801b120
 800a5b8:	0801b0e8 	.word	0x0801b0e8

0800a5bc <Output_off>:
Module_Status Output_off(void) {
 800a5bc:	b510      	push	{r4, lr}
	if (Switch_state == STATE_PWM) {
 800a5be:	4c10      	ldr	r4, [pc, #64]	; (800a600 <Output_off+0x44>)
 800a5c0:	7d23      	ldrb	r3, [r4, #20]
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d012      	beq.n	800a5ec <Output_off+0x30>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	480e      	ldr	r0, [pc, #56]	; (800a604 <Output_off+0x48>)
 800a5cc:	f007 f802 	bl	80115d4 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a5d0:	7a23      	ldrb	r3, [r4, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d006      	beq.n	800a5e4 <Output_off+0x28>
		IND_OFF();
 800a5d6:	2180      	movs	r1, #128	; 0x80
 800a5d8:	2090      	movs	r0, #144	; 0x90
 800a5da:	2200      	movs	r2, #0
 800a5dc:	0109      	lsls	r1, r1, #4
 800a5de:	05c0      	lsls	r0, r0, #23
 800a5e0:	f006 fff8 	bl	80115d4 <HAL_GPIO_WritePin>
	Switch_state = STATE_OFF;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	2000      	movs	r0, #0
	Switch_state = STATE_OFF;
 800a5e8:	7523      	strb	r3, [r4, #20]
}
 800a5ea:	bd10      	pop	{r4, pc}
		HAL_TIM_PWM_Stop(&htim3, _Switch_TIM_CH);
 800a5ec:	2108      	movs	r1, #8
 800a5ee:	4806      	ldr	r0, [pc, #24]	; (800a608 <Output_off+0x4c>)
 800a5f0:	f007 fffc 	bl	80125ec <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800a5f4:	f7ff fe58 	bl	800a2a8 <TIM3_DeInit>
		Switch_Init();
 800a5f8:	f001 fce0 	bl	800bfbc <Switch_Init>
 800a5fc:	e7e3      	b.n	800a5c6 <Output_off+0xa>
 800a5fe:	46c0      	nop			; (mov r8, r8)
 800a600:	20001fbc 	.word	0x20001fbc
 800a604:	48000400 	.word	0x48000400
 800a608:	20006a1c 	.word	0x20006a1c

0800a60c <SwitchTimerCallback>:
void SwitchTimerCallback(TimerHandle_t xTimerSwitch) {
 800a60c:	b510      	push	{r4, lr}
 800a60e:	0004      	movs	r4, r0
	Output_off();
 800a610:	f7ff ffd4 	bl	800a5bc <Output_off>
	HAL_ADC_Stop(&hadc);
 800a614:	4806      	ldr	r0, [pc, #24]	; (800a630 <SwitchTimerCallback+0x24>)
 800a616:	f005 fcc3 	bl	800ffa0 <HAL_ADC_Stop>
	tid = (uint32_t) pvTimerGetTimerID(xTimerSwitch);
 800a61a:	0020      	movs	r0, r4
 800a61c:	f005 f974 	bl	800f908 <pvTimerGetTimerID>
	if (TIMERID_TIMEOUT_MEASUREMENT == tid) {
 800a620:	28ff      	cmp	r0, #255	; 0xff
 800a622:	d104      	bne.n	800a62e <SwitchTimerCallback+0x22>
		startMeasurement = STOP_MEASUREMENT;
 800a624:	2300      	movs	r3, #0
 800a626:	4a03      	ldr	r2, [pc, #12]	; (800a634 <SwitchTimerCallback+0x28>)
 800a628:	7553      	strb	r3, [r2, #21]
		mosfetMode = REQ_IDLE;		// Stop the streaming task
 800a62a:	4a03      	ldr	r2, [pc, #12]	; (800a638 <SwitchTimerCallback+0x2c>)
 800a62c:	7013      	strb	r3, [r2, #0]
}
 800a62e:	bd10      	pop	{r4, pc}
 800a630:	20006c58 	.word	0x20006c58
 800a634:	20001fbc 	.word	0x20001fbc
 800a638:	20006bbc 	.word	0x20006bbc

0800a63c <offCommand>:
		const int8_t *pcCommandString) {
 800a63c:	b510      	push	{r4, lr}
 800a63e:	0004      	movs	r4, r0
	result = Output_off();
 800a640:	f7ff ffbc 	bl	800a5bc <Output_off>
	if (result == H0FR7_OK) {
 800a644:	2800      	cmp	r0, #0
 800a646:	d104      	bne.n	800a652 <offCommand+0x16>
		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800a648:	2223      	movs	r2, #35	; 0x23
 800a64a:	4903      	ldr	r1, [pc, #12]	; (800a658 <offCommand+0x1c>)
 800a64c:	0020      	movs	r0, r4
 800a64e:	f009 f9aa 	bl	80139a6 <memcpy>
}
 800a652:	2000      	movs	r0, #0
 800a654:	bd10      	pop	{r4, pc}
 800a656:	46c0      	nop			; (mov r8, r8)
 800a658:	0801b154 	.word	0x0801b154

0800a65c <Output_toggle>:
	if (Switch_state) {
 800a65c:	4b15      	ldr	r3, [pc, #84]	; (800a6b4 <Output_toggle+0x58>)
Module_Status Output_toggle(void) {
 800a65e:	b510      	push	{r4, lr}
	if (Switch_state) {
 800a660:	7d1b      	ldrb	r3, [r3, #20]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d11b      	bne.n	800a69e <Output_toggle+0x42>
		if (Switch_Oldstate == STATE_ON)
 800a666:	4b14      	ldr	r3, [pc, #80]	; (800a6b8 <Output_toggle+0x5c>)
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d01a      	beq.n	800a6a4 <Output_toggle+0x48>
	Module_Status result = H0FR7_OK;
 800a66e:	2000      	movs	r0, #0
		else if (Switch_Oldstate == STATE_PWM)
 800a670:	2b02      	cmp	r3, #2
 800a672:	d000      	beq.n	800a676 <Output_toggle+0x1a>
}
 800a674:	bd10      	pop	{r4, pc}
			result = Output_PWM(Switch_OldDC);
 800a676:	4b11      	ldr	r3, [pc, #68]	; (800a6bc <Output_toggle+0x60>)
	if (dutyCycle < 0 || dutyCycle > 100)
 800a678:	2100      	movs	r1, #0
			result = Output_PWM(Switch_OldDC);
 800a67a:	681c      	ldr	r4, [r3, #0]
	if (dutyCycle < 0 || dutyCycle > 100)
 800a67c:	1c20      	adds	r0, r4, #0
 800a67e:	f7f5 ff2d 	bl	80004dc <__aeabi_fcmplt>
 800a682:	2800      	cmp	r0, #0
 800a684:	d113      	bne.n	800a6ae <Output_toggle+0x52>
 800a686:	490e      	ldr	r1, [pc, #56]	; (800a6c0 <Output_toggle+0x64>)
 800a688:	1c20      	adds	r0, r4, #0
 800a68a:	f7f5 ff3b 	bl	8000504 <__aeabi_fcmpgt>
 800a68e:	0003      	movs	r3, r0
		return H0FR7_ERR_Wrong_Value;
 800a690:	2002      	movs	r0, #2
	if (dutyCycle < 0 || dutyCycle > 100)
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1ee      	bne.n	800a674 <Output_toggle+0x18>
 800a696:	1c20      	adds	r0, r4, #0
 800a698:	f7ff fe4e 	bl	800a338 <Output_PWM.part.3>
 800a69c:	e7ea      	b.n	800a674 <Output_toggle+0x18>
		result = Output_off();
 800a69e:	f7ff ff8d 	bl	800a5bc <Output_off>
 800a6a2:	e7e7      	b.n	800a674 <Output_toggle+0x18>
			result = Output_on(portMAX_DELAY);
 800a6a4:	2001      	movs	r0, #1
 800a6a6:	4240      	negs	r0, r0
 800a6a8:	f7ff fea4 	bl	800a3f4 <Output_on>
 800a6ac:	e7e2      	b.n	800a674 <Output_toggle+0x18>
		return H0FR7_ERR_Wrong_Value;
 800a6ae:	2002      	movs	r0, #2
 800a6b0:	e7e0      	b.n	800a674 <Output_toggle+0x18>
 800a6b2:	46c0      	nop			; (mov r8, r8)
 800a6b4:	20001fbc 	.word	0x20001fbc
 800a6b8:	2000009c 	.word	0x2000009c
 800a6bc:	20006a14 	.word	0x20006a14
 800a6c0:	42c80000 	.word	0x42c80000

0800a6c4 <toggleCommand>:
		const int8_t *pcCommandString) {
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	0004      	movs	r4, r0
	result = Output_toggle();
 800a6c8:	f7ff ffc8 	bl	800a65c <Output_toggle>
	if (result == H0FR7_OK) {
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d108      	bne.n	800a6e2 <toggleCommand+0x1e>
		if (Switch_state) {
 800a6d0:	4b08      	ldr	r3, [pc, #32]	; (800a6f4 <toggleCommand+0x30>)
 800a6d2:	7d1b      	ldrb	r3, [r3, #20]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d106      	bne.n	800a6e6 <toggleCommand+0x22>
			strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800a6d8:	2223      	movs	r2, #35	; 0x23
 800a6da:	4907      	ldr	r1, [pc, #28]	; (800a6f8 <toggleCommand+0x34>)
 800a6dc:	0020      	movs	r0, r4
 800a6de:	f009 f962 	bl	80139a6 <memcpy>
}
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	bd10      	pop	{r4, pc}
			strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800a6e6:	2222      	movs	r2, #34	; 0x22
 800a6e8:	4904      	ldr	r1, [pc, #16]	; (800a6fc <toggleCommand+0x38>)
 800a6ea:	0020      	movs	r0, r4
 800a6ec:	f009 f95b 	bl	80139a6 <memcpy>
 800a6f0:	e7f7      	b.n	800a6e2 <toggleCommand+0x1e>
 800a6f2:	46c0      	nop			; (mov r8, r8)
 800a6f4:	20001fbc 	.word	0x20001fbc
 800a6f8:	0801b154 	.word	0x0801b154
 800a6fc:	0801b178 	.word	0x0801b178

0800a700 <Stream_current_To_CLI>:
	mosfetMode = REQ_STREAM_PORT_CLI;
 800a700:	2205      	movs	r2, #5
float Stream_current_To_CLI(uint32_t Period, uint32_t Timeout) {
 800a702:	b530      	push	{r4, r5, lr}
	mosfetPeriod = Period;
 800a704:	4b19      	ldr	r3, [pc, #100]	; (800a76c <Stream_current_To_CLI+0x6c>)
	mosfetTimeout = Timeout;
 800a706:	4c1a      	ldr	r4, [pc, #104]	; (800a770 <Stream_current_To_CLI+0x70>)
	mosfetPeriod = Period;
 800a708:	6018      	str	r0, [r3, #0]
	mosfetMode = REQ_STREAM_PORT_CLI;
 800a70a:	4b1a      	ldr	r3, [pc, #104]	; (800a774 <Stream_current_To_CLI+0x74>)
float Stream_current_To_CLI(uint32_t Period, uint32_t Timeout) {
 800a70c:	b083      	sub	sp, #12
	mosfetMode = REQ_STREAM_PORT_CLI;
 800a70e:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800a710:	1e4b      	subs	r3, r1, #1
	mosfetTimeout = Timeout;
 800a712:	6021      	str	r1, [r4, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800a714:	3303      	adds	r3, #3
 800a716:	d907      	bls.n	800a728 <Stream_current_To_CLI+0x28>
	if (mosfetTimeout > 0) {
 800a718:	2900      	cmp	r1, #0
 800a71a:	d002      	beq.n	800a722 <Stream_current_To_CLI+0x22>
		startMeasurement = START_MEASUREMENT;
 800a71c:	2201      	movs	r2, #1
 800a71e:	4b16      	ldr	r3, [pc, #88]	; (800a778 <Stream_current_To_CLI+0x78>)
 800a720:	755a      	strb	r2, [r3, #21]
}
 800a722:	2000      	movs	r0, #0
 800a724:	b003      	add	sp, #12
 800a726:	bd30      	pop	{r4, r5, pc}
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800a728:	0148      	lsls	r0, r1, #5
 800a72a:	1a40      	subs	r0, r0, r1
 800a72c:	0080      	lsls	r0, r0, #2
 800a72e:	1840      	adds	r0, r0, r1
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800a730:	21fa      	movs	r1, #250	; 0xfa
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800a732:	00c0      	lsls	r0, r0, #3
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800a734:	0089      	lsls	r1, r1, #2
 800a736:	f7f5 fd0b 	bl	8000150 <__udivsi3>
 800a73a:	4b10      	ldr	r3, [pc, #64]	; (800a77c <Stream_current_To_CLI+0x7c>)
 800a73c:	0001      	movs	r1, r0
 800a73e:	2200      	movs	r2, #0
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	480f      	ldr	r0, [pc, #60]	; (800a780 <Stream_current_To_CLI+0x80>)
 800a744:	23ff      	movs	r3, #255	; 0xff
 800a746:	f004 ff83 	bl	800f650 <xTimerCreate>
 800a74a:	4b0b      	ldr	r3, [pc, #44]	; (800a778 <Stream_current_To_CLI+0x78>)
 800a74c:	0005      	movs	r5, r0
 800a74e:	6058      	str	r0, [r3, #4]
		xTimerStart(xTimerSwitch, portMAX_DELAY);
 800a750:	f004 fafc 	bl	800ed4c <xTaskGetTickCount>
 800a754:	2301      	movs	r3, #1
 800a756:	425b      	negs	r3, r3
 800a758:	0002      	movs	r2, r0
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	2101      	movs	r1, #1
 800a75e:	2300      	movs	r3, #0
 800a760:	0028      	movs	r0, r5
 800a762:	f004 ff95 	bl	800f690 <xTimerGenericCommand>
 800a766:	6821      	ldr	r1, [r4, #0]
 800a768:	e7d6      	b.n	800a718 <Stream_current_To_CLI+0x18>
 800a76a:	46c0      	nop			; (mov r8, r8)
 800a76c:	20006b3c 	.word	0x20006b3c
 800a770:	20006c30 	.word	0x20006c30
 800a774:	20006bbc 	.word	0x20006bbc
 800a778:	20001fbc 	.word	0x20001fbc
 800a77c:	0800a60d 	.word	0x0800a60d
 800a780:	0801b028 	.word	0x0801b028

0800a784 <Stream_current_To_CLI_V>:
	mosfetMode = REQ_STREAM_VERBOSE_PORT_CLI;
 800a784:	2206      	movs	r2, #6
float Stream_current_To_CLI_V(uint32_t Period, uint32_t Timeout) {
 800a786:	b530      	push	{r4, r5, lr}
	mosfetPeriod = Period;
 800a788:	4b19      	ldr	r3, [pc, #100]	; (800a7f0 <Stream_current_To_CLI_V+0x6c>)
	mosfetTimeout = Timeout;
 800a78a:	4c1a      	ldr	r4, [pc, #104]	; (800a7f4 <Stream_current_To_CLI_V+0x70>)
	mosfetPeriod = Period;
 800a78c:	6018      	str	r0, [r3, #0]
	mosfetMode = REQ_STREAM_VERBOSE_PORT_CLI;
 800a78e:	4b1a      	ldr	r3, [pc, #104]	; (800a7f8 <Stream_current_To_CLI_V+0x74>)
float Stream_current_To_CLI_V(uint32_t Period, uint32_t Timeout) {
 800a790:	b083      	sub	sp, #12
	mosfetMode = REQ_STREAM_VERBOSE_PORT_CLI;
 800a792:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800a794:	1e4b      	subs	r3, r1, #1
	mosfetTimeout = Timeout;
 800a796:	6021      	str	r1, [r4, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800a798:	3303      	adds	r3, #3
 800a79a:	d907      	bls.n	800a7ac <Stream_current_To_CLI_V+0x28>
	if (mosfetTimeout > 0) {
 800a79c:	2900      	cmp	r1, #0
 800a79e:	d002      	beq.n	800a7a6 <Stream_current_To_CLI_V+0x22>
		startMeasurement = START_MEASUREMENT;
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	4b16      	ldr	r3, [pc, #88]	; (800a7fc <Stream_current_To_CLI_V+0x78>)
 800a7a4:	755a      	strb	r2, [r3, #21]
}
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	b003      	add	sp, #12
 800a7aa:	bd30      	pop	{r4, r5, pc}
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800a7ac:	0148      	lsls	r0, r1, #5
 800a7ae:	1a40      	subs	r0, r0, r1
 800a7b0:	0080      	lsls	r0, r0, #2
 800a7b2:	1840      	adds	r0, r0, r1
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800a7b4:	21fa      	movs	r1, #250	; 0xfa
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800a7b6:	00c0      	lsls	r0, r0, #3
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800a7b8:	0089      	lsls	r1, r1, #2
 800a7ba:	f7f5 fcc9 	bl	8000150 <__udivsi3>
 800a7be:	4b10      	ldr	r3, [pc, #64]	; (800a800 <Stream_current_To_CLI_V+0x7c>)
 800a7c0:	0001      	movs	r1, r0
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	480f      	ldr	r0, [pc, #60]	; (800a804 <Stream_current_To_CLI_V+0x80>)
 800a7c8:	23ff      	movs	r3, #255	; 0xff
 800a7ca:	f004 ff41 	bl	800f650 <xTimerCreate>
 800a7ce:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <Stream_current_To_CLI_V+0x78>)
 800a7d0:	0005      	movs	r5, r0
 800a7d2:	6058      	str	r0, [r3, #4]
		xTimerStart(xTimerSwitch, portMAX_DELAY);
 800a7d4:	f004 faba 	bl	800ed4c <xTaskGetTickCount>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	425b      	negs	r3, r3
 800a7dc:	0002      	movs	r2, r0
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	0028      	movs	r0, r5
 800a7e6:	f004 ff53 	bl	800f690 <xTimerGenericCommand>
 800a7ea:	6821      	ldr	r1, [r4, #0]
 800a7ec:	e7d6      	b.n	800a79c <Stream_current_To_CLI_V+0x18>
 800a7ee:	46c0      	nop			; (mov r8, r8)
 800a7f0:	20006b3c 	.word	0x20006b3c
 800a7f4:	20006c30 	.word	0x20006c30
 800a7f8:	20006bbc 	.word	0x20006bbc
 800a7fc:	20001fbc 	.word	0x20001fbc
 800a800:	0800a60d 	.word	0x0800a60d
 800a804:	0801b028 	.word	0x0801b028

0800a808 <Stop_current_measurement>:
	mosfetMode = REQ_IDLE;
 800a808:	2300      	movs	r3, #0
Module_Status Stop_current_measurement(void) {
 800a80a:	b500      	push	{lr}
	mosfetMode = REQ_IDLE;
 800a80c:	4a09      	ldr	r2, [pc, #36]	; (800a834 <Stop_current_measurement+0x2c>)
Module_Status Stop_current_measurement(void) {
 800a80e:	b083      	sub	sp, #12
	mosfetMode = REQ_IDLE;
 800a810:	7013      	strb	r3, [r2, #0]
	startMeasurement = STOP_MEASUREMENT;
 800a812:	4a09      	ldr	r2, [pc, #36]	; (800a838 <Stop_current_measurement+0x30>)
	xTimerStop(xTimerSwitch, 0);
 800a814:	2103      	movs	r1, #3
	startMeasurement = STOP_MEASUREMENT;
 800a816:	7553      	strb	r3, [r2, #21]
	xTimerStop(xTimerSwitch, 0);
 800a818:	6850      	ldr	r0, [r2, #4]
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f004 ff37 	bl	800f690 <xTimerGenericCommand>
	Output_off();
 800a822:	f7ff fecb 	bl	800a5bc <Output_off>
	HAL_ADC_Stop(&hadc);
 800a826:	4805      	ldr	r0, [pc, #20]	; (800a83c <Stop_current_measurement+0x34>)
 800a828:	f005 fbba 	bl	800ffa0 <HAL_ADC_Stop>
}
 800a82c:	2000      	movs	r0, #0
 800a82e:	b003      	add	sp, #12
 800a830:	bd00      	pop	{pc}
 800a832:	46c0      	nop			; (mov r8, r8)
 800a834:	20006bbc 	.word	0x20006bbc
 800a838:	20001fbc 	.word	0x20001fbc
 800a83c:	20006c58 	.word	0x20006c58

0800a840 <mosfetStreamCommand>:
/*-----------------------------------------------------------*/

static portBASE_TYPE mosfetStreamCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a840:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a842:	46d6      	mov	lr, sl
 800a844:	4646      	mov	r6, r8
 800a846:	464f      	mov	r7, r9
 800a848:	0014      	movs	r4, r2

	int8_t *pcParameterString1; /* period */
	int8_t *pcParameterString2; /* timeout */
	int8_t *pcParameterString3; /* port or buffer */
	int8_t *pcParameterString4; /* module */
	portBASE_TYPE xParameterStringLength1 = 0;
 800a84a:	2300      	movs	r3, #0
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a84c:	b5c0      	push	{r6, r7, lr}
 800a84e:	b086      	sub	sp, #24
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* Obtain the 1st parameter string: period */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800a850:	aa02      	add	r2, sp, #8
 800a852:	2101      	movs	r1, #1
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a854:	0005      	movs	r5, r0
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800a856:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 = 0;
 800a858:	9302      	str	r3, [sp, #8]
	portBASE_TYPE xParameterStringLength2 = 0;
 800a85a:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength3 = 0;
 800a85c:	9304      	str	r3, [sp, #16]
	portBASE_TYPE xParameterStringLength4 = 0;
 800a85e:	9305      	str	r3, [sp, #20]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800a860:	f003 fc5a 	bl	800e118 <FreeRTOS_CLIGetParameter>
			&xParameterStringLength1);
	/* Obtain the 2nd parameter string: timeout */
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,
 800a864:	aa03      	add	r2, sp, #12
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800a866:	4680      	mov	r8, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,
 800a868:	2102      	movs	r1, #2
 800a86a:	0020      	movs	r0, r4
 800a86c:	f003 fc54 	bl	800e118 <FreeRTOS_CLIGetParameter>
			&xParameterStringLength2);
	/* Obtain the 3rd parameter string: port */
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,
 800a870:	aa04      	add	r2, sp, #16
 800a872:	2103      	movs	r1, #3
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,
 800a874:	0007      	movs	r7, r0
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,
 800a876:	0020      	movs	r0, r4
 800a878:	f003 fc4e 	bl	800e118 <FreeRTOS_CLIGetParameter>
			&xParameterStringLength3);
	/* Obtain the 4th parameter string: module */
	pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 4,
 800a87c:	aa05      	add	r2, sp, #20
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,
 800a87e:	0006      	movs	r6, r0
	pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 4,
 800a880:	2104      	movs	r1, #4
 800a882:	0020      	movs	r0, r4
 800a884:	f003 fc48 	bl	800e118 <FreeRTOS_CLIGetParameter>
			&xParameterStringLength4);

	if (NULL != pcParameterString1) {
 800a888:	4643      	mov	r3, r8
	pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 4,
 800a88a:	4682      	mov	sl, r0
	if (NULL != pcParameterString1) {
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d100      	bne.n	800a892 <mosfetStreamCommand+0x52>
 800a890:	e089      	b.n	800a9a6 <mosfetStreamCommand+0x166>
		Period = atoi((char*) pcParameterString1);
 800a892:	4640      	mov	r0, r8
 800a894:	f008 fdc1 	bl	801341a <atoi>
	Module_Status result = H0FR7_OK;
 800a898:	2300      	movs	r3, #0
		Period = atoi((char*) pcParameterString1);
 800a89a:	4680      	mov	r8, r0
	Module_Status result = H0FR7_OK;
 800a89c:	4699      	mov	r9, r3
	} else {
		result = H0FR7_ERR_WrongParams;
	}
	if (NULL != pcParameterString2) {
 800a89e:	2f00      	cmp	r7, #0
 800a8a0:	d100      	bne.n	800a8a4 <mosfetStreamCommand+0x64>
 800a8a2:	e087      	b.n	800a9b4 <mosfetStreamCommand+0x174>
		if (!strncmp((const char*) pcParameterString2, "inf", 3)) {
 800a8a4:	2203      	movs	r2, #3
 800a8a6:	4973      	ldr	r1, [pc, #460]	; (800aa74 <mosfetStreamCommand+0x234>)
 800a8a8:	0038      	movs	r0, r7
 800a8aa:	f009 fac3 	bl	8013e34 <strncmp>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d135      	bne.n	800a91e <mosfetStreamCommand+0xde>
			Timeout = portMAX_DELAY;
 800a8b2:	2401      	movs	r4, #1
 800a8b4:	4264      	negs	r4, r4
	} else {
		result = H0FR7_ERR_WrongParams;
	}

	/* streaming data to internal buffer (module parameter) */
		if (NULL != pcParameterString3 && !strncmp((const char *)pcParameterString3, "buffer", 6))
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	d037      	beq.n	800a92a <mosfetStreamCommand+0xea>
 800a8ba:	2206      	movs	r2, #6
 800a8bc:	496e      	ldr	r1, [pc, #440]	; (800aa78 <mosfetStreamCommand+0x238>)
 800a8be:	0030      	movs	r0, r6
 800a8c0:	f009 fab8 	bl	8013e34 <strncmp>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d100      	bne.n	800a8ca <mosfetStreamCommand+0x8a>
 800a8c8:	e078      	b.n	800a9bc <mosfetStreamCommand+0x17c>

			// Return right away here as we don't want to block the CLI
			return pdFALSE;
		}
	/* streaming data to port */
	else if (NULL != pcParameterString3 && NULL != pcParameterString4
 800a8ca:	4653      	mov	r3, sl
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d004      	beq.n	800a8da <mosfetStreamCommand+0x9a>
			&& pcParameterString3[0] == 'p') {
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	56f3      	ldrsb	r3, [r6, r3]
 800a8d4:	2b70      	cmp	r3, #112	; 0x70
 800a8d6:	d100      	bne.n	800a8da <mosfetStreamCommand+0x9a>
 800a8d8:	e0a8      	b.n	800aa2c <mosfetStreamCommand+0x1ec>
					taskYIELD();
				}
			}

			else if (NULL != pcParameterString3
					&& !strncmp((const char*) pcParameterString3, "-v", 2)) {
 800a8da:	2202      	movs	r2, #2
 800a8dc:	4967      	ldr	r1, [pc, #412]	; (800aa7c <mosfetStreamCommand+0x23c>)
 800a8de:	0030      	movs	r0, r6
 800a8e0:	f009 faa8 	bl	8013e34 <strncmp>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d100      	bne.n	800a8ea <mosfetStreamCommand+0xaa>
 800a8e8:	e080      	b.n	800a9ec <mosfetStreamCommand+0x1ac>
 800a8ea:	4c65      	ldr	r4, [pc, #404]	; (800aa80 <mosfetStreamCommand+0x240>)
			} else {
				result = H0FR7_ERR_WrongParams;
					}

	if (H0FR7_ERR_WrongParams == result) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
 800a8ec:	2212      	movs	r2, #18
 800a8ee:	4965      	ldr	r1, [pc, #404]	; (800aa84 <mosfetStreamCommand+0x244>)
 800a8f0:	0028      	movs	r0, r5
 800a8f2:	f009 f858 	bl	80139a6 <memcpy>
	}

	Stop_current_measurement();
 800a8f6:	f7ff ff87 	bl	800a808 <Stop_current_measurement>

		if (stopB) {
 800a8fa:	7823      	ldrb	r3, [r4, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d138      	bne.n	800a972 <mosfetStreamCommand+0x132>
					strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
			memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
			stopB = 0;
		} else {
			/* clean terminal output */
			memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800a900:	0028      	movs	r0, r5
 800a902:	f7f5 fc09 	bl	8000118 <strlen>
 800a906:	2100      	movs	r1, #0
 800a908:	0002      	movs	r2, r0
 800a90a:	0028      	movs	r0, r5
 800a90c:	f009 f854 	bl	80139b8 <memset>
		}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800a910:	2000      	movs	r0, #0
 800a912:	b006      	add	sp, #24
 800a914:	bc1c      	pop	{r2, r3, r4}
 800a916:	4690      	mov	r8, r2
 800a918:	4699      	mov	r9, r3
 800a91a:	46a2      	mov	sl, r4
 800a91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Timeout = atoi((char*) pcParameterString2);
 800a91e:	0038      	movs	r0, r7
 800a920:	f008 fd7b 	bl	801341a <atoi>
 800a924:	0004      	movs	r4, r0
		if (NULL != pcParameterString3 && !strncmp((const char *)pcParameterString3, "buffer", 6))
 800a926:	2e00      	cmp	r6, #0
 800a928:	d1c7      	bne.n	800a8ba <mosfetStreamCommand+0x7a>
				strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800a92a:	2225      	movs	r2, #37	; 0x25
 800a92c:	4956      	ldr	r1, [pc, #344]	; (800aa88 <mosfetStreamCommand+0x248>)
 800a92e:	0028      	movs	r0, r5
 800a930:	f009 f839 	bl	80139a6 <memcpy>
				writePxMutex(PcPort, (char*) pcWriteBuffer,
 800a934:	4b55      	ldr	r3, [pc, #340]	; (800aa8c <mosfetStreamCommand+0x24c>)
 800a936:	2224      	movs	r2, #36	; 0x24
 800a938:	7818      	ldrb	r0, [r3, #0]
 800a93a:	2301      	movs	r3, #1
 800a93c:	425b      	negs	r3, r3
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	0029      	movs	r1, r5
 800a942:	3333      	adds	r3, #51	; 0x33
 800a944:	f003 f942 	bl	800dbcc <writePxMutex>
				Stream_current_To_CLI(Period, Timeout);
 800a948:	0021      	movs	r1, r4
 800a94a:	4640      	mov	r0, r8
 800a94c:	f7ff fed8 	bl	800a700 <Stream_current_To_CLI>
				while (startMeasurement != STOP_MEASUREMENT) {
 800a950:	4c4b      	ldr	r4, [pc, #300]	; (800aa80 <mosfetStreamCommand+0x240>)
 800a952:	7d63      	ldrb	r3, [r4, #21]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d004      	beq.n	800a962 <mosfetStreamCommand+0x122>
					taskYIELD();
 800a958:	f005 f82e 	bl	800f9b8 <vPortYield>
				while (startMeasurement != STOP_MEASUREMENT) {
 800a95c:	7d63      	ldrb	r3, [r4, #21]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1fa      	bne.n	800a958 <mosfetStreamCommand+0x118>
	if (H0FR7_ERR_WrongParams == result) {
 800a962:	464b      	mov	r3, r9
 800a964:	2b04      	cmp	r3, #4
 800a966:	d0c1      	beq.n	800a8ec <mosfetStreamCommand+0xac>
	Stop_current_measurement();
 800a968:	f7ff ff4e 	bl	800a808 <Stop_current_measurement>
		if (stopB) {
 800a96c:	7823      	ldrb	r3, [r4, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0c6      	beq.n	800a900 <mosfetStreamCommand+0xc0>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageStopMsg);
 800a972:	2221      	movs	r2, #33	; 0x21
 800a974:	4946      	ldr	r1, [pc, #280]	; (800aa90 <mosfetStreamCommand+0x250>)
 800a976:	0028      	movs	r0, r5
 800a978:	f009 f815 	bl	80139a6 <memcpy>
			writePxMutex(PcPort, (char*) pcWriteBuffer,
 800a97c:	4b43      	ldr	r3, [pc, #268]	; (800aa8c <mosfetStreamCommand+0x24c>)
 800a97e:	2220      	movs	r2, #32
 800a980:	7818      	ldrb	r0, [r3, #0]
 800a982:	2301      	movs	r3, #1
 800a984:	425b      	negs	r3, r3
 800a986:	0029      	movs	r1, r5
 800a988:	9300      	str	r3, [sp, #0]
 800a98a:	3333      	adds	r3, #51	; 0x33
 800a98c:	f003 f91e 	bl	800dbcc <writePxMutex>
			memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800a990:	0028      	movs	r0, r5
 800a992:	f7f5 fbc1 	bl	8000118 <strlen>
 800a996:	2100      	movs	r1, #0
 800a998:	0002      	movs	r2, r0
 800a99a:	0028      	movs	r0, r5
 800a99c:	f009 f80c 	bl	80139b8 <memset>
			stopB = 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	7023      	strb	r3, [r4, #0]
 800a9a4:	e7b4      	b.n	800a910 <mosfetStreamCommand+0xd0>
		result = H0FR7_ERR_WrongParams;
 800a9a6:	2304      	movs	r3, #4
 800a9a8:	4699      	mov	r9, r3
	uint32_t Period = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4698      	mov	r8, r3
	if (NULL != pcParameterString2) {
 800a9ae:	2f00      	cmp	r7, #0
 800a9b0:	d000      	beq.n	800a9b4 <mosfetStreamCommand+0x174>
 800a9b2:	e777      	b.n	800a8a4 <mosfetStreamCommand+0x64>
		result = H0FR7_ERR_WrongParams;
 800a9b4:	2304      	movs	r3, #4
	uint32_t Timeout = 0;
 800a9b6:	2400      	movs	r4, #0
		result = H0FR7_ERR_WrongParams;
 800a9b8:	4699      	mov	r9, r3
 800a9ba:	e77c      	b.n	800a8b6 <mosfetStreamCommand+0x76>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageBuffer);
 800a9bc:	225f      	movs	r2, #95	; 0x5f
 800a9be:	4935      	ldr	r1, [pc, #212]	; (800aa94 <mosfetStreamCommand+0x254>)
 800a9c0:	0028      	movs	r0, r5
 800a9c2:	f008 fff0 	bl	80139a6 <memcpy>
	mosfetPeriod=Period;
 800a9c6:	4642      	mov	r2, r8
 800a9c8:	4b33      	ldr	r3, [pc, #204]	; (800aa98 <mosfetStreamCommand+0x258>)
 800a9ca:	601a      	str	r2, [r3, #0]
	mosfetTimeout=Timeout;
 800a9cc:	4b33      	ldr	r3, [pc, #204]	; (800aa9c <mosfetStreamCommand+0x25c>)
	ptrBuffer=Buffer;
 800a9ce:	4a34      	ldr	r2, [pc, #208]	; (800aaa0 <mosfetStreamCommand+0x260>)
	mosfetTimeout=Timeout;
 800a9d0:	601c      	str	r4, [r3, #0]
	ptrBuffer=Buffer;
 800a9d2:	4b2b      	ldr	r3, [pc, #172]	; (800aa80 <mosfetStreamCommand+0x240>)
 800a9d4:	3318      	adds	r3, #24
 800a9d6:	6053      	str	r3, [r2, #4]
	mosfetMode=REQ_STREAM_BUFFER;
 800a9d8:	2208      	movs	r2, #8
 800a9da:	4b32      	ldr	r3, [pc, #200]	; (800aaa4 <mosfetStreamCommand+0x264>)
 800a9dc:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF))
 800a9de:	1e63      	subs	r3, r4, #1
 800a9e0:	3303      	adds	r3, #3
 800a9e2:	d895      	bhi.n	800a910 <mosfetStreamCommand+0xd0>
 800a9e4:	0020      	movs	r0, r4
 800a9e6:	f7ff f979 	bl	8009cdc <Stream_current_To_Buffer.part.9>
 800a9ea:	e791      	b.n	800a910 <mosfetStreamCommand+0xd0>
				strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800a9ec:	2225      	movs	r2, #37	; 0x25
 800a9ee:	4926      	ldr	r1, [pc, #152]	; (800aa88 <mosfetStreamCommand+0x248>)
 800a9f0:	0028      	movs	r0, r5
 800a9f2:	f008 ffd8 	bl	80139a6 <memcpy>
				writePxMutex(PcPort, (char*) pcWriteBuffer,
 800a9f6:	4b25      	ldr	r3, [pc, #148]	; (800aa8c <mosfetStreamCommand+0x24c>)
 800a9f8:	2224      	movs	r2, #36	; 0x24
 800a9fa:	7818      	ldrb	r0, [r3, #0]
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	425b      	negs	r3, r3
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	0029      	movs	r1, r5
 800aa04:	3333      	adds	r3, #51	; 0x33
 800aa06:	f003 f8e1 	bl	800dbcc <writePxMutex>
				Stream_current_To_CLI_V(Period, Timeout);
 800aa0a:	0021      	movs	r1, r4
 800aa0c:	4640      	mov	r0, r8
 800aa0e:	f7ff feb9 	bl	800a784 <Stream_current_To_CLI_V>
				while (startMeasurement != STOP_MEASUREMENT) {taskYIELD();}
 800aa12:	4c1b      	ldr	r4, [pc, #108]	; (800aa80 <mosfetStreamCommand+0x240>)
 800aa14:	7d63      	ldrb	r3, [r4, #21]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d0a3      	beq.n	800a962 <mosfetStreamCommand+0x122>
 800aa1a:	f004 ffcd 	bl	800f9b8 <vPortYield>
 800aa1e:	7d63      	ldrb	r3, [r4, #21]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1fa      	bne.n	800aa1a <mosfetStreamCommand+0x1da>
	if (H0FR7_ERR_WrongParams == result) {
 800aa24:	464b      	mov	r3, r9
 800aa26:	2b04      	cmp	r3, #4
 800aa28:	d19e      	bne.n	800a968 <mosfetStreamCommand+0x128>
 800aa2a:	e75f      	b.n	800a8ec <mosfetStreamCommand+0xac>
		Port = (uint8_t) atol((char*) pcParameterString3 + 1);
 800aa2c:	1c70      	adds	r0, r6, #1
 800aa2e:	f008 fcfa 	bl	8013426 <atol>
 800aa32:	0007      	movs	r7, r0
		Module = atoi((char*) pcParameterString4);
 800aa34:	4650      	mov	r0, sl
 800aa36:	f008 fcf0 	bl	801341a <atoi>
 800aa3a:	26ff      	movs	r6, #255	; 0xff
 800aa3c:	4037      	ands	r7, r6
 800aa3e:	4006      	ands	r6, r0
		sprintf((char*) pcWriteBuffer, (char*) pcMessageModule, Port, Module);
 800aa40:	0033      	movs	r3, r6
 800aa42:	003a      	movs	r2, r7
 800aa44:	4918      	ldr	r1, [pc, #96]	; (800aaa8 <mosfetStreamCommand+0x268>)
 800aa46:	0028      	movs	r0, r5
 800aa48:	f009 f9b0 	bl	8013dac <sprintf>
		Stream_current_To_Port(Period, Timeout, Port, Module);
 800aa4c:	4642      	mov	r2, r8
	mosfetPort = Port;
 800aa4e:	4b17      	ldr	r3, [pc, #92]	; (800aaac <mosfetStreamCommand+0x26c>)
		Stream_current_To_Port(Period, Timeout, Port, Module);
 800aa50:	701a      	strb	r2, [r3, #0]
	mosfetMode = REQ_STREAM_PORT;
 800aa52:	2207      	movs	r2, #7
	mosfetModule = Module;
 800aa54:	4b16      	ldr	r3, [pc, #88]	; (800aab0 <mosfetStreamCommand+0x270>)
		Stream_current_To_Port(Period, Timeout, Port, Module);
 800aa56:	701c      	strb	r4, [r3, #0]
	mosfetPeriod = Period;
 800aa58:	4b0f      	ldr	r3, [pc, #60]	; (800aa98 <mosfetStreamCommand+0x258>)
 800aa5a:	601f      	str	r7, [r3, #0]
	mosfetTimeout = Timeout;
 800aa5c:	4b0f      	ldr	r3, [pc, #60]	; (800aa9c <mosfetStreamCommand+0x25c>)
 800aa5e:	601e      	str	r6, [r3, #0]
	mosfetMode = REQ_STREAM_PORT;
 800aa60:	4b10      	ldr	r3, [pc, #64]	; (800aaa4 <mosfetStreamCommand+0x264>)
 800aa62:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800aa64:	1e73      	subs	r3, r6, #1
 800aa66:	3303      	adds	r3, #3
 800aa68:	d900      	bls.n	800aa6c <mosfetStreamCommand+0x22c>
 800aa6a:	e751      	b.n	800a910 <mosfetStreamCommand+0xd0>
 800aa6c:	0030      	movs	r0, r6
 800aa6e:	f7ff f935 	bl	8009cdc <Stream_current_To_Buffer.part.9>
 800aa72:	e74d      	b.n	800a910 <mosfetStreamCommand+0xd0>
 800aa74:	0801b0e0 	.word	0x0801b0e0
 800aa78:	0801b19c 	.word	0x0801b19c
 800aa7c:	0801b260 	.word	0x0801b260
 800aa80:	20001fbc 	.word	0x20001fbc
 800aa84:	0801b264 	.word	0x0801b264
 800aa88:	0801b238 	.word	0x0801b238
 800aa8c:	20000c38 	.word	0x20000c38
 800aa90:	0801b278 	.word	0x0801b278
 800aa94:	0801b1a4 	.word	0x0801b1a4
 800aa98:	20006b3c 	.word	0x20006b3c
 800aa9c:	20006c30 	.word	0x20006c30
 800aaa0:	2000009c 	.word	0x2000009c
 800aaa4:	20006bbc 	.word	0x20006bbc
 800aaa8:	0801b204 	.word	0x0801b204
 800aaac:	20006b40 	.word	0x20006b40
 800aab0:	20006a10 	.word	0x20006a10

0800aab4 <MosfetStopCommand>:
/*-----------------------------------------------------------*/

static portBASE_TYPE MosfetStopCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800aab4:	b510      	push	{r4, lr}
 800aab6:	0004      	movs	r4, r0
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	result = Stop_current_measurement();
 800aab8:	f7ff fea6 	bl	800a808 <Stop_current_measurement>

	if (H0FR7_OK == result) {
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d006      	beq.n	800aace <MosfetStopCommand+0x1a>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
	} else {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
 800aac0:	222d      	movs	r2, #45	; 0x2d
 800aac2:	4906      	ldr	r1, [pc, #24]	; (800aadc <MosfetStopCommand+0x28>)
 800aac4:	0020      	movs	r0, r4
 800aac6:	f008 ff6e 	bl	80139a6 <memcpy>
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800aaca:	2000      	movs	r0, #0
 800aacc:	bd10      	pop	{r4, pc}
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
 800aace:	2221      	movs	r2, #33	; 0x21
 800aad0:	4903      	ldr	r1, [pc, #12]	; (800aae0 <MosfetStopCommand+0x2c>)
 800aad2:	0020      	movs	r0, r4
 800aad4:	f008 ff67 	bl	80139a6 <memcpy>
 800aad8:	e7f7      	b.n	800aaca <MosfetStopCommand+0x16>
 800aada:	46c0      	nop			; (mov r8, r8)
 800aadc:	0801b2c0 	.word	0x0801b2c0
 800aae0:	0801b29c 	.word	0x0801b29c

0800aae4 <MosfetTask>:
static void MosfetTask(void *argument) {
 800aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae6:	4657      	mov	r7, sl
 800aae8:	4645      	mov	r5, r8
 800aaea:	46de      	mov	lr, fp
 800aaec:	464e      	mov	r6, r9
 800aaee:	4b44      	ldr	r3, [pc, #272]	; (800ac00 <MosfetTask+0x11c>)
 800aaf0:	b5e0      	push	{r5, r6, r7, lr}
 800aaf2:	4698      	mov	r8, r3
 800aaf4:	4b43      	ldr	r3, [pc, #268]	; (800ac04 <MosfetTask+0x120>)
 800aaf6:	4f44      	ldr	r7, [pc, #272]	; (800ac08 <MosfetTask+0x124>)
 800aaf8:	469b      	mov	fp, r3
 800aafa:	4b44      	ldr	r3, [pc, #272]	; (800ac0c <MosfetTask+0x128>)
 800aafc:	4c44      	ldr	r4, [pc, #272]	; (800ac10 <MosfetTask+0x12c>)
 800aafe:	469a      	mov	sl, r3
 800ab00:	4b44      	ldr	r3, [pc, #272]	; (800ac14 <MosfetTask+0x130>)
 800ab02:	4d45      	ldr	r5, [pc, #276]	; (800ac18 <MosfetTask+0x134>)
 800ab04:	4699      	mov	r9, r3
		switch (mosfetMode) {
 800ab06:	783b      	ldrb	r3, [r7, #0]
 800ab08:	3b05      	subs	r3, #5
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b09      	cmp	r3, #9
 800ab0e:	d80c      	bhi.n	800ab2a <MosfetTask+0x46>
 800ab10:	4642      	mov	r2, r8
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	58d3      	ldr	r3, [r2, r3]
 800ab16:	469f      	mov	pc, r3
					Stop_current_measurement();
 800ab18:	f7ff fe76 	bl	800a808 <Stop_current_measurement>
				taskYIELD();
 800ab1c:	f004 ff4c 	bl	800f9b8 <vPortYield>
		switch (mosfetMode) {
 800ab20:	783b      	ldrb	r3, [r7, #0]
 800ab22:	3b05      	subs	r3, #5
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b09      	cmp	r3, #9
 800ab28:	d9f2      	bls.n	800ab10 <MosfetTask+0x2c>
					mosfetMode = REQ_STOP;
 800ab2a:	230e      	movs	r3, #14
 800ab2c:	703b      	strb	r3, [r7, #0]
					break;
 800ab2e:	e7f5      	b.n	800ab1c <MosfetTask+0x38>
					t0 = HAL_GetTick();
 800ab30:	f005 f888 	bl	800fc44 <HAL_GetTick>
 800ab34:	0006      	movs	r6, r0
					Current = Current_Calculation();
 800ab36:	f7ff fcad 	bl	800a494 <Current_Calculation>
					SendMeasurementResult(mosfetMode, Current, mosfetModule,
 800ab3a:	464b      	mov	r3, r9
 800ab3c:	7819      	ldrb	r1, [r3, #0]
 800ab3e:	4653      	mov	r3, sl
 800ab40:	2200      	movs	r2, #0
 800ab42:	685b      	ldr	r3, [r3, #4]
					Current = Current_Calculation();
 800ab44:	61e0      	str	r0, [r4, #28]
					SendMeasurementResult(mosfetMode, Current, mosfetModule,
 800ab46:	f7ff f835 	bl	8009bb4 <SendMeasurementResult.isra.0>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800ab4a:	e004      	b.n	800ab56 <MosfetTask+0x72>
 800ab4c:	7823      	ldrb	r3, [r4, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1e4      	bne.n	800ab1c <MosfetTask+0x38>
						taskYIELD();
 800ab52:	f004 ff31 	bl	800f9b8 <vPortYield>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800ab56:	f005 f875 	bl	800fc44 <HAL_GetTick>
 800ab5a:	682b      	ldr	r3, [r5, #0]
 800ab5c:	1b80      	subs	r0, r0, r6
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	4298      	cmp	r0, r3
 800ab62:	d3f3      	bcc.n	800ab4c <MosfetTask+0x68>
 800ab64:	e7da      	b.n	800ab1c <MosfetTask+0x38>
					t0 = HAL_GetTick();
 800ab66:	f005 f86d 	bl	800fc44 <HAL_GetTick>
 800ab6a:	0006      	movs	r6, r0
					Current = Current_Calculation();
 800ab6c:	f7ff fc92 	bl	800a494 <Current_Calculation>
					SendMeasurementResult(mosfetMode, Current, 0, PcPort, NULL);
 800ab70:	465b      	mov	r3, fp
 800ab72:	2100      	movs	r1, #0
 800ab74:	781a      	ldrb	r2, [r3, #0]
 800ab76:	2300      	movs	r3, #0
					Current = Current_Calculation();
 800ab78:	61e0      	str	r0, [r4, #28]
					SendMeasurementResult(mosfetMode, Current, 0, PcPort, NULL);
 800ab7a:	f7ff f81b 	bl	8009bb4 <SendMeasurementResult.isra.0>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800ab7e:	e004      	b.n	800ab8a <MosfetTask+0xa6>
 800ab80:	7823      	ldrb	r3, [r4, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1ca      	bne.n	800ab1c <MosfetTask+0x38>
						taskYIELD();
 800ab86:	f004 ff17 	bl	800f9b8 <vPortYield>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800ab8a:	f005 f85b 	bl	800fc44 <HAL_GetTick>
 800ab8e:	682b      	ldr	r3, [r5, #0]
 800ab90:	1b80      	subs	r0, r0, r6
 800ab92:	3b01      	subs	r3, #1
 800ab94:	4298      	cmp	r0, r3
 800ab96:	d3f3      	bcc.n	800ab80 <MosfetTask+0x9c>
 800ab98:	e7c0      	b.n	800ab1c <MosfetTask+0x38>
					t0 = HAL_GetTick();
 800ab9a:	f005 f853 	bl	800fc44 <HAL_GetTick>
 800ab9e:	0006      	movs	r6, r0
					Current = Current_Calculation();
 800aba0:	f7ff fc78 	bl	800a494 <Current_Calculation>
					SendMeasurementResult(mosfetMode, Current, 0, 0, NULL);
 800aba4:	2300      	movs	r3, #0
 800aba6:	2200      	movs	r2, #0
 800aba8:	2100      	movs	r1, #0
					Current = Current_Calculation();
 800abaa:	61e0      	str	r0, [r4, #28]
					SendMeasurementResult(mosfetMode, Current, 0, 0, NULL);
 800abac:	f7ff f802 	bl	8009bb4 <SendMeasurementResult.isra.0>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800abb0:	e004      	b.n	800abbc <MosfetTask+0xd8>
 800abb2:	7823      	ldrb	r3, [r4, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1b1      	bne.n	800ab1c <MosfetTask+0x38>
						taskYIELD();
 800abb8:	f004 fefe 	bl	800f9b8 <vPortYield>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800abbc:	f005 f842 	bl	800fc44 <HAL_GetTick>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	1b80      	subs	r0, r0, r6
 800abc4:	3b01      	subs	r3, #1
 800abc6:	4298      	cmp	r0, r3
 800abc8:	d3f3      	bcc.n	800abb2 <MosfetTask+0xce>
 800abca:	e7a7      	b.n	800ab1c <MosfetTask+0x38>
					t0 = HAL_GetTick();
 800abcc:	f005 f83a 	bl	800fc44 <HAL_GetTick>
 800abd0:	0006      	movs	r6, r0
					Current = Current_Calculation();
 800abd2:	f7ff fc5f 	bl	800a494 <Current_Calculation>
					SendMeasurementResult(mosfetMode, Current, 0, 0, NULL);
 800abd6:	2300      	movs	r3, #0
 800abd8:	2200      	movs	r2, #0
 800abda:	2100      	movs	r1, #0
					Current = Current_Calculation();
 800abdc:	61e0      	str	r0, [r4, #28]
					SendMeasurementResult(mosfetMode, Current, 0, 0, NULL);
 800abde:	f7fe ffe9 	bl	8009bb4 <SendMeasurementResult.isra.0>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800abe2:	e004      	b.n	800abee <MosfetTask+0x10a>
 800abe4:	7823      	ldrb	r3, [r4, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d198      	bne.n	800ab1c <MosfetTask+0x38>
						taskYIELD();
 800abea:	f004 fee5 	bl	800f9b8 <vPortYield>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800abee:	f005 f829 	bl	800fc44 <HAL_GetTick>
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	1b80      	subs	r0, r0, r6
 800abf6:	3b01      	subs	r3, #1
 800abf8:	4298      	cmp	r0, r3
 800abfa:	d3f3      	bcc.n	800abe4 <MosfetTask+0x100>
 800abfc:	e78e      	b.n	800ab1c <MosfetTask+0x38>
 800abfe:	46c0      	nop			; (mov r8, r8)
 800ac00:	08018738 	.word	0x08018738
 800ac04:	20000c38 	.word	0x20000c38
 800ac08:	20006bbc 	.word	0x20006bbc
 800ac0c:	2000009c 	.word	0x2000009c
 800ac10:	20001fbc 	.word	0x20001fbc
 800ac14:	20006a10 	.word	0x20006a10
 800ac18:	20006b3c 	.word	0x20006b3c

0800ac1c <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1e:	ab06      	add	r3, sp, #24
 800ac20:	781d      	ldrb	r5, [r3, #0]
	switch (code) {
 800ac22:	4b61      	ldr	r3, [pc, #388]	; (800ada8 <Module_MessagingTask+0x18c>)
		uint8_t dst, uint8_t shift) {
 800ac24:	000c      	movs	r4, r1
	switch (code) {
 800ac26:	469c      	mov	ip, r3
 800ac28:	4460      	add	r0, ip
 800ac2a:	b280      	uxth	r0, r0
 800ac2c:	2807      	cmp	r0, #7
 800ac2e:	d900      	bls.n	800ac32 <Module_MessagingTask+0x16>
 800ac30:	e0b8      	b.n	800ada4 <Module_MessagingTask+0x188>
 800ac32:	4b5e      	ldr	r3, [pc, #376]	; (800adac <Module_MessagingTask+0x190>)
 800ac34:	0080      	lsls	r0, r0, #2
 800ac36:	581b      	ldr	r3, [r3, r0]
 800ac38:	469f      	mov	pc, r3
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)	+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800ac3a:	3c01      	subs	r4, #1
		timeout = ((uint32_t) cMessage[port - 1][7 + shift] << 24)+ ((uint32_t) cMessage[port - 1][6 + shift] << 16)+ ((uint32_t) cMessage[port - 1][5 + shift] << 8)+ cMessage[port - 1][4 + shift];
 800ac3c:	00e3      	lsls	r3, r4, #3
 800ac3e:	1b1c      	subs	r4, r3, r4
 800ac40:	4b5b      	ldr	r3, [pc, #364]	; (800adb0 <Module_MessagingTask+0x194>)
 800ac42:	00e4      	lsls	r4, r4, #3
 800ac44:	191c      	adds	r4, r3, r4
 800ac46:	1962      	adds	r2, r4, r5
 800ac48:	79d0      	ldrb	r0, [r2, #7]
 800ac4a:	7993      	ldrb	r3, [r2, #6]
 800ac4c:	0600      	lsls	r0, r0, #24
 800ac4e:	041b      	lsls	r3, r3, #16
 800ac50:	18c0      	adds	r0, r0, r3
 800ac52:	7913      	ldrb	r3, [r2, #4]
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)	+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800ac54:	7891      	ldrb	r1, [r2, #2]
		timeout = ((uint32_t) cMessage[port - 1][7 + shift] << 24)+ ((uint32_t) cMessage[port - 1][6 + shift] << 16)+ ((uint32_t) cMessage[port - 1][5 + shift] << 8)+ cMessage[port - 1][4 + shift];
 800ac56:	18c0      	adds	r0, r0, r3
 800ac58:	7953      	ldrb	r3, [r2, #5]
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)	+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800ac5a:	0409      	lsls	r1, r1, #16
		timeout = ((uint32_t) cMessage[port - 1][7 + shift] << 24)+ ((uint32_t) cMessage[port - 1][6 + shift] << 16)+ ((uint32_t) cMessage[port - 1][5 + shift] << 8)+ cMessage[port - 1][4 + shift];
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	18c0      	adds	r0, r0, r3
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)	+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800ac60:	78d3      	ldrb	r3, [r2, #3]
 800ac62:	7852      	ldrb	r2, [r2, #1]
 800ac64:	061b      	lsls	r3, r3, #24
 800ac66:	185b      	adds	r3, r3, r1
 800ac68:	5d61      	ldrb	r1, [r4, r5]
 800ac6a:	0212      	lsls	r2, r2, #8
 800ac6c:	185b      	adds	r3, r3, r1
 800ac6e:	189b      	adds	r3, r3, r2
	mosfetPeriod=Period;
 800ac70:	4a50      	ldr	r2, [pc, #320]	; (800adb4 <Module_MessagingTask+0x198>)
 800ac72:	6013      	str	r3, [r2, #0]
	mosfetTimeout=Timeout;
 800ac74:	4b50      	ldr	r3, [pc, #320]	; (800adb8 <Module_MessagingTask+0x19c>)
	ptrBuffer=Buffer;
 800ac76:	4a51      	ldr	r2, [pc, #324]	; (800adbc <Module_MessagingTask+0x1a0>)
	mosfetTimeout=Timeout;
 800ac78:	6018      	str	r0, [r3, #0]
	ptrBuffer=Buffer;
 800ac7a:	4b51      	ldr	r3, [pc, #324]	; (800adc0 <Module_MessagingTask+0x1a4>)
 800ac7c:	3318      	adds	r3, #24
 800ac7e:	6053      	str	r3, [r2, #4]
	mosfetMode=REQ_STREAM_BUFFER;
 800ac80:	2208      	movs	r2, #8
 800ac82:	4b50      	ldr	r3, [pc, #320]	; (800adc4 <Module_MessagingTask+0x1a8>)
 800ac84:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF))
 800ac86:	1e43      	subs	r3, r0, #1
 800ac88:	3303      	adds	r3, #3
 800ac8a:	d800      	bhi.n	800ac8e <Module_MessagingTask+0x72>
 800ac8c:	e086      	b.n	800ad9c <Module_MessagingTask+0x180>
	Module_Status result = H0FR7_OK;
 800ac8e:	2000      	movs	r0, #0
 800ac90:	e002      	b.n	800ac98 <Module_MessagingTask+0x7c>
		Stop_current_measurement();
 800ac92:	f7ff fdb9 	bl	800a808 <Stop_current_measurement>
	Module_Status result = H0FR7_OK;
 800ac96:	2000      	movs	r0, #0
}
 800ac98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Output_toggle();
 800ac9a:	f7ff fcdf 	bl	800a65c <Output_toggle>
	Module_Status result = H0FR7_OK;
 800ac9e:	2000      	movs	r0, #0
		break;
 800aca0:	e7fa      	b.n	800ac98 <Module_MessagingTask+0x7c>
		tempFloat = (float)cMessage[port - 1][shift];
 800aca2:	3c01      	subs	r4, #1
 800aca4:	00e3      	lsls	r3, r4, #3
 800aca6:	1b1c      	subs	r4, r3, r4
 800aca8:	4b41      	ldr	r3, [pc, #260]	; (800adb0 <Module_MessagingTask+0x194>)
 800acaa:	00e4      	lsls	r4, r4, #3
 800acac:	191c      	adds	r4, r3, r4
 800acae:	5d60      	ldrb	r0, [r4, r5]
 800acb0:	f7f6 fa6c 	bl	800118c <__aeabi_ui2f>
 800acb4:	4b44      	ldr	r3, [pc, #272]	; (800adc8 <Module_MessagingTask+0x1ac>)
	if (dutyCycle < 0 || dutyCycle > 100)
 800acb6:	4945      	ldr	r1, [pc, #276]	; (800adcc <Module_MessagingTask+0x1b0>)
		tempFloat = (float)cMessage[port - 1][shift];
 800acb8:	6018      	str	r0, [r3, #0]
 800acba:	1c04      	adds	r4, r0, #0
	if (dutyCycle < 0 || dutyCycle > 100)
 800acbc:	f7f5 fc22 	bl	8000504 <__aeabi_fcmpgt>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d1e4      	bne.n	800ac8e <Module_MessagingTask+0x72>
 800acc4:	1c20      	adds	r0, r4, #0
 800acc6:	f7ff fb37 	bl	800a338 <Output_PWM.part.3>
	Module_Status result = H0FR7_OK;
 800acca:	2000      	movs	r0, #0
 800accc:	e7e4      	b.n	800ac98 <Module_MessagingTask+0x7c>
	mosfetMode = REQ_SAMPLE;
 800acce:	220f      	movs	r2, #15
 800acd0:	4b3c      	ldr	r3, [pc, #240]	; (800adc4 <Module_MessagingTask+0x1a8>)
	startMeasurement = START_MEASUREMENT;
 800acd2:	4e3b      	ldr	r6, [pc, #236]	; (800adc0 <Module_MessagingTask+0x1a4>)
	mosfetMode = REQ_SAMPLE;
 800acd4:	701a      	strb	r2, [r3, #0]
	startMeasurement = START_MEASUREMENT;
 800acd6:	2301      	movs	r3, #1
	if (mosfetState == REQ_TIMEOUT) {
 800acd8:	4f3d      	ldr	r7, [pc, #244]	; (800add0 <Module_MessagingTask+0x1b4>)
	startMeasurement = START_MEASUREMENT;
 800acda:	7573      	strb	r3, [r6, #21]
	if (mosfetState == REQ_TIMEOUT) {
 800acdc:	783b      	ldrb	r3, [r7, #0]
 800acde:	2b09      	cmp	r3, #9
 800ace0:	d003      	beq.n	800acea <Module_MessagingTask+0xce>
		temp = Current_Calculation();
 800ace2:	f7ff fbd7 	bl	800a494 <Current_Calculation>
		mosfetState = REQ_IDLE;
 800ace6:	2300      	movs	r3, #0
 800ace8:	703b      	strb	r3, [r7, #0]
		SendMeasurementResult(REQ_SAMPLE, Current, cMessage[port - 1][1+shift], cMessage[port - 1][shift], NULL);
 800acea:	3c01      	subs	r4, #1
 800acec:	00e3      	lsls	r3, r4, #3
 800acee:	1b1b      	subs	r3, r3, r4
 800acf0:	4c2f      	ldr	r4, [pc, #188]	; (800adb0 <Module_MessagingTask+0x194>)
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	18e4      	adds	r4, r4, r3
 800acf6:	5d62      	ldrb	r2, [r4, r5]
 800acf8:	1965      	adds	r5, r4, r5
 800acfa:	7869      	ldrb	r1, [r5, #1]
 800acfc:	69f0      	ldr	r0, [r6, #28]
 800acfe:	2300      	movs	r3, #0
 800ad00:	f7fe ff58 	bl	8009bb4 <SendMeasurementResult.isra.0>
	Module_Status result = H0FR7_OK;
 800ad04:	2000      	movs	r0, #0
		break;
 800ad06:	e7c7      	b.n	800ac98 <Module_MessagingTask+0x7c>
		period = ((uint32_t) cMessage[port - 1][5 + shift] << 24)+ ((uint32_t) cMessage[port - 1][4 + shift] << 16)+ ((uint32_t) cMessage[port - 1][3 + shift] << 8)+ cMessage[port - 1][2 + shift];
 800ad08:	3c01      	subs	r4, #1
 800ad0a:	00e3      	lsls	r3, r4, #3
 800ad0c:	1b1c      	subs	r4, r3, r4
 800ad0e:	4b28      	ldr	r3, [pc, #160]	; (800adb0 <Module_MessagingTask+0x194>)
 800ad10:	00e4      	lsls	r4, r4, #3
 800ad12:	191c      	adds	r4, r3, r4
 800ad14:	1962      	adds	r2, r4, r5
 800ad16:	7953      	ldrb	r3, [r2, #5]
 800ad18:	7911      	ldrb	r1, [r2, #4]
 800ad1a:	061b      	lsls	r3, r3, #24
 800ad1c:	0409      	lsls	r1, r1, #16
 800ad1e:	185b      	adds	r3, r3, r1
 800ad20:	7891      	ldrb	r1, [r2, #2]
		timeout = ((uint32_t) cMessage[port - 1][9 + shift] << 24)+ ((uint32_t) cMessage[port - 1][8 + shift] << 16)+ ((uint32_t) cMessage[port - 1][7 + shift] << 8)+ cMessage[port - 1][6 + shift];
 800ad22:	7a50      	ldrb	r0, [r2, #9]
		period = ((uint32_t) cMessage[port - 1][5 + shift] << 24)+ ((uint32_t) cMessage[port - 1][4 + shift] << 16)+ ((uint32_t) cMessage[port - 1][3 + shift] << 8)+ cMessage[port - 1][2 + shift];
 800ad24:	185b      	adds	r3, r3, r1
 800ad26:	78d1      	ldrb	r1, [r2, #3]
		timeout = ((uint32_t) cMessage[port - 1][9 + shift] << 24)+ ((uint32_t) cMessage[port - 1][8 + shift] << 16)+ ((uint32_t) cMessage[port - 1][7 + shift] << 8)+ cMessage[port - 1][6 + shift];
 800ad28:	0600      	lsls	r0, r0, #24
		period = ((uint32_t) cMessage[port - 1][5 + shift] << 24)+ ((uint32_t) cMessage[port - 1][4 + shift] << 16)+ ((uint32_t) cMessage[port - 1][3 + shift] << 8)+ cMessage[port - 1][2 + shift];
 800ad2a:	0209      	lsls	r1, r1, #8
 800ad2c:	185b      	adds	r3, r3, r1
		timeout = ((uint32_t) cMessage[port - 1][9 + shift] << 24)+ ((uint32_t) cMessage[port - 1][8 + shift] << 16)+ ((uint32_t) cMessage[port - 1][7 + shift] << 8)+ cMessage[port - 1][6 + shift];
 800ad2e:	7a11      	ldrb	r1, [r2, #8]
	mosfetPort = Port;
 800ad30:	5d64      	ldrb	r4, [r4, r5]
		timeout = ((uint32_t) cMessage[port - 1][9 + shift] << 24)+ ((uint32_t) cMessage[port - 1][8 + shift] << 16)+ ((uint32_t) cMessage[port - 1][7 + shift] << 8)+ cMessage[port - 1][6 + shift];
 800ad32:	0409      	lsls	r1, r1, #16
 800ad34:	1840      	adds	r0, r0, r1
 800ad36:	7991      	ldrb	r1, [r2, #6]
 800ad38:	1840      	adds	r0, r0, r1
 800ad3a:	79d1      	ldrb	r1, [r2, #7]
 800ad3c:	0209      	lsls	r1, r1, #8
 800ad3e:	1840      	adds	r0, r0, r1
		Stream_current_To_Port(cMessage[port - 1][shift], cMessage[port - 1][1 + shift], period, timeout);
 800ad40:	7851      	ldrb	r1, [r2, #1]
	mosfetPort = Port;
 800ad42:	4a24      	ldr	r2, [pc, #144]	; (800add4 <Module_MessagingTask+0x1b8>)
 800ad44:	7014      	strb	r4, [r2, #0]
	mosfetModule = Module;
 800ad46:	4a24      	ldr	r2, [pc, #144]	; (800add8 <Module_MessagingTask+0x1bc>)
 800ad48:	7011      	strb	r1, [r2, #0]
	mosfetPeriod = Period;
 800ad4a:	4a1a      	ldr	r2, [pc, #104]	; (800adb4 <Module_MessagingTask+0x198>)
 800ad4c:	6013      	str	r3, [r2, #0]
	mosfetMode = REQ_STREAM_PORT;
 800ad4e:	2207      	movs	r2, #7
	mosfetTimeout = Timeout;
 800ad50:	4b19      	ldr	r3, [pc, #100]	; (800adb8 <Module_MessagingTask+0x19c>)
 800ad52:	6018      	str	r0, [r3, #0]
	mosfetMode = REQ_STREAM_PORT;
 800ad54:	4b1b      	ldr	r3, [pc, #108]	; (800adc4 <Module_MessagingTask+0x1a8>)
 800ad56:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800ad58:	1e43      	subs	r3, r0, #1
 800ad5a:	3303      	adds	r3, #3
 800ad5c:	d897      	bhi.n	800ac8e <Module_MessagingTask+0x72>
 800ad5e:	f7fe ffbd 	bl	8009cdc <Stream_current_To_Buffer.part.9>
	Module_Status result = H0FR7_OK;
 800ad62:	2000      	movs	r0, #0
 800ad64:	e798      	b.n	800ac98 <Module_MessagingTask+0x7c>
		temp32 = cMessage[port - 1][shift] + ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t)cMessage[port - 1][3 + shift]<< 24);
 800ad66:	3c01      	subs	r4, #1
 800ad68:	00e3      	lsls	r3, r4, #3
 800ad6a:	1b1c      	subs	r4, r3, r4
 800ad6c:	4b10      	ldr	r3, [pc, #64]	; (800adb0 <Module_MessagingTask+0x194>)
 800ad6e:	00e4      	lsls	r4, r4, #3
 800ad70:	191c      	adds	r4, r3, r4
 800ad72:	1963      	adds	r3, r4, r5
 800ad74:	7858      	ldrb	r0, [r3, #1]
 800ad76:	789a      	ldrb	r2, [r3, #2]
 800ad78:	0200      	lsls	r0, r0, #8
 800ad7a:	0412      	lsls	r2, r2, #16
 800ad7c:	78db      	ldrb	r3, [r3, #3]
 800ad7e:	1880      	adds	r0, r0, r2
 800ad80:	5d62      	ldrb	r2, [r4, r5]
 800ad82:	061b      	lsls	r3, r3, #24
 800ad84:	1880      	adds	r0, r0, r2
 800ad86:	18c0      	adds	r0, r0, r3
 800ad88:	4b14      	ldr	r3, [pc, #80]	; (800addc <Module_MessagingTask+0x1c0>)
 800ad8a:	6018      	str	r0, [r3, #0]
		Output_on(temp32);
 800ad8c:	f7ff fb32 	bl	800a3f4 <Output_on>
	Module_Status result = H0FR7_OK;
 800ad90:	2000      	movs	r0, #0
		break;
 800ad92:	e781      	b.n	800ac98 <Module_MessagingTask+0x7c>
		Output_off();
 800ad94:	f7ff fc12 	bl	800a5bc <Output_off>
	Module_Status result = H0FR7_OK;
 800ad98:	2000      	movs	r0, #0
		break;
 800ad9a:	e77d      	b.n	800ac98 <Module_MessagingTask+0x7c>
 800ad9c:	f7fe ff9e 	bl	8009cdc <Stream_current_To_Buffer.part.9>
	Module_Status result = H0FR7_OK;
 800ada0:	2000      	movs	r0, #0
 800ada2:	e779      	b.n	800ac98 <Module_MessagingTask+0x7c>
		result = H0FR7_ERR_UnknownMessage;
 800ada4:	2001      	movs	r0, #1
 800ada6:	e777      	b.n	800ac98 <Module_MessagingTask+0x7c>
 800ada8:	fffffcfe 	.word	0xfffffcfe
 800adac:	08018760 	.word	0x08018760
 800adb0:	20000ca0 	.word	0x20000ca0
 800adb4:	20006b3c 	.word	0x20006b3c
 800adb8:	20006c30 	.word	0x20006c30
 800adbc:	2000009c 	.word	0x2000009c
 800adc0:	20001fbc 	.word	0x20001fbc
 800adc4:	20006bbc 	.word	0x20006bbc
 800adc8:	20006b38 	.word	0x20006b38
 800adcc:	42c80000 	.word	0x42c80000
 800add0:	20006a18 	.word	0x20006a18
 800add4:	20006b40 	.word	0x20006b40
 800add8:	20006a10 	.word	0x20006a10
 800addc:	20006b44 	.word	0x20006b44

0800ade0 <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 800ade0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ade2:	46de      	mov	lr, fp
 800ade4:	4657      	mov	r7, sl
 800ade6:	464e      	mov	r6, r9
 800ade8:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 800adea:	2201      	movs	r2, #1
 800adec:	4b53      	ldr	r3, [pc, #332]	; (800af3c <DMA_Init+0x15c>)
{
 800adee:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 800adf0:	6959      	ldr	r1, [r3, #20]
{
 800adf2:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 800adf4:	4311      	orrs	r1, r2
 800adf6:	6159      	str	r1, [r3, #20]
 800adf8:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800adfa:	4c51      	ldr	r4, [pc, #324]	; (800af40 <DMA_Init+0x160>)
	__DMA1_CLK_ENABLE();
 800adfc:	400a      	ands	r2, r1
 800adfe:	9200      	str	r2, [sp, #0]
 800ae00:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800ae02:	2202      	movs	r2, #2
 800ae04:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ae06:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 800ae08:	4311      	orrs	r1, r2
 800ae0a:	6159      	str	r1, [r3, #20]
 800ae0c:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae0e:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 800ae10:	401a      	ands	r2, r3
 800ae12:	9201      	str	r2, [sp, #4]
 800ae14:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 800ae16:	4b4b      	ldr	r3, [pc, #300]	; (800af44 <DMA_Init+0x164>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ae18:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 800ae1a:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ae1c:	2320      	movs	r3, #32
 800ae1e:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ae20:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae22:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ae24:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ae26:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae28:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae2a:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ae2c:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ae2e:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800ae30:	0020      	movs	r0, r4
 800ae32:	f005 fbcd 	bl	80105d0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800ae36:	4b44      	ldr	r3, [pc, #272]	; (800af48 <DMA_Init+0x168>)
	HAL_DMA_Init(hDMA);		
 800ae38:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800ae3a:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ae3c:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae3e:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ae40:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ae42:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae44:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae46:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ae48:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ae4a:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800ae4c:	3038      	adds	r0, #56	; 0x38
 800ae4e:	f005 fbbf 	bl	80105d0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800ae52:	4b3e      	ldr	r3, [pc, #248]	; (800af4c <DMA_Init+0x16c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ae54:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 800ae56:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae58:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 800ae5a:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae5c:	50e5      	str	r5, [r4, r3]
 800ae5e:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ae60:	3304      	adds	r3, #4
 800ae62:	50e2      	str	r2, [r4, r3]
 800ae64:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ae66:	3304      	adds	r3, #4
 800ae68:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae6a:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ae6c:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ae6e:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae70:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 800ae72:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ae74:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 800ae76:	f005 fbab 	bl	80105d0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800ae7a:	23a8      	movs	r3, #168	; 0xa8
 800ae7c:	4a34      	ldr	r2, [pc, #208]	; (800af50 <DMA_Init+0x170>)
	HAL_DMA_Init(hDMA);		
 800ae7e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800ae80:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ae82:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae84:	3304      	adds	r3, #4
 800ae86:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ae88:	3304      	adds	r3, #4
 800ae8a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae90:	3304      	adds	r3, #4
 800ae92:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae94:	3304      	adds	r3, #4
 800ae96:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ae98:	3304      	adds	r3, #4
 800ae9a:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800aea0:	30a8      	adds	r0, #168	; 0xa8
 800aea2:	f005 fb95 	bl	80105d0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800aea6:	23e0      	movs	r3, #224	; 0xe0
 800aea8:	4a2a      	ldr	r2, [pc, #168]	; (800af54 <DMA_Init+0x174>)
	HAL_DMA_Init(hDMA);		
 800aeaa:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800aeac:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800aeae:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800aeb8:	3304      	adds	r3, #4
 800aeba:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aebc:	3304      	adds	r3, #4
 800aebe:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aec0:	3304      	adds	r3, #4
 800aec2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800aec4:	3304      	adds	r3, #4
 800aec6:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800aec8:	3304      	adds	r3, #4
 800aeca:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800aecc:	30e0      	adds	r0, #224	; 0xe0
 800aece:	f005 fb7f 	bl	80105d0 <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800aed2:	4c21      	ldr	r4, [pc, #132]	; (800af58 <DMA_Init+0x178>)
 800aed4:	4b21      	ldr	r3, [pc, #132]	; (800af5c <DMA_Init+0x17c>)
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800aed6:	60a5      	str	r5, [r4, #8]
	hDMA->Instance = ch;
 800aed8:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aeda:	2310      	movs	r3, #16
 800aedc:	469b      	mov	fp, r3
 800aede:	6063      	str	r3, [r4, #4]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800aee0:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aee2:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aee4:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800aee6:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800aee8:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800aeea:	0020      	movs	r0, r4
 800aeec:	f005 fb70 	bl	80105d0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800aef0:	4b1b      	ldr	r3, [pc, #108]	; (800af60 <DMA_Init+0x180>)
	HAL_DMA_Init(hDMA);		
 800aef2:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800aef4:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aef6:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800aef8:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aefa:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800aefc:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aefe:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800af00:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 800af02:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800af04:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800af06:	3038      	adds	r0, #56	; 0x38
 800af08:	f005 fb62 	bl	80105d0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800af0c:	4b15      	ldr	r3, [pc, #84]	; (800af64 <DMA_Init+0x184>)
	HAL_DMA_Init(hDMA);		
 800af0e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800af10:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800af12:	465b      	mov	r3, fp
 800af14:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800af16:	4653      	mov	r3, sl
 800af18:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 800af1a:	464b      	mov	r3, r9
 800af1c:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800af1e:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800af20:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800af22:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800af24:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800af26:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800af28:	3070      	adds	r0, #112	; 0x70
 800af2a:	f005 fb51 	bl	80105d0 <HAL_DMA_Init>
}
 800af2e:	b003      	add	sp, #12
 800af30:	bc3c      	pop	{r2, r3, r4, r5}
 800af32:	4690      	mov	r8, r2
 800af34:	4699      	mov	r9, r3
 800af36:	46a2      	mov	sl, r4
 800af38:	46ab      	mov	fp, r5
 800af3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af3c:	40021000 	.word	0x40021000
 800af40:	20002284 	.word	0x20002284
 800af44:	40020008 	.word	0x40020008
 800af48:	40020030 	.word	0x40020030
 800af4c:	40020058 	.word	0x40020058
 800af50:	4002006c 	.word	0x4002006c
 800af54:	4002041c 	.word	0x4002041c
 800af58:	200021dc 	.word	0x200021dc
 800af5c:	4002001c 	.word	0x4002001c
 800af60:	40020044 	.word	0x40020044
 800af64:	40020080 	.word	0x40020080

0800af68 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800af68:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800af6a:	1e44      	subs	r4, r0, #1
 800af6c:	00e5      	lsls	r5, r4, #3
 800af6e:	4e07      	ldr	r6, [pc, #28]	; (800af8c <StopStreamDMA+0x24>)
 800af70:	1b2d      	subs	r5, r5, r4
 800af72:	00ed      	lsls	r5, r5, #3
 800af74:	19a8      	adds	r0, r5, r6

	HAL_DMA_Abort(hDMA);
 800af76:	f005 fb83 	bl	8010680 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] = 0;
 800af7e:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR = 0;
 800af80:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800af82:	4a03      	ldr	r2, [pc, #12]	; (800af90 <StopStreamDMA+0x28>)
 800af84:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800af86:	4a03      	ldr	r2, [pc, #12]	; (800af94 <StopStreamDMA+0x2c>)
 800af88:	50a3      	str	r3, [r4, r2]

}
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	2000208c 	.word	0x2000208c
 800af90:	20001874 	.word	0x20001874
 800af94:	20001888 	.word	0x20001888

0800af98 <SwitchMsgDMAToStream>:
 */
void StopMsgDMA(uint8_t port){
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800af98:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800af9a:	b570      	push	{r4, r5, r6, lr}
 800af9c:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 800af9e:	4d0c      	ldr	r5, [pc, #48]	; (800afd0 <SwitchMsgDMAToStream+0x38>)
 800afa0:	1a24      	subs	r4, r4, r0
 800afa2:	00e4      	lsls	r4, r4, #3
 800afa4:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 800afa6:	f005 fb6b 	bl	8010680 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800afaa:	2300      	movs	r3, #0
 800afac:	5962      	ldr	r2, [r4, r5]
	hDMA->Instance = ch;
 800afae:	4809      	ldr	r0, [pc, #36]	; (800afd4 <SwitchMsgDMAToStream+0x3c>)
	hDMA->Instance->CNDTR =0;
 800afb0:	6053      	str	r3, [r2, #4]
	hDMA->Instance = ch;
 800afb2:	5022      	str	r2, [r4, r0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800afb4:	1900      	adds	r0, r0, r4
 800afb6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800afb8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800afba:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800afbc:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800afbe:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800afc0:	3320      	adds	r3, #32
 800afc2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800afc4:	2380      	movs	r3, #128	; 0x80
 800afc6:	015b      	lsls	r3, r3, #5
 800afc8:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 800afca:	f005 fb01 	bl	80105d0 <HAL_DMA_Init>
	// Stop the messaging DMA
	StopMsgDMA(port);

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
}
 800afce:	bd70      	pop	{r4, r5, r6, pc}
 800afd0:	20002284 	.word	0x20002284
 800afd4:	2000208c 	.word	0x2000208c

0800afd8 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800afd8:	6803      	ldr	r3, [r0, #0]
 800afda:	4a21      	ldr	r2, [pc, #132]	; (800b060 <SetupDMAInterrupts+0x88>)
{
 800afdc:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d01c      	beq.n	800b01c <SetupDMAInterrupts+0x44>
 800afe2:	d80e      	bhi.n	800b002 <SetupDMAInterrupts+0x2a>
 800afe4:	4a1f      	ldr	r2, [pc, #124]	; (800b064 <SetupDMAInterrupts+0x8c>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d026      	beq.n	800b038 <SetupDMAInterrupts+0x60>
 800afea:	d82d      	bhi.n	800b048 <SetupDMAInterrupts+0x70>
 800afec:	4a1e      	ldr	r2, [pc, #120]	; (800b068 <SetupDMAInterrupts+0x90>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d131      	bne.n	800b056 <SetupDMAInterrupts+0x7e>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800aff2:	2009      	movs	r0, #9
 800aff4:	2200      	movs	r2, #0
 800aff6:	f005 f963 	bl	80102c0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800affa:	2009      	movs	r0, #9
 800affc:	f005 f98c 	bl	8010318 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b000:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b002:	4a1a      	ldr	r2, [pc, #104]	; (800b06c <SetupDMAInterrupts+0x94>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d017      	beq.n	800b038 <SetupDMAInterrupts+0x60>
 800b008:	d910      	bls.n	800b02c <SetupDMAInterrupts+0x54>
 800b00a:	4a19      	ldr	r2, [pc, #100]	; (800b070 <SetupDMAInterrupts+0x98>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d005      	beq.n	800b01c <SetupDMAInterrupts+0x44>
 800b010:	4a18      	ldr	r2, [pc, #96]	; (800b074 <SetupDMAInterrupts+0x9c>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d002      	beq.n	800b01c <SetupDMAInterrupts+0x44>
 800b016:	4a18      	ldr	r2, [pc, #96]	; (800b078 <SetupDMAInterrupts+0xa0>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d1f1      	bne.n	800b000 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800b01c:	2200      	movs	r2, #0
 800b01e:	200b      	movs	r0, #11
 800b020:	f005 f94e 	bl	80102c0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b024:	200b      	movs	r0, #11
 800b026:	f005 f977 	bl	8010318 <HAL_NVIC_EnableIRQ>
}
 800b02a:	e7e9      	b.n	800b000 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b02c:	4a13      	ldr	r2, [pc, #76]	; (800b07c <SetupDMAInterrupts+0xa4>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d0f4      	beq.n	800b01c <SetupDMAInterrupts+0x44>
 800b032:	4a13      	ldr	r2, [pc, #76]	; (800b080 <SetupDMAInterrupts+0xa8>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d1e3      	bne.n	800b000 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800b038:	2200      	movs	r2, #0
 800b03a:	200a      	movs	r0, #10
 800b03c:	f005 f940 	bl	80102c0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b040:	200a      	movs	r0, #10
 800b042:	f005 f969 	bl	8010318 <HAL_NVIC_EnableIRQ>
			break;
 800b046:	e7db      	b.n	800b000 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b048:	4a0e      	ldr	r2, [pc, #56]	; (800b084 <SetupDMAInterrupts+0xac>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d0e6      	beq.n	800b01c <SetupDMAInterrupts+0x44>
 800b04e:	4a0e      	ldr	r2, [pc, #56]	; (800b088 <SetupDMAInterrupts+0xb0>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d1d5      	bne.n	800b000 <SetupDMAInterrupts+0x28>
 800b054:	e7e2      	b.n	800b01c <SetupDMAInterrupts+0x44>
 800b056:	4a0d      	ldr	r2, [pc, #52]	; (800b08c <SetupDMAInterrupts+0xb4>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d0ed      	beq.n	800b038 <SetupDMAInterrupts+0x60>
 800b05c:	e7d0      	b.n	800b000 <SetupDMAInterrupts+0x28>
 800b05e:	46c0      	nop			; (mov r8, r8)
 800b060:	4002006c 	.word	0x4002006c
 800b064:	40020030 	.word	0x40020030
 800b068:	40020008 	.word	0x40020008
 800b06c:	4002041c 	.word	0x4002041c
 800b070:	40020444 	.word	0x40020444
 800b074:	40020458 	.word	0x40020458
 800b078:	40020430 	.word	0x40020430
 800b07c:	40020080 	.word	0x40020080
 800b080:	40020408 	.word	0x40020408
 800b084:	40020044 	.word	0x40020044
 800b088:	40020058 	.word	0x40020058
 800b08c:	4002001c 	.word	0x4002001c

0800b090 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800b090:	6803      	ldr	r3, [r0, #0]
 800b092:	4a1b      	ldr	r2, [pc, #108]	; (800b100 <UnSetupDMAInterrupts+0x70>)
{
 800b094:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b096:	4293      	cmp	r3, r2
 800b098:	d018      	beq.n	800b0cc <UnSetupDMAInterrupts+0x3c>
 800b09a:	d80a      	bhi.n	800b0b2 <UnSetupDMAInterrupts+0x22>
 800b09c:	4a19      	ldr	r2, [pc, #100]	; (800b104 <UnSetupDMAInterrupts+0x74>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d01e      	beq.n	800b0e0 <UnSetupDMAInterrupts+0x50>
 800b0a2:	d821      	bhi.n	800b0e8 <UnSetupDMAInterrupts+0x58>
 800b0a4:	4a18      	ldr	r2, [pc, #96]	; (800b108 <UnSetupDMAInterrupts+0x78>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d125      	bne.n	800b0f6 <UnSetupDMAInterrupts+0x66>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800b0aa:	2009      	movs	r0, #9
 800b0ac:	f005 f93e 	bl	801032c <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b0b0:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b0b2:	4a16      	ldr	r2, [pc, #88]	; (800b10c <UnSetupDMAInterrupts+0x7c>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d013      	beq.n	800b0e0 <UnSetupDMAInterrupts+0x50>
 800b0b8:	d90c      	bls.n	800b0d4 <UnSetupDMAInterrupts+0x44>
 800b0ba:	4a15      	ldr	r2, [pc, #84]	; (800b110 <UnSetupDMAInterrupts+0x80>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d005      	beq.n	800b0cc <UnSetupDMAInterrupts+0x3c>
 800b0c0:	4a14      	ldr	r2, [pc, #80]	; (800b114 <UnSetupDMAInterrupts+0x84>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d002      	beq.n	800b0cc <UnSetupDMAInterrupts+0x3c>
 800b0c6:	4a14      	ldr	r2, [pc, #80]	; (800b118 <UnSetupDMAInterrupts+0x88>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d1f1      	bne.n	800b0b0 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b0cc:	200b      	movs	r0, #11
 800b0ce:	f005 f92d 	bl	801032c <HAL_NVIC_DisableIRQ>
}
 800b0d2:	e7ed      	b.n	800b0b0 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b0d4:	4a11      	ldr	r2, [pc, #68]	; (800b11c <UnSetupDMAInterrupts+0x8c>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d0f8      	beq.n	800b0cc <UnSetupDMAInterrupts+0x3c>
 800b0da:	4a11      	ldr	r2, [pc, #68]	; (800b120 <UnSetupDMAInterrupts+0x90>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d1e7      	bne.n	800b0b0 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b0e0:	200a      	movs	r0, #10
 800b0e2:	f005 f923 	bl	801032c <HAL_NVIC_DisableIRQ>
			break;
 800b0e6:	e7e3      	b.n	800b0b0 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b0e8:	4a0e      	ldr	r2, [pc, #56]	; (800b124 <UnSetupDMAInterrupts+0x94>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d0ee      	beq.n	800b0cc <UnSetupDMAInterrupts+0x3c>
 800b0ee:	4a0e      	ldr	r2, [pc, #56]	; (800b128 <UnSetupDMAInterrupts+0x98>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d1dd      	bne.n	800b0b0 <UnSetupDMAInterrupts+0x20>
 800b0f4:	e7ea      	b.n	800b0cc <UnSetupDMAInterrupts+0x3c>
 800b0f6:	4a0d      	ldr	r2, [pc, #52]	; (800b12c <UnSetupDMAInterrupts+0x9c>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d0f1      	beq.n	800b0e0 <UnSetupDMAInterrupts+0x50>
 800b0fc:	e7d8      	b.n	800b0b0 <UnSetupDMAInterrupts+0x20>
 800b0fe:	46c0      	nop			; (mov r8, r8)
 800b100:	4002006c 	.word	0x4002006c
 800b104:	40020030 	.word	0x40020030
 800b108:	40020008 	.word	0x40020008
 800b10c:	4002041c 	.word	0x4002041c
 800b110:	40020444 	.word	0x40020444
 800b114:	40020458 	.word	0x40020458
 800b118:	40020430 	.word	0x40020430
 800b11c:	40020080 	.word	0x40020080
 800b120:	40020408 	.word	0x40020408
 800b124:	40020044 	.word	0x40020044
 800b128:	40020058 	.word	0x40020058
 800b12c:	4002001c 	.word	0x4002001c

0800b130 <DMA_MSG_TX_UnSetup>:
{	
 800b130:	b510      	push	{r4, lr}
 800b132:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800b134:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800b136:	f7ff ffab 	bl	800b090 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b13e:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800b140:	6623      	str	r3, [r4, #96]	; 0x60
}
 800b142:	bd10      	pop	{r4, pc}

0800b144 <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b144:	6803      	ldr	r3, [r0, #0]
 800b146:	4ac6      	ldr	r2, [pc, #792]	; (800b460 <RemapAndLinkDMAtoUARTRx+0x31c>)
{
 800b148:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d03a      	beq.n	800b1c4 <RemapAndLinkDMAtoUARTRx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b14e:	4ac5      	ldr	r2, [pc, #788]	; (800b464 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d058      	beq.n	800b206 <RemapAndLinkDMAtoUARTRx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b154:	4ac4      	ldr	r2, [pc, #784]	; (800b468 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d100      	bne.n	800b15c <RemapAndLinkDMAtoUARTRx+0x18>
 800b15a:	e093      	b.n	800b284 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b15c:	4ac3      	ldr	r2, [pc, #780]	; (800b46c <RemapAndLinkDMAtoUARTRx+0x328>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d100      	bne.n	800b164 <RemapAndLinkDMAtoUARTRx+0x20>
 800b162:	e0c0      	b.n	800b2e6 <RemapAndLinkDMAtoUARTRx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800b164:	4ac2      	ldr	r2, [pc, #776]	; (800b470 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d100      	bne.n	800b16c <RemapAndLinkDMAtoUARTRx+0x28>
 800b16a:	e19d      	b.n	800b4a8 <RemapAndLinkDMAtoUARTRx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b16c:	4ac1      	ldr	r2, [pc, #772]	; (800b474 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d100      	bne.n	800b174 <RemapAndLinkDMAtoUARTRx+0x30>
 800b172:	e1b9      	b.n	800b4e8 <RemapAndLinkDMAtoUARTRx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b174:	4ac0      	ldr	r2, [pc, #768]	; (800b478 <RemapAndLinkDMAtoUARTRx+0x334>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d000      	beq.n	800b17c <RemapAndLinkDMAtoUARTRx+0x38>
 800b17a:	e265      	b.n	800b648 <RemapAndLinkDMAtoUARTRx+0x504>
 800b17c:	680b      	ldr	r3, [r1, #0]
 800b17e:	4abf      	ldr	r2, [pc, #764]	; (800b47c <RemapAndLinkDMAtoUARTRx+0x338>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d100      	bne.n	800b186 <RemapAndLinkDMAtoUARTRx+0x42>
 800b184:	e230      	b.n	800b5e8 <RemapAndLinkDMAtoUARTRx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b186:	4abe      	ldr	r2, [pc, #760]	; (800b480 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d100      	bne.n	800b18e <RemapAndLinkDMAtoUARTRx+0x4a>
 800b18c:	e237      	b.n	800b5fe <RemapAndLinkDMAtoUARTRx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b18e:	4abd      	ldr	r2, [pc, #756]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d100      	bne.n	800b196 <RemapAndLinkDMAtoUARTRx+0x52>
 800b194:	e235      	b.n	800b602 <RemapAndLinkDMAtoUARTRx+0x4be>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b196:	4abc      	ldr	r2, [pc, #752]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x344>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d100      	bne.n	800b19e <RemapAndLinkDMAtoUARTRx+0x5a>
 800b19c:	e23d      	b.n	800b61a <RemapAndLinkDMAtoUARTRx+0x4d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b19e:	4abb      	ldr	r2, [pc, #748]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x348>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d100      	bne.n	800b1a6 <RemapAndLinkDMAtoUARTRx+0x62>
 800b1a4:	e245      	b.n	800b632 <RemapAndLinkDMAtoUARTRx+0x4ee>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b1a6:	4aba      	ldr	r2, [pc, #744]	; (800b490 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d145      	bne.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800b1ac:	4ab9      	ldr	r2, [pc, #740]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b1ae:	23a8      	movs	r3, #168	; 0xa8
 800b1b0:	4db9      	ldr	r5, [pc, #740]	; (800b498 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b1b2:	58d4      	ldr	r4, [r2, r3]
 800b1b4:	402c      	ands	r4, r5
 800b1b6:	50d4      	str	r4, [r2, r3]
 800b1b8:	24e0      	movs	r4, #224	; 0xe0
 800b1ba:	58d5      	ldr	r5, [r2, r3]
 800b1bc:	0124      	lsls	r4, r4, #4
 800b1be:	432c      	orrs	r4, r5
 800b1c0:	50d4      	str	r4, [r2, r3]
 800b1c2:	e039      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b1c4:	680b      	ldr	r3, [r1, #0]
 800b1c6:	4aad      	ldr	r2, [pc, #692]	; (800b47c <RemapAndLinkDMAtoUARTRx+0x338>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d100      	bne.n	800b1ce <RemapAndLinkDMAtoUARTRx+0x8a>
 800b1cc:	e07e      	b.n	800b2cc <RemapAndLinkDMAtoUARTRx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800b1ce:	4aac      	ldr	r2, [pc, #688]	; (800b480 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d100      	bne.n	800b1d6 <RemapAndLinkDMAtoUARTRx+0x92>
 800b1d4:	e085      	b.n	800b2e2 <RemapAndLinkDMAtoUARTRx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800b1d6:	4aab      	ldr	r2, [pc, #684]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d030      	beq.n	800b23e <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800b1dc:	4aaa      	ldr	r2, [pc, #680]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x344>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d039      	beq.n	800b256 <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800b1e2:	4aaa      	ldr	r2, [pc, #680]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x348>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d042      	beq.n	800b26e <RemapAndLinkDMAtoUARTRx+0x12a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800b1e8:	4aa9      	ldr	r2, [pc, #676]	; (800b490 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d124      	bne.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800b1ee:	4aa9      	ldr	r2, [pc, #676]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b1f0:	23a8      	movs	r3, #168	; 0xa8
 800b1f2:	4da9      	ldr	r5, [pc, #676]	; (800b498 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b1f4:	58d4      	ldr	r4, [r2, r3]
 800b1f6:	402c      	ands	r4, r5
 800b1f8:	50d4      	str	r4, [r2, r3]
 800b1fa:	2480      	movs	r4, #128	; 0x80
 800b1fc:	58d5      	ldr	r5, [r2, r3]
 800b1fe:	0124      	lsls	r4, r4, #4
 800b200:	432c      	orrs	r4, r5
 800b202:	50d4      	str	r4, [r2, r3]
 800b204:	e018      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b206:	680b      	ldr	r3, [r1, #0]
 800b208:	4a9c      	ldr	r2, [pc, #624]	; (800b47c <RemapAndLinkDMAtoUARTRx+0x338>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d100      	bne.n	800b210 <RemapAndLinkDMAtoUARTRx+0xcc>
 800b20e:	e0b0      	b.n	800b372 <RemapAndLinkDMAtoUARTRx+0x22e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800b210:	4a9b      	ldr	r2, [pc, #620]	; (800b480 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d100      	bne.n	800b218 <RemapAndLinkDMAtoUARTRx+0xd4>
 800b216:	e0b7      	b.n	800b388 <RemapAndLinkDMAtoUARTRx+0x244>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800b218:	4a9a      	ldr	r2, [pc, #616]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d100      	bne.n	800b220 <RemapAndLinkDMAtoUARTRx+0xdc>
 800b21e:	e0bf      	b.n	800b3a0 <RemapAndLinkDMAtoUARTRx+0x25c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800b220:	4a99      	ldr	r2, [pc, #612]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x344>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d100      	bne.n	800b228 <RemapAndLinkDMAtoUARTRx+0xe4>
 800b226:	e0c7      	b.n	800b3b8 <RemapAndLinkDMAtoUARTRx+0x274>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800b228:	4a98      	ldr	r2, [pc, #608]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x348>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d100      	bne.n	800b230 <RemapAndLinkDMAtoUARTRx+0xec>
 800b22e:	e0cf      	b.n	800b3d0 <RemapAndLinkDMAtoUARTRx+0x28c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800b230:	4a97      	ldr	r2, [pc, #604]	; (800b490 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d100      	bne.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
 800b236:	e0d6      	b.n	800b3e6 <RemapAndLinkDMAtoUARTRx+0x2a2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800b238:	6641      	str	r1, [r0, #100]	; 0x64
 800b23a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800b23c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800b23e:	23a8      	movs	r3, #168	; 0xa8
 800b240:	4a96      	ldr	r2, [pc, #600]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b242:	4d97      	ldr	r5, [pc, #604]	; (800b4a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b244:	58d4      	ldr	r4, [r2, r3]
 800b246:	402c      	ands	r4, r5
 800b248:	50d4      	str	r4, [r2, r3]
 800b24a:	2480      	movs	r4, #128	; 0x80
 800b24c:	58d5      	ldr	r5, [r2, r3]
 800b24e:	0324      	lsls	r4, r4, #12
 800b250:	432c      	orrs	r4, r5
 800b252:	50d4      	str	r4, [r2, r3]
 800b254:	e7f0      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800b256:	23a8      	movs	r3, #168	; 0xa8
 800b258:	4a90      	ldr	r2, [pc, #576]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b25a:	4d92      	ldr	r5, [pc, #584]	; (800b4a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b25c:	58d4      	ldr	r4, [r2, r3]
 800b25e:	402c      	ands	r4, r5
 800b260:	50d4      	str	r4, [r2, r3]
 800b262:	2480      	movs	r4, #128	; 0x80
 800b264:	58d5      	ldr	r5, [r2, r3]
 800b266:	0424      	lsls	r4, r4, #16
 800b268:	432c      	orrs	r4, r5
 800b26a:	50d4      	str	r4, [r2, r3]
 800b26c:	e7e4      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800b26e:	23a8      	movs	r3, #168	; 0xa8
 800b270:	25f0      	movs	r5, #240	; 0xf0
 800b272:	4a88      	ldr	r2, [pc, #544]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b274:	58d4      	ldr	r4, [r2, r3]
 800b276:	43ac      	bics	r4, r5
 800b278:	50d4      	str	r4, [r2, r3]
 800b27a:	58d4      	ldr	r4, [r2, r3]
 800b27c:	3d70      	subs	r5, #112	; 0x70
 800b27e:	432c      	orrs	r4, r5
 800b280:	50d4      	str	r4, [r2, r3]
 800b282:	e7d9      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b284:	680b      	ldr	r3, [r1, #0]
 800b286:	4a7d      	ldr	r2, [pc, #500]	; (800b47c <RemapAndLinkDMAtoUARTRx+0x338>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d100      	bne.n	800b28e <RemapAndLinkDMAtoUARTRx+0x14a>
 800b28c:	e0ad      	b.n	800b3ea <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800b28e:	4a7c      	ldr	r2, [pc, #496]	; (800b480 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d100      	bne.n	800b296 <RemapAndLinkDMAtoUARTRx+0x152>
 800b294:	e0b4      	b.n	800b400 <RemapAndLinkDMAtoUARTRx+0x2bc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800b296:	4a7b      	ldr	r2, [pc, #492]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d100      	bne.n	800b29e <RemapAndLinkDMAtoUARTRx+0x15a>
 800b29c:	e0b2      	b.n	800b404 <RemapAndLinkDMAtoUARTRx+0x2c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800b29e:	4a7a      	ldr	r2, [pc, #488]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x344>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d100      	bne.n	800b2a6 <RemapAndLinkDMAtoUARTRx+0x162>
 800b2a4:	e0ba      	b.n	800b41c <RemapAndLinkDMAtoUARTRx+0x2d8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800b2a6:	4a79      	ldr	r2, [pc, #484]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x348>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d100      	bne.n	800b2ae <RemapAndLinkDMAtoUARTRx+0x16a>
 800b2ac:	e0c2      	b.n	800b434 <RemapAndLinkDMAtoUARTRx+0x2f0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800b2ae:	4a78      	ldr	r2, [pc, #480]	; (800b490 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d1c1      	bne.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800b2b4:	4a77      	ldr	r2, [pc, #476]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b2b6:	23a8      	movs	r3, #168	; 0xa8
 800b2b8:	4d77      	ldr	r5, [pc, #476]	; (800b498 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b2ba:	58d4      	ldr	r4, [r2, r3]
 800b2bc:	402c      	ands	r4, r5
 800b2be:	50d4      	str	r4, [r2, r3]
 800b2c0:	24a0      	movs	r4, #160	; 0xa0
 800b2c2:	58d5      	ldr	r5, [r2, r3]
 800b2c4:	0124      	lsls	r4, r4, #4
 800b2c6:	432c      	orrs	r4, r5
 800b2c8:	50d4      	str	r4, [r2, r3]
 800b2ca:	e7b5      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800b2cc:	23a8      	movs	r3, #168	; 0xa8
 800b2ce:	250f      	movs	r5, #15
 800b2d0:	4a72      	ldr	r2, [pc, #456]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b2d2:	58d4      	ldr	r4, [r2, r3]
 800b2d4:	43ac      	bics	r4, r5
 800b2d6:	50d4      	str	r4, [r2, r3]
 800b2d8:	58d4      	ldr	r4, [r2, r3]
 800b2da:	3d07      	subs	r5, #7
 800b2dc:	432c      	orrs	r4, r5
 800b2de:	50d4      	str	r4, [r2, r3]
 800b2e0:	e7aa      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800b2e2:	4a6e      	ldr	r2, [pc, #440]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b2e4:	e784      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b2e6:	680b      	ldr	r3, [r1, #0]
 800b2e8:	4a64      	ldr	r2, [pc, #400]	; (800b47c <RemapAndLinkDMAtoUARTRx+0x338>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d01c      	beq.n	800b328 <RemapAndLinkDMAtoUARTRx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b2ee:	4a64      	ldr	r2, [pc, #400]	; (800b480 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d024      	beq.n	800b33e <RemapAndLinkDMAtoUARTRx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b2f4:	4a63      	ldr	r2, [pc, #396]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d023      	beq.n	800b342 <RemapAndLinkDMAtoUARTRx+0x1fe>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b2fa:	4a63      	ldr	r2, [pc, #396]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x344>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d02c      	beq.n	800b35a <RemapAndLinkDMAtoUARTRx+0x216>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b300:	4a62      	ldr	r2, [pc, #392]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x348>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d100      	bne.n	800b308 <RemapAndLinkDMAtoUARTRx+0x1c4>
 800b306:	e0a0      	b.n	800b44a <RemapAndLinkDMAtoUARTRx+0x306>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b308:	4a61      	ldr	r2, [pc, #388]	; (800b490 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d000      	beq.n	800b310 <RemapAndLinkDMAtoUARTRx+0x1cc>
 800b30e:	e793      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800b310:	4a60      	ldr	r2, [pc, #384]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b312:	23a8      	movs	r3, #168	; 0xa8
 800b314:	4d60      	ldr	r5, [pc, #384]	; (800b498 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b316:	58d4      	ldr	r4, [r2, r3]
 800b318:	402c      	ands	r4, r5
 800b31a:	50d4      	str	r4, [r2, r3]
 800b31c:	24b0      	movs	r4, #176	; 0xb0
 800b31e:	58d5      	ldr	r5, [r2, r3]
 800b320:	0124      	lsls	r4, r4, #4
 800b322:	432c      	orrs	r4, r5
 800b324:	50d4      	str	r4, [r2, r3]
 800b326:	e787      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800b328:	23a8      	movs	r3, #168	; 0xa8
 800b32a:	250f      	movs	r5, #15
 800b32c:	4a5b      	ldr	r2, [pc, #364]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b32e:	58d4      	ldr	r4, [r2, r3]
 800b330:	43ac      	bics	r4, r5
 800b332:	50d4      	str	r4, [r2, r3]
 800b334:	58d4      	ldr	r4, [r2, r3]
 800b336:	3d04      	subs	r5, #4
 800b338:	432c      	orrs	r4, r5
 800b33a:	50d4      	str	r4, [r2, r3]
 800b33c:	e77c      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800b33e:	4a57      	ldr	r2, [pc, #348]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b340:	e7e7      	b.n	800b312 <RemapAndLinkDMAtoUARTRx+0x1ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800b342:	23a8      	movs	r3, #168	; 0xa8
 800b344:	4a55      	ldr	r2, [pc, #340]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b346:	4d56      	ldr	r5, [pc, #344]	; (800b4a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b348:	58d4      	ldr	r4, [r2, r3]
 800b34a:	402c      	ands	r4, r5
 800b34c:	50d4      	str	r4, [r2, r3]
 800b34e:	24b0      	movs	r4, #176	; 0xb0
 800b350:	58d5      	ldr	r5, [r2, r3]
 800b352:	0324      	lsls	r4, r4, #12
 800b354:	432c      	orrs	r4, r5
 800b356:	50d4      	str	r4, [r2, r3]
 800b358:	e76e      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800b35a:	23a8      	movs	r3, #168	; 0xa8
 800b35c:	4a4f      	ldr	r2, [pc, #316]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b35e:	4d51      	ldr	r5, [pc, #324]	; (800b4a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b360:	58d4      	ldr	r4, [r2, r3]
 800b362:	402c      	ands	r4, r5
 800b364:	50d4      	str	r4, [r2, r3]
 800b366:	24b0      	movs	r4, #176	; 0xb0
 800b368:	58d5      	ldr	r5, [r2, r3]
 800b36a:	0424      	lsls	r4, r4, #16
 800b36c:	432c      	orrs	r4, r5
 800b36e:	50d4      	str	r4, [r2, r3]
 800b370:	e762      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800b372:	23a8      	movs	r3, #168	; 0xa8
 800b374:	250f      	movs	r5, #15
 800b376:	4a49      	ldr	r2, [pc, #292]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b378:	58d4      	ldr	r4, [r2, r3]
 800b37a:	43ac      	bics	r4, r5
 800b37c:	50d4      	str	r4, [r2, r3]
 800b37e:	58d4      	ldr	r4, [r2, r3]
 800b380:	3d06      	subs	r5, #6
 800b382:	432c      	orrs	r4, r5
 800b384:	50d4      	str	r4, [r2, r3]
 800b386:	e757      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800b388:	4a44      	ldr	r2, [pc, #272]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800b38a:	23a8      	movs	r3, #168	; 0xa8
 800b38c:	4d42      	ldr	r5, [pc, #264]	; (800b498 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b38e:	58d4      	ldr	r4, [r2, r3]
 800b390:	402c      	ands	r4, r5
 800b392:	50d4      	str	r4, [r2, r3]
 800b394:	2490      	movs	r4, #144	; 0x90
 800b396:	58d5      	ldr	r5, [r2, r3]
 800b398:	0124      	lsls	r4, r4, #4
 800b39a:	432c      	orrs	r4, r5
 800b39c:	50d4      	str	r4, [r2, r3]
 800b39e:	e74b      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800b3a0:	23a8      	movs	r3, #168	; 0xa8
 800b3a2:	4a3e      	ldr	r2, [pc, #248]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b3a4:	4d3e      	ldr	r5, [pc, #248]	; (800b4a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b3a6:	58d4      	ldr	r4, [r2, r3]
 800b3a8:	402c      	ands	r4, r5
 800b3aa:	50d4      	str	r4, [r2, r3]
 800b3ac:	2490      	movs	r4, #144	; 0x90
 800b3ae:	58d5      	ldr	r5, [r2, r3]
 800b3b0:	0324      	lsls	r4, r4, #12
 800b3b2:	432c      	orrs	r4, r5
 800b3b4:	50d4      	str	r4, [r2, r3]
 800b3b6:	e73f      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800b3b8:	23a8      	movs	r3, #168	; 0xa8
 800b3ba:	4a38      	ldr	r2, [pc, #224]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b3bc:	4d39      	ldr	r5, [pc, #228]	; (800b4a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b3be:	58d4      	ldr	r4, [r2, r3]
 800b3c0:	402c      	ands	r4, r5
 800b3c2:	50d4      	str	r4, [r2, r3]
 800b3c4:	2490      	movs	r4, #144	; 0x90
 800b3c6:	58d5      	ldr	r5, [r2, r3]
 800b3c8:	0424      	lsls	r4, r4, #16
 800b3ca:	432c      	orrs	r4, r5
 800b3cc:	50d4      	str	r4, [r2, r3]
 800b3ce:	e733      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800b3d0:	23a8      	movs	r3, #168	; 0xa8
 800b3d2:	25f0      	movs	r5, #240	; 0xf0
 800b3d4:	4a2f      	ldr	r2, [pc, #188]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b3d6:	58d4      	ldr	r4, [r2, r3]
 800b3d8:	43ac      	bics	r4, r5
 800b3da:	50d4      	str	r4, [r2, r3]
 800b3dc:	58d4      	ldr	r4, [r2, r3]
 800b3de:	3d60      	subs	r5, #96	; 0x60
 800b3e0:	432c      	orrs	r4, r5
 800b3e2:	50d4      	str	r4, [r2, r3]
 800b3e4:	e728      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800b3e6:	4a2b      	ldr	r2, [pc, #172]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b3e8:	e7cf      	b.n	800b38a <RemapAndLinkDMAtoUARTRx+0x246>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800b3ea:	23a8      	movs	r3, #168	; 0xa8
 800b3ec:	250f      	movs	r5, #15
 800b3ee:	4a2b      	ldr	r2, [pc, #172]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b3f0:	58d4      	ldr	r4, [r2, r3]
 800b3f2:	43ac      	bics	r4, r5
 800b3f4:	50d4      	str	r4, [r2, r3]
 800b3f6:	58d4      	ldr	r4, [r2, r3]
 800b3f8:	3d05      	subs	r5, #5
 800b3fa:	432c      	orrs	r4, r5
 800b3fc:	50d4      	str	r4, [r2, r3]
 800b3fe:	e71b      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800b400:	4a26      	ldr	r2, [pc, #152]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b402:	e758      	b.n	800b2b6 <RemapAndLinkDMAtoUARTRx+0x172>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800b404:	23a8      	movs	r3, #168	; 0xa8
 800b406:	4a25      	ldr	r2, [pc, #148]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b408:	4d25      	ldr	r5, [pc, #148]	; (800b4a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b40a:	58d4      	ldr	r4, [r2, r3]
 800b40c:	402c      	ands	r4, r5
 800b40e:	50d4      	str	r4, [r2, r3]
 800b410:	24a0      	movs	r4, #160	; 0xa0
 800b412:	58d5      	ldr	r5, [r2, r3]
 800b414:	0324      	lsls	r4, r4, #12
 800b416:	432c      	orrs	r4, r5
 800b418:	50d4      	str	r4, [r2, r3]
 800b41a:	e70d      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800b41c:	23a8      	movs	r3, #168	; 0xa8
 800b41e:	4a1f      	ldr	r2, [pc, #124]	; (800b49c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b420:	4d20      	ldr	r5, [pc, #128]	; (800b4a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b422:	58d4      	ldr	r4, [r2, r3]
 800b424:	402c      	ands	r4, r5
 800b426:	50d4      	str	r4, [r2, r3]
 800b428:	24a0      	movs	r4, #160	; 0xa0
 800b42a:	58d5      	ldr	r5, [r2, r3]
 800b42c:	0424      	lsls	r4, r4, #16
 800b42e:	432c      	orrs	r4, r5
 800b430:	50d4      	str	r4, [r2, r3]
 800b432:	e701      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800b434:	23a8      	movs	r3, #168	; 0xa8
 800b436:	25f0      	movs	r5, #240	; 0xf0
 800b438:	4a16      	ldr	r2, [pc, #88]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b43a:	58d4      	ldr	r4, [r2, r3]
 800b43c:	43ac      	bics	r4, r5
 800b43e:	50d4      	str	r4, [r2, r3]
 800b440:	58d4      	ldr	r4, [r2, r3]
 800b442:	3d50      	subs	r5, #80	; 0x50
 800b444:	432c      	orrs	r4, r5
 800b446:	50d4      	str	r4, [r2, r3]
 800b448:	e6f6      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800b44a:	23a8      	movs	r3, #168	; 0xa8
 800b44c:	25f0      	movs	r5, #240	; 0xf0
 800b44e:	4a11      	ldr	r2, [pc, #68]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b450:	58d4      	ldr	r4, [r2, r3]
 800b452:	43ac      	bics	r4, r5
 800b454:	50d4      	str	r4, [r2, r3]
 800b456:	58d4      	ldr	r4, [r2, r3]
 800b458:	3d40      	subs	r5, #64	; 0x40
 800b45a:	432c      	orrs	r4, r5
 800b45c:	50d4      	str	r4, [r2, r3]
 800b45e:	e6eb      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
 800b460:	40013800 	.word	0x40013800
 800b464:	40004400 	.word	0x40004400
 800b468:	40004800 	.word	0x40004800
 800b46c:	40004c00 	.word	0x40004c00
 800b470:	40005000 	.word	0x40005000
 800b474:	40011400 	.word	0x40011400
 800b478:	40011800 	.word	0x40011800
 800b47c:	40020008 	.word	0x40020008
 800b480:	40020030 	.word	0x40020030
 800b484:	40020058 	.word	0x40020058
 800b488:	4002006c 	.word	0x4002006c
 800b48c:	4002041c 	.word	0x4002041c
 800b490:	40020430 	.word	0x40020430
 800b494:	40020400 	.word	0x40020400
 800b498:	fffff0ff 	.word	0xfffff0ff
 800b49c:	40020000 	.word	0x40020000
 800b4a0:	fff0ffff 	.word	0xfff0ffff
 800b4a4:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800b4a8:	680b      	ldr	r3, [r1, #0]
 800b4aa:	4a8e      	ldr	r2, [pc, #568]	; (800b6e4 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d03b      	beq.n	800b528 <RemapAndLinkDMAtoUARTRx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800b4b0:	4a8d      	ldr	r2, [pc, #564]	; (800b6e8 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d043      	beq.n	800b53e <RemapAndLinkDMAtoUARTRx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800b4b6:	4a8d      	ldr	r2, [pc, #564]	; (800b6ec <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d042      	beq.n	800b542 <RemapAndLinkDMAtoUARTRx+0x3fe>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800b4bc:	4a8c      	ldr	r2, [pc, #560]	; (800b6f0 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d04b      	beq.n	800b55a <RemapAndLinkDMAtoUARTRx+0x416>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800b4c2:	4a8c      	ldr	r2, [pc, #560]	; (800b6f4 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d054      	beq.n	800b572 <RemapAndLinkDMAtoUARTRx+0x42e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800b4c8:	4a8b      	ldr	r2, [pc, #556]	; (800b6f8 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d000      	beq.n	800b4d0 <RemapAndLinkDMAtoUARTRx+0x38c>
 800b4ce:	e6b3      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800b4d0:	4a8a      	ldr	r2, [pc, #552]	; (800b6fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800b4d2:	23a8      	movs	r3, #168	; 0xa8
 800b4d4:	4d8a      	ldr	r5, [pc, #552]	; (800b700 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800b4d6:	58d4      	ldr	r4, [r2, r3]
 800b4d8:	402c      	ands	r4, r5
 800b4da:	50d4      	str	r4, [r2, r3]
 800b4dc:	24c0      	movs	r4, #192	; 0xc0
 800b4de:	58d5      	ldr	r5, [r2, r3]
 800b4e0:	0124      	lsls	r4, r4, #4
 800b4e2:	432c      	orrs	r4, r5
 800b4e4:	50d4      	str	r4, [r2, r3]
 800b4e6:	e6a7      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b4e8:	680b      	ldr	r3, [r1, #0]
 800b4ea:	4a7e      	ldr	r2, [pc, #504]	; (800b6e4 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d04b      	beq.n	800b588 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800b4f0:	4a7d      	ldr	r2, [pc, #500]	; (800b6e8 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d053      	beq.n	800b59e <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800b4f6:	4a7d      	ldr	r2, [pc, #500]	; (800b6ec <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d052      	beq.n	800b5a2 <RemapAndLinkDMAtoUARTRx+0x45e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800b4fc:	4a7c      	ldr	r2, [pc, #496]	; (800b6f0 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d05b      	beq.n	800b5ba <RemapAndLinkDMAtoUARTRx+0x476>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800b502:	4a7c      	ldr	r2, [pc, #496]	; (800b6f4 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d064      	beq.n	800b5d2 <RemapAndLinkDMAtoUARTRx+0x48e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800b508:	4a7b      	ldr	r2, [pc, #492]	; (800b6f8 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d000      	beq.n	800b510 <RemapAndLinkDMAtoUARTRx+0x3cc>
 800b50e:	e693      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800b510:	4a7a      	ldr	r2, [pc, #488]	; (800b6fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800b512:	23a8      	movs	r3, #168	; 0xa8
 800b514:	4d7a      	ldr	r5, [pc, #488]	; (800b700 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800b516:	58d4      	ldr	r4, [r2, r3]
 800b518:	402c      	ands	r4, r5
 800b51a:	50d4      	str	r4, [r2, r3]
 800b51c:	24d0      	movs	r4, #208	; 0xd0
 800b51e:	58d5      	ldr	r5, [r2, r3]
 800b520:	0124      	lsls	r4, r4, #4
 800b522:	432c      	orrs	r4, r5
 800b524:	50d4      	str	r4, [r2, r3]
 800b526:	e687      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800b528:	23a8      	movs	r3, #168	; 0xa8
 800b52a:	250f      	movs	r5, #15
 800b52c:	4a75      	ldr	r2, [pc, #468]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b52e:	58d4      	ldr	r4, [r2, r3]
 800b530:	43ac      	bics	r4, r5
 800b532:	50d4      	str	r4, [r2, r3]
 800b534:	58d4      	ldr	r4, [r2, r3]
 800b536:	3d03      	subs	r5, #3
 800b538:	432c      	orrs	r4, r5
 800b53a:	50d4      	str	r4, [r2, r3]
 800b53c:	e67c      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800b53e:	4a71      	ldr	r2, [pc, #452]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b540:	e7c7      	b.n	800b4d2 <RemapAndLinkDMAtoUARTRx+0x38e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800b542:	23a8      	movs	r3, #168	; 0xa8
 800b544:	4a6f      	ldr	r2, [pc, #444]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b546:	4d70      	ldr	r5, [pc, #448]	; (800b708 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800b548:	58d4      	ldr	r4, [r2, r3]
 800b54a:	402c      	ands	r4, r5
 800b54c:	50d4      	str	r4, [r2, r3]
 800b54e:	24c0      	movs	r4, #192	; 0xc0
 800b550:	58d5      	ldr	r5, [r2, r3]
 800b552:	0324      	lsls	r4, r4, #12
 800b554:	432c      	orrs	r4, r5
 800b556:	50d4      	str	r4, [r2, r3]
 800b558:	e66e      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b55a:	23a8      	movs	r3, #168	; 0xa8
 800b55c:	4a69      	ldr	r2, [pc, #420]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b55e:	4d6b      	ldr	r5, [pc, #428]	; (800b70c <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800b560:	58d4      	ldr	r4, [r2, r3]
 800b562:	402c      	ands	r4, r5
 800b564:	50d4      	str	r4, [r2, r3]
 800b566:	24c0      	movs	r4, #192	; 0xc0
 800b568:	58d5      	ldr	r5, [r2, r3]
 800b56a:	0424      	lsls	r4, r4, #16
 800b56c:	432c      	orrs	r4, r5
 800b56e:	50d4      	str	r4, [r2, r3]
 800b570:	e662      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b572:	23a8      	movs	r3, #168	; 0xa8
 800b574:	25f0      	movs	r5, #240	; 0xf0
 800b576:	4a61      	ldr	r2, [pc, #388]	; (800b6fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800b578:	58d4      	ldr	r4, [r2, r3]
 800b57a:	43ac      	bics	r4, r5
 800b57c:	50d4      	str	r4, [r2, r3]
 800b57e:	58d4      	ldr	r4, [r2, r3]
 800b580:	3d30      	subs	r5, #48	; 0x30
 800b582:	432c      	orrs	r4, r5
 800b584:	50d4      	str	r4, [r2, r3]
 800b586:	e657      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b588:	23a8      	movs	r3, #168	; 0xa8
 800b58a:	250f      	movs	r5, #15
 800b58c:	4a5d      	ldr	r2, [pc, #372]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b58e:	58d4      	ldr	r4, [r2, r3]
 800b590:	43ac      	bics	r4, r5
 800b592:	50d4      	str	r4, [r2, r3]
 800b594:	58d4      	ldr	r4, [r2, r3]
 800b596:	3d02      	subs	r5, #2
 800b598:	432c      	orrs	r4, r5
 800b59a:	50d4      	str	r4, [r2, r3]
 800b59c:	e64c      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b59e:	4a59      	ldr	r2, [pc, #356]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b5a0:	e7b7      	b.n	800b512 <RemapAndLinkDMAtoUARTRx+0x3ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b5a2:	23a8      	movs	r3, #168	; 0xa8
 800b5a4:	4a57      	ldr	r2, [pc, #348]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b5a6:	4d58      	ldr	r5, [pc, #352]	; (800b708 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800b5a8:	58d4      	ldr	r4, [r2, r3]
 800b5aa:	402c      	ands	r4, r5
 800b5ac:	50d4      	str	r4, [r2, r3]
 800b5ae:	24d0      	movs	r4, #208	; 0xd0
 800b5b0:	58d5      	ldr	r5, [r2, r3]
 800b5b2:	0324      	lsls	r4, r4, #12
 800b5b4:	432c      	orrs	r4, r5
 800b5b6:	50d4      	str	r4, [r2, r3]
 800b5b8:	e63e      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b5ba:	23a8      	movs	r3, #168	; 0xa8
 800b5bc:	4a51      	ldr	r2, [pc, #324]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b5be:	4d53      	ldr	r5, [pc, #332]	; (800b70c <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800b5c0:	58d4      	ldr	r4, [r2, r3]
 800b5c2:	402c      	ands	r4, r5
 800b5c4:	50d4      	str	r4, [r2, r3]
 800b5c6:	24d0      	movs	r4, #208	; 0xd0
 800b5c8:	58d5      	ldr	r5, [r2, r3]
 800b5ca:	0424      	lsls	r4, r4, #16
 800b5cc:	432c      	orrs	r4, r5
 800b5ce:	50d4      	str	r4, [r2, r3]
 800b5d0:	e632      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b5d2:	23a8      	movs	r3, #168	; 0xa8
 800b5d4:	25f0      	movs	r5, #240	; 0xf0
 800b5d6:	4a49      	ldr	r2, [pc, #292]	; (800b6fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800b5d8:	58d4      	ldr	r4, [r2, r3]
 800b5da:	43ac      	bics	r4, r5
 800b5dc:	50d4      	str	r4, [r2, r3]
 800b5de:	58d4      	ldr	r4, [r2, r3]
 800b5e0:	3d20      	subs	r5, #32
 800b5e2:	432c      	orrs	r4, r5
 800b5e4:	50d4      	str	r4, [r2, r3]
 800b5e6:	e627      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b5e8:	23a8      	movs	r3, #168	; 0xa8
 800b5ea:	250f      	movs	r5, #15
 800b5ec:	4a45      	ldr	r2, [pc, #276]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b5ee:	58d4      	ldr	r4, [r2, r3]
 800b5f0:	43ac      	bics	r4, r5
 800b5f2:	50d4      	str	r4, [r2, r3]
 800b5f4:	58d4      	ldr	r4, [r2, r3]
 800b5f6:	3d01      	subs	r5, #1
 800b5f8:	432c      	orrs	r4, r5
 800b5fa:	50d4      	str	r4, [r2, r3]
 800b5fc:	e61c      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b5fe:	4a41      	ldr	r2, [pc, #260]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b600:	e5d5      	b.n	800b1ae <RemapAndLinkDMAtoUARTRx+0x6a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b602:	23a8      	movs	r3, #168	; 0xa8
 800b604:	4a3f      	ldr	r2, [pc, #252]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b606:	4d40      	ldr	r5, [pc, #256]	; (800b708 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800b608:	58d4      	ldr	r4, [r2, r3]
 800b60a:	402c      	ands	r4, r5
 800b60c:	50d4      	str	r4, [r2, r3]
 800b60e:	24e0      	movs	r4, #224	; 0xe0
 800b610:	58d5      	ldr	r5, [r2, r3]
 800b612:	0324      	lsls	r4, r4, #12
 800b614:	432c      	orrs	r4, r5
 800b616:	50d4      	str	r4, [r2, r3]
 800b618:	e60e      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b61a:	23a8      	movs	r3, #168	; 0xa8
 800b61c:	4a39      	ldr	r2, [pc, #228]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b61e:	4d3b      	ldr	r5, [pc, #236]	; (800b70c <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800b620:	58d4      	ldr	r4, [r2, r3]
 800b622:	402c      	ands	r4, r5
 800b624:	50d4      	str	r4, [r2, r3]
 800b626:	24e0      	movs	r4, #224	; 0xe0
 800b628:	58d5      	ldr	r5, [r2, r3]
 800b62a:	0424      	lsls	r4, r4, #16
 800b62c:	432c      	orrs	r4, r5
 800b62e:	50d4      	str	r4, [r2, r3]
 800b630:	e602      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b632:	23a8      	movs	r3, #168	; 0xa8
 800b634:	25f0      	movs	r5, #240	; 0xf0
 800b636:	4a31      	ldr	r2, [pc, #196]	; (800b6fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800b638:	58d4      	ldr	r4, [r2, r3]
 800b63a:	43ac      	bics	r4, r5
 800b63c:	50d4      	str	r4, [r2, r3]
 800b63e:	58d4      	ldr	r4, [r2, r3]
 800b640:	3d10      	subs	r5, #16
 800b642:	432c      	orrs	r4, r5
 800b644:	50d4      	str	r4, [r2, r3]
 800b646:	e5f7      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800b648:	4a31      	ldr	r2, [pc, #196]	; (800b710 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d000      	beq.n	800b650 <RemapAndLinkDMAtoUARTRx+0x50c>
 800b64e:	e5f3      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
 800b650:	680b      	ldr	r3, [r1, #0]
 800b652:	4a24      	ldr	r2, [pc, #144]	; (800b6e4 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d01b      	beq.n	800b690 <RemapAndLinkDMAtoUARTRx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800b658:	4a23      	ldr	r2, [pc, #140]	; (800b6e8 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d022      	beq.n	800b6a4 <RemapAndLinkDMAtoUARTRx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800b65e:	4a23      	ldr	r2, [pc, #140]	; (800b6ec <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d021      	beq.n	800b6a8 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800b664:	4a22      	ldr	r2, [pc, #136]	; (800b6f0 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d02a      	beq.n	800b6c0 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b66a:	4a22      	ldr	r2, [pc, #136]	; (800b6f4 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d033      	beq.n	800b6d8 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800b670:	4a21      	ldr	r2, [pc, #132]	; (800b6f8 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d000      	beq.n	800b678 <RemapAndLinkDMAtoUARTRx+0x534>
 800b676:	e5df      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800b678:	4a20      	ldr	r2, [pc, #128]	; (800b6fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800b67a:	23a8      	movs	r3, #168	; 0xa8
 800b67c:	4d20      	ldr	r5, [pc, #128]	; (800b700 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800b67e:	58d4      	ldr	r4, [r2, r3]
 800b680:	402c      	ands	r4, r5
 800b682:	50d4      	str	r4, [r2, r3]
 800b684:	24f0      	movs	r4, #240	; 0xf0
 800b686:	58d5      	ldr	r5, [r2, r3]
 800b688:	0124      	lsls	r4, r4, #4
 800b68a:	432c      	orrs	r4, r5
 800b68c:	50d4      	str	r4, [r2, r3]
 800b68e:	e5d3      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b690:	23a8      	movs	r3, #168	; 0xa8
 800b692:	260f      	movs	r6, #15
 800b694:	4a1b      	ldr	r2, [pc, #108]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b696:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b698:	43b5      	bics	r5, r6
 800b69a:	50d5      	str	r5, [r2, r3]
 800b69c:	58d4      	ldr	r4, [r2, r3]
 800b69e:	4334      	orrs	r4, r6
 800b6a0:	50d4      	str	r4, [r2, r3]
 800b6a2:	e5c9      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b6a4:	4a17      	ldr	r2, [pc, #92]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b6a6:	e7e8      	b.n	800b67a <RemapAndLinkDMAtoUARTRx+0x536>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b6a8:	23a8      	movs	r3, #168	; 0xa8
 800b6aa:	4a16      	ldr	r2, [pc, #88]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b6ac:	4d16      	ldr	r5, [pc, #88]	; (800b708 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800b6ae:	58d4      	ldr	r4, [r2, r3]
 800b6b0:	402c      	ands	r4, r5
 800b6b2:	50d4      	str	r4, [r2, r3]
 800b6b4:	24f0      	movs	r4, #240	; 0xf0
 800b6b6:	58d5      	ldr	r5, [r2, r3]
 800b6b8:	0324      	lsls	r4, r4, #12
 800b6ba:	432c      	orrs	r4, r5
 800b6bc:	50d4      	str	r4, [r2, r3]
 800b6be:	e5bb      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b6c0:	23a8      	movs	r3, #168	; 0xa8
 800b6c2:	4a10      	ldr	r2, [pc, #64]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800b6c4:	4d11      	ldr	r5, [pc, #68]	; (800b70c <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800b6c6:	58d4      	ldr	r4, [r2, r3]
 800b6c8:	402c      	ands	r4, r5
 800b6ca:	50d4      	str	r4, [r2, r3]
 800b6cc:	24f0      	movs	r4, #240	; 0xf0
 800b6ce:	58d5      	ldr	r5, [r2, r3]
 800b6d0:	0424      	lsls	r4, r4, #16
 800b6d2:	432c      	orrs	r4, r5
 800b6d4:	50d4      	str	r4, [r2, r3]
 800b6d6:	e5af      	b.n	800b238 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b6d8:	23a8      	movs	r3, #168	; 0xa8
 800b6da:	4a08      	ldr	r2, [pc, #32]	; (800b6fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800b6dc:	26f0      	movs	r6, #240	; 0xf0
 800b6de:	58d5      	ldr	r5, [r2, r3]
 800b6e0:	e7da      	b.n	800b698 <RemapAndLinkDMAtoUARTRx+0x554>
 800b6e2:	46c0      	nop			; (mov r8, r8)
 800b6e4:	40020008 	.word	0x40020008
 800b6e8:	40020030 	.word	0x40020030
 800b6ec:	40020058 	.word	0x40020058
 800b6f0:	4002006c 	.word	0x4002006c
 800b6f4:	4002041c 	.word	0x4002041c
 800b6f8:	40020430 	.word	0x40020430
 800b6fc:	40020400 	.word	0x40020400
 800b700:	fffff0ff 	.word	0xfffff0ff
 800b704:	40020000 	.word	0x40020000
 800b708:	fff0ffff 	.word	0xfff0ffff
 800b70c:	ff0fffff 	.word	0xff0fffff
 800b710:	40011c00 	.word	0x40011c00

0800b714 <DMA_MSG_RX_Setup>:
{	
 800b714:	b570      	push	{r4, r5, r6, lr}
 800b716:	000d      	movs	r5, r1
 800b718:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b71a:	f7ff fd13 	bl	800b144 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b71e:	0028      	movs	r0, r5
 800b720:	2100      	movs	r1, #0
 800b722:	f7ff fc59 	bl	800afd8 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);	
 800b726:	0020      	movs	r0, r4
 800b728:	f7fe fd40 	bl	800a1ac <GetPort>
 800b72c:	1e41      	subs	r1, r0, #1
 800b72e:	4803      	ldr	r0, [pc, #12]	; (800b73c <DMA_MSG_RX_Setup+0x28>)
 800b730:	2201      	movs	r2, #1
 800b732:	1809      	adds	r1, r1, r0
 800b734:	0020      	movs	r0, r4
 800b736:	f007 fa61 	bl	8012bfc <HAL_UART_Receive_DMA>
}
 800b73a:	bd70      	pop	{r4, r5, r6, pc}
 800b73c:	20001ca4 	.word	0x20001ca4

0800b740 <SetupMessagingRxDMAs>:
{	
 800b740:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800b742:	4c14      	ldr	r4, [pc, #80]	; (800b794 <SetupMessagingRxDMAs+0x54>)
 800b744:	7863      	ldrb	r3, [r4, #1]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d01f      	beq.n	800b78a <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P2] == FREE)	
 800b74a:	78a3      	ldrb	r3, [r4, #2]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d017      	beq.n	800b780 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P3] == FREE)
 800b750:	78e3      	ldrb	r3, [r4, #3]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00f      	beq.n	800b776 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P4] == FREE)
 800b756:	7923      	ldrb	r3, [r4, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d007      	beq.n	800b76c <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P5] == FREE)
 800b75c:	7963      	ldrb	r3, [r4, #5]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d103      	bne.n	800b76a <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800b762:	490d      	ldr	r1, [pc, #52]	; (800b798 <SetupMessagingRxDMAs+0x58>)
 800b764:	480d      	ldr	r0, [pc, #52]	; (800b79c <SetupMessagingRxDMAs+0x5c>)
 800b766:	f7ff ffd5 	bl	800b714 <DMA_MSG_RX_Setup>
}
 800b76a:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800b76c:	490c      	ldr	r1, [pc, #48]	; (800b7a0 <SetupMessagingRxDMAs+0x60>)
 800b76e:	480d      	ldr	r0, [pc, #52]	; (800b7a4 <SetupMessagingRxDMAs+0x64>)
 800b770:	f7ff ffd0 	bl	800b714 <DMA_MSG_RX_Setup>
 800b774:	e7f2      	b.n	800b75c <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800b776:	490c      	ldr	r1, [pc, #48]	; (800b7a8 <SetupMessagingRxDMAs+0x68>)
 800b778:	480c      	ldr	r0, [pc, #48]	; (800b7ac <SetupMessagingRxDMAs+0x6c>)
 800b77a:	f7ff ffcb 	bl	800b714 <DMA_MSG_RX_Setup>
 800b77e:	e7ea      	b.n	800b756 <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800b780:	490b      	ldr	r1, [pc, #44]	; (800b7b0 <SetupMessagingRxDMAs+0x70>)
 800b782:	480c      	ldr	r0, [pc, #48]	; (800b7b4 <SetupMessagingRxDMAs+0x74>)
 800b784:	f7ff ffc6 	bl	800b714 <DMA_MSG_RX_Setup>
 800b788:	e7e2      	b.n	800b750 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800b78a:	490b      	ldr	r1, [pc, #44]	; (800b7b8 <SetupMessagingRxDMAs+0x78>)
 800b78c:	480b      	ldr	r0, [pc, #44]	; (800b7bc <SetupMessagingRxDMAs+0x7c>)
 800b78e:	f7ff ffc1 	bl	800b714 <DMA_MSG_RX_Setup>
 800b792:	e7da      	b.n	800b74a <SetupMessagingRxDMAs+0xa>
 800b794:	20000c3c 	.word	0x20000c3c
 800b798:	20002364 	.word	0x20002364
 800b79c:	20006ac8 	.word	0x20006ac8
 800b7a0:	2000232c 	.word	0x2000232c
 800b7a4:	200069a0 	.word	0x200069a0
 800b7a8:	200022f4 	.word	0x200022f4
 800b7ac:	20006b48 	.word	0x20006b48
 800b7b0:	200022bc 	.word	0x200022bc
 800b7b4:	20006bc0 	.word	0x20006bc0
 800b7b8:	20002284 	.word	0x20002284
 800b7bc:	20006a58 	.word	0x20006a58

0800b7c0 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800b7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7c2:	46d6      	mov	lr, sl
 800b7c4:	464f      	mov	r7, r9
 800b7c6:	4646      	mov	r6, r8
 800b7c8:	b5c0      	push	{r6, r7, lr}
	hDMA = &streamDMA[port - 1];
 800b7ca:	1e47      	subs	r7, r0, #1
 800b7cc:	00fe      	lsls	r6, r7, #3
 800b7ce:	4b1c      	ldr	r3, [pc, #112]	; (800b840 <SwitchStreamDMAToMsg+0x80>)
 800b7d0:	1bf6      	subs	r6, r6, r7
 800b7d2:	00f6      	lsls	r6, r6, #3
 800b7d4:	4698      	mov	r8, r3
 800b7d6:	46b2      	mov	sl, r6
 800b7d8:	44c2      	add	sl, r8
void SwitchStreamDMAToMsg(uint8_t port) {
 800b7da:	4681      	mov	r9, r0
	HAL_DMA_Abort(hDMA);
 800b7dc:	4650      	mov	r0, sl
 800b7de:	f004 ff4f 	bl	8010680 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800b7e2:	4643      	mov	r3, r8
 800b7e4:	2400      	movs	r4, #0
 800b7e6:	58f2      	ldr	r2, [r6, r3]
	dmaStreamCount[port - 1] = 0;
 800b7e8:	4b16      	ldr	r3, [pc, #88]	; (800b844 <SwitchStreamDMAToMsg+0x84>)
 800b7ea:	00bf      	lsls	r7, r7, #2
	hDMA->Instance->CNDTR = 0;
 800b7ec:	6054      	str	r4, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800b7ee:	50fc      	str	r4, [r7, r3]
	dmaStreamTotal[port - 1] = 0;
 800b7f0:	4b15      	ldr	r3, [pc, #84]	; (800b848 <SwitchStreamDMAToMsg+0x88>)
 800b7f2:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800b7f4:	4b15      	ldr	r3, [pc, #84]	; (800b84c <SwitchStreamDMAToMsg+0x8c>)
 800b7f6:	18f5      	adds	r5, r6, r3
	hDMA->Instance = ch;
 800b7f8:	50f2      	str	r2, [r6, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b7fa:	2380      	movs	r3, #128	; 0x80
 800b7fc:	60eb      	str	r3, [r5, #12]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7fe:	3b60      	subs	r3, #96	; 0x60
 800b800:	61ab      	str	r3, [r5, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b802:	2380      	movs	r3, #128	; 0x80
 800b804:	019b      	lsls	r3, r3, #6
 800b806:	61eb      	str	r3, [r5, #28]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b808:	606c      	str	r4, [r5, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b80a:	60ac      	str	r4, [r5, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b80c:	612c      	str	r4, [r5, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b80e:	616c      	str	r4, [r5, #20]
	HAL_DMA_Init(hDMA);		
 800b810:	0028      	movs	r0, r5
 800b812:	f004 fedd 	bl	80105d0 <HAL_DMA_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800b816:	4653      	mov	r3, sl
 800b818:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b81a:	f7fe fcc7 	bl	800a1ac <GetPort>
 800b81e:	4b0c      	ldr	r3, [pc, #48]	; (800b850 <SwitchStreamDMAToMsg+0x90>)
 800b820:	541c      	strb	r4, [r3, r0]
	streamDMA[port - 1].Instance = 0;
 800b822:	4643      	mov	r3, r8
 800b824:	50f4      	str	r4, [r6, r3]
	dmaStreamDst[port - 1] = 0;
 800b826:	4b0b      	ldr	r3, [pc, #44]	; (800b854 <SwitchStreamDMAToMsg+0x94>)
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800b828:	4648      	mov	r0, r9
	dmaStreamDst[port - 1] = 0;
 800b82a:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800b82c:	f002 fa32 	bl	800dc94 <GetUart>
 800b830:	0029      	movs	r1, r5
 800b832:	f7ff ff6f 	bl	800b714 <DMA_MSG_RX_Setup>
}
 800b836:	bc1c      	pop	{r2, r3, r4}
 800b838:	4690      	mov	r8, r2
 800b83a:	4699      	mov	r9, r3
 800b83c:	46a2      	mov	sl, r4
 800b83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b840:	2000208c 	.word	0x2000208c
 800b844:	20001874 	.word	0x20001874
 800b848:	20001888 	.word	0x20001888
 800b84c:	20002284 	.word	0x20002284
 800b850:	20000c3c 	.word	0x20000c3c
 800b854:	20001860 	.word	0x20001860

0800b858 <DMA_STREAM_Setup>:
{	
 800b858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85a:	0016      	movs	r6, r2
 800b85c:	0005      	movs	r5, r0
 800b85e:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800b860:	f7fe fca4 	bl	800a1ac <GetPort>
	hDMA = &streamDMA[port-1];
 800b864:	3801      	subs	r0, #1
 800b866:	00c4      	lsls	r4, r0, #3
 800b868:	1a24      	subs	r4, r4, r0
 800b86a:	480a      	ldr	r0, [pc, #40]	; (800b894 <DMA_STREAM_Setup+0x3c>)
 800b86c:	00e4      	lsls	r4, r4, #3
 800b86e:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b870:	0021      	movs	r1, r4
 800b872:	0028      	movs	r0, r5
 800b874:	f7ff fc66 	bl	800b144 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b878:	0020      	movs	r0, r4
 800b87a:	2101      	movs	r1, #1
 800b87c:	f7ff fbac 	bl	800afd8 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b880:	2369      	movs	r3, #105	; 0x69
 800b882:	2201      	movs	r2, #1
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b884:	6839      	ldr	r1, [r7, #0]
	huartSrc->State = HAL_UART_STATE_READY;
 800b886:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b888:	0028      	movs	r0, r5
 800b88a:	0032      	movs	r2, r6
 800b88c:	3128      	adds	r1, #40	; 0x28
 800b88e:	f007 f9b5 	bl	8012bfc <HAL_UART_Receive_DMA>
}
 800b892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b894:	2000208c 	.word	0x2000208c

0800b898 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b898:	2310      	movs	r3, #16
 800b89a:	4807      	ldr	r0, [pc, #28]	; (800b8b8 <CRC_Init+0x20>)
{
 800b89c:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b89e:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800b8a0:	4b06      	ldr	r3, [pc, #24]	; (800b8bc <CRC_Init+0x24>)
 800b8a2:	6003      	str	r3, [r0, #0]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	8083      	strh	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800b8a8:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800b8aa:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800b8ac:	3303      	adds	r3, #3
 800b8ae:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800b8b0:	f004 fdbc 	bl	801042c <HAL_CRC_Init>
}
 800b8b4:	bd10      	pop	{r4, pc}
 800b8b6:	46c0      	nop			; (mov r8, r8)
 800b8b8:	20006c34 	.word	0x20006c34
 800b8bc:	40023000 	.word	0x40023000

0800b8c0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800b8c0:	2340      	movs	r3, #64	; 0x40
 800b8c2:	4a05      	ldr	r2, [pc, #20]	; (800b8d8 <HAL_CRC_MspInit+0x18>)
{
 800b8c4:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800b8c6:	6951      	ldr	r1, [r2, #20]
 800b8c8:	4319      	orrs	r1, r3
 800b8ca:	6151      	str	r1, [r2, #20]
 800b8cc:	6952      	ldr	r2, [r2, #20]
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	9301      	str	r3, [sp, #4]
 800b8d2:	9b01      	ldr	r3, [sp, #4]
}
 800b8d4:	b002      	add	sp, #8
 800b8d6:	4770      	bx	lr
 800b8d8:	40021000 	.word	0x40021000

0800b8dc <CalculateCRC8>:
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800b8dc:	2300      	movs	r3, #0
{
 800b8de:	b570      	push	{r4, r5, r6, lr}
 800b8e0:	b082      	sub	sp, #8
 800b8e2:	0005      	movs	r5, r0
 800b8e4:	000c      	movs	r4, r1
  uint8_t temp_buffer[4] = {0};
 800b8e6:	9301      	str	r3, [sp, #4]

	return pTemp;
  }
  
else
	return 0;
 800b8e8:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800b8ea:	2d00      	cmp	r5, #0
 800b8ec:	d019      	beq.n	800b922 <CalculateCRC8+0x46>
 800b8ee:	2900      	cmp	r1, #0
 800b8f0:	d017      	beq.n	800b922 <CalculateCRC8+0x46>
	if(size < 4)
 800b8f2:	2903      	cmp	r1, #3
 800b8f4:	d817      	bhi.n	800b926 <CalculateCRC8+0x4a>
			temp_buffer[i] = pBuffer[temp_index++];
 800b8f6:	466a      	mov	r2, sp
 800b8f8:	782b      	ldrb	r3, [r5, #0]
 800b8fa:	7113      	strb	r3, [r2, #4]
			if(--size == 0) break;
 800b8fc:	2901      	cmp	r1, #1
 800b8fe:	d00a      	beq.n	800b916 <CalculateCRC8+0x3a>
		for(int i=0; i<4; i++)
 800b900:	2300      	movs	r3, #0
 800b902:	3c02      	subs	r4, #2
 800b904:	b2a4      	uxth	r4, r4
 800b906:	3401      	adds	r4, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800b908:	4669      	mov	r1, sp
		for(int i=0; i<4; i++)
 800b90a:	3301      	adds	r3, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800b90c:	5cea      	ldrb	r2, [r5, r3]
 800b90e:	3104      	adds	r1, #4
 800b910:	54ca      	strb	r2, [r1, r3]
			if(--size == 0) break;
 800b912:	429c      	cmp	r4, r3
 800b914:	d1f8      	bne.n	800b908 <CalculateCRC8+0x2c>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b916:	2201      	movs	r2, #1
 800b918:	a901      	add	r1, sp, #4
 800b91a:	4814      	ldr	r0, [pc, #80]	; (800b96c <CalculateCRC8+0x90>)
 800b91c:	f004 fde4 	bl	80104e8 <HAL_CRC_Calculate>
 800b920:	b2c0      	uxtb	r0, r0
}
 800b922:	b002      	add	sp, #8
 800b924:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800b926:	4e11      	ldr	r6, [pc, #68]	; (800b96c <CalculateCRC8+0x90>)
 800b928:	088a      	lsrs	r2, r1, #2
 800b92a:	0030      	movs	r0, r6
 800b92c:	0029      	movs	r1, r5
 800b92e:	f004 fddb 	bl	80104e8 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800b932:	2203      	movs	r2, #3
 800b934:	0013      	movs	r3, r2
 800b936:	4023      	ands	r3, r4
 800b938:	d015      	beq.n	800b966 <CalculateCRC8+0x8a>
 800b93a:	3b01      	subs	r3, #1
 800b93c:	b299      	uxth	r1, r3
			for(int i=0; i<4; i++)
 800b93e:	2300      	movs	r3, #0
			temp_index = size - (size%4);
 800b940:	4394      	bics	r4, r2
 800b942:	b2e4      	uxtb	r4, r4
				temp_buffer[i] = pBuffer[temp_index++];
 800b944:	1c62      	adds	r2, r4, #1
 800b946:	5d28      	ldrb	r0, [r5, r4]
 800b948:	466c      	mov	r4, sp
 800b94a:	3404      	adds	r4, #4
 800b94c:	b2d2      	uxtb	r2, r2
 800b94e:	54e0      	strb	r0, [r4, r3]
				if(--size == 0) break;
 800b950:	4299      	cmp	r1, r3
 800b952:	d003      	beq.n	800b95c <CalculateCRC8+0x80>
			for(int i=0; i<4; i++)
 800b954:	3301      	adds	r3, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b956:	0014      	movs	r4, r2
			for(int i=0; i<4; i++)
 800b958:	2b04      	cmp	r3, #4
 800b95a:	d1f3      	bne.n	800b944 <CalculateCRC8+0x68>
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b95c:	2201      	movs	r2, #1
 800b95e:	a901      	add	r1, sp, #4
 800b960:	0030      	movs	r0, r6
 800b962:	f004 fd97 	bl	8010494 <HAL_CRC_Accumulate>
 800b966:	b2c0      	uxtb	r0, r0
 800b968:	e7db      	b.n	800b922 <CalculateCRC8+0x46>
 800b96a:	46c0      	nop			; (mov r8, r8)
 800b96c:	20006c34 	.word	0x20006c34

0800b970 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b972:	000d      	movs	r5, r1
 800b974:	0006      	movs	r6, r0
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b976:	4c25      	ldr	r4, [pc, #148]	; (800ba0c <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800b978:	f005 fb4a 	bl	8011010 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b97c:	4924      	ldr	r1, [pc, #144]	; (800ba10 <EE_VerifyPageFullWriteVariable+0xa0>)
 800b97e:	880a      	ldrh	r2, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b980:	8823      	ldrh	r3, [r4, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b982:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b984:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800b986:	2b00      	cmp	r3, #0
 800b988:	d105      	bne.n	800b996 <EE_VerifyPageFullWriteVariable+0x26>
				if(PageStatusA == RECEIVE_DATA){
 800b98a:	4b22      	ldr	r3, [pc, #136]	; (800ba14 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d007      	beq.n	800b9a0 <EE_VerifyPageFullWriteVariable+0x30>
 800b990:	4a21      	ldr	r2, [pc, #132]	; (800ba18 <EE_VerifyPageFullWriteVariable+0xa8>)
 800b992:	0023      	movs	r3, r4
 800b994:	e007      	b.n	800b9a6 <EE_VerifyPageFullWriteVariable+0x36>
			else if(PageStatusA == VALID_PAGE){
 800b996:	2a00      	cmp	r2, #0
 800b998:	d122      	bne.n	800b9e0 <EE_VerifyPageFullWriteVariable+0x70>
				if(PageStatusB == RECEIVE_DATA){
 800b99a:	4a1e      	ldr	r2, [pc, #120]	; (800ba14 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d0f7      	beq.n	800b990 <EE_VerifyPageFullWriteVariable+0x20>
 800b9a0:	000c      	movs	r4, r1
 800b9a2:	000b      	movs	r3, r1
 800b9a4:	4a1d      	ldr	r2, [pc, #116]	; (800ba1c <EE_VerifyPageFullWriteVariable+0xac>)
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	d103      	bne.n	800b9b4 <EE_VerifyPageFullWriteVariable+0x44>
 800b9ac:	e009      	b.n	800b9c2 <EE_VerifyPageFullWriteVariable+0x52>
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	d006      	beq.n	800b9c2 <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800b9b4:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800b9b6:	42a2      	cmp	r2, r4
 800b9b8:	d8f9      	bhi.n	800b9ae <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 800b9ba:	f005 fb3b 	bl	8011034 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800b9be:	2080      	movs	r0, #128	; 0x80
}
 800b9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800b9c2:	002a      	movs	r2, r5
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	0021      	movs	r1, r4
 800b9c8:	2001      	movs	r0, #1
 800b9ca:	f005 fb81 	bl	80110d0 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9ce:	4814      	ldr	r0, [pc, #80]	; (800ba20 <EE_VerifyPageFullWriteVariable+0xb0>)
 800b9d0:	f005 fb3a 	bl	8011048 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d005      	beq.n	800b9e4 <EE_VerifyPageFullWriteVariable+0x74>
			return pFlash.ErrorCode;
 800b9d8:	4b12      	ldr	r3, [pc, #72]	; (800ba24 <EE_VerifyPageFullWriteVariable+0xb4>)
 800b9da:	69d8      	ldr	r0, [r3, #28]
 800b9dc:	b280      	uxth	r0, r0
 800b9de:	e7ef      	b.n	800b9c0 <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 800b9e0:	20ab      	movs	r0, #171	; 0xab
 800b9e2:	e7ed      	b.n	800b9c0 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b9e4:	2701      	movs	r7, #1
 800b9e6:	4d10      	ldr	r5, [pc, #64]	; (800ba28 <EE_VerifyPageFullWriteVariable+0xb8>)
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b9e8:	1ca1      	adds	r1, r4, #2
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b9ea:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b9ec:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b9ee:	43bb      	bics	r3, r7
 800b9f0:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f005 fb6b 	bl	80110d0 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9fa:	4809      	ldr	r0, [pc, #36]	; (800ba20 <EE_VerifyPageFullWriteVariable+0xb0>)
 800b9fc:	f005 fb24 	bl	8011048 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d1e9      	bne.n	800b9d8 <EE_VerifyPageFullWriteVariable+0x68>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ba04:	692b      	ldr	r3, [r5, #16]
 800ba06:	43bb      	bics	r3, r7
 800ba08:	612b      	str	r3, [r5, #16]
 800ba0a:	e7e5      	b.n	800b9d8 <EE_VerifyPageFullWriteVariable+0x68>
 800ba0c:	0801f000 	.word	0x0801f000
 800ba10:	0801e000 	.word	0x0801e000
 800ba14:	0000eeee 	.word	0x0000eeee
 800ba18:	0801fffe 	.word	0x0801fffe
 800ba1c:	0801effe 	.word	0x0801effe
 800ba20:	0000c350 	.word	0x0000c350
 800ba24:	20006db0 	.word	0x20006db0
 800ba28:	40022000 	.word	0x40022000

0800ba2c <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ba2c:	4b11      	ldr	r3, [pc, #68]	; (800ba74 <EE_ReadVariable+0x48>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800ba2e:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ba30:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ba32:	4b11      	ldr	r3, [pc, #68]	; (800ba78 <EE_ReadVariable+0x4c>)
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800ba38:	2a00      	cmp	r2, #0
 800ba3a:	d005      	beq.n	800ba48 <EE_ReadVariable+0x1c>
			else if(PageStatusB == VALID_PAGE){
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d117      	bne.n	800ba70 <EE_ReadVariable+0x44>
 800ba40:	4b0e      	ldr	r3, [pc, #56]	; (800ba7c <EE_ReadVariable+0x50>)
 800ba42:	4c0f      	ldr	r4, [pc, #60]	; (800ba80 <EE_ReadVariable+0x54>)
 800ba44:	001a      	movs	r2, r3
 800ba46:	e002      	b.n	800ba4e <EE_ReadVariable+0x22>
			if(PageStatusA == VALID_PAGE){
 800ba48:	4b0e      	ldr	r3, [pc, #56]	; (800ba84 <EE_ReadVariable+0x58>)
 800ba4a:	4c0f      	ldr	r4, [pc, #60]	; (800ba88 <EE_ReadVariable+0x5c>)
 800ba4c:	001a      	movs	r2, r3
		AddressValue =(*(__IO uint16_t* )Address);
 800ba4e:	8812      	ldrh	r2, [r2, #0]
		if(AddressValue == VirtAddress){
 800ba50:	4290      	cmp	r0, r2
 800ba52:	d103      	bne.n	800ba5c <EE_ReadVariable+0x30>
 800ba54:	e007      	b.n	800ba66 <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 800ba56:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 800ba58:	4282      	cmp	r2, r0
 800ba5a:	d004      	beq.n	800ba66 <EE_ReadVariable+0x3a>
			Address =Address - 4;
 800ba5c:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800ba5e:	42a3      	cmp	r3, r4
 800ba60:	d8f9      	bhi.n	800ba56 <EE_ReadVariable+0x2a>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800ba62:	2001      	movs	r0, #1
}
 800ba64:	bd10      	pop	{r4, pc}
			*Data =(*(__IO uint16_t* )(Address - 2));
 800ba66:	3b02      	subs	r3, #2
 800ba68:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 800ba6a:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 800ba6c:	800b      	strh	r3, [r1, #0]
			break;
 800ba6e:	e7f9      	b.n	800ba64 <EE_ReadVariable+0x38>
		return NO_VALID_PAGE;
 800ba70:	20ab      	movs	r0, #171	; 0xab
 800ba72:	e7f7      	b.n	800ba64 <EE_ReadVariable+0x38>
 800ba74:	0801e000 	.word	0x0801e000
 800ba78:	0801f000 	.word	0x0801f000
 800ba7c:	0801fffe 	.word	0x0801fffe
 800ba80:	0801f002 	.word	0x0801f002
 800ba84:	0801effe 	.word	0x0801effe
 800ba88:	0801e002 	.word	0x0801e002

0800ba8c <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800ba8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba8e:	46d6      	mov	lr, sl
 800ba90:	4646      	mov	r6, r8
 800ba92:	464f      	mov	r7, r9
 800ba94:	000c      	movs	r4, r1
 800ba96:	b5c0      	push	{r6, r7, lr}
 800ba98:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 800ba9a:	f005 fab9 	bl	8011010 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800ba9e:	0021      	movs	r1, r4
 800baa0:	0030      	movs	r0, r6
 800baa2:	f7ff ff65 	bl	800b970 <EE_VerifyPageFullWriteVariable>
 800baa6:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 800baa8:	2880      	cmp	r0, #128	; 0x80
 800baaa:	d007      	beq.n	800babc <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800baac:	f005 fac2 	bl	8011034 <HAL_FLASH_Lock>
}
 800bab0:	0028      	movs	r0, r5
 800bab2:	bc1c      	pop	{r2, r3, r4}
 800bab4:	4690      	mov	r8, r2
 800bab6:	4699      	mov	r9, r3
 800bab8:	46a2      	mov	sl, r4
 800baba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800babc:	f005 faa8 	bl	8011010 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bac0:	4935      	ldr	r1, [pc, #212]	; (800bb98 <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bac2:	4a36      	ldr	r2, [pc, #216]	; (800bb9c <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bac4:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bac6:	8813      	ldrh	r3, [r2, #0]
 800bac8:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800baca:	2800      	cmp	r0, #0
 800bacc:	d013      	beq.n	800baf6 <EE_WriteVariable+0x6a>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800bace:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1eb      	bne.n	800baac <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800bad4:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800bad6:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800bad8:	4a31      	ldr	r2, [pc, #196]	; (800bba0 <EE_WriteVariable+0x114>)
 800bada:	2300      	movs	r3, #0
 800badc:	4641      	mov	r1, r8
 800bade:	2001      	movs	r0, #1
 800bae0:	f005 faf6 	bl	80110d0 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bae4:	482f      	ldr	r0, [pc, #188]	; (800bba4 <EE_WriteVariable+0x118>)
 800bae6:	f005 faaf 	bl	8011048 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800baea:	2800      	cmp	r0, #0
 800baec:	d006      	beq.n	800bafc <EE_WriteVariable+0x70>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
		return pFlash.ErrorCode;
 800baee:	4b2e      	ldr	r3, [pc, #184]	; (800bba8 <EE_WriteVariable+0x11c>)
 800baf0:	69dd      	ldr	r5, [r3, #28]
 800baf2:	b2ad      	uxth	r5, r5
 800baf4:	e7da      	b.n	800baac <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800baf6:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800baf8:	4690      	mov	r8, r2
 800bafa:	e7ed      	b.n	800bad8 <EE_WriteVariable+0x4c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bafc:	2101      	movs	r1, #1
 800bafe:	4a2b      	ldr	r2, [pc, #172]	; (800bbac <EE_WriteVariable+0x120>)
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800bb00:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bb02:	6913      	ldr	r3, [r2, #16]
 800bb04:	438b      	bics	r3, r1
 800bb06:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800bb08:	0021      	movs	r1, r4
 800bb0a:	f7ff ff31 	bl	800b970 <EE_VerifyPageFullWriteVariable>
 800bb0e:	1e05      	subs	r5, r0, #0
	if(EepromStatus != HAL_OK){
 800bb10:	d1cc      	bne.n	800baac <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bb12:	4b27      	ldr	r3, [pc, #156]	; (800bbb0 <EE_WriteVariable+0x124>)
 800bb14:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bb16:	4f27      	ldr	r7, [pc, #156]	; (800bbb4 <EE_WriteVariable+0x128>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bb18:	469a      	mov	sl, r3
 800bb1a:	e003      	b.n	800bb24 <EE_WriteVariable+0x98>
 800bb1c:	3401      	adds	r4, #1
 800bb1e:	b2a4      	uxth	r4, r4
 800bb20:	4554      	cmp	r4, sl
 800bb22:	d00f      	beq.n	800bb44 <EE_WriteVariable+0xb8>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800bb24:	42a6      	cmp	r6, r4
 800bb26:	d0f9      	beq.n	800bb1c <EE_WriteVariable+0x90>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bb28:	0039      	movs	r1, r7
 800bb2a:	0020      	movs	r0, r4
 800bb2c:	f7ff ff7e 	bl	800ba2c <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800bb30:	2801      	cmp	r0, #1
 800bb32:	d0f3      	beq.n	800bb1c <EE_WriteVariable+0x90>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bb34:	8839      	ldrh	r1, [r7, #0]
 800bb36:	0020      	movs	r0, r4
 800bb38:	f7ff ff1a 	bl	800b970 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d0ed      	beq.n	800bb1c <EE_WriteVariable+0x90>
 800bb40:	0005      	movs	r5, r0
 800bb42:	e7b3      	b.n	800baac <EE_WriteVariable+0x20>
	FLASH_PageErase(OldPageAddress);
 800bb44:	4648      	mov	r0, r9
 800bb46:	f005 fb93 	bl	8011270 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb4a:	4816      	ldr	r0, [pc, #88]	; (800bba4 <EE_WriteVariable+0x118>)
 800bb4c:	f005 fa7c 	bl	8011048 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d1cc      	bne.n	800baee <EE_WriteVariable+0x62>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800bb54:	2080      	movs	r0, #128	; 0x80
 800bb56:	0100      	lsls	r0, r0, #4
 800bb58:	4448      	add	r0, r9
 800bb5a:	f005 fb89 	bl	8011270 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb5e:	4811      	ldr	r0, [pc, #68]	; (800bba4 <EE_WriteVariable+0x118>)
 800bb60:	f005 fa72 	bl	8011048 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d1c2      	bne.n	800baee <EE_WriteVariable+0x62>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bb68:	2202      	movs	r2, #2
 800bb6a:	4c10      	ldr	r4, [pc, #64]	; (800bbac <EE_WriteVariable+0x120>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800bb6c:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bb6e:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800bb70:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bb72:	4393      	bics	r3, r2
 800bb74:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800bb76:	2200      	movs	r2, #0
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f005 faa9 	bl	80110d0 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb7e:	4809      	ldr	r0, [pc, #36]	; (800bba4 <EE_WriteVariable+0x118>)
 800bb80:	f005 fa62 	bl	8011048 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d1b2      	bne.n	800baee <EE_WriteVariable+0x62>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bb88:	2201      	movs	r2, #1
 800bb8a:	6923      	ldr	r3, [r4, #16]
 800bb8c:	4393      	bics	r3, r2
 800bb8e:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 800bb90:	f005 fa50 	bl	8011034 <HAL_FLASH_Lock>
 800bb94:	e78a      	b.n	800baac <EE_WriteVariable+0x20>
 800bb96:	46c0      	nop			; (mov r8, r8)
 800bb98:	0801e000 	.word	0x0801e000
 800bb9c:	0801f000 	.word	0x0801f000
 800bba0:	0000eeee 	.word	0x0000eeee
 800bba4:	0000c350 	.word	0x0000c350
 800bba8:	20006db0 	.word	0x20006db0
 800bbac:	40022000 	.word	0x40022000
 800bbb0:	00000401 	.word	0x00000401
 800bbb4:	200023d4 	.word	0x200023d4

0800bbb8 <EE_Format>:
uint16_t EE_Format(void){
 800bbb8:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800bbba:	f005 fa29 	bl	8011010 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bbbe:	481f      	ldr	r0, [pc, #124]	; (800bc3c <EE_Format+0x84>)
 800bbc0:	f005 fb56 	bl	8011270 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bbc4:	481e      	ldr	r0, [pc, #120]	; (800bc40 <EE_Format+0x88>)
 800bbc6:	f005 fa3f 	bl	8011048 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d003      	beq.n	800bbd6 <EE_Format+0x1e>
			return pFlash.ErrorCode;
 800bbce:	4b1d      	ldr	r3, [pc, #116]	; (800bc44 <EE_Format+0x8c>)
 800bbd0:	69d8      	ldr	r0, [r3, #28]
 800bbd2:	b280      	uxth	r0, r0
}
 800bbd4:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bbd6:	481c      	ldr	r0, [pc, #112]	; (800bc48 <EE_Format+0x90>)
 800bbd8:	f005 fb4a 	bl	8011270 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bbdc:	4818      	ldr	r0, [pc, #96]	; (800bc40 <EE_Format+0x88>)
 800bbde:	f005 fa33 	bl	8011048 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d1f3      	bne.n	800bbce <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	4c18      	ldr	r4, [pc, #96]	; (800bc4c <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bbea:	4914      	ldr	r1, [pc, #80]	; (800bc3c <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bbec:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bbee:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bbf0:	4393      	bics	r3, r2
 800bbf2:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	f005 fa6a 	bl	80110d0 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bbfc:	4810      	ldr	r0, [pc, #64]	; (800bc40 <EE_Format+0x88>)
 800bbfe:	f005 fa23 	bl	8011048 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d1e3      	bne.n	800bbce <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bc06:	2501      	movs	r5, #1
 800bc08:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bc0a:	4811      	ldr	r0, [pc, #68]	; (800bc50 <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bc0c:	43ab      	bics	r3, r5
 800bc0e:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bc10:	f005 fb2e 	bl	8011270 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc14:	480a      	ldr	r0, [pc, #40]	; (800bc40 <EE_Format+0x88>)
 800bc16:	f005 fa17 	bl	8011048 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	d1d7      	bne.n	800bbce <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bc1e:	480d      	ldr	r0, [pc, #52]	; (800bc54 <EE_Format+0x9c>)
 800bc20:	f005 fb26 	bl	8011270 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc24:	4806      	ldr	r0, [pc, #24]	; (800bc40 <EE_Format+0x88>)
 800bc26:	f005 fa0f 	bl	8011048 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d1cf      	bne.n	800bbce <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	43ab      	bics	r3, r5
 800bc32:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 800bc34:	f005 f9fe 	bl	8011034 <HAL_FLASH_Lock>
	return FlashStatus;
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e7cb      	b.n	800bbd4 <EE_Format+0x1c>
 800bc3c:	0801e000 	.word	0x0801e000
 800bc40:	0000c350 	.word	0x0000c350
 800bc44:	20006db0 	.word	0x20006db0
 800bc48:	0801e800 	.word	0x0801e800
 800bc4c:	40022000 	.word	0x40022000
 800bc50:	0801f000 	.word	0x0801f000
 800bc54:	0801f800 	.word	0x0801f800

0800bc58 <EE_Init>:
uint16_t EE_Init(void){
 800bc58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc5a:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bc5c:	4c9d      	ldr	r4, [pc, #628]	; (800bed4 <EE_Init+0x27c>)
uint16_t EE_Init(void){
 800bc5e:	b500      	push	{lr}
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bc60:	4d9d      	ldr	r5, [pc, #628]	; (800bed8 <EE_Init+0x280>)
	HAL_FLASH_Unlock();
 800bc62:	f005 f9d5 	bl	8011010 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bc66:	8823      	ldrh	r3, [r4, #0]
	switch(PageStatusA){
 800bc68:	499c      	ldr	r1, [pc, #624]	; (800bedc <EE_Init+0x284>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bc6a:	882a      	ldrh	r2, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bc6c:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bc6e:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800bc70:	428b      	cmp	r3, r1
 800bc72:	d100      	bne.n	800bc76 <EE_Init+0x1e>
 800bc74:	e06f      	b.n	800bd56 <EE_Init+0xfe>
 800bc76:	489a      	ldr	r0, [pc, #616]	; (800bee0 <EE_Init+0x288>)
 800bc78:	4283      	cmp	r3, r0
 800bc7a:	d05c      	beq.n	800bd36 <EE_Init+0xde>
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00e      	beq.n	800bc9e <EE_Init+0x46>
			FlashStatus =EE_Format();
 800bc80:	f7ff ff9a 	bl	800bbb8 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc84:	4897      	ldr	r0, [pc, #604]	; (800bee4 <EE_Init+0x28c>)
 800bc86:	f005 f9df 	bl	8011048 <FLASH_WaitForLastOperation>
 800bc8a:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800bc8c:	2d00      	cmp	r5, #0
 800bc8e:	d102      	bne.n	800bc96 <EE_Init+0x3e>
	HAL_FLASH_Lock();
 800bc90:	f005 f9d0 	bl	8011034 <HAL_FLASH_Lock>
	return HAL_OK;
 800bc94:	2500      	movs	r5, #0
}
 800bc96:	0028      	movs	r0, r5
 800bc98:	bc04      	pop	{r2}
 800bc9a:	4690      	mov	r8, r2
 800bc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800bc9e:	2a00      	cmp	r2, #0
 800bca0:	d0ee      	beq.n	800bc80 <EE_Init+0x28>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800bca2:	4282      	cmp	r2, r0
 800bca4:	d100      	bne.n	800bca8 <EE_Init+0x50>
 800bca6:	e103      	b.n	800beb0 <EE_Init+0x258>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bca8:	4b8f      	ldr	r3, [pc, #572]	; (800bee8 <EE_Init+0x290>)
	int16_t x =-1;
 800bcaa:	2601      	movs	r6, #1
 800bcac:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bcae:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800bcb0:	4f8e      	ldr	r7, [pc, #568]	; (800beec <EE_Init+0x294>)
	int16_t x =-1;
 800bcb2:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800bcb4:	883b      	ldrh	r3, [r7, #0]
 800bcb6:	b2a5      	uxth	r5, r4
 800bcb8:	42ab      	cmp	r3, r5
 800bcba:	d100      	bne.n	800bcbe <EE_Init+0x66>
						x =VarIdx;
 800bcbc:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800bcbe:	42b4      	cmp	r4, r6
 800bcc0:	d010      	beq.n	800bce4 <EE_Init+0x8c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bcc2:	4641      	mov	r1, r8
 800bcc4:	0028      	movs	r0, r5
 800bcc6:	f7ff feb1 	bl	800ba2c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800bcca:	2801      	cmp	r0, #1
 800bccc:	d00a      	beq.n	800bce4 <EE_Init+0x8c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bcce:	4643      	mov	r3, r8
 800bcd0:	0028      	movs	r0, r5
 800bcd2:	8819      	ldrh	r1, [r3, #0]
 800bcd4:	f7ff fe4c 	bl	800b970 <EE_VerifyPageFullWriteVariable>
 800bcd8:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcda:	4882      	ldr	r0, [pc, #520]	; (800bee4 <EE_Init+0x28c>)
 800bcdc:	f005 f9b4 	bl	8011048 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d1d8      	bne.n	800bc96 <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bce4:	4b82      	ldr	r3, [pc, #520]	; (800bef0 <EE_Init+0x298>)
 800bce6:	3401      	adds	r4, #1
 800bce8:	429c      	cmp	r4, r3
 800bcea:	d1e3      	bne.n	800bcb4 <EE_Init+0x5c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800bcec:	2200      	movs	r2, #0
 800bcee:	2300      	movs	r3, #0
 800bcf0:	4979      	ldr	r1, [pc, #484]	; (800bed8 <EE_Init+0x280>)
 800bcf2:	2001      	movs	r0, #1
 800bcf4:	f005 f9ec 	bl	80110d0 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcf8:	487a      	ldr	r0, [pc, #488]	; (800bee4 <EE_Init+0x28c>)
 800bcfa:	f005 f9a5 	bl	8011048 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d125      	bne.n	800bd4e <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bd02:	2201      	movs	r2, #1
 800bd04:	4c7b      	ldr	r4, [pc, #492]	; (800bef4 <EE_Init+0x29c>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bd06:	4873      	ldr	r0, [pc, #460]	; (800bed4 <EE_Init+0x27c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bd08:	6923      	ldr	r3, [r4, #16]
 800bd0a:	4393      	bics	r3, r2
 800bd0c:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bd0e:	f005 faaf 	bl	8011270 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd12:	4874      	ldr	r0, [pc, #464]	; (800bee4 <EE_Init+0x28c>)
 800bd14:	f005 f998 	bl	8011048 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d118      	bne.n	800bd4e <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bd1c:	4876      	ldr	r0, [pc, #472]	; (800bef8 <EE_Init+0x2a0>)
 800bd1e:	f005 faa7 	bl	8011270 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd22:	4870      	ldr	r0, [pc, #448]	; (800bee4 <EE_Init+0x28c>)
 800bd24:	f005 f990 	bl	8011048 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d110      	bne.n	800bd4e <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bd2c:	2202      	movs	r2, #2
 800bd2e:	6923      	ldr	r3, [r4, #16]
 800bd30:	4393      	bics	r3, r2
 800bd32:	6123      	str	r3, [r4, #16]
 800bd34:	e7ac      	b.n	800bc90 <EE_Init+0x38>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800bd36:	2a00      	cmp	r2, #0
 800bd38:	d07b      	beq.n	800be32 <EE_Init+0x1da>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800bd3a:	428a      	cmp	r2, r1
 800bd3c:	d100      	bne.n	800bd40 <EE_Init+0xe8>
 800bd3e:	e08f      	b.n	800be60 <EE_Init+0x208>
				FlashStatus =EE_Format();
 800bd40:	f7ff ff3a 	bl	800bbb8 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd44:	4867      	ldr	r0, [pc, #412]	; (800bee4 <EE_Init+0x28c>)
 800bd46:	f005 f97f 	bl	8011048 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d0a0      	beq.n	800bc90 <EE_Init+0x38>
						return pFlash.ErrorCode;
 800bd4e:	4b6b      	ldr	r3, [pc, #428]	; (800befc <EE_Init+0x2a4>)
 800bd50:	69dd      	ldr	r5, [r3, #28]
 800bd52:	b2ad      	uxth	r5, r5
 800bd54:	e79f      	b.n	800bc96 <EE_Init+0x3e>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	d143      	bne.n	800bde2 <EE_Init+0x18a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bd5a:	4b63      	ldr	r3, [pc, #396]	; (800bee8 <EE_Init+0x290>)
	int16_t x =-1;
 800bd5c:	2601      	movs	r6, #1
 800bd5e:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bd60:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800bd62:	4f67      	ldr	r7, [pc, #412]	; (800bf00 <EE_Init+0x2a8>)
	int16_t x =-1;
 800bd64:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800bd66:	883b      	ldrh	r3, [r7, #0]
 800bd68:	b2a5      	uxth	r5, r4
 800bd6a:	42ab      	cmp	r3, r5
 800bd6c:	d100      	bne.n	800bd70 <EE_Init+0x118>
						x =VarIdx;
 800bd6e:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800bd70:	42b4      	cmp	r4, r6
 800bd72:	d011      	beq.n	800bd98 <EE_Init+0x140>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bd74:	4641      	mov	r1, r8
 800bd76:	0028      	movs	r0, r5
 800bd78:	f7ff fe58 	bl	800ba2c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800bd7c:	2801      	cmp	r0, #1
 800bd7e:	d00b      	beq.n	800bd98 <EE_Init+0x140>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bd80:	4643      	mov	r3, r8
 800bd82:	0028      	movs	r0, r5
 800bd84:	8819      	ldrh	r1, [r3, #0]
 800bd86:	f7ff fdf3 	bl	800b970 <EE_VerifyPageFullWriteVariable>
 800bd8a:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd8c:	4855      	ldr	r0, [pc, #340]	; (800bee4 <EE_Init+0x28c>)
 800bd8e:	f005 f95b 	bl	8011048 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d000      	beq.n	800bd98 <EE_Init+0x140>
 800bd96:	e77e      	b.n	800bc96 <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bd98:	4b55      	ldr	r3, [pc, #340]	; (800bef0 <EE_Init+0x298>)
 800bd9a:	3401      	adds	r4, #1
 800bd9c:	429c      	cmp	r4, r3
 800bd9e:	d1e2      	bne.n	800bd66 <EE_Init+0x10e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bda0:	2200      	movs	r2, #0
 800bda2:	2300      	movs	r3, #0
 800bda4:	494b      	ldr	r1, [pc, #300]	; (800bed4 <EE_Init+0x27c>)
 800bda6:	2001      	movs	r0, #1
 800bda8:	f005 f992 	bl	80110d0 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdac:	484d      	ldr	r0, [pc, #308]	; (800bee4 <EE_Init+0x28c>)
 800bdae:	f005 f94b 	bl	8011048 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d1cb      	bne.n	800bd4e <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	4c4e      	ldr	r4, [pc, #312]	; (800bef4 <EE_Init+0x29c>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bdba:	4847      	ldr	r0, [pc, #284]	; (800bed8 <EE_Init+0x280>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bdbc:	6923      	ldr	r3, [r4, #16]
 800bdbe:	4393      	bics	r3, r2
 800bdc0:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bdc2:	f005 fa55 	bl	8011270 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdc6:	4847      	ldr	r0, [pc, #284]	; (800bee4 <EE_Init+0x28c>)
 800bdc8:	f005 f93e 	bl	8011048 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d1be      	bne.n	800bd4e <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bdd0:	484c      	ldr	r0, [pc, #304]	; (800bf04 <EE_Init+0x2ac>)
 800bdd2:	f005 fa4d 	bl	8011270 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdd6:	4843      	ldr	r0, [pc, #268]	; (800bee4 <EE_Init+0x28c>)
 800bdd8:	f005 f936 	bl	8011048 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bddc:	2800      	cmp	r0, #0
 800bdde:	d0a5      	beq.n	800bd2c <EE_Init+0xd4>
 800bde0:	e7b5      	b.n	800bd4e <EE_Init+0xf6>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800bde2:	4b3f      	ldr	r3, [pc, #252]	; (800bee0 <EE_Init+0x288>)
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d1ab      	bne.n	800bd40 <EE_Init+0xe8>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bde8:	0028      	movs	r0, r5
 800bdea:	f005 fa41 	bl	8011270 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdee:	483d      	ldr	r0, [pc, #244]	; (800bee4 <EE_Init+0x28c>)
 800bdf0:	f005 f92a 	bl	8011048 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d1aa      	bne.n	800bd4e <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bdf8:	4842      	ldr	r0, [pc, #264]	; (800bf04 <EE_Init+0x2ac>)
 800bdfa:	f005 fa39 	bl	8011270 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdfe:	4839      	ldr	r0, [pc, #228]	; (800bee4 <EE_Init+0x28c>)
 800be00:	f005 f922 	bl	8011048 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800be04:	2800      	cmp	r0, #0
 800be06:	d1a2      	bne.n	800bd4e <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be08:	2202      	movs	r2, #2
 800be0a:	4d3a      	ldr	r5, [pc, #232]	; (800bef4 <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800be0c:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be0e:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800be10:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be12:	4393      	bics	r3, r2
 800be14:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800be16:	2200      	movs	r2, #0
 800be18:	2300      	movs	r3, #0
 800be1a:	f005 f959 	bl	80110d0 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be1e:	4831      	ldr	r0, [pc, #196]	; (800bee4 <EE_Init+0x28c>)
 800be20:	f005 f912 	bl	8011048 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be24:	2800      	cmp	r0, #0
 800be26:	d192      	bne.n	800bd4e <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800be28:	2201      	movs	r2, #1
 800be2a:	692b      	ldr	r3, [r5, #16]
 800be2c:	4393      	bics	r3, r2
 800be2e:	612b      	str	r3, [r5, #16]
 800be30:	e72e      	b.n	800bc90 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800be32:	0020      	movs	r0, r4
 800be34:	f005 fa1c 	bl	8011270 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be38:	482a      	ldr	r0, [pc, #168]	; (800bee4 <EE_Init+0x28c>)
 800be3a:	f005 f905 	bl	8011048 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be3e:	2800      	cmp	r0, #0
 800be40:	d185      	bne.n	800bd4e <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800be42:	482d      	ldr	r0, [pc, #180]	; (800bef8 <EE_Init+0x2a0>)
 800be44:	f005 fa14 	bl	8011270 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be48:	4826      	ldr	r0, [pc, #152]	; (800bee4 <EE_Init+0x28c>)
 800be4a:	f005 f8fd 	bl	8011048 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800be4e:	2800      	cmp	r0, #0
 800be50:	d000      	beq.n	800be54 <EE_Init+0x1fc>
 800be52:	e77c      	b.n	800bd4e <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be54:	2102      	movs	r1, #2
 800be56:	4a27      	ldr	r2, [pc, #156]	; (800bef4 <EE_Init+0x29c>)
 800be58:	6913      	ldr	r3, [r2, #16]
 800be5a:	438b      	bics	r3, r1
 800be5c:	6113      	str	r3, [r2, #16]
 800be5e:	e717      	b.n	800bc90 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800be60:	0020      	movs	r0, r4
 800be62:	f005 fa05 	bl	8011270 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be66:	481f      	ldr	r0, [pc, #124]	; (800bee4 <EE_Init+0x28c>)
 800be68:	f005 f8ee 	bl	8011048 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be6c:	2800      	cmp	r0, #0
 800be6e:	d000      	beq.n	800be72 <EE_Init+0x21a>
 800be70:	e76d      	b.n	800bd4e <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800be72:	4821      	ldr	r0, [pc, #132]	; (800bef8 <EE_Init+0x2a0>)
 800be74:	f005 f9fc 	bl	8011270 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be78:	481a      	ldr	r0, [pc, #104]	; (800bee4 <EE_Init+0x28c>)
 800be7a:	f005 f8e5 	bl	8011048 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800be7e:	2800      	cmp	r0, #0
 800be80:	d000      	beq.n	800be84 <EE_Init+0x22c>
 800be82:	e764      	b.n	800bd4e <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be84:	2202      	movs	r2, #2
 800be86:	4c1b      	ldr	r4, [pc, #108]	; (800bef4 <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800be88:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be8a:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800be8c:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be8e:	4393      	bics	r3, r2
 800be90:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800be92:	2200      	movs	r2, #0
 800be94:	2300      	movs	r3, #0
 800be96:	f005 f91b 	bl	80110d0 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be9a:	4812      	ldr	r0, [pc, #72]	; (800bee4 <EE_Init+0x28c>)
 800be9c:	f005 f8d4 	bl	8011048 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d000      	beq.n	800bea6 <EE_Init+0x24e>
 800bea4:	e753      	b.n	800bd4e <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bea6:	2201      	movs	r2, #1
 800bea8:	6923      	ldr	r3, [r4, #16]
 800beaa:	4393      	bics	r3, r2
 800beac:	6123      	str	r3, [r4, #16]
 800beae:	e6ef      	b.n	800bc90 <EE_Init+0x38>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800beb0:	0028      	movs	r0, r5
 800beb2:	f005 f9dd 	bl	8011270 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800beb6:	480b      	ldr	r0, [pc, #44]	; (800bee4 <EE_Init+0x28c>)
 800beb8:	f005 f8c6 	bl	8011048 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d000      	beq.n	800bec2 <EE_Init+0x26a>
 800bec0:	e745      	b.n	800bd4e <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bec2:	4810      	ldr	r0, [pc, #64]	; (800bf04 <EE_Init+0x2ac>)
 800bec4:	f005 f9d4 	bl	8011270 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bec8:	4806      	ldr	r0, [pc, #24]	; (800bee4 <EE_Init+0x28c>)
 800beca:	f005 f8bd 	bl	8011048 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bece:	2800      	cmp	r0, #0
 800bed0:	d0c0      	beq.n	800be54 <EE_Init+0x1fc>
 800bed2:	e73c      	b.n	800bd4e <EE_Init+0xf6>
 800bed4:	0801e000 	.word	0x0801e000
 800bed8:	0801f000 	.word	0x0801f000
 800bedc:	0000eeee 	.word	0x0000eeee
 800bee0:	0000ffff 	.word	0x0000ffff
 800bee4:	0000c350 	.word	0x0000c350
 800bee8:	200023d4 	.word	0x200023d4
 800beec:	0801f006 	.word	0x0801f006
 800bef0:	00000401 	.word	0x00000401
 800bef4:	40022000 	.word	0x40022000
 800bef8:	0801e800 	.word	0x0801e800
 800befc:	20006db0 	.word	0x20006db0
 800bf00:	0801e006 	.word	0x0801e006
 800bf04:	0801f800 	.word	0x0801f800

0800bf08 <EraseSector>:
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800bf08:	2300      	movs	r3, #0
BOS_Status EraseSector(uint32_t sector ) {
 800bf0a:	b500      	push	{lr}
 800bf0c:	b085      	sub	sp, #20
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800bf0e:	9301      	str	r3, [sp, #4]
		erase.PageAddress = sector;
 800bf10:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800bf12:	3301      	adds	r3, #1
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800bf14:	4669      	mov	r1, sp
 800bf16:	a801      	add	r0, sp, #4
		erase.NbPages =1;
 800bf18:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800bf1a:	f005 f93d 	bl	8011198 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d102      	bne.n	800bf28 <EraseSector+0x20>
 800bf22:	9b00      	ldr	r3, [sp, #0]
 800bf24:	3301      	adds	r3, #1
 800bf26:	d002      	beq.n	800bf2e <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800bf28:	2216      	movs	r2, #22
 800bf2a:	4b02      	ldr	r3, [pc, #8]	; (800bf34 <EraseSector+0x2c>)
 800bf2c:	701a      	strb	r2, [r3, #0]

	return result;
}
 800bf2e:	2000      	movs	r0, #0
 800bf30:	b005      	add	sp, #20
 800bf32:	bd00      	pop	{pc}
 800bf34:	20000c4c 	.word	0x20000c4c

0800bf38 <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800bf38:	2080      	movs	r0, #128	; 0x80
 800bf3a:	4b1f      	ldr	r3, [pc, #124]	; (800bfb8 <GPIO_Init+0x80>)
 800bf3c:	0300      	lsls	r0, r0, #12
 800bf3e:	6959      	ldr	r1, [r3, #20]
{
 800bf40:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800bf42:	4301      	orrs	r1, r0
 800bf44:	6159      	str	r1, [r3, #20]
 800bf46:	695a      	ldr	r2, [r3, #20]
{
 800bf48:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800bf4a:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800bf4c:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800bf4e:	9200      	str	r2, [sp, #0]
 800bf50:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800bf52:	6959      	ldr	r1, [r3, #20]
 800bf54:	0280      	lsls	r0, r0, #10
 800bf56:	4301      	orrs	r1, r0
 800bf58:	6159      	str	r1, [r3, #20]
 800bf5a:	695a      	ldr	r2, [r3, #20]
 800bf5c:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800bf5e:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800bf60:	9201      	str	r2, [sp, #4]
 800bf62:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800bf64:	6959      	ldr	r1, [r3, #20]
 800bf66:	0340      	lsls	r0, r0, #13
 800bf68:	4301      	orrs	r1, r0
 800bf6a:	6159      	str	r1, [r3, #20]
 800bf6c:	695a      	ldr	r2, [r3, #20]
 800bf6e:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800bf70:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800bf72:	9202      	str	r2, [sp, #8]
 800bf74:	9a02      	ldr	r2, [sp, #8]
  __GPIOB_CLK_ENABLE();
 800bf76:	6959      	ldr	r1, [r3, #20]
 800bf78:	02c0      	lsls	r0, r0, #11
 800bf7a:	4301      	orrs	r1, r0
 800bf7c:	6159      	str	r1, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bf7e:	2180      	movs	r1, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800bf80:	695a      	ldr	r2, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bf82:	03c9      	lsls	r1, r1, #15
  __GPIOB_CLK_ENABLE();
 800bf84:	4002      	ands	r2, r0
 800bf86:	9203      	str	r2, [sp, #12]
 800bf88:	9a03      	ldr	r2, [sp, #12]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bf8a:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800bf8c:	2090      	movs	r0, #144	; 0x90
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	615a      	str	r2, [r3, #20]
 800bf92:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800bf94:	05c0      	lsls	r0, r0, #23
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bf96:	400b      	ands	r3, r1
 800bf98:	9304      	str	r3, [sp, #16]
 800bf9a:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800bf9c:	2380      	movs	r3, #128	; 0x80
 800bf9e:	011b      	lsls	r3, r3, #4
 800bfa0:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfa6:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800bfa8:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfaa:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bfac:	3303      	adds	r3, #3
 800bfae:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800bfb0:	f005 f970 	bl	8011294 <HAL_GPIO_Init>
}
 800bfb4:	b00b      	add	sp, #44	; 0x2c
 800bfb6:	bd00      	pop	{pc}
 800bfb8:	40021000 	.word	0x40021000

0800bfbc <Switch_Init>:
*/
void Switch_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _Switch_PIN;
 800bfbc:	2301      	movs	r3, #1
{
 800bfbe:	b500      	push	{lr}
 800bfc0:	b087      	sub	sp, #28
	GPIO_InitStruct.Pin = _Switch_PIN;
 800bfc2:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bfc4:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfc6:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800bfc8:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfca:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800bfcc:	4803      	ldr	r0, [pc, #12]	; (800bfdc <Switch_Init+0x20>)
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bfce:	3303      	adds	r3, #3
 800bfd0:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800bfd2:	f005 f95f 	bl	8011294 <HAL_GPIO_Init>
}
 800bfd6:	b007      	add	sp, #28
 800bfd8:	bd00      	pop	{pc}
 800bfda:	46c0      	nop			; (mov r8, r8)
 800bfdc:	48000400 	.word	0x48000400

0800bfe0 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	0015      	movs	r5, r2
 800bfe4:	001c      	movs	r4, r3
 800bfe6:	000e      	movs	r6, r1
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800bfe8:	f001 fe54 	bl	800dc94 <GetUart>
	
	if (huart == &huart1) 
 800bfec:	4a25      	ldr	r2, [pc, #148]	; (800c084 <GetPortGPIOs+0xa4>)
	UART_HandleTypeDef* huart = GetUart(port);
 800bfee:	0003      	movs	r3, r0
	if (huart == &huart1) 
 800bff0:	4290      	cmp	r0, r2
 800bff2:	d00d      	beq.n	800c010 <GetPortGPIOs+0x30>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800bff4:	4a24      	ldr	r2, [pc, #144]	; (800c088 <GetPortGPIOs+0xa8>)
 800bff6:	4290      	cmp	r0, r2
 800bff8:	d02e      	beq.n	800c058 <GetPortGPIOs+0x78>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800bffa:	4a24      	ldr	r2, [pc, #144]	; (800c08c <GetPortGPIOs+0xac>)
 800bffc:	4290      	cmp	r0, r2
 800bffe:	d014      	beq.n	800c02a <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800c000:	4a23      	ldr	r2, [pc, #140]	; (800c090 <GetPortGPIOs+0xb0>)
 800c002:	4290      	cmp	r0, r2
 800c004:	d033      	beq.n	800c06e <GetPortGPIOs+0x8e>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800c006:	4a23      	ldr	r2, [pc, #140]	; (800c094 <GetPortGPIOs+0xb4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c008:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d019      	beq.n	800c042 <GetPortGPIOs+0x62>
	
	return result;	
}
 800c00e:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c010:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800c012:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c014:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800c016:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c018:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800c01a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800c01c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800c01e:	2380      	movs	r3, #128	; 0x80
 800c020:	9a04      	ldr	r2, [sp, #16]
 800c022:	00db      	lsls	r3, r3, #3
 800c024:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c026:	2000      	movs	r0, #0
 800c028:	e7f1      	b.n	800c00e <GetPortGPIOs+0x2e>
		*TX_Pin = USART3_TX_PIN;
 800c02a:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c02c:	4b1a      	ldr	r3, [pc, #104]	; (800c098 <GetPortGPIOs+0xb8>)
		*TX_Pin = USART3_TX_PIN;
 800c02e:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c030:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800c032:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800c034:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800c036:	2380      	movs	r3, #128	; 0x80
 800c038:	9a04      	ldr	r2, [sp, #16]
 800c03a:	011b      	lsls	r3, r3, #4
 800c03c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c03e:	2000      	movs	r0, #0
 800c040:	e7e5      	b.n	800c00e <GetPortGPIOs+0x2e>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c042:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800c044:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c046:	05db      	lsls	r3, r3, #23
 800c048:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800c04a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800c04c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800c04e:	2320      	movs	r3, #32
 800c050:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800c052:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800c054:	8013      	strh	r3, [r2, #0]
 800c056:	e7da      	b.n	800c00e <GetPortGPIOs+0x2e>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c058:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800c05a:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c05c:	05db      	lsls	r3, r3, #23
 800c05e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800c060:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800c062:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800c064:	2308      	movs	r3, #8
 800c066:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800c068:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800c06a:	8013      	strh	r3, [r2, #0]
 800c06c:	e7cf      	b.n	800c00e <GetPortGPIOs+0x2e>
		*TX_Pin = USART5_TX_PIN;
 800c06e:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800c070:	4b09      	ldr	r3, [pc, #36]	; (800c098 <GetPortGPIOs+0xb8>)
	BOS_Status result = BOS_OK;
 800c072:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800c074:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800c076:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800c078:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800c07a:	2310      	movs	r3, #16
 800c07c:	9a04      	ldr	r2, [sp, #16]
 800c07e:	8013      	strh	r3, [r2, #0]
 800c080:	e7c5      	b.n	800c00e <GetPortGPIOs+0x2e>
 800c082:	46c0      	nop			; (mov r8, r8)
 800c084:	20006ac8 	.word	0x20006ac8
 800c088:	20006bc0 	.word	0x20006bc0
 800c08c:	200069a0 	.word	0x200069a0
 800c090:	20006a58 	.word	0x20006a58
 800c094:	20006b48 	.word	0x20006b48
 800c098:	48000400 	.word	0x48000400

0800c09c <IsFactoryReset>:
  __GPIOA_CLK_ENABLE();
 800c09c:	2080      	movs	r0, #128	; 0x80
 800c09e:	4b38      	ldr	r3, [pc, #224]	; (800c180 <IsFactoryReset+0xe4>)
 800c0a0:	0280      	lsls	r0, r0, #10
 800c0a2:	6959      	ldr	r1, [r3, #20]
{
 800c0a4:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800c0a6:	4301      	orrs	r1, r0
 800c0a8:	6159      	str	r1, [r3, #20]
 800c0aa:	695a      	ldr	r2, [r3, #20]
{
 800c0ac:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800c0ae:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800c0b0:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800c0b2:	9209      	str	r2, [sp, #36]	; 0x24
 800c0b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800c0b6:	6959      	ldr	r1, [r3, #20]
 800c0b8:	02c0      	lsls	r0, r0, #11
 800c0ba:	4301      	orrs	r1, r0
 800c0bc:	6159      	str	r1, [r3, #20]
 800c0be:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c0c0:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800c0c2:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800c0c4:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800c0c6:	920a      	str	r2, [sp, #40]	; 0x28
 800c0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800c0ca:	6959      	ldr	r1, [r3, #20]
 800c0cc:	0300      	lsls	r0, r0, #12
 800c0ce:	4301      	orrs	r1, r0
 800c0d0:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800c0d2:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800c0d4:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800c0d6:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800c0d8:	4002      	ands	r2, r0
 800c0da:	920b      	str	r2, [sp, #44]	; 0x2c
 800c0dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800c0de:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c0e0:	ad03      	add	r5, sp, #12
	__GPIOD_CLK_ENABLE();
 800c0e2:	430a      	orrs	r2, r1
 800c0e4:	615a      	str	r2, [r3, #20]
 800c0e6:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c0e8:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800c0ea:	400b      	ands	r3, r1
 800c0ec:	930c      	str	r3, [sp, #48]	; 0x30
 800c0ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c0f0:	230e      	movs	r3, #14
 800c0f2:	446b      	add	r3, sp
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	002a      	movs	r2, r5
 800c0f8:	ab06      	add	r3, sp, #24
 800c0fa:	a905      	add	r1, sp, #20
 800c0fc:	2001      	movs	r0, #1
 800c0fe:	f7ff ff6f 	bl	800bfe0 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c102:	aa04      	add	r2, sp, #16
 800c104:	ab08      	add	r3, sp, #32
 800c106:	a907      	add	r1, sp, #28
 800c108:	9400      	str	r4, [sp, #0]
 800c10a:	2005      	movs	r0, #5
 800c10c:	f7ff ff68 	bl	800bfe0 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c110:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c112:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c114:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c116:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800c118:	a90d      	add	r1, sp, #52	; 0x34
 800c11a:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c11c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c11e:	960f      	str	r6, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800c120:	f005 f8b8 	bl	8011294 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800c124:	2302      	movs	r3, #2
 800c126:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800c128:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800c12a:	a90d      	add	r1, sp, #52	; 0x34
 800c12c:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800c12e:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c130:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800c132:	f005 f8af 	bl	8011294 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800c136:	8829      	ldrh	r1, [r5, #0]
 800c138:	2200      	movs	r2, #0
 800c13a:	9805      	ldr	r0, [sp, #20]
 800c13c:	f005 fa4a 	bl	80115d4 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800c140:	2005      	movs	r0, #5
 800c142:	f001 fbab 	bl	800d89c <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800c146:	8821      	ldrh	r1, [r4, #0]
 800c148:	9808      	ldr	r0, [sp, #32]
 800c14a:	f005 fa3d 	bl	80115c8 <HAL_GPIO_ReadPin>
 800c14e:	2800      	cmp	r0, #0
 800c150:	d006      	beq.n	800c160 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800c152:	2201      	movs	r2, #1
	return 0;
 800c154:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800c156:	4b0b      	ldr	r3, [pc, #44]	; (800c184 <IsFactoryReset+0xe8>)
 800c158:	4252      	negs	r2, r2
 800c15a:	601a      	str	r2, [r3, #0]
}
 800c15c:	b012      	add	sp, #72	; 0x48
 800c15e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800c160:	8829      	ldrh	r1, [r5, #0]
 800c162:	2201      	movs	r2, #1
 800c164:	9805      	ldr	r0, [sp, #20]
 800c166:	f005 fa35 	bl	80115d4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800c16a:	2005      	movs	r0, #5
 800c16c:	f001 fb96 	bl	800d89c <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800c170:	8821      	ldrh	r1, [r4, #0]
 800c172:	9808      	ldr	r0, [sp, #32]
 800c174:	f005 fa28 	bl	80115c8 <HAL_GPIO_ReadPin>
 800c178:	2801      	cmp	r0, #1
 800c17a:	d1ea      	bne.n	800c152 <IsFactoryReset+0xb6>
 800c17c:	e7ee      	b.n	800c15c <IsFactoryReset+0xc0>
 800c17e:	46c0      	nop			; (mov r8, r8)
 800c180:	40021000 	.word	0x40021000
 800c184:	20007ff0 	.word	0x20007ff0

0800c188 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800c188:	4770      	bx	lr
 800c18a:	46c0      	nop			; (mov r8, r8)

0800c18c <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800c18c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800c18e:	4d37      	ldr	r5, [pc, #220]	; (800c26c <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800c190:	b08d      	sub	sp, #52	; 0x34
	if (BOS_initialized) {
 800c192:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800c194:	0006      	movs	r6, r0
 800c196:	000c      	movs	r4, r1
	if (BOS_initialized) {
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d152      	bne.n	800c242 <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800c19c:	2204      	movs	r2, #4
 800c19e:	4b34      	ldr	r3, [pc, #208]	; (800c270 <AddPortButton+0xe4>)
 800c1a0:	545a      	strb	r2, [r3, r1]
	if (BOS_initialized) {
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800c1a2:	250e      	movs	r5, #14
 800c1a4:	af04      	add	r7, sp, #16
 800c1a6:	446d      	add	r5, sp
 800c1a8:	002a      	movs	r2, r5
 800c1aa:	ab06      	add	r3, sp, #24
 800c1ac:	a905      	add	r1, sp, #20
 800c1ae:	9700      	str	r7, [sp, #0]
 800c1b0:	0020      	movs	r0, r4
 800c1b2:	f7ff ff15 	bl	800bfe0 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800c1b6:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1b8:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = TX_Pin;
 800c1ba:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1bc:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800c1be:	a907      	add	r1, sp, #28
 800c1c0:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1c2:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1c4:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800c1c6:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800c1c8:	f005 f864 	bl	8011294 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800c1cc:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800c1ce:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = RX_Pin;
 800c1d0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c1d2:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800c1d4:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c1d6:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c1d8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800c1da:	f005 f85b 	bl	8011294 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800c1de:	00e2      	lsls	r2, r4, #3
 800c1e0:	4b24      	ldr	r3, [pc, #144]	; (800c274 <AddPortButton+0xe8>)
 800c1e2:	1912      	adds	r2, r2, r4
 800c1e4:	189b      	adds	r3, r3, r2

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c1e6:	0025      	movs	r5, r4
	button[port].type = buttonType;
 800c1e8:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c1ea:	2312      	movs	r3, #18
 800c1ec:	353a      	adds	r5, #58	; 0x3a
 800c1ee:	00ad      	lsls	r5, r5, #2
 800c1f0:	446b      	add	r3, sp
 800c1f2:	0019      	movs	r1, r3
 800c1f4:	0028      	movs	r0, r5
 800c1f6:	f7ff fc19 	bl	800ba2c <EE_ReadVariable>
	if (!res)											// This variable exists
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	d109      	bne.n	800c212 <AddPortButton+0x86>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800c1fe:	466b      	mov	r3, sp
 800c200:	8a5b      	ldrh	r3, [r3, #18]
 800c202:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800c204:	091a      	lsrs	r2, r3, #4
 800c206:	42a2      	cmp	r2, r4
 800c208:	d103      	bne.n	800c212 <AddPortButton+0x86>
 800c20a:	220f      	movs	r2, #15
 800c20c:	4013      	ands	r3, r2
 800c20e:	42b3      	cmp	r3, r6
 800c210:	d014      	beq.n	800c23c <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
		}
	} else							// Variable does not exist. Create a new one
	{
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800c212:	466b      	mov	r3, sp
 800c214:	0324      	lsls	r4, r4, #12
 800c216:	0231      	lsls	r1, r6, #8
 800c218:	4321      	orrs	r1, r4
 800c21a:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c21c:	0028      	movs	r0, r5
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800c21e:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c220:	f7ff fc34 	bl	800ba8c <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c224:	2100      	movs	r1, #0
 800c226:	1c68      	adds	r0, r5, #1
 800c228:	f7ff fc30 	bl	800ba8c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c22c:	2100      	movs	r1, #0
 800c22e:	1ca8      	adds	r0, r5, #2
 800c230:	f7ff fc2c 	bl	800ba8c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c234:	1ce8      	adds	r0, r5, #3
 800c236:	2100      	movs	r1, #0
 800c238:	f7ff fc28 	bl	800ba8c <EE_WriteVariable>
	}

	return result;
}
 800c23c:	2000      	movs	r0, #0
 800c23e:	b00d      	add	sp, #52	; 0x34
 800c240:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800c242:	4b0d      	ldr	r3, [pc, #52]	; (800c278 <AddPortButton+0xec>)
 800c244:	008f      	lsls	r7, r1, #2
 800c246:	58f8      	ldr	r0, [r7, r3]
 800c248:	f001 fec6 	bl	800dfd8 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800c24c:	4b0b      	ldr	r3, [pc, #44]	; (800c27c <AddPortButton+0xf0>)
 800c24e:	58f8      	ldr	r0, [r7, r3]
 800c250:	f001 fec2 	bl	800dfd8 <osSemaphoreRelease>
	portStatus[port] = PORTBUTTON;
 800c254:	2104      	movs	r1, #4
 800c256:	4a06      	ldr	r2, [pc, #24]	; (800c270 <AddPortButton+0xe4>)
 800c258:	782b      	ldrb	r3, [r5, #0]
 800c25a:	5511      	strb	r1, [r2, r4]
	if (BOS_initialized) {
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d0a0      	beq.n	800c1a2 <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 800c260:	0020      	movs	r0, r4
 800c262:	f001 fd17 	bl	800dc94 <GetUart>
 800c266:	f006 fc1d 	bl	8012aa4 <HAL_UART_DeInit>
 800c26a:	e79a      	b.n	800c1a2 <AddPortButton+0x16>
 800c26c:	20000b4b 	.word	0x20000b4b
 800c270:	20000c3c 	.word	0x20000c3c
 800c274:	200023d8 	.word	0x200023d8
 800c278:	20006920 	.word	0x20006920
 800c27c:	20006900 	.word	0x20006900

0800c280 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800c280:	b570      	push	{r4, r5, r6, lr}
 800c282:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800c284:	2300      	movs	r3, #0
 800c286:	4839      	ldr	r0, [pc, #228]	; (800c36c <RemovePortButton+0xec>)
 800c288:	00e9      	lsls	r1, r5, #3
 800c28a:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec = 0;
	button[port].releasedY2Sec = 0;
	button[port].releasedY3Sec = 0;

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c28c:	002c      	movs	r4, r5
	button[port].type = NONE;
 800c28e:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port) {
 800c290:	b082      	sub	sp, #8
	button[port].state = NONE;
 800c292:	540b      	strb	r3, [r1, r0]
	button[port].type = NONE;
 800c294:	7053      	strb	r3, [r2, #1]
	button[port].events = 0;
 800c296:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800c298:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800c29a:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800c29c:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800c29e:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800c2a0:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800c2a2:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c2a4:	466b      	mov	r3, sp
 800c2a6:	343a      	adds	r4, #58	; 0x3a
 800c2a8:	00a4      	lsls	r4, r4, #2
 800c2aa:	1d99      	adds	r1, r3, #6
 800c2ac:	0020      	movs	r0, r4
 800c2ae:	f7ff fbbd 	bl	800ba2c <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	d02d      	beq.n	800c312 <RemovePortButton+0x92>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800c2b6:	0028      	movs	r0, r5
 800c2b8:	f001 fcec 	bl	800dc94 <GetUart>

	if (huart->Instance == USART1) {
 800c2bc:	4a2c      	ldr	r2, [pc, #176]	; (800c370 <RemovePortButton+0xf0>)
 800c2be:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800c2c0:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d03d      	beq.n	800c342 <RemovePortButton+0xc2>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800c2c6:	4a2b      	ldr	r2, [pc, #172]	; (800c374 <RemovePortButton+0xf4>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d03e      	beq.n	800c34a <RemovePortButton+0xca>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800c2cc:	4a2a      	ldr	r2, [pc, #168]	; (800c378 <RemovePortButton+0xf8>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d03f      	beq.n	800c352 <RemovePortButton+0xd2>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800c2d2:	4a2a      	ldr	r2, [pc, #168]	; (800c37c <RemovePortButton+0xfc>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d01a      	beq.n	800c30e <RemovePortButton+0x8e>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800c2d8:	4a29      	ldr	r2, [pc, #164]	; (800c380 <RemovePortButton+0x100>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d03d      	beq.n	800c35a <RemovePortButton+0xda>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800c2de:	4a29      	ldr	r2, [pc, #164]	; (800c384 <RemovePortButton+0x104>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d03e      	beq.n	800c362 <RemovePortButton+0xe2>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800c2e4:	4a28      	ldr	r2, [pc, #160]	; (800c388 <RemovePortButton+0x108>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d011      	beq.n	800c30e <RemovePortButton+0x8e>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800c2ea:	4a28      	ldr	r2, [pc, #160]	; (800c38c <RemovePortButton+0x10c>)
 800c2ec:	4694      	mov	ip, r2
 800c2ee:	4463      	add	r3, ip
 800c2f0:	1e5c      	subs	r4, r3, #1
 800c2f2:	41a3      	sbcs	r3, r4
 800c2f4:	425c      	negs	r4, r3
 800c2f6:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	4b25      	ldr	r3, [pc, #148]	; (800c390 <RemovePortButton+0x110>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800c2fc:	4925      	ldr	r1, [pc, #148]	; (800c394 <RemovePortButton+0x114>)
	portStatus[port] = FREE;
 800c2fe:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800c300:	0030      	movs	r0, r6
 800c302:	3201      	adds	r2, #1
 800c304:	f006 fc1c 	bl	8012b40 <HAL_UART_Receive_IT>

	return result;
}
 800c308:	0020      	movs	r0, r4
 800c30a:	b002      	add	sp, #8
 800c30c:	bd70      	pop	{r4, r5, r6, pc}
	BOS_Status result = BOS_OK;
 800c30e:	2400      	movs	r4, #0
 800c310:	e7f2      	b.n	800c2f8 <RemovePortButton+0x78>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800c312:	2100      	movs	r1, #0
 800c314:	0020      	movs	r0, r4
 800c316:	f7ff fbb9 	bl	800ba8c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c31a:	2100      	movs	r1, #0
 800c31c:	1c60      	adds	r0, r4, #1
 800c31e:	f7ff fbb5 	bl	800ba8c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c322:	2100      	movs	r1, #0
 800c324:	1ca0      	adds	r0, r4, #2
 800c326:	f7ff fbb1 	bl	800ba8c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c32a:	2100      	movs	r1, #0
 800c32c:	1ce0      	adds	r0, r4, #3
 800c32e:	f7ff fbad 	bl	800ba8c <EE_WriteVariable>
	UART_HandleTypeDef *huart = GetUart(port);
 800c332:	0028      	movs	r0, r5
 800c334:	f001 fcae 	bl	800dc94 <GetUart>
	if (huart->Instance == USART1) {
 800c338:	4a0d      	ldr	r2, [pc, #52]	; (800c370 <RemovePortButton+0xf0>)
 800c33a:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800c33c:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800c33e:	4293      	cmp	r3, r2
 800c340:	d1c1      	bne.n	800c2c6 <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 800c342:	f001 fad9 	bl	800d8f8 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800c346:	2400      	movs	r4, #0
 800c348:	e7d6      	b.n	800c2f8 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800c34a:	f001 faed 	bl	800d928 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800c34e:	2400      	movs	r4, #0
 800c350:	e7d2      	b.n	800c2f8 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800c352:	f001 fb01 	bl	800d958 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800c356:	2400      	movs	r4, #0
 800c358:	e7ce      	b.n	800c2f8 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800c35a:	f001 fb15 	bl	800d988 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800c35e:	2400      	movs	r4, #0
 800c360:	e7ca      	b.n	800c2f8 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800c362:	f001 fb29 	bl	800d9b8 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800c366:	2400      	movs	r4, #0
 800c368:	e7c6      	b.n	800c2f8 <RemovePortButton+0x78>
 800c36a:	46c0      	nop			; (mov r8, r8)
 800c36c:	200023d8 	.word	0x200023d8
 800c370:	40013800 	.word	0x40013800
 800c374:	40004400 	.word	0x40004400
 800c378:	40004800 	.word	0x40004800
 800c37c:	40004c00 	.word	0x40004c00
 800c380:	40005000 	.word	0x40005000
 800c384:	40011400 	.word	0x40011400
 800c388:	40011800 	.word	0x40011800
 800c38c:	bffee400 	.word	0xbffee400
 800c390:	20000c3c 	.word	0x20000c3c
 800c394:	20000c5d 	.word	0x20000c5d

0800c398 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800c398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c39a:	464e      	mov	r6, r9
 800c39c:	4645      	mov	r5, r8
 800c39e:	46de      	mov	lr, fp
 800c3a0:	4657      	mov	r7, sl
 800c3a2:	b5e0      	push	{r5, r6, r7, lr}
 800c3a4:	b087      	sub	sp, #28
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	ab10      	add	r3, sp, #64	; 0x40
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	0005      	movs	r5, r0
 800c3ae:	9302      	str	r3, [sp, #8]
 800c3b0:	ab11      	add	r3, sp, #68	; 0x44
 800c3b2:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800c3b4:	00ec      	lsls	r4, r5, #3
		uint8_t mode) {
 800c3b6:	9303      	str	r3, [sp, #12]
 800c3b8:	ab12      	add	r3, sp, #72	; 0x48
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	469a      	mov	sl, r3
 800c3be:	ab13      	add	r3, sp, #76	; 0x4c
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	4699      	mov	r9, r3
 800c3c4:	ab14      	add	r3, sp, #80	; 0x50
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	469b      	mov	fp, r3
 800c3ca:	ab15      	add	r3, sp, #84	; 0x54
 800c3cc:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 800c3ce:	4b80      	ldr	r3, [pc, #512]	; (800c5d0 <SetButtonEvents+0x238>)
 800c3d0:	4698      	mov	r8, r3
 800c3d2:	1963      	adds	r3, r4, r5
 800c3d4:	4443      	add	r3, r8
 800c3d6:	785e      	ldrb	r6, [r3, #1]
 800c3d8:	2e00      	cmp	r6, #0
 800c3da:	d050      	beq.n	800c47e <SetButtonEvents+0xe6>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800c3dc:	9e01      	ldr	r6, [sp, #4]
 800c3de:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800c3e0:	9e02      	ldr	r6, [sp, #8]
 800c3e2:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800c3e4:	9e03      	ldr	r6, [sp, #12]
 800c3e6:	711e      	strb	r6, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800c3e8:	4656      	mov	r6, sl
 800c3ea:	715e      	strb	r6, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800c3ec:	464e      	mov	r6, r9
 800c3ee:	719e      	strb	r6, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800c3f0:	465e      	mov	r6, fp
 800c3f2:	71de      	strb	r6, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800c3f4:	2801      	cmp	r0, #1
 800c3f6:	d04b      	beq.n	800c490 <SetButtonEvents+0xf8>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d000      	beq.n	800c3fe <SetButtonEvents+0x66>
 800c3fc:	e076      	b.n	800c4ec <SetButtonEvents+0x154>
 800c3fe:	2900      	cmp	r1, #0
 800c400:	d000      	beq.n	800c404 <SetButtonEvents+0x6c>
 800c402:	e0bf      	b.n	800c584 <SetButtonEvents+0x1ec>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800c404:	2601      	movs	r6, #1
 800c406:	7a19      	ldrb	r1, [r3, #8]
 800c408:	43b1      	bics	r1, r6
 800c40a:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800c40c:	2a00      	cmp	r2, #0
 800c40e:	d142      	bne.n	800c496 <SetButtonEvents+0xfe>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800c410:	2302      	movs	r3, #2
 800c412:	4399      	bics	r1, r3
 800c414:	1963      	adds	r3, r4, r5
 800c416:	4443      	add	r3, r8
 800c418:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c41a:	9b01      	ldr	r3, [sp, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d143      	bne.n	800c4a8 <SetButtonEvents+0x110>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c420:	2304      	movs	r3, #4
 800c422:	4399      	bics	r1, r3
 800c424:	1963      	adds	r3, r4, r5
 800c426:	4443      	add	r3, r8
 800c428:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c42a:	9b02      	ldr	r3, [sp, #8]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d144      	bne.n	800c4ba <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c430:	2308      	movs	r3, #8
 800c432:	4399      	bics	r1, r3
 800c434:	1963      	adds	r3, r4, r5
 800c436:	4443      	add	r3, r8
 800c438:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c43a:	9b03      	ldr	r3, [sp, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d145      	bne.n	800c4cc <SetButtonEvents+0x134>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c440:	2310      	movs	r3, #16
 800c442:	000a      	movs	r2, r1
 800c444:	439a      	bics	r2, r3
 800c446:	1963      	adds	r3, r4, r5
 800c448:	4443      	add	r3, r8
 800c44a:	721a      	strb	r2, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c44c:	4653      	mov	r3, sl
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d100      	bne.n	800c454 <SetButtonEvents+0xbc>
 800c452:	e09c      	b.n	800c58e <SetButtonEvents+0x1f6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c454:	2120      	movs	r1, #32
 800c456:	4311      	orrs	r1, r2
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c458:	464a      	mov	r2, r9
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c45a:	1963      	adds	r3, r4, r5
 800c45c:	4443      	add	r3, r8
 800c45e:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c460:	2a00      	cmp	r2, #0
 800c462:	d100      	bne.n	800c466 <SetButtonEvents+0xce>
 800c464:	e09d      	b.n	800c5a2 <SetButtonEvents+0x20a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c466:	2240      	movs	r2, #64	; 0x40
 800c468:	430a      	orrs	r2, r1
 800c46a:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800c46c:	465b      	mov	r3, fp
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d136      	bne.n	800c4e0 <SetButtonEvents+0x148>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c472:	217f      	movs	r1, #127	; 0x7f
 800c474:	1963      	adds	r3, r4, r5
 800c476:	4443      	add	r3, r8
 800c478:	4011      	ands	r1, r2
 800c47a:	7219      	strb	r1, [r3, #8]
 800c47c:	e036      	b.n	800c4ec <SetButtonEvents+0x154>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c47e:	240b      	movs	r4, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 800c480:	0020      	movs	r0, r4
 800c482:	b007      	add	sp, #28
 800c484:	bc3c      	pop	{r2, r3, r4, r5}
 800c486:	4690      	mov	r8, r2
 800c488:	4699      	mov	r9, r3
 800c48a:	46a2      	mov	sl, r4
 800c48c:	46ab      	mov	fp, r5
 800c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 800c490:	7a19      	ldrb	r1, [r3, #8]
 800c492:	2301      	movs	r3, #1
 800c494:	4319      	orrs	r1, r3
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800c496:	2202      	movs	r2, #2
 800c498:	1963      	adds	r3, r4, r5
 800c49a:	4443      	add	r3, r8
 800c49c:	4311      	orrs	r1, r2
 800c49e:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c4a0:	2801      	cmp	r0, #1
 800c4a2:	d000      	beq.n	800c4a6 <SetButtonEvents+0x10e>
 800c4a4:	e08c      	b.n	800c5c0 <SetButtonEvents+0x228>
 800c4a6:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c4a8:	2204      	movs	r2, #4
 800c4aa:	1963      	adds	r3, r4, r5
 800c4ac:	4443      	add	r3, r8
 800c4ae:	4311      	orrs	r1, r2
 800c4b0:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c4b2:	2801      	cmp	r0, #1
 800c4b4:	d000      	beq.n	800c4b8 <SetButtonEvents+0x120>
 800c4b6:	e07f      	b.n	800c5b8 <SetButtonEvents+0x220>
 800c4b8:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c4ba:	2208      	movs	r2, #8
 800c4bc:	1963      	adds	r3, r4, r5
 800c4be:	4443      	add	r3, r8
 800c4c0:	4311      	orrs	r1, r2
 800c4c2:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c4c4:	2801      	cmp	r0, #1
 800c4c6:	d000      	beq.n	800c4ca <SetButtonEvents+0x132>
 800c4c8:	e07e      	b.n	800c5c8 <SetButtonEvents+0x230>
 800c4ca:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c4cc:	2210      	movs	r2, #16
 800c4ce:	1963      	adds	r3, r4, r5
 800c4d0:	4443      	add	r3, r8
 800c4d2:	4311      	orrs	r1, r2
 800c4d4:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c4d6:	2801      	cmp	r0, #1
 800c4d8:	d16a      	bne.n	800c5b0 <SetButtonEvents+0x218>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c4da:	2260      	movs	r2, #96	; 0x60
 800c4dc:	b2c9      	uxtb	r1, r1
 800c4de:	430a      	orrs	r2, r1
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c4e0:	2180      	movs	r1, #128	; 0x80
 800c4e2:	1963      	adds	r3, r4, r5
 800c4e4:	4249      	negs	r1, r1
 800c4e6:	4443      	add	r3, r8
 800c4e8:	4311      	orrs	r1, r2
 800c4ea:	7219      	strb	r1, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c4ec:	002e      	movs	r6, r5
 800c4ee:	ab04      	add	r3, sp, #16
 800c4f0:	363a      	adds	r6, #58	; 0x3a
 800c4f2:	00b6      	lsls	r6, r6, #2
 800c4f4:	1d9f      	adds	r7, r3, #6
 800c4f6:	0039      	movs	r1, r7
 800c4f8:	0030      	movs	r0, r6
 800c4fa:	f7ff fa97 	bl	800ba2c <EE_ReadVariable>
	if (!res)											// This variable exists
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d1bd      	bne.n	800c47e <SetButtonEvents+0xe6>
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800c502:	1964      	adds	r4, r4, r5
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800c504:	883b      	ldrh	r3, [r7, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800c506:	4444      	add	r4, r8
 800c508:	7a22      	ldrb	r2, [r4, #8]
 800c50a:	b2d9      	uxtb	r1, r3
 800c50c:	4291      	cmp	r1, r2
 800c50e:	d006      	beq.n	800c51e <SetButtonEvents+0x186>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800c510:	0a19      	lsrs	r1, r3, #8
 800c512:	0209      	lsls	r1, r1, #8
 800c514:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c516:	0030      	movs	r0, r6
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800c518:	8039      	strh	r1, [r7, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c51a:	f7ff fab7 	bl	800ba8c <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800c51e:	1c74      	adds	r4, r6, #1
 800c520:	0039      	movs	r1, r7
 800c522:	0020      	movs	r0, r4
 800c524:	f7ff fa82 	bl	800ba2c <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800c528:	4652      	mov	r2, sl
 800c52a:	9b01      	ldr	r3, [sp, #4]
 800c52c:	0219      	lsls	r1, r3, #8
 800c52e:	883b      	ldrh	r3, [r7, #0]
 800c530:	430a      	orrs	r2, r1
		if (temp16
 800c532:	4293      	cmp	r3, r2
 800c534:	d003      	beq.n	800c53e <SetButtonEvents+0x1a6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800c536:	b291      	uxth	r1, r2
 800c538:	0020      	movs	r0, r4
 800c53a:	f7ff faa7 	bl	800ba8c <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800c53e:	1cb4      	adds	r4, r6, #2
 800c540:	0039      	movs	r1, r7
 800c542:	0020      	movs	r0, r4
 800c544:	f7ff fa72 	bl	800ba2c <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800c548:	464a      	mov	r2, r9
 800c54a:	9b02      	ldr	r3, [sp, #8]
 800c54c:	0219      	lsls	r1, r3, #8
 800c54e:	883b      	ldrh	r3, [r7, #0]
 800c550:	430a      	orrs	r2, r1
		if (temp16
 800c552:	4293      	cmp	r3, r2
 800c554:	d003      	beq.n	800c55e <SetButtonEvents+0x1c6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800c556:	b291      	uxth	r1, r2
 800c558:	0020      	movs	r0, r4
 800c55a:	f7ff fa97 	bl	800ba8c <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800c55e:	3603      	adds	r6, #3
 800c560:	0039      	movs	r1, r7
 800c562:	0030      	movs	r0, r6
 800c564:	f7ff fa62 	bl	800ba2c <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800c568:	465a      	mov	r2, fp
 800c56a:	9b03      	ldr	r3, [sp, #12]
	return result;
 800c56c:	2400      	movs	r4, #0
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800c56e:	0219      	lsls	r1, r3, #8
 800c570:	883b      	ldrh	r3, [r7, #0]
 800c572:	430a      	orrs	r2, r1
		if (temp16
 800c574:	4293      	cmp	r3, r2
 800c576:	d100      	bne.n	800c57a <SetButtonEvents+0x1e2>
 800c578:	e782      	b.n	800c480 <SetButtonEvents+0xe8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800c57a:	b291      	uxth	r1, r2
 800c57c:	0030      	movs	r0, r6
 800c57e:	f7ff fa85 	bl	800ba8c <EE_WriteVariable>
 800c582:	e77d      	b.n	800c480 <SetButtonEvents+0xe8>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800c584:	2601      	movs	r6, #1
 800c586:	7a19      	ldrb	r1, [r3, #8]
 800c588:	4331      	orrs	r1, r6
 800c58a:	7219      	strb	r1, [r3, #8]
 800c58c:	e73e      	b.n	800c40c <SetButtonEvents+0x74>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c58e:	2320      	movs	r3, #32
 800c590:	439a      	bics	r2, r3
 800c592:	1963      	adds	r3, r4, r5
 800c594:	4443      	add	r3, r8
 800c596:	0011      	movs	r1, r2
 800c598:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c59a:	464a      	mov	r2, r9
 800c59c:	2a00      	cmp	r2, #0
 800c59e:	d000      	beq.n	800c5a2 <SetButtonEvents+0x20a>
 800c5a0:	e761      	b.n	800c466 <SetButtonEvents+0xce>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c5a2:	2340      	movs	r3, #64	; 0x40
 800c5a4:	000a      	movs	r2, r1
 800c5a6:	439a      	bics	r2, r3
 800c5a8:	1963      	adds	r3, r4, r5
 800c5aa:	4443      	add	r3, r8
 800c5ac:	721a      	strb	r2, [r3, #8]
 800c5ae:	e75d      	b.n	800c46c <SetButtonEvents+0xd4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d19b      	bne.n	800c4ec <SetButtonEvents+0x154>
 800c5b4:	7a1a      	ldrb	r2, [r3, #8]
 800c5b6:	e749      	b.n	800c44c <SetButtonEvents+0xb4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d197      	bne.n	800c4ec <SetButtonEvents+0x154>
 800c5bc:	7a19      	ldrb	r1, [r3, #8]
 800c5be:	e734      	b.n	800c42a <SetButtonEvents+0x92>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d193      	bne.n	800c4ec <SetButtonEvents+0x154>
 800c5c4:	7a19      	ldrb	r1, [r3, #8]
 800c5c6:	e728      	b.n	800c41a <SetButtonEvents+0x82>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d18f      	bne.n	800c4ec <SetButtonEvents+0x154>
 800c5cc:	7a19      	ldrb	r1, [r3, #8]
 800c5ce:	e734      	b.n	800c43a <SetButtonEvents+0xa2>
 800c5d0:	200023d8 	.word	0x200023d8

0800c5d4 <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void) {
	hadc.Instance = ADC1;
 800c5d4:	4811      	ldr	r0, [pc, #68]	; (800c61c <MX_ADC_Init+0x48>)
 800c5d6:	4b12      	ldr	r3, [pc, #72]	; (800c620 <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void) {
 800c5d8:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c5da:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 800c5dc:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c5de:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c5e0:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c5e2:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait = DISABLE;
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c5e4:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c5e6:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c5e8:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c5ea:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c5ec:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c5ee:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c5f0:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c5f2:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800c5f4:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800c5f6:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800c5f8:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800c5fa:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c5fc:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c5fe:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800c600:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c602:	6342      	str	r2, [r0, #52]	; 0x34

	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800c604:	f003 fbfe 	bl	800fe04 <HAL_ADC_Init>
 800c608:	2800      	cmp	r0, #0
 800c60a:	d002      	beq.n	800c612 <MX_ADC_Init+0x3e>
		return ADC_CHANNEL_5;
}

void Error_Handler(void) {

	HAL_Delay(100);
 800c60c:	2064      	movs	r0, #100	; 0x64
 800c60e:	f003 fb1f 	bl	800fc50 <HAL_Delay>
	ADC_flag = 1;
 800c612:	2368      	movs	r3, #104	; 0x68
 800c614:	2101      	movs	r1, #1
 800c616:	4a03      	ldr	r2, [pc, #12]	; (800c624 <MX_ADC_Init+0x50>)
 800c618:	54d1      	strb	r1, [r2, r3]
}
 800c61a:	bd10      	pop	{r4, pc}
 800c61c:	20006c58 	.word	0x20006c58
 800c620:	40012400 	.word	0x40012400
 800c624:	200023d8 	.word	0x200023d8

0800c628 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800c628:	b500      	push	{lr}
 800c62a:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c62c:	2214      	movs	r2, #20
 800c62e:	2100      	movs	r1, #0
 800c630:	a803      	add	r0, sp, #12
 800c632:	f007 f9c1 	bl	80139b8 <memset>
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c636:	2080      	movs	r0, #128	; 0x80
 800c638:	4b11      	ldr	r3, [pc, #68]	; (800c680 <HAL_ADC_MspInit+0x58>)
 800c63a:	0080      	lsls	r0, r0, #2
 800c63c:	6999      	ldr	r1, [r3, #24]
 800c63e:	4301      	orrs	r1, r0
 800c640:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c642:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c644:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c646:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c648:	4002      	ands	r2, r0
 800c64a:	9201      	str	r2, [sp, #4]
 800c64c:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c64e:	695a      	ldr	r2, [r3, #20]
 800c650:	430a      	orrs	r2, r1
 800c652:	615a      	str	r2, [r3, #20]
 800c654:	695b      	ldr	r3, [r3, #20]
		if(flag_ADC_Select==1){
 800c656:	4a0b      	ldr	r2, [pc, #44]	; (800c684 <HAL_ADC_MspInit+0x5c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c658:	400b      	ands	r3, r1
 800c65a:	9302      	str	r3, [sp, #8]
 800c65c:	9b02      	ldr	r3, [sp, #8]
		if(flag_ADC_Select==1){
 800c65e:	2369      	movs	r3, #105	; 0x69
 800c660:	5cd3      	ldrb	r3, [r2, r3]
 800c662:	2b01      	cmp	r3, #1
 800c664:	d001      	beq.n	800c66a <HAL_ADC_MspInit+0x42>
}
 800c666:	b009      	add	sp, #36	; 0x24
 800c668:	bd00      	pop	{pc}
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c66a:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800c66c:	333b      	adds	r3, #59	; 0x3b
 800c66e:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c670:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c672:	3b39      	subs	r3, #57	; 0x39
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c674:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c676:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c678:	f004 fe0c 	bl	8011294 <HAL_GPIO_Init>
}
 800c67c:	e7f3      	b.n	800c666 <HAL_ADC_MspInit+0x3e>
 800c67e:	46c0      	nop			; (mov r8, r8)
 800c680:	40021000 	.word	0x40021000
 800c684:	200023d8 	.word	0x200023d8

0800c688 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800c688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68a:	46ce      	mov	lr, r9
 800c68c:	4647      	mov	r7, r8
	if (0 == ADC_flag)
 800c68e:	2368      	movs	r3, #104	; 0x68
void ReadTempAndVref(float *temp, float *Vref) {
 800c690:	b580      	push	{r7, lr}
	if (0 == ADC_flag)
 800c692:	4c54      	ldr	r4, [pc, #336]	; (800c7e4 <ReadTempAndVref+0x15c>)
void ReadTempAndVref(float *temp, float *Vref) {
 800c694:	0006      	movs	r6, r0
	if (0 == ADC_flag)
 800c696:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp, float *Vref) {
 800c698:	4689      	mov	r9, r1
	if (0 == ADC_flag)
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d100      	bne.n	800c6a0 <ReadTempAndVref+0x18>
 800c69e:	e09d      	b.n	800c7dc <ReadTempAndVref+0x154>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c6a0:	2310      	movs	r3, #16
 800c6a2:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c6a4:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6a6:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c6a8:	015b      	lsls	r3, r3, #5
 800c6aa:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c6ac:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6ae:	4d4e      	ldr	r5, [pc, #312]	; (800c7e8 <ReadTempAndVref+0x160>)
 800c6b0:	316c      	adds	r1, #108	; 0x6c
 800c6b2:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c6b4:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6b6:	f003 fd73 	bl	80101a0 <HAL_ADC_ConfigChannel>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d000      	beq.n	800c6c0 <ReadTempAndVref+0x38>
 800c6be:	e089      	b.n	800c7d4 <ReadTempAndVref+0x14c>
	HAL_ADC_Start(&hadc);
 800c6c0:	0028      	movs	r0, r5
 800c6c2:	f003 fc41 	bl	800ff48 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c6c6:	2164      	movs	r1, #100	; 0x64
 800c6c8:	0028      	movs	r0, r5
 800c6ca:	f003 fc89 	bl	800ffe0 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800c6ce:	0028      	movs	r0, r5
 800c6d0:	f003 fcea 	bl	80100a8 <HAL_ADC_GetValue>
 800c6d4:	2378      	movs	r3, #120	; 0x78
 800c6d6:	52e0      	strh	r0, [r4, r3]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800c6d8:	0400      	lsls	r0, r0, #16
 800c6da:	0c00      	lsrs	r0, r0, #16
 800c6dc:	f7f6 fac8 	bl	8002c70 <__aeabi_i2d>
 800c6e0:	4a42      	ldr	r2, [pc, #264]	; (800c7ec <ReadTempAndVref+0x164>)
 800c6e2:	4b43      	ldr	r3, [pc, #268]	; (800c7f0 <ReadTempAndVref+0x168>)
 800c6e4:	f7f5 fcb8 	bl	8002058 <__aeabi_dmul>
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	4b42      	ldr	r3, [pc, #264]	; (800c7f4 <ReadTempAndVref+0x16c>)
 800c6ec:	f7f5 f8aa 	bl	8001844 <__aeabi_ddiv>
 800c6f0:	4a41      	ldr	r2, [pc, #260]	; (800c7f8 <ReadTempAndVref+0x170>)
 800c6f2:	4b42      	ldr	r3, [pc, #264]	; (800c7fc <ReadTempAndVref+0x174>)
 800c6f4:	f7f5 ff22 	bl	800253c <__aeabi_dsub>
 800c6f8:	4a41      	ldr	r2, [pc, #260]	; (800c800 <ReadTempAndVref+0x178>)
 800c6fa:	4b42      	ldr	r3, [pc, #264]	; (800c804 <ReadTempAndVref+0x17c>)
 800c6fc:	f7f5 f8a2 	bl	8001844 <__aeabi_ddiv>
 800c700:	4b41      	ldr	r3, [pc, #260]	; (800c808 <ReadTempAndVref+0x180>)
 800c702:	2200      	movs	r2, #0
 800c704:	f7f4 fd82 	bl	800120c <__aeabi_dadd>
 800c708:	f7f6 fb70 	bl	8002dec <__aeabi_d2f>
 800c70c:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800c70e:	0028      	movs	r0, r5
 800c710:	f003 fc46 	bl	800ffa0 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c714:	2310      	movs	r3, #16
 800c716:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 800c718:	4b3c      	ldr	r3, [pc, #240]	; (800c80c <ReadTempAndVref+0x184>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c71a:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800c71c:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c71e:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c720:	316c      	adds	r1, #108	; 0x6c
 800c722:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c724:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c726:	f003 fd3b 	bl	80101a0 <HAL_ADC_ConfigChannel>
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d14e      	bne.n	800c7cc <ReadTempAndVref+0x144>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c72e:	2311      	movs	r3, #17
 800c730:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c732:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c734:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c736:	015b      	lsls	r3, r3, #5
 800c738:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800c73a:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c73c:	316c      	adds	r1, #108	; 0x6c
 800c73e:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800c740:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c742:	f003 fd2d 	bl	80101a0 <HAL_ADC_ConfigChannel>
 800c746:	2800      	cmp	r0, #0
 800c748:	d13c      	bne.n	800c7c4 <ReadTempAndVref+0x13c>
	HAL_ADC_Start(&hadc);
 800c74a:	0028      	movs	r0, r5
 800c74c:	f003 fbfc 	bl	800ff48 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c750:	2164      	movs	r1, #100	; 0x64
 800c752:	0028      	movs	r0, r5
 800c754:	f003 fc44 	bl	800ffe0 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800c758:	0028      	movs	r0, r5
 800c75a:	f003 fca5 	bl	80100a8 <HAL_ADC_GetValue>
 800c75e:	237a      	movs	r3, #122	; 0x7a
 800c760:	4680      	mov	r8, r0
 800c762:	52e0      	strh	r0, [r4, r3]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800c764:	4b2a      	ldr	r3, [pc, #168]	; (800c810 <ReadTempAndVref+0x188>)
 800c766:	8818      	ldrh	r0, [r3, #0]
 800c768:	f7f6 fa82 	bl	8002c70 <__aeabi_i2d>
 800c76c:	4a1f      	ldr	r2, [pc, #124]	; (800c7ec <ReadTempAndVref+0x164>)
 800c76e:	4b20      	ldr	r3, [pc, #128]	; (800c7f0 <ReadTempAndVref+0x168>)
 800c770:	f7f5 fc72 	bl	8002058 <__aeabi_dmul>
 800c774:	4643      	mov	r3, r8
 800c776:	0006      	movs	r6, r0
 800c778:	0418      	lsls	r0, r3, #16
 800c77a:	0c00      	lsrs	r0, r0, #16
 800c77c:	000f      	movs	r7, r1
 800c77e:	f7f6 fa77 	bl	8002c70 <__aeabi_i2d>
 800c782:	0002      	movs	r2, r0
 800c784:	000b      	movs	r3, r1
 800c786:	0030      	movs	r0, r6
 800c788:	0039      	movs	r1, r7
 800c78a:	f7f5 f85b 	bl	8001844 <__aeabi_ddiv>
 800c78e:	f7f6 fb2d 	bl	8002dec <__aeabi_d2f>
 800c792:	464b      	mov	r3, r9
 800c794:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800c796:	0028      	movs	r0, r5
 800c798:	f003 fc02 	bl	800ffa0 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c79c:	2311      	movs	r3, #17
 800c79e:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 800c7a0:	4b1a      	ldr	r3, [pc, #104]	; (800c80c <ReadTempAndVref+0x184>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c7a2:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800c7a4:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c7a6:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c7a8:	316c      	adds	r1, #108	; 0x6c
 800c7aa:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c7ac:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c7ae:	f003 fcf7 	bl	80101a0 <HAL_ADC_ConfigChannel>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d002      	beq.n	800c7bc <ReadTempAndVref+0x134>
	HAL_Delay(100);
 800c7b6:	2064      	movs	r0, #100	; 0x64
 800c7b8:	f003 fa4a 	bl	800fc50 <HAL_Delay>
}
 800c7bc:	bc0c      	pop	{r2, r3}
 800c7be:	4690      	mov	r8, r2
 800c7c0:	4699      	mov	r9, r3
 800c7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_Delay(100);
 800c7c4:	2064      	movs	r0, #100	; 0x64
 800c7c6:	f003 fa43 	bl	800fc50 <HAL_Delay>
 800c7ca:	e7be      	b.n	800c74a <ReadTempAndVref+0xc2>
 800c7cc:	2064      	movs	r0, #100	; 0x64
 800c7ce:	f003 fa3f 	bl	800fc50 <HAL_Delay>
 800c7d2:	e7ac      	b.n	800c72e <ReadTempAndVref+0xa6>
 800c7d4:	2064      	movs	r0, #100	; 0x64
 800c7d6:	f003 fa3b 	bl	800fc50 <HAL_Delay>
 800c7da:	e771      	b.n	800c6c0 <ReadTempAndVref+0x38>
		MX_ADC_Init();
 800c7dc:	f7ff fefa 	bl	800c5d4 <MX_ADC_Init>
 800c7e0:	e75e      	b.n	800c6a0 <ReadTempAndVref+0x18>
 800c7e2:	46c0      	nop			; (mov r8, r8)
 800c7e4:	200023d8 	.word	0x200023d8
 800c7e8:	20006c58 	.word	0x20006c58
 800c7ec:	66666666 	.word	0x66666666
 800c7f0:	400a6666 	.word	0x400a6666
 800c7f4:	40affe00 	.word	0x40affe00
 800c7f8:	28f5c28f 	.word	0x28f5c28f
 800c7fc:	3ff68f5c 	.word	0x3ff68f5c
 800c800:	33333333 	.word	0x33333333
 800c804:	40113333 	.word	0x40113333
 800c808:	40390000 	.word	0x40390000
 800c80c:	00001001 	.word	0x00001001
 800c810:	1ffff7ba 	.word	0x1ffff7ba

0800c814 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800c814:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (port == 2 || port == 3) {
 800c816:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800c818:	b087      	sub	sp, #28
 800c81a:	0005      	movs	r5, r0
 800c81c:	000e      	movs	r6, r1
	if (port == 2 || port == 3) {
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d901      	bls.n	800c826 <GetReadPrecentage+0x12>
}
 800c822:	b007      	add	sp, #28
 800c824:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (0 == ADC_flag) {
 800c826:	2368      	movs	r3, #104	; 0x68
 800c828:	4c57      	ldr	r4, [pc, #348]	; (800c988 <GetReadPrecentage+0x174>)
 800c82a:	5ce3      	ldrb	r3, [r4, r3]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d062      	beq.n	800c8f6 <GetReadPrecentage+0xe2>
		Channel = Get_channel(GetUart(port), "bottom");
 800c830:	0028      	movs	r0, r5
 800c832:	f001 fa2f 	bl	800dc94 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800c836:	4a55      	ldr	r2, [pc, #340]	; (800c98c <GetReadPrecentage+0x178>)
 800c838:	6803      	ldr	r3, [r0, #0]
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d07e      	beq.n	800c93c <GetReadPrecentage+0x128>
	else if (huart->Instance == USART6 && side == "top")
 800c83e:	4a54      	ldr	r2, [pc, #336]	; (800c990 <GetReadPrecentage+0x17c>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d04d      	beq.n	800c8e0 <GetReadPrecentage+0xcc>
 800c844:	2300      	movs	r3, #0
 800c846:	0019      	movs	r1, r3
		Channel = Get_channel(GetUart(port), "bottom");
 800c848:	227c      	movs	r2, #124	; 0x7c
 800c84a:	54a3      	strb	r3, [r4, r2]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c84c:	2380      	movs	r3, #128	; 0x80
		sConfig.Channel = Channel;
 800c84e:	66e1      	str	r1, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c850:	015b      	lsls	r3, r3, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c852:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c854:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c856:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c858:	4d4e      	ldr	r5, [pc, #312]	; (800c994 <GetReadPrecentage+0x180>)
 800c85a:	316c      	adds	r1, #108	; 0x6c
 800c85c:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c85e:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c860:	f003 fc9e 	bl	80101a0 <HAL_ADC_ConfigChannel>
 800c864:	2800      	cmp	r0, #0
 800c866:	d142      	bne.n	800c8ee <GetReadPrecentage+0xda>
		HAL_ADC_Start(&hadc);
 800c868:	0028      	movs	r0, r5
 800c86a:	f003 fb6d 	bl	800ff48 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800c86e:	2164      	movs	r1, #100	; 0x64
 800c870:	0028      	movs	r0, r5
 800c872:	f003 fbb5 	bl	800ffe0 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800c876:	0028      	movs	r0, r5
 800c878:	f003 fc16 	bl	80100a8 <HAL_ADC_GetValue>
 800c87c:	f7f4 fc86 	bl	800118c <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800c880:	f7f6 fa62 	bl	8002d48 <__aeabi_f2d>
 800c884:	4a44      	ldr	r2, [pc, #272]	; (800c998 <GetReadPrecentage+0x184>)
 800c886:	4b45      	ldr	r3, [pc, #276]	; (800c99c <GetReadPrecentage+0x188>)
 800c888:	f7f5 fbe6 	bl	8002058 <__aeabi_dmul>
 800c88c:	2200      	movs	r2, #0
 800c88e:	4b44      	ldr	r3, [pc, #272]	; (800c9a0 <GetReadPrecentage+0x18c>)
 800c890:	f7f4 ffd8 	bl	8001844 <__aeabi_ddiv>
 800c894:	f7f6 faaa 	bl	8002dec <__aeabi_d2f>
 800c898:	4f42      	ldr	r7, [pc, #264]	; (800c9a4 <GetReadPrecentage+0x190>)
		current = (100 * percentage) / 3.3;
 800c89a:	4943      	ldr	r1, [pc, #268]	; (800c9a8 <GetReadPrecentage+0x194>)
		percentage = 3.3 * percentage / 4095;
 800c89c:	6038      	str	r0, [r7, #0]
		current = (100 * percentage) / 3.3;
 800c89e:	f7f4 f95f 	bl	8000b60 <__aeabi_fmul>
 800c8a2:	f7f6 fa51 	bl	8002d48 <__aeabi_f2d>
 800c8a6:	4b3d      	ldr	r3, [pc, #244]	; (800c99c <GetReadPrecentage+0x188>)
 800c8a8:	4a3b      	ldr	r2, [pc, #236]	; (800c998 <GetReadPrecentage+0x184>)
 800c8aa:	f7f4 ffcb 	bl	8001844 <__aeabi_ddiv>
 800c8ae:	f7f6 fa9d 	bl	8002dec <__aeabi_d2f>
 800c8b2:	6078      	str	r0, [r7, #4]
		*precentageValue = current;
 800c8b4:	6030      	str	r0, [r6, #0]
		HAL_ADC_Stop(&hadc);
 800c8b6:	0028      	movs	r0, r5
 800c8b8:	f003 fb72 	bl	800ffa0 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800c8bc:	237c      	movs	r3, #124	; 0x7c
 800c8be:	5ce3      	ldrb	r3, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c8c0:	0021      	movs	r1, r4
		sConfig.Channel = Channel;
 800c8c2:	66e3      	str	r3, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800c8c4:	4b39      	ldr	r3, [pc, #228]	; (800c9ac <GetReadPrecentage+0x198>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c8c6:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800c8c8:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c8ca:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c8cc:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c8ce:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c8d0:	f003 fc66 	bl	80101a0 <HAL_ADC_ConfigChannel>
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	d0a4      	beq.n	800c822 <GetReadPrecentage+0xe>
	HAL_Delay(100);
 800c8d8:	2064      	movs	r0, #100	; 0x64
 800c8da:	f003 f9b9 	bl	800fc50 <HAL_Delay>
 800c8de:	e7a0      	b.n	800c822 <GetReadPrecentage+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800c8e0:	4a33      	ldr	r2, [pc, #204]	; (800c9b0 <GetReadPrecentage+0x19c>)
 800c8e2:	4b34      	ldr	r3, [pc, #208]	; (800c9b4 <GetReadPrecentage+0x1a0>)
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d04c      	beq.n	800c982 <GetReadPrecentage+0x16e>
 800c8e8:	2105      	movs	r1, #5
		return ADC_CHANNEL_5;
 800c8ea:	2305      	movs	r3, #5
 800c8ec:	e7ac      	b.n	800c848 <GetReadPrecentage+0x34>
	HAL_Delay(100);
 800c8ee:	2064      	movs	r0, #100	; 0x64
 800c8f0:	f003 f9ae 	bl	800fc50 <HAL_Delay>
 800c8f4:	e7b8      	b.n	800c868 <GetReadPrecentage+0x54>
			MX_ADC_Init();
 800c8f6:	f7ff fe6d 	bl	800c5d4 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800c8fa:	0028      	movs	r0, r5
 800c8fc:	f001 f9ca 	bl	800dc94 <GetUart>
 800c900:	f006 f8d0 	bl	8012aa4 <HAL_UART_DeInit>
			if (port == 3) {
 800c904:	2d03      	cmp	r5, #3
 800c906:	d020      	beq.n	800c94a <GetReadPrecentage+0x136>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800c908:	2090      	movs	r0, #144	; 0x90
 800c90a:	2104      	movs	r1, #4
 800c90c:	05c0      	lsls	r0, r0, #23
 800c90e:	f004 fdbd 	bl	801148c <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c912:	2304      	movs	r3, #4
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c914:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c916:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c918:	3b03      	subs	r3, #3
 800c91a:	9302      	str	r3, [sp, #8]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c91c:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c91e:	3302      	adds	r3, #2
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c920:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c922:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c924:	f004 fcb6 	bl	8011294 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c928:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c92a:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800c92c:	4b22      	ldr	r3, [pc, #136]	; (800c9b8 <GetReadPrecentage+0x1a4>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c92e:	2104      	movs	r1, #4
				portStatus[port - 1] = CUSTOM;
 800c930:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c932:	05c0      	lsls	r0, r0, #23
 800c934:	3a05      	subs	r2, #5
 800c936:	f004 fe4d 	bl	80115d4 <HAL_GPIO_WritePin>
 800c93a:	e779      	b.n	800c830 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800c93c:	4a1c      	ldr	r2, [pc, #112]	; (800c9b0 <GetReadPrecentage+0x19c>)
 800c93e:	4b1d      	ldr	r3, [pc, #116]	; (800c9b4 <GetReadPrecentage+0x1a0>)
 800c940:	429a      	cmp	r2, r3
 800c942:	d01b      	beq.n	800c97c <GetReadPrecentage+0x168>
 800c944:	2103      	movs	r1, #3
		return ADC_CHANNEL_3;
 800c946:	2303      	movs	r3, #3
 800c948:	e77e      	b.n	800c848 <GetReadPrecentage+0x34>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800c94a:	2090      	movs	r0, #144	; 0x90
 800c94c:	2110      	movs	r1, #16
 800c94e:	05c0      	lsls	r0, r0, #23
 800c950:	f004 fd9c 	bl	801148c <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c954:	2310      	movs	r3, #16
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c956:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c958:	9301      	str	r3, [sp, #4]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c95a:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c95c:	3b0f      	subs	r3, #15
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c95e:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c960:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c962:	9504      	str	r5, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c964:	f004 fc96 	bl	8011294 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c968:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c96a:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800c96c:	4b12      	ldr	r3, [pc, #72]	; (800c9b8 <GetReadPrecentage+0x1a4>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c96e:	2110      	movs	r1, #16
				portStatus[port - 1] = CUSTOM;
 800c970:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c972:	05c0      	lsls	r0, r0, #23
 800c974:	3a05      	subs	r2, #5
 800c976:	f004 fe2d 	bl	80115d4 <HAL_GPIO_WritePin>
 800c97a:	e759      	b.n	800c830 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800c97c:	2102      	movs	r1, #2
		return ADC_CHANNEL_2;
 800c97e:	2302      	movs	r3, #2
 800c980:	e762      	b.n	800c848 <GetReadPrecentage+0x34>
	else if (huart->Instance == USART6 && side == "top")
 800c982:	2104      	movs	r1, #4
		return ADC_CHANNEL_4;
 800c984:	2304      	movs	r3, #4
 800c986:	e75f      	b.n	800c848 <GetReadPrecentage+0x34>
 800c988:	200023d8 	.word	0x200023d8
 800c98c:	40004400 	.word	0x40004400
 800c990:	40011400 	.word	0x40011400
 800c994:	20006c58 	.word	0x20006c58
 800c998:	66666666 	.word	0x66666666
 800c99c:	400a6666 	.word	0x400a6666
 800c9a0:	40affe00 	.word	0x40affe00
 800c9a4:	20002458 	.word	0x20002458
 800c9a8:	42c80000 	.word	0x42c80000
 800c9ac:	00001001 	.word	0x00001001
 800c9b0:	08019624 	.word	0x08019624
 800c9b4:	08019620 	.word	0x08019620
 800c9b8:	20000c3c 	.word	0x20000c3c

0800c9bc <Get_Rank>:

}

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800c9bc:	2802      	cmp	r0, #2
 800c9be:	d00e      	beq.n	800c9de <Get_Rank+0x22>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800c9c0:	2803      	cmp	r0, #3
 800c9c2:	d002      	beq.n	800c9ca <Get_Rank+0xe>
 800c9c4:	4b10      	ldr	r3, [pc, #64]	; (800ca08 <Get_Rank+0x4c>)
 800c9c6:	7a18      	ldrb	r0, [r3, #8]
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
}
 800c9c8:	4770      	bx	lr
	else if (Port == 3 && side == "top")
 800c9ca:	4b10      	ldr	r3, [pc, #64]	; (800ca0c <Get_Rank+0x50>)
 800c9cc:	4299      	cmp	r1, r3
 800c9ce:	d016      	beq.n	800c9fe <Get_Rank+0x42>
	else if (Port == 3 && side == "bottom")
 800c9d0:	4b0f      	ldr	r3, [pc, #60]	; (800ca10 <Get_Rank+0x54>)
 800c9d2:	4299      	cmp	r1, r3
 800c9d4:	d1f6      	bne.n	800c9c4 <Get_Rank+0x8>
		Rank_t = 3;
 800c9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ca08 <Get_Rank+0x4c>)
 800c9d8:	7218      	strb	r0, [r3, #8]
 800c9da:	2003      	movs	r0, #3
 800c9dc:	e7f4      	b.n	800c9c8 <Get_Rank+0xc>
	if (Port == 2 && side == "top")
 800c9de:	4b0b      	ldr	r3, [pc, #44]	; (800ca0c <Get_Rank+0x50>)
 800c9e0:	4299      	cmp	r1, r3
 800c9e2:	d007      	beq.n	800c9f4 <Get_Rank+0x38>
	else if (Port == 2 && side == "bottom")
 800c9e4:	4b0a      	ldr	r3, [pc, #40]	; (800ca10 <Get_Rank+0x54>)
 800c9e6:	4299      	cmp	r1, r3
 800c9e8:	d1ec      	bne.n	800c9c4 <Get_Rank+0x8>
		Rank_t = 1;
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	4b06      	ldr	r3, [pc, #24]	; (800ca08 <Get_Rank+0x4c>)
 800c9ee:	2001      	movs	r0, #1
 800c9f0:	721a      	strb	r2, [r3, #8]
 800c9f2:	e7e9      	b.n	800c9c8 <Get_Rank+0xc>
		Rank_t = 0;
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4b04      	ldr	r3, [pc, #16]	; (800ca08 <Get_Rank+0x4c>)
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	721a      	strb	r2, [r3, #8]
 800c9fc:	e7e4      	b.n	800c9c8 <Get_Rank+0xc>
		Rank_t = 2;
 800c9fe:	2202      	movs	r2, #2
 800ca00:	4b01      	ldr	r3, [pc, #4]	; (800ca08 <Get_Rank+0x4c>)
 800ca02:	3801      	subs	r0, #1
 800ca04:	721a      	strb	r2, [r3, #8]
 800ca06:	e7df      	b.n	800c9c8 <Get_Rank+0xc>
 800ca08:	20002458 	.word	0x20002458
 800ca0c:	08019620 	.word	0x08019620
 800ca10:	08019624 	.word	0x08019624

0800ca14 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800ca14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ADC_port == 2 || ADC_port == 3) {
 800ca16:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800ca18:	0004      	movs	r4, r0
 800ca1a:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d900      	bls.n	800ca22 <ADCSelectChannel+0xe>
}
 800ca20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		flag_ADC_Select=1;
 800ca22:	2369      	movs	r3, #105	; 0x69
 800ca24:	2201      	movs	r2, #1
 800ca26:	4e1c      	ldr	r6, [pc, #112]	; (800ca98 <ADCSelectChannel+0x84>)
 800ca28:	54f2      	strb	r2, [r6, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 800ca2a:	f001 f933 	bl	800dc94 <GetUart>
 800ca2e:	f006 f839 	bl	8012aa4 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800ca32:	2206      	movs	r2, #6
 800ca34:	4b19      	ldr	r3, [pc, #100]	; (800ca9c <ADCSelectChannel+0x88>)
		Channel = Get_channel(GetUart(ADC_port), side);
 800ca36:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] = CUSTOM;
 800ca38:	191b      	adds	r3, r3, r4
 800ca3a:	3b01      	subs	r3, #1
 800ca3c:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800ca3e:	f001 f929 	bl	800dc94 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800ca42:	4a17      	ldr	r2, [pc, #92]	; (800caa0 <ADCSelectChannel+0x8c>)
 800ca44:	6803      	ldr	r3, [r0, #0]
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d011      	beq.n	800ca6e <ADCSelectChannel+0x5a>
	else if (huart->Instance == USART6 && side == "top")
 800ca4a:	4a16      	ldr	r2, [pc, #88]	; (800caa4 <ADCSelectChannel+0x90>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d016      	beq.n	800ca7e <ADCSelectChannel+0x6a>
		Channel = Get_channel(GetUart(ADC_port), side);
 800ca50:	237c      	movs	r3, #124	; 0x7c
		Rank_t = Get_Rank(ADC_port, side);
 800ca52:	0029      	movs	r1, r5
 800ca54:	0020      	movs	r0, r4
		Channel = Get_channel(GetUart(ADC_port), side);
 800ca56:	54f7      	strb	r7, [r6, r3]
		Rank_t = Get_Rank(ADC_port, side);
 800ca58:	f7ff ffb0 	bl	800c9bc <Get_Rank>
 800ca5c:	4b12      	ldr	r3, [pc, #72]	; (800caa8 <ADCSelectChannel+0x94>)
 800ca5e:	7218      	strb	r0, [r3, #8]
		if (ADC_flag == 0)
 800ca60:	2368      	movs	r3, #104	; 0x68
 800ca62:	5cf3      	ldrb	r3, [r6, r3]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d1db      	bne.n	800ca20 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 800ca68:	f7ff fdb4 	bl	800c5d4 <MX_ADC_Init>
}
 800ca6c:	e7d8      	b.n	800ca20 <ADCSelectChannel+0xc>
	if (huart->Instance == USART2 && side == "top")
 800ca6e:	4b0f      	ldr	r3, [pc, #60]	; (800caac <ADCSelectChannel+0x98>)
 800ca70:	429d      	cmp	r5, r3
 800ca72:	d00e      	beq.n	800ca92 <ADCSelectChannel+0x7e>
	else if (huart->Instance == USART2 && side == "bottom")
 800ca74:	4b0e      	ldr	r3, [pc, #56]	; (800cab0 <ADCSelectChannel+0x9c>)
 800ca76:	429d      	cmp	r5, r3
 800ca78:	d1ea      	bne.n	800ca50 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_3;
 800ca7a:	2703      	movs	r7, #3
 800ca7c:	e7e8      	b.n	800ca50 <ADCSelectChannel+0x3c>
	else if (huart->Instance == USART6 && side == "top")
 800ca7e:	4b0b      	ldr	r3, [pc, #44]	; (800caac <ADCSelectChannel+0x98>)
 800ca80:	429d      	cmp	r5, r3
 800ca82:	d004      	beq.n	800ca8e <ADCSelectChannel+0x7a>
	else if (huart->Instance == USART6 && side == "bottom")
 800ca84:	4b0a      	ldr	r3, [pc, #40]	; (800cab0 <ADCSelectChannel+0x9c>)
 800ca86:	429d      	cmp	r5, r3
 800ca88:	d1e2      	bne.n	800ca50 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_5;
 800ca8a:	2705      	movs	r7, #5
 800ca8c:	e7e0      	b.n	800ca50 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_4;
 800ca8e:	2704      	movs	r7, #4
 800ca90:	e7de      	b.n	800ca50 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_2;
 800ca92:	2702      	movs	r7, #2
 800ca94:	e7dc      	b.n	800ca50 <ADCSelectChannel+0x3c>
 800ca96:	46c0      	nop			; (mov r8, r8)
 800ca98:	200023d8 	.word	0x200023d8
 800ca9c:	20000c3c 	.word	0x20000c3c
 800caa0:	40004400 	.word	0x40004400
 800caa4:	40011400 	.word	0x40011400
 800caa8:	20002458 	.word	0x20002458
 800caac:	08019620 	.word	0x08019620
 800cab0:	08019624 	.word	0x08019624

0800cab4 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800cab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab6:	4647      	mov	r7, r8
 800cab8:	46ce      	mov	lr, r9
	if (ADC_flag == 1) {
 800caba:	2368      	movs	r3, #104	; 0x68
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800cabc:	b580      	push	{r7, lr}
	if (ADC_flag == 1) {
 800cabe:	4d3a      	ldr	r5, [pc, #232]	; (800cba8 <ReadADCChannel+0xf4>)
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800cac0:	0007      	movs	r7, r0
	if (ADC_flag == 1) {
 800cac2:	5ceb      	ldrb	r3, [r5, r3]
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800cac4:	000c      	movs	r4, r1
 800cac6:	0016      	movs	r6, r2
	if (ADC_flag == 1) {
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d00b      	beq.n	800cae4 <ReadADCChannel+0x30>
 800cacc:	4c37      	ldr	r4, [pc, #220]	; (800cbac <ReadADCChannel+0xf8>)
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800cace:	7a23      	ldrb	r3, [r4, #8]
 800cad0:	005b      	lsls	r3, r3, #1
 800cad2:	18e4      	adds	r4, r4, r3
 800cad4:	89a0      	ldrh	r0, [r4, #12]
 800cad6:	f7f4 fb59 	bl	800118c <__aeabi_ui2f>
 800cada:	6030      	str	r0, [r6, #0]
}
 800cadc:	bc0c      	pop	{r2, r3}
 800cade:	4690      	mov	r8, r2
 800cae0:	4699      	mov	r9, r3
 800cae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800cae4:	f001 f8d6 	bl	800dc94 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800cae8:	4a31      	ldr	r2, [pc, #196]	; (800cbb0 <ReadADCChannel+0xfc>)
 800caea:	6803      	ldr	r3, [r0, #0]
 800caec:	4293      	cmp	r3, r2
 800caee:	d03f      	beq.n	800cb70 <ReadADCChannel+0xbc>
	else if (huart->Instance == USART6 && side == "top")
 800caf0:	4a30      	ldr	r2, [pc, #192]	; (800cbb4 <ReadADCChannel+0x100>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d049      	beq.n	800cb8a <ReadADCChannel+0xd6>
		Channel = Get_channel(GetUart(Port), side);
 800caf6:	237c      	movs	r3, #124	; 0x7c
 800caf8:	464a      	mov	r2, r9
 800cafa:	4698      	mov	r8, r3
		Rank_t = Get_Rank(Port, side);
 800cafc:	0021      	movs	r1, r4
 800cafe:	0038      	movs	r0, r7
		Channel = Get_channel(GetUart(Port), side);
 800cb00:	54ea      	strb	r2, [r5, r3]
		Rank_t = Get_Rank(Port, side);
 800cb02:	f7ff ff5b 	bl	800c9bc <Get_Rank>
		sConfig.Channel = Channel;
 800cb06:	4643      	mov	r3, r8
 800cb08:	5ceb      	ldrb	r3, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cb0a:	0029      	movs	r1, r5
		sConfig.Channel = Channel;
 800cb0c:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800cb0e:	2380      	movs	r3, #128	; 0x80
 800cb10:	015b      	lsls	r3, r3, #5
 800cb12:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800cb14:	2303      	movs	r3, #3
		Rank_t = Get_Rank(Port, side);
 800cb16:	4c25      	ldr	r4, [pc, #148]	; (800cbac <ReadADCChannel+0xf8>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cb18:	4f27      	ldr	r7, [pc, #156]	; (800cbb8 <ReadADCChannel+0x104>)
		Rank_t = Get_Rank(Port, side);
 800cb1a:	7220      	strb	r0, [r4, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cb1c:	316c      	adds	r1, #108	; 0x6c
 800cb1e:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800cb20:	676b      	str	r3, [r5, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cb22:	f003 fb3d 	bl	80101a0 <HAL_ADC_ConfigChannel>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d12b      	bne.n	800cb82 <ReadADCChannel+0xce>
		HAL_ADC_Start(&hadc);
 800cb2a:	0038      	movs	r0, r7
 800cb2c:	f003 fa0c 	bl	800ff48 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800cb30:	2164      	movs	r1, #100	; 0x64
 800cb32:	0038      	movs	r0, r7
 800cb34:	f003 fa54 	bl	800ffe0 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800cb38:	0038      	movs	r0, r7
 800cb3a:	f003 fab5 	bl	80100a8 <HAL_ADC_GetValue>
 800cb3e:	7a23      	ldrb	r3, [r4, #8]
 800cb40:	005b      	lsls	r3, r3, #1
 800cb42:	18e3      	adds	r3, r4, r3
 800cb44:	8198      	strh	r0, [r3, #12]
		HAL_ADC_Stop(&hadc);
 800cb46:	0038      	movs	r0, r7
 800cb48:	f003 fa2a 	bl	800ffa0 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800cb4c:	237c      	movs	r3, #124	; 0x7c
 800cb4e:	5ceb      	ldrb	r3, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cb50:	0029      	movs	r1, r5
		sConfig.Channel = Channel;
 800cb52:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800cb54:	4b19      	ldr	r3, [pc, #100]	; (800cbbc <ReadADCChannel+0x108>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cb56:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800cb58:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800cb5a:	2303      	movs	r3, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cb5c:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800cb5e:	676b      	str	r3, [r5, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cb60:	f003 fb1e 	bl	80101a0 <HAL_ADC_ConfigChannel>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d0b2      	beq.n	800cace <ReadADCChannel+0x1a>
	HAL_Delay(100);
 800cb68:	2064      	movs	r0, #100	; 0x64
 800cb6a:	f003 f871 	bl	800fc50 <HAL_Delay>
 800cb6e:	e7ae      	b.n	800cace <ReadADCChannel+0x1a>
	if (huart->Instance == USART2 && side == "top")
 800cb70:	4b13      	ldr	r3, [pc, #76]	; (800cbc0 <ReadADCChannel+0x10c>)
 800cb72:	429c      	cmp	r4, r3
 800cb74:	d012      	beq.n	800cb9c <ReadADCChannel+0xe8>
	else if (huart->Instance == USART2 && side == "bottom")
 800cb76:	4b13      	ldr	r3, [pc, #76]	; (800cbc4 <ReadADCChannel+0x110>)
 800cb78:	429c      	cmp	r4, r3
 800cb7a:	d1bc      	bne.n	800caf6 <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 800cb7c:	2303      	movs	r3, #3
 800cb7e:	4699      	mov	r9, r3
 800cb80:	e7b9      	b.n	800caf6 <ReadADCChannel+0x42>
	HAL_Delay(100);
 800cb82:	2064      	movs	r0, #100	; 0x64
 800cb84:	f003 f864 	bl	800fc50 <HAL_Delay>
 800cb88:	e7cf      	b.n	800cb2a <ReadADCChannel+0x76>
	else if (huart->Instance == USART6 && side == "top")
 800cb8a:	4b0d      	ldr	r3, [pc, #52]	; (800cbc0 <ReadADCChannel+0x10c>)
 800cb8c:	429c      	cmp	r4, r3
 800cb8e:	d008      	beq.n	800cba2 <ReadADCChannel+0xee>
	else if (huart->Instance == USART6 && side == "bottom")
 800cb90:	4b0c      	ldr	r3, [pc, #48]	; (800cbc4 <ReadADCChannel+0x110>)
 800cb92:	429c      	cmp	r4, r3
 800cb94:	d1af      	bne.n	800caf6 <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 800cb96:	2305      	movs	r3, #5
 800cb98:	4699      	mov	r9, r3
 800cb9a:	e7ac      	b.n	800caf6 <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 800cb9c:	2302      	movs	r3, #2
 800cb9e:	4699      	mov	r9, r3
 800cba0:	e7a9      	b.n	800caf6 <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 800cba2:	2304      	movs	r3, #4
 800cba4:	4699      	mov	r9, r3
 800cba6:	e7a6      	b.n	800caf6 <ReadADCChannel+0x42>
 800cba8:	200023d8 	.word	0x200023d8
 800cbac:	20002458 	.word	0x20002458
 800cbb0:	40004400 	.word	0x40004400
 800cbb4:	40011400 	.word	0x40011400
 800cbb8:	20006c58 	.word	0x20006c58
 800cbbc:	00001001 	.word	0x00001001
 800cbc0:	08019620 	.word	0x08019620
 800cbc4:	08019624 	.word	0x08019624

0800cbc8 <buttonReleasedCallback>:
 800cbc8:	4770      	bx	lr
 800cbca:	46c0      	nop			; (mov r8, r8)

0800cbcc <buttonClickedCallback>:
 800cbcc:	4770      	bx	lr
 800cbce:	46c0      	nop			; (mov r8, r8)

0800cbd0 <buttonDblClickedCallback>:
 800cbd0:	4770      	bx	lr
 800cbd2:	46c0      	nop			; (mov r8, r8)

0800cbd4 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800cbd4:	4770      	bx	lr
 800cbd6:	46c0      	nop			; (mov r8, r8)

0800cbd8 <buttonReleasedForYCallback>:
 800cbd8:	4770      	bx	lr
 800cbda:	46c0      	nop			; (mov r8, r8)

0800cbdc <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800cbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbde:	4645      	mov	r5, r8
 800cbe0:	46de      	mov	lr, fp
 800cbe2:	464e      	mov	r6, r9
 800cbe4:	4657      	mov	r7, sl
 800cbe6:	4bc5      	ldr	r3, [pc, #788]	; (800cefc <CheckAttachedButtons+0x320>)
 800cbe8:	b5e0      	push	{r5, r6, r7, lr}
 800cbea:	4698      	mov	r8, r3
 800cbec:	001c      	movs	r4, r3
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800cbee:	2300      	movs	r3, #0
void CheckAttachedButtons(void) {
 800cbf0:	b08b      	sub	sp, #44	; 0x2c
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800cbf2:	9304      	str	r3, [sp, #16]
 800cbf4:	469b      	mov	fp, r3
			if (delayButtonStateReset == false)
 800cbf6:	4bc2      	ldr	r3, [pc, #776]	; (800cf00 <CheckAttachedButtons+0x324>)
void CheckAttachedButtons(void) {
 800cbf8:	2501      	movs	r5, #1
			if (delayButtonStateReset == false)
 800cbfa:	4699      	mov	r9, r3
 800cbfc:	b2eb      	uxtb	r3, r5
 800cbfe:	469a      	mov	sl, r3
		if (button[i].type)			// Only check defined butons
 800cc00:	7aa3      	ldrb	r3, [r4, #10]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d100      	bne.n	800cc08 <CheckAttachedButtons+0x2c>
 800cc06:	e0c0      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
			if (delayButtonStateReset == false)
 800cc08:	464b      	mov	r3, r9
 800cc0a:	7d1b      	ldrb	r3, [r3, #20]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d100      	bne.n	800cc12 <CheckAttachedButtons+0x36>
				button[i].state = NONE;
 800cc10:	7263      	strb	r3, [r4, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800cc12:	ab04      	add	r3, sp, #16
 800cc14:	469c      	mov	ip, r3
 800cc16:	270e      	movs	r7, #14
 800cc18:	ae07      	add	r6, sp, #28
 800cc1a:	4467      	add	r7, ip
 800cc1c:	ab09      	add	r3, sp, #36	; 0x24
 800cc1e:	0032      	movs	r2, r6
 800cc20:	a908      	add	r1, sp, #32
 800cc22:	9700      	str	r7, [sp, #0]
 800cc24:	4650      	mov	r0, sl
 800cc26:	f7ff f9db 	bl	800bfe0 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800cc2a:	8831      	ldrh	r1, [r6, #0]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	9808      	ldr	r0, [sp, #32]
 800cc30:	f004 fcd0 	bl	80115d4 <HAL_GPIO_WritePin>
			Delay_us(10);
 800cc34:	200a      	movs	r0, #10
 800cc36:	f000 fe1f 	bl	800d878 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800cc3a:	8839      	ldrh	r1, [r7, #0]
 800cc3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc3e:	f004 fcc3 	bl	80115c8 <HAL_GPIO_ReadPin>
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d100      	bne.n	800cc48 <CheckAttachedButtons+0x6c>
 800cc46:	e14b      	b.n	800cee0 <CheckAttachedButtons+0x304>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800cc48:	8831      	ldrh	r1, [r6, #0]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	9808      	ldr	r0, [sp, #32]
 800cc4e:	f004 fcc1 	bl	80115d4 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800cc52:	7aa3      	ldrb	r3, [r4, #10]
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d100      	bne.n	800cc5a <CheckAttachedButtons+0x7e>
 800cc58:	e0a6      	b.n	800cda8 <CheckAttachedButtons+0x1cc>
 800cc5a:	d800      	bhi.n	800cc5e <CheckAttachedButtons+0x82>
 800cc5c:	e0a1      	b.n	800cda2 <CheckAttachedButtons+0x1c6>
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	d100      	bne.n	800cc64 <CheckAttachedButtons+0x88>
 800cc62:	e170      	b.n	800cf46 <CheckAttachedButtons+0x36a>
 800cc64:	2b04      	cmp	r3, #4
 800cc66:	d000      	beq.n	800cc6a <CheckAttachedButtons+0x8e>
 800cc68:	e156      	b.n	800cf18 <CheckAttachedButtons+0x33c>
 800cc6a:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800cc6c:	4658      	mov	r0, fp
 800cc6e:	00aa      	lsls	r2, r5, #2
 800cc70:	3138      	adds	r1, #56	; 0x38
 800cc72:	588b      	ldr	r3, [r1, r2]
 800cc74:	2801      	cmp	r0, #1
 800cc76:	d100      	bne.n	800cc7a <CheckAttachedButtons+0x9e>
 800cc78:	e170      	b.n	800cf5c <CheckAttachedButtons+0x380>
				else if (connected == GPIO_PIN_RESET)
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d100      	bne.n	800cc80 <CheckAttachedButtons+0xa4>
 800cc7e:	e217      	b.n	800d0b0 <CheckAttachedButtons+0x4d4>
			if (state == CLOSED || state == ON) {
 800cc80:	9904      	ldr	r1, [sp, #16]
 800cc82:	2904      	cmp	r1, #4
 800cc84:	d100      	bne.n	800cc88 <CheckAttachedButtons+0xac>
 800cc86:	e14f      	b.n	800cf28 <CheckAttachedButtons+0x34c>
 800cc88:	9904      	ldr	r1, [sp, #16]
 800cc8a:	2902      	cmp	r1, #2
 800cc8c:	d100      	bne.n	800cc90 <CheckAttachedButtons+0xb4>
 800cc8e:	e14b      	b.n	800cf28 <CheckAttachedButtons+0x34c>
			if (state == OPEN || state == OFF) {
 800cc90:	9904      	ldr	r1, [sp, #16]
 800cc92:	2903      	cmp	r1, #3
 800cc94:	d002      	beq.n	800cc9c <CheckAttachedButtons+0xc0>
 800cc96:	489b      	ldr	r0, [pc, #620]	; (800cf04 <CheckAttachedButtons+0x328>)
 800cc98:	2901      	cmp	r1, #1
 800cc9a:	d114      	bne.n	800ccc6 <CheckAttachedButtons+0xea>
				if (releaseCounter[i] < 0xFFFF)
 800cc9c:	4640      	mov	r0, r8
 800cc9e:	3050      	adds	r0, #80	; 0x50
 800cca0:	5881      	ldr	r1, [r0, r2]
 800cca2:	4e99      	ldr	r6, [pc, #612]	; (800cf08 <CheckAttachedButtons+0x32c>)
 800cca4:	42b1      	cmp	r1, r6
 800cca6:	d900      	bls.n	800ccaa <CheckAttachedButtons+0xce>
 800cca8:	e092      	b.n	800cdd0 <CheckAttachedButtons+0x1f4>
				if (clicked == 2
 800ccaa:	464f      	mov	r7, r9
					++releaseCounter[i];		// Advance the debounce counter
 800ccac:	3101      	adds	r1, #1
 800ccae:	5081      	str	r1, [r0, r2]
				if (clicked == 2
 800ccb0:	7fbf      	ldrb	r7, [r7, #30]
 800ccb2:	4996      	ldr	r1, [pc, #600]	; (800cf0c <CheckAttachedButtons+0x330>)
 800ccb4:	4893      	ldr	r0, [pc, #588]	; (800cf04 <CheckAttachedButtons+0x328>)
 800ccb6:	5c69      	ldrb	r1, [r5, r1]
 800ccb8:	7946      	ldrb	r6, [r0, #5]
 800ccba:	2f02      	cmp	r7, #2
 800ccbc:	d100      	bne.n	800ccc0 <CheckAttachedButtons+0xe4>
 800ccbe:	e092      	b.n	800cde6 <CheckAttachedButtons+0x20a>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800ccc0:	42b1      	cmp	r1, r6
 800ccc2:	d900      	bls.n	800ccc6 <CheckAttachedButtons+0xea>
 800ccc4:	e139      	b.n	800cf3a <CheckAttachedButtons+0x35e>
 800ccc6:	4646      	mov	r6, r8
 800ccc8:	3650      	adds	r6, #80	; 0x50
 800ccca:	58b6      	ldr	r6, [r6, r2]
			if (pressCounter[i] < BOS.buttons.debounce) {
 800cccc:	8801      	ldrh	r1, [r0, #0]
 800ccce:	9603      	str	r6, [sp, #12]
 800ccd0:	4299      	cmp	r1, r3
 800ccd2:	d826      	bhi.n	800cd22 <CheckAttachedButtons+0x146>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800ccd4:	d105      	bne.n	800cce2 <CheckAttachedButtons+0x106>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800ccd6:	2707      	movs	r7, #7
 800ccd8:	7267      	strb	r7, [r4, #9]
					++pressCounter[i];
 800ccda:	4647      	mov	r7, r8
 800ccdc:	3301      	adds	r3, #1
 800ccde:	3738      	adds	r7, #56	; 0x38
 800cce0:	50bb      	str	r3, [r7, r2]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cce2:	9e03      	ldr	r6, [sp, #12]
 800cce4:	42b1      	cmp	r1, r6
 800cce6:	d205      	bcs.n	800ccf4 <CheckAttachedButtons+0x118>
					releaseCounter[i] = 0;
 800cce8:	4646      	mov	r6, r8
 800ccea:	2700      	movs	r7, #0
 800ccec:	3650      	adds	r6, #80	; 0x50
 800ccee:	50b7      	str	r7, [r6, r2]
 800ccf0:	2600      	movs	r6, #0
 800ccf2:	9603      	str	r6, [sp, #12]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800ccf4:	8847      	ldrh	r7, [r0, #2]
 800ccf6:	9705      	str	r7, [sp, #20]
 800ccf8:	429f      	cmp	r7, r3
 800ccfa:	d300      	bcc.n	800ccfe <CheckAttachedButtons+0x122>
 800ccfc:	e07a      	b.n	800cdf4 <CheckAttachedButtons+0x218>
						&& pressCounter[i] < 500) {
 800ccfe:	27f4      	movs	r7, #244	; 0xf4
 800cd00:	37ff      	adds	r7, #255	; 0xff
 800cd02:	42bb      	cmp	r3, r7
 800cd04:	d900      	bls.n	800cd08 <CheckAttachedButtons+0x12c>
 800cd06:	e075      	b.n	800cdf4 <CheckAttachedButtons+0x218>
					if (clicked == 0)
 800cd08:	464b      	mov	r3, r9
 800cd0a:	7f9b      	ldrb	r3, [r3, #30]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d100      	bne.n	800cd12 <CheckAttachedButtons+0x136>
 800cd10:	e1d8      	b.n	800d0c4 <CheckAttachedButtons+0x4e8>
					else if (clicked == 2) {
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d105      	bne.n	800cd22 <CheckAttachedButtons+0x146>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800cd16:	4b7d      	ldr	r3, [pc, #500]	; (800cf0c <CheckAttachedButtons+0x330>)
 800cd18:	7907      	ldrb	r7, [r0, #4]
 800cd1a:	5ceb      	ldrb	r3, [r5, r3]
 800cd1c:	429f      	cmp	r7, r3
 800cd1e:	d200      	bcs.n	800cd22 <CheckAttachedButtons+0x146>
 800cd20:	e1dc      	b.n	800d0dc <CheckAttachedButtons+0x500>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800cd22:	9b03      	ldr	r3, [sp, #12]
 800cd24:	4299      	cmp	r1, r3
 800cd26:	d822      	bhi.n	800cd6e <CheckAttachedButtons+0x192>
 800cd28:	4643      	mov	r3, r8
 800cd2a:	8840      	ldrh	r0, [r0, #2]
 800cd2c:	3338      	adds	r3, #56	; 0x38
 800cd2e:	589b      	ldr	r3, [r3, r2]
 800cd30:	9005      	str	r0, [sp, #20]
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800cd32:	9803      	ldr	r0, [sp, #12]
 800cd34:	4281      	cmp	r1, r0
 800cd36:	d100      	bne.n	800cd3a <CheckAttachedButtons+0x15e>
 800cd38:	e19b      	b.n	800d072 <CheckAttachedButtons+0x496>
 800cd3a:	4640      	mov	r0, r8
 800cd3c:	3050      	adds	r0, #80	; 0x50
 800cd3e:	5880      	ldr	r0, [r0, r2]
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800cd40:	4299      	cmp	r1, r3
 800cd42:	d203      	bcs.n	800cd4c <CheckAttachedButtons+0x170>
					pressCounter[i] = 0;
 800cd44:	4643      	mov	r3, r8
 800cd46:	2100      	movs	r1, #0
 800cd48:	3338      	adds	r3, #56	; 0x38
 800cd4a:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800cd4c:	9b05      	ldr	r3, [sp, #20]
 800cd4e:	4283      	cmp	r3, r0
 800cd50:	d300      	bcc.n	800cd54 <CheckAttachedButtons+0x178>
 800cd52:	e091      	b.n	800ce78 <CheckAttachedButtons+0x29c>
						&& releaseCounter[i] < 500) {
 800cd54:	23f4      	movs	r3, #244	; 0xf4
 800cd56:	33ff      	adds	r3, #255	; 0xff
 800cd58:	4298      	cmp	r0, r3
 800cd5a:	d900      	bls.n	800cd5e <CheckAttachedButtons+0x182>
 800cd5c:	e08c      	b.n	800ce78 <CheckAttachedButtons+0x29c>
					if (clicked == 1) {
 800cd5e:	464b      	mov	r3, r9
 800cd60:	7f9b      	ldrb	r3, [r3, #30]
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d100      	bne.n	800cd68 <CheckAttachedButtons+0x18c>
 800cd66:	e15c      	b.n	800d022 <CheckAttachedButtons+0x446>
					} else if (clicked == 3) {
 800cd68:	2b03      	cmp	r3, #3
 800cd6a:	d100      	bne.n	800cd6e <CheckAttachedButtons+0x192>
 800cd6c:	e12d      	b.n	800cfca <CheckAttachedButtons+0x3ee>
			switch (button[i].state) {
 800cd6e:	7a63      	ldrb	r3, [r4, #9]
 800cd70:	3b05      	subs	r3, #5
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	2b09      	cmp	r3, #9
 800cd76:	d808      	bhi.n	800cd8a <CheckAttachedButtons+0x1ae>
 800cd78:	4a65      	ldr	r2, [pc, #404]	; (800cf10 <CheckAttachedButtons+0x334>)
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	58d3      	ldr	r3, [r2, r3]
 800cd7e:	469f      	mov	pc, r3
				buttonPressedCallback(i);
 800cd80:	4650      	mov	r0, sl
 800cd82:	f7ff fa01 	bl	800c188 <buttonPressedCallback>
				button[i].state = NONE;
 800cd86:	2300      	movs	r3, #0
 800cd88:	7263      	strb	r3, [r4, #9]
 800cd8a:	3501      	adds	r5, #1
 800cd8c:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800cd8e:	2d06      	cmp	r5, #6
 800cd90:	d000      	beq.n	800cd94 <CheckAttachedButtons+0x1b8>
 800cd92:	e733      	b.n	800cbfc <CheckAttachedButtons+0x20>
}
 800cd94:	b00b      	add	sp, #44	; 0x2c
 800cd96:	bc3c      	pop	{r2, r3, r4, r5}
 800cd98:	4690      	mov	r8, r2
 800cd9a:	4699      	mov	r9, r3
 800cd9c:	46a2      	mov	sl, r4
 800cd9e:	46ab      	mov	fp, r5
 800cda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (button[i].type) {
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d000      	beq.n	800cda8 <CheckAttachedButtons+0x1cc>
 800cda6:	e0b7      	b.n	800cf18 <CheckAttachedButtons+0x33c>
 800cda8:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800cdaa:	4658      	mov	r0, fp
 800cdac:	00aa      	lsls	r2, r5, #2
 800cdae:	3138      	adds	r1, #56	; 0x38
 800cdb0:	588b      	ldr	r3, [r1, r2]
 800cdb2:	2801      	cmp	r0, #1
 800cdb4:	d100      	bne.n	800cdb8 <CheckAttachedButtons+0x1dc>
 800cdb6:	e163      	b.n	800d080 <CheckAttachedButtons+0x4a4>
				else if (connected == GPIO_PIN_RESET)
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d000      	beq.n	800cdbe <CheckAttachedButtons+0x1e2>
 800cdbc:	e760      	b.n	800cc80 <CheckAttachedButtons+0xa4>
				if (releaseCounter[i] < 0xFFFF)
 800cdbe:	4640      	mov	r0, r8
 800cdc0:	2103      	movs	r1, #3
 800cdc2:	3050      	adds	r0, #80	; 0x50
 800cdc4:	9104      	str	r1, [sp, #16]
 800cdc6:	4e50      	ldr	r6, [pc, #320]	; (800cf08 <CheckAttachedButtons+0x32c>)
 800cdc8:	5881      	ldr	r1, [r0, r2]
 800cdca:	42b1      	cmp	r1, r6
 800cdcc:	d800      	bhi.n	800cdd0 <CheckAttachedButtons+0x1f4>
 800cdce:	e76c      	b.n	800ccaa <CheckAttachedButtons+0xce>
					releaseCounter[i] = 0;		// Reset debounce counter
 800cdd0:	2100      	movs	r1, #0
				if (clicked == 2
 800cdd2:	464f      	mov	r7, r9
					releaseCounter[i] = 0;		// Reset debounce counter
 800cdd4:	5081      	str	r1, [r0, r2]
				if (clicked == 2
 800cdd6:	7fbf      	ldrb	r7, [r7, #30]
 800cdd8:	494c      	ldr	r1, [pc, #304]	; (800cf0c <CheckAttachedButtons+0x330>)
 800cdda:	484a      	ldr	r0, [pc, #296]	; (800cf04 <CheckAttachedButtons+0x328>)
 800cddc:	5c69      	ldrb	r1, [r5, r1]
 800cdde:	7946      	ldrb	r6, [r0, #5]
 800cde0:	2f02      	cmp	r7, #2
 800cde2:	d000      	beq.n	800cde6 <CheckAttachedButtons+0x20a>
 800cde4:	e76c      	b.n	800ccc0 <CheckAttachedButtons+0xe4>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800cde6:	42b1      	cmp	r1, r6
 800cde8:	d900      	bls.n	800cdec <CheckAttachedButtons+0x210>
 800cdea:	e0a6      	b.n	800cf3a <CheckAttachedButtons+0x35e>
					++dblCounter[i];
 800cdec:	4e47      	ldr	r6, [pc, #284]	; (800cf0c <CheckAttachedButtons+0x330>)
 800cdee:	3101      	adds	r1, #1
 800cdf0:	55a9      	strb	r1, [r5, r6]
 800cdf2:	e768      	b.n	800ccc6 <CheckAttachedButtons+0xea>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800cdf4:	4f47      	ldr	r7, [pc, #284]	; (800cf14 <CheckAttachedButtons+0x338>)
 800cdf6:	46bc      	mov	ip, r7
 800cdf8:	001f      	movs	r7, r3
 800cdfa:	3ff5      	subs	r7, #245	; 0xf5
 800cdfc:	3fff      	subs	r7, #255	; 0xff
 800cdfe:	4567      	cmp	r7, ip
 800ce00:	d900      	bls.n	800ce04 <CheckAttachedButtons+0x228>
 800ce02:	e78e      	b.n	800cd22 <CheckAttachedButtons+0x146>
					if (clicked)
 800ce04:	464f      	mov	r7, r9
 800ce06:	7fbf      	ldrb	r7, [r7, #30]
 800ce08:	2f00      	cmp	r7, #0
 800ce0a:	d002      	beq.n	800ce12 <CheckAttachedButtons+0x236>
						clicked = 0;						// Cannot be a click
 800ce0c:	2700      	movs	r7, #0
 800ce0e:	464e      	mov	r6, r9
 800ce10:	77b7      	strb	r7, [r6, #30]
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800ce12:	7ae7      	ldrb	r7, [r4, #11]
 800ce14:	46bc      	mov	ip, r7
	t1 *= 1000;
 800ce16:	4666      	mov	r6, ip
 800ce18:	017f      	lsls	r7, r7, #5
 800ce1a:	1bbf      	subs	r7, r7, r6
 800ce1c:	00bf      	lsls	r7, r7, #2
 800ce1e:	4467      	add	r7, ip
 800ce20:	00ff      	lsls	r7, r7, #3
	if (pressCounter[port] == t1) {
 800ce22:	429f      	cmp	r7, r3
 800ce24:	d100      	bne.n	800ce28 <CheckAttachedButtons+0x24c>
 800ce26:	e0e5      	b.n	800cff4 <CheckAttachedButtons+0x418>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800ce28:	7b26      	ldrb	r6, [r4, #12]
 800ce2a:	46b4      	mov	ip, r6
	t2 *= 1000;
 800ce2c:	0177      	lsls	r7, r6, #5
 800ce2e:	1bbf      	subs	r7, r7, r6
 800ce30:	00bf      	lsls	r7, r7, #2
 800ce32:	4467      	add	r7, ip
 800ce34:	00ff      	lsls	r7, r7, #3
	} else if (pressCounter[port] == t2) {
 800ce36:	429f      	cmp	r7, r3
 800ce38:	d009      	beq.n	800ce4e <CheckAttachedButtons+0x272>
			t3 = button[port].pressedX3Sec;
 800ce3a:	7b66      	ldrb	r6, [r4, #13]
 800ce3c:	46b4      	mov	ip, r6
	t3 *= 1000;
 800ce3e:	0177      	lsls	r7, r6, #5
 800ce40:	1bbf      	subs	r7, r7, r6
 800ce42:	00bf      	lsls	r7, r7, #2
 800ce44:	4467      	add	r7, ip
 800ce46:	00ff      	lsls	r7, r7, #3
	} else if (pressCounter[port] == t3) {
 800ce48:	429f      	cmp	r7, r3
 800ce4a:	d000      	beq.n	800ce4e <CheckAttachedButtons+0x272>
 800ce4c:	e769      	b.n	800cd22 <CheckAttachedButtons+0x146>
		button[port].state = PRESSED_FOR_X2_SEC;
 800ce4e:	200a      	movs	r0, #10
 800ce50:	7260      	strb	r0, [r4, #9]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800ce52:	9803      	ldr	r0, [sp, #12]
 800ce54:	4281      	cmp	r1, r0
 800ce56:	d800      	bhi.n	800ce5a <CheckAttachedButtons+0x27e>
 800ce58:	e76b      	b.n	800cd32 <CheckAttachedButtons+0x156>
				if (!delayButtonStateReset
 800ce5a:	464b      	mov	r3, r9
 800ce5c:	7d1b      	ldrb	r3, [r3, #20]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d193      	bne.n	800cd8a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800ce62:	7c63      	ldrb	r3, [r4, #17]
 800ce64:	071b      	lsls	r3, r3, #28
 800ce66:	d590      	bpl.n	800cd8a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800ce6c:	2102      	movs	r1, #2
 800ce6e:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800ce70:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800ce72:	f7ff feaf 	bl	800cbd4 <buttonPressedForXCallback>
 800ce76:	e788      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
				} else if (releaseCounter[i] >= 500
 800ce78:	0003      	movs	r3, r0
 800ce7a:	4a26      	ldr	r2, [pc, #152]	; (800cf14 <CheckAttachedButtons+0x338>)
 800ce7c:	3bf5      	subs	r3, #245	; 0xf5
 800ce7e:	3bff      	subs	r3, #255	; 0xff
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d900      	bls.n	800ce86 <CheckAttachedButtons+0x2aa>
 800ce84:	e773      	b.n	800cd6e <CheckAttachedButtons+0x192>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800ce86:	7ba1      	ldrb	r1, [r4, #14]
	t1 *= 1000;
 800ce88:	014b      	lsls	r3, r1, #5
 800ce8a:	1a5b      	subs	r3, r3, r1
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	185b      	adds	r3, r3, r1
 800ce90:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800ce92:	4283      	cmp	r3, r0
 800ce94:	d100      	bne.n	800ce98 <CheckAttachedButtons+0x2bc>
 800ce96:	e0d9      	b.n	800d04c <CheckAttachedButtons+0x470>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800ce98:	7be1      	ldrb	r1, [r4, #15]
	t2 *= 1000;
 800ce9a:	014b      	lsls	r3, r1, #5
 800ce9c:	1a5b      	subs	r3, r3, r1
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	185b      	adds	r3, r3, r1
 800cea2:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t2) {
 800cea4:	4283      	cmp	r3, r0
 800cea6:	d008      	beq.n	800ceba <CheckAttachedButtons+0x2de>
			t3 = button[port].releasedY3Sec;
 800cea8:	7c21      	ldrb	r1, [r4, #16]
	t3 *= 1000;
 800ceaa:	014b      	lsls	r3, r1, #5
 800ceac:	1a5b      	subs	r3, r3, r1
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	185b      	adds	r3, r3, r1
 800ceb2:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t3) {
 800ceb4:	4283      	cmp	r3, r0
 800ceb6:	d000      	beq.n	800ceba <CheckAttachedButtons+0x2de>
 800ceb8:	e759      	b.n	800cd6e <CheckAttachedButtons+0x192>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800ceba:	230d      	movs	r3, #13
 800cebc:	7263      	strb	r3, [r4, #9]
				if (!delayButtonStateReset
 800cebe:	464b      	mov	r3, r9
 800cec0:	7d1b      	ldrb	r3, [r3, #20]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d000      	beq.n	800cec8 <CheckAttachedButtons+0x2ec>
 800cec6:	e760      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800cec8:	7c63      	ldrb	r3, [r4, #17]
 800ceca:	065b      	lsls	r3, r3, #25
 800cecc:	d400      	bmi.n	800ced0 <CheckAttachedButtons+0x2f4>
 800cece:	e75c      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800ced0:	2301      	movs	r3, #1
 800ced2:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800ced4:	2102      	movs	r1, #2
 800ced6:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800ced8:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800ceda:	f7ff fe7d 	bl	800cbd8 <buttonReleasedForYCallback>
 800cede:	e754      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800cee0:	8831      	ldrh	r1, [r6, #0]
 800cee2:	2201      	movs	r2, #1
 800cee4:	9808      	ldr	r0, [sp, #32]
 800cee6:	f004 fb75 	bl	80115d4 <HAL_GPIO_WritePin>
				Delay_us(10);
 800ceea:	200a      	movs	r0, #10
 800ceec:	f000 fcc4 	bl	800d878 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800cef0:	8839      	ldrh	r1, [r7, #0]
 800cef2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cef4:	f004 fb68 	bl	80115c8 <HAL_GPIO_ReadPin>
 800cef8:	4683      	mov	fp, r0
 800cefa:	e6a5      	b.n	800cc48 <CheckAttachedButtons+0x6c>
 800cefc:	200023d8 	.word	0x200023d8
 800cf00:	20002458 	.word	0x20002458
 800cf04:	2000687c 	.word	0x2000687c
 800cf08:	0000fffe 	.word	0x0000fffe
 800cf0c:	20002470 	.word	0x20002470
 800cf10:	08018800 	.word	0x08018800
 800cf14:	0000fe0a 	.word	0x0000fe0a
 800cf18:	4643      	mov	r3, r8
			if (state == CLOSED || state == ON) {
 800cf1a:	9904      	ldr	r1, [sp, #16]
 800cf1c:	3338      	adds	r3, #56	; 0x38
 800cf1e:	00aa      	lsls	r2, r5, #2
 800cf20:	589b      	ldr	r3, [r3, r2]
 800cf22:	2904      	cmp	r1, #4
 800cf24:	d000      	beq.n	800cf28 <CheckAttachedButtons+0x34c>
 800cf26:	e6af      	b.n	800cc88 <CheckAttachedButtons+0xac>
				if (pressCounter[i] < 0xFFFF)
 800cf28:	4972      	ldr	r1, [pc, #456]	; (800d0f4 <CheckAttachedButtons+0x518>)
 800cf2a:	428b      	cmp	r3, r1
 800cf2c:	d819      	bhi.n	800cf62 <CheckAttachedButtons+0x386>
					++pressCounter[i];			// Advance the debounce counter
 800cf2e:	4641      	mov	r1, r8
 800cf30:	3301      	adds	r3, #1
 800cf32:	3138      	adds	r1, #56	; 0x38
 800cf34:	508b      	str	r3, [r1, r2]
 800cf36:	4870      	ldr	r0, [pc, #448]	; (800d0f8 <CheckAttachedButtons+0x51c>)
 800cf38:	e6c5      	b.n	800ccc6 <CheckAttachedButtons+0xea>
					clicked = 0;
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	464e      	mov	r6, r9
 800cf3e:	77b1      	strb	r1, [r6, #30]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800cf40:	4e6e      	ldr	r6, [pc, #440]	; (800d0fc <CheckAttachedButtons+0x520>)
 800cf42:	55a9      	strb	r1, [r5, r6]
 800cf44:	e6bf      	b.n	800ccc6 <CheckAttachedButtons+0xea>
 800cf46:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800cf48:	4658      	mov	r0, fp
 800cf4a:	00aa      	lsls	r2, r5, #2
 800cf4c:	3138      	adds	r1, #56	; 0x38
 800cf4e:	588b      	ldr	r3, [r1, r2]
 800cf50:	2801      	cmp	r0, #1
 800cf52:	d100      	bne.n	800cf56 <CheckAttachedButtons+0x37a>
 800cf54:	e09d      	b.n	800d092 <CheckAttachedButtons+0x4b6>
				else if (connected == GPIO_PIN_RESET)
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d000      	beq.n	800cf5c <CheckAttachedButtons+0x380>
 800cf5a:	e691      	b.n	800cc80 <CheckAttachedButtons+0xa4>
					state = OFF;
 800cf5c:	2101      	movs	r1, #1
 800cf5e:	9104      	str	r1, [sp, #16]
 800cf60:	e69c      	b.n	800cc9c <CheckAttachedButtons+0xc0>
					pressCounter[i] = 0;			// Reset debounce counter
 800cf62:	4643      	mov	r3, r8
 800cf64:	2100      	movs	r1, #0
 800cf66:	3338      	adds	r3, #56	; 0x38
 800cf68:	5099      	str	r1, [r3, r2]
 800cf6a:	4863      	ldr	r0, [pc, #396]	; (800d0f8 <CheckAttachedButtons+0x51c>)
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	e6aa      	b.n	800ccc6 <CheckAttachedButtons+0xea>
				if (!delayButtonStateReset
 800cf70:	464b      	mov	r3, r9
 800cf72:	7d1b      	ldrb	r3, [r3, #20]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d000      	beq.n	800cf7a <CheckAttachedButtons+0x39e>
 800cf78:	e707      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800cf7a:	7c63      	ldrb	r3, [r4, #17]
 800cf7c:	06db      	lsls	r3, r3, #27
 800cf7e:	d400      	bmi.n	800cf82 <CheckAttachedButtons+0x3a6>
 800cf80:	e703      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800cf82:	2301      	movs	r3, #1
 800cf84:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800cf86:	2103      	movs	r1, #3
 800cf88:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800cf8a:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800cf8c:	f7ff fe22 	bl	800cbd4 <buttonPressedForXCallback>
 800cf90:	e6fb      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
				buttonReleasedCallback(i);
 800cf92:	4650      	mov	r0, sl
 800cf94:	f7ff fe18 	bl	800cbc8 <buttonReleasedCallback>
				button[i].state = NONE;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	3501      	adds	r5, #1
 800cf9c:	7263      	strb	r3, [r4, #9]
 800cf9e:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800cfa0:	2d06      	cmp	r5, #6
 800cfa2:	d000      	beq.n	800cfa6 <CheckAttachedButtons+0x3ca>
 800cfa4:	e62a      	b.n	800cbfc <CheckAttachedButtons+0x20>
 800cfa6:	e6f5      	b.n	800cd94 <CheckAttachedButtons+0x1b8>
				if (!delayButtonStateReset
 800cfa8:	464b      	mov	r3, r9
 800cfaa:	7d1b      	ldrb	r3, [r3, #20]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d000      	beq.n	800cfb2 <CheckAttachedButtons+0x3d6>
 800cfb0:	e6eb      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800cfb2:	7c63      	ldrb	r3, [r4, #17]
 800cfb4:	2b7f      	cmp	r3, #127	; 0x7f
 800cfb6:	d800      	bhi.n	800cfba <CheckAttachedButtons+0x3de>
 800cfb8:	e6e7      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800cfbe:	2103      	movs	r1, #3
 800cfc0:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800cfc2:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800cfc4:	f7ff fe08 	bl	800cbd8 <buttonReleasedForYCallback>
 800cfc8:	e6df      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800cfca:	3303      	adds	r3, #3
 800cfcc:	7263      	strb	r3, [r4, #9]
						clicked = 0;			// Prepare for a single click
 800cfce:	464a      	mov	r2, r9
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	7793      	strb	r3, [r2, #30]
				if (!delayButtonStateReset
 800cfd4:	464b      	mov	r3, r9
 800cfd6:	7d1b      	ldrb	r3, [r3, #20]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d000      	beq.n	800cfde <CheckAttachedButtons+0x402>
 800cfdc:	e6d5      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800cfde:	7c63      	ldrb	r3, [r4, #17]
 800cfe0:	079b      	lsls	r3, r3, #30
 800cfe2:	d400      	bmi.n	800cfe6 <CheckAttachedButtons+0x40a>
 800cfe4:	e6d1      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	464a      	mov	r2, r9
					buttonDblClickedCallback(i);
 800cfea:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800cfec:	7513      	strb	r3, [r2, #20]
					buttonDblClickedCallback(i);
 800cfee:	f7ff fdef 	bl	800cbd0 <buttonDblClickedCallback>
 800cff2:	e6ca      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
		button[port].state = PRESSED_FOR_X1_SEC;
 800cff4:	2009      	movs	r0, #9
 800cff6:	7260      	strb	r0, [r4, #9]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800cff8:	9803      	ldr	r0, [sp, #12]
 800cffa:	4281      	cmp	r1, r0
 800cffc:	d800      	bhi.n	800d000 <CheckAttachedButtons+0x424>
 800cffe:	e698      	b.n	800cd32 <CheckAttachedButtons+0x156>
				if (!delayButtonStateReset
 800d000:	464b      	mov	r3, r9
 800d002:	7d1b      	ldrb	r3, [r3, #20]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d000      	beq.n	800d00a <CheckAttachedButtons+0x42e>
 800d008:	e6bf      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800d00a:	7c63      	ldrb	r3, [r4, #17]
 800d00c:	075b      	lsls	r3, r3, #29
 800d00e:	d400      	bmi.n	800d012 <CheckAttachedButtons+0x436>
 800d010:	e6bb      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800d012:	2301      	movs	r3, #1
 800d014:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800d016:	2101      	movs	r1, #1
 800d018:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800d01a:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800d01c:	f7ff fdda 	bl	800cbd4 <buttonPressedForXCallback>
 800d020:	e6b3      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
						clicked = 2;			// Prepare for a double click
 800d022:	464a      	mov	r2, r9
						button[i].state = CLICKED;// Record a single button click event
 800d024:	3304      	adds	r3, #4
 800d026:	7263      	strb	r3, [r4, #9]
						clicked = 2;			// Prepare for a double click
 800d028:	3b03      	subs	r3, #3
 800d02a:	7793      	strb	r3, [r2, #30]
				if (!delayButtonStateReset
 800d02c:	464b      	mov	r3, r9
 800d02e:	7d1b      	ldrb	r3, [r3, #20]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d000      	beq.n	800d036 <CheckAttachedButtons+0x45a>
 800d034:	e6a9      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800d036:	7c62      	ldrb	r2, [r4, #17]
 800d038:	3301      	adds	r3, #1
 800d03a:	4213      	tst	r3, r2
 800d03c:	d100      	bne.n	800d040 <CheckAttachedButtons+0x464>
 800d03e:	e6a4      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800d040:	464a      	mov	r2, r9
					buttonClickedCallback(i);
 800d042:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800d044:	7513      	strb	r3, [r2, #20]
					buttonClickedCallback(i);
 800d046:	f7ff fdc1 	bl	800cbcc <buttonClickedCallback>
 800d04a:	e69e      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800d04c:	230c      	movs	r3, #12
 800d04e:	7263      	strb	r3, [r4, #9]
				if (!delayButtonStateReset
 800d050:	464b      	mov	r3, r9
 800d052:	7d1b      	ldrb	r3, [r3, #20]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d000      	beq.n	800d05a <CheckAttachedButtons+0x47e>
 800d058:	e697      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800d05a:	7c63      	ldrb	r3, [r4, #17]
 800d05c:	069b      	lsls	r3, r3, #26
 800d05e:	d400      	bmi.n	800d062 <CheckAttachedButtons+0x486>
 800d060:	e693      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800d062:	2301      	movs	r3, #1
 800d064:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800d066:	2101      	movs	r1, #1
 800d068:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800d06a:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800d06c:	f7ff fdb4 	bl	800cbd8 <buttonReleasedForYCallback>
 800d070:	e68b      	b.n	800cd8a <CheckAttachedButtons+0x1ae>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800d072:	2008      	movs	r0, #8
					++releaseCounter[i];
 800d074:	4646      	mov	r6, r8
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800d076:	7260      	strb	r0, [r4, #9]
					++releaseCounter[i];
 800d078:	3650      	adds	r6, #80	; 0x50
 800d07a:	1c48      	adds	r0, r1, #1
 800d07c:	50b0      	str	r0, [r6, r2]
 800d07e:	e65f      	b.n	800cd40 <CheckAttachedButtons+0x164>
				if (pressCounter[i] < 0xFFFF)
 800d080:	481c      	ldr	r0, [pc, #112]	; (800d0f4 <CheckAttachedButtons+0x518>)
 800d082:	4283      	cmp	r3, r0
 800d084:	d80e      	bhi.n	800d0a4 <CheckAttachedButtons+0x4c8>
					++pressCounter[i];			// Advance the debounce counter
 800d086:	3301      	adds	r3, #1
 800d088:	508b      	str	r3, [r1, r2]
 800d08a:	2104      	movs	r1, #4
 800d08c:	481a      	ldr	r0, [pc, #104]	; (800d0f8 <CheckAttachedButtons+0x51c>)
 800d08e:	9104      	str	r1, [sp, #16]
 800d090:	e619      	b.n	800ccc6 <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 800d092:	4818      	ldr	r0, [pc, #96]	; (800d0f4 <CheckAttachedButtons+0x518>)
 800d094:	4283      	cmp	r3, r0
 800d096:	d919      	bls.n	800d0cc <CheckAttachedButtons+0x4f0>
					pressCounter[i] = 0;			// Reset debounce counter
 800d098:	2300      	movs	r3, #0
 800d09a:	508b      	str	r3, [r1, r2]
 800d09c:	2102      	movs	r1, #2
 800d09e:	4816      	ldr	r0, [pc, #88]	; (800d0f8 <CheckAttachedButtons+0x51c>)
 800d0a0:	9104      	str	r1, [sp, #16]
 800d0a2:	e610      	b.n	800ccc6 <CheckAttachedButtons+0xea>
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	508b      	str	r3, [r1, r2]
					state = CLOSED;
 800d0a8:	2104      	movs	r1, #4
 800d0aa:	4813      	ldr	r0, [pc, #76]	; (800d0f8 <CheckAttachedButtons+0x51c>)
 800d0ac:	9104      	str	r1, [sp, #16]
 800d0ae:	e60a      	b.n	800ccc6 <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 800d0b0:	4810      	ldr	r0, [pc, #64]	; (800d0f4 <CheckAttachedButtons+0x518>)
 800d0b2:	4283      	cmp	r3, r0
 800d0b4:	d90a      	bls.n	800d0cc <CheckAttachedButtons+0x4f0>
					pressCounter[i] = 0;			// Reset debounce counter
 800d0b6:	465b      	mov	r3, fp
 800d0b8:	508b      	str	r3, [r1, r2]
					state = ON;
 800d0ba:	2102      	movs	r1, #2
					pressCounter[i] = 0;			// Reset debounce counter
 800d0bc:	2300      	movs	r3, #0
					state = ON;
 800d0be:	9104      	str	r1, [sp, #16]
 800d0c0:	480d      	ldr	r0, [pc, #52]	; (800d0f8 <CheckAttachedButtons+0x51c>)
 800d0c2:	e600      	b.n	800ccc6 <CheckAttachedButtons+0xea>
						clicked = 1;		// Record a possible single click
 800d0c4:	464e      	mov	r6, r9
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	77b3      	strb	r3, [r6, #30]
 800d0ca:	e62a      	b.n	800cd22 <CheckAttachedButtons+0x146>
					state = ON;
 800d0cc:	2102      	movs	r1, #2
 800d0ce:	9104      	str	r1, [sp, #16]
					++pressCounter[i];			// Advance the debounce counter
 800d0d0:	4641      	mov	r1, r8
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	3138      	adds	r1, #56	; 0x38
 800d0d6:	508b      	str	r3, [r1, r2]
 800d0d8:	4807      	ldr	r0, [pc, #28]	; (800d0f8 <CheckAttachedButtons+0x51c>)
 800d0da:	e5f4      	b.n	800ccc6 <CheckAttachedButtons+0xea>
								&& dblCounter[i]
 800d0dc:	7947      	ldrb	r7, [r0, #5]
 800d0de:	429f      	cmp	r7, r3
 800d0e0:	d800      	bhi.n	800d0e4 <CheckAttachedButtons+0x508>
 800d0e2:	e61e      	b.n	800cd22 <CheckAttachedButtons+0x146>
							clicked = 3;	// Record a possible double click
 800d0e4:	2303      	movs	r3, #3
 800d0e6:	464e      	mov	r6, r9
 800d0e8:	77b3      	strb	r3, [r6, #30]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	4e03      	ldr	r6, [pc, #12]	; (800d0fc <CheckAttachedButtons+0x520>)
 800d0ee:	55ab      	strb	r3, [r5, r6]
 800d0f0:	e617      	b.n	800cd22 <CheckAttachedButtons+0x146>
 800d0f2:	46c0      	nop			; (mov r8, r8)
 800d0f4:	0000fffe 	.word	0x0000fffe
 800d0f8:	2000687c 	.word	0x2000687c
 800d0fc:	20002470 	.word	0x20002470

0800d100 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	4b03      	ldr	r3, [pc, #12]	; (800d114 <NVIC_SystemReset+0x14>)
 800d106:	4a04      	ldr	r2, [pc, #16]	; (800d118 <NVIC_SystemReset+0x18>)
 800d108:	60da      	str	r2, [r3, #12]
 800d10a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800d10e:	46c0      	nop			; (mov r8, r8)
 800d110:	e7fd      	b.n	800d10e <NVIC_SystemReset+0xe>
 800d112:	46c0      	nop			; (mov r8, r8)
 800d114:	e000ed00 	.word	0xe000ed00
 800d118:	05fa0004 	.word	0x05fa0004

0800d11c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d11c:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d11e:	f002 fd89 	bl	800fc34 <HAL_IncTick>
  osSystickHandler();  
 800d122:	f000 ff5d 	bl	800dfe0 <osSystickHandler>

}
 800d126:	bd10      	pop	{r4, pc}

0800d128 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d128:	b530      	push	{r4, r5, lr}
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800d12a:	24ff      	movs	r4, #255	; 0xff
 800d12c:	4d09      	ldr	r5, [pc, #36]	; (800d154 <HardFault_Handler+0x2c>)
{
 800d12e:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800d130:	7828      	ldrb	r0, [r5, #0]
 800d132:	23ff      	movs	r3, #255	; 0xff
 800d134:	2211      	movs	r2, #17
 800d136:	4908      	ldr	r1, [pc, #32]	; (800d158 <HardFault_Handler+0x30>)
 800d138:	9400      	str	r4, [sp, #0]
 800d13a:	f000 fd47 	bl	800dbcc <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d13e:	4b07      	ldr	r3, [pc, #28]	; (800d15c <HardFault_Handler+0x34>)
 800d140:	7828      	ldrb	r0, [r5, #0]
 800d142:	6819      	ldr	r1, [r3, #0]
 800d144:	220f      	movs	r2, #15
 800d146:	23ff      	movs	r3, #255	; 0xff
 800d148:	9400      	str	r4, [sp, #0]
 800d14a:	f000 fd3f 	bl	800dbcc <writePxMutex>
	NVIC_SystemReset();
 800d14e:	f7ff ffd7 	bl	800d100 <NVIC_SystemReset>
 800d152:	46c0      	nop			; (mov r8, r8)
 800d154:	20000c38 	.word	0x20000c38
 800d158:	0801b6d8 	.word	0x0801b6d8
 800d15c:	200000b0 	.word	0x200000b0

0800d160 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d160:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d162:	4802      	ldr	r0, [pc, #8]	; (800d16c <USART1_IRQHandler+0xc>)
 800d164:	f006 f8ca 	bl	80132fc <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d168:	bd10      	pop	{r4, pc}
 800d16a:	46c0      	nop			; (mov r8, r8)
 800d16c:	20006ac8 	.word	0x20006ac8

0800d170 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d170:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d172:	4802      	ldr	r0, [pc, #8]	; (800d17c <USART2_IRQHandler+0xc>)
 800d174:	f006 f8c2 	bl	80132fc <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d178:	bd10      	pop	{r4, pc}
 800d17a:	46c0      	nop			; (mov r8, r8)
 800d17c:	20006bc0 	.word	0x20006bc0

0800d180 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d180:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d182:	4805      	ldr	r0, [pc, #20]	; (800d198 <USART3_8_IRQHandler+0x18>)
 800d184:	f006 f8ba 	bl	80132fc <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d188:	4804      	ldr	r0, [pc, #16]	; (800d19c <USART3_8_IRQHandler+0x1c>)
 800d18a:	f006 f8b7 	bl	80132fc <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d18e:	4804      	ldr	r0, [pc, #16]	; (800d1a0 <USART3_8_IRQHandler+0x20>)
 800d190:	f006 f8b4 	bl	80132fc <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d194:	bd10      	pop	{r4, pc}
 800d196:	46c0      	nop			; (mov r8, r8)
 800d198:	200069a0 	.word	0x200069a0
 800d19c:	20006a58 	.word	0x20006a58
 800d1a0:	20006b48 	.word	0x20006b48

0800d1a4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d1a4:	4b0c      	ldr	r3, [pc, #48]	; (800d1d8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800d1a6:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	2310      	movs	r3, #16
 800d1ac:	4213      	tst	r3, r2
 800d1ae:	d10e      	bne.n	800d1ce <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d1b0:	4a0a      	ldr	r2, [pc, #40]	; (800d1dc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d1b2:	6811      	ldr	r1, [r2, #0]
 800d1b4:	05c9      	lsls	r1, r1, #23
 800d1b6:	d406      	bmi.n	800d1c6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d1b8:	6812      	ldr	r2, [r2, #0]
 800d1ba:	4213      	tst	r3, r2
 800d1bc:	d002      	beq.n	800d1c4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d1be:	4808      	ldr	r0, [pc, #32]	; (800d1e0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d1c0:	f003 fa86 	bl	80106d0 <HAL_DMA_IRQHandler>
	}
}
 800d1c4:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800d1c6:	2002      	movs	r0, #2
 800d1c8:	f7fa f9ce 	bl	8007568 <DMA_IRQHandler>
 800d1cc:	e7fa      	b.n	800d1c4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		DMA_IRQHandler(P5);
 800d1ce:	2005      	movs	r0, #5
 800d1d0:	f7fa f9ca 	bl	8007568 <DMA_IRQHandler>
 800d1d4:	e7f6      	b.n	800d1c4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
 800d1d6:	46c0      	nop			; (mov r8, r8)
 800d1d8:	40020400 	.word	0x40020400
 800d1dc:	40020000 	.word	0x40020000
 800d1e0:	200021dc 	.word	0x200021dc

0800d1e4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d1e4:	4b12      	ldr	r3, [pc, #72]	; (800d230 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800d1e6:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	03d2      	lsls	r2, r2, #15
 800d1ec:	d414      	bmi.n	800d218 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	02d2      	lsls	r2, r2, #11
 800d1f2:	d40d      	bmi.n	800d210 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d1f4:	4a0f      	ldr	r2, [pc, #60]	; (800d234 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800d1f6:	6812      	ldr	r2, [r2, #0]
 800d1f8:	05d2      	lsls	r2, r2, #23
 800d1fa:	d411      	bmi.n	800d220 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	04d2      	lsls	r2, r2, #19
 800d200:	d412      	bmi.n	800d228 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	01db      	lsls	r3, r3, #7
 800d206:	d506      	bpl.n	800d216 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d208:	480b      	ldr	r0, [pc, #44]	; (800d238 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d20a:	f003 fa61 	bl	80106d0 <HAL_DMA_IRQHandler>
	}
}
 800d20e:	e002      	b.n	800d216 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800d210:	2004      	movs	r0, #4
 800d212:	f7fa f9a9 	bl	8007568 <DMA_IRQHandler>
}
 800d216:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800d218:	2003      	movs	r0, #3
 800d21a:	f7fa f9a5 	bl	8007568 <DMA_IRQHandler>
 800d21e:	e7fa      	b.n	800d216 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800d220:	2006      	movs	r0, #6
 800d222:	f7fa f9a1 	bl	8007568 <DMA_IRQHandler>
 800d226:	e7f6      	b.n	800d216 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d228:	4804      	ldr	r0, [pc, #16]	; (800d23c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800d22a:	f003 fa51 	bl	80106d0 <HAL_DMA_IRQHandler>
 800d22e:	e7f2      	b.n	800d216 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800d230:	40020000 	.word	0x40020000
 800d234:	40020400 	.word	0x40020400
 800d238:	2000224c 	.word	0x2000224c
 800d23c:	20002214 	.word	0x20002214

0800d240 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800d240:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800d242:	4802      	ldr	r0, [pc, #8]	; (800d24c <ADC1_COMP_IRQHandler+0xc>)
 800d244:	f002 ff3c 	bl	80100c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800d248:	bd10      	pop	{r4, pc}
 800d24a:	46c0      	nop			; (mov r8, r8)
 800d24c:	20006c58 	.word	0x20006c58

0800d250 <HAL_UART_TxCpltCallback>:
/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d250:	2300      	movs	r3, #0
{
 800d252:	b510      	push	{r4, lr}
 800d254:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d256:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d258:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800d25a:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d001      	beq.n	800d264 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d260:	f7fd ff66 	bl	800b130 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d264:	0020      	movs	r0, r4
 800d266:	f7fc ffa1 	bl	800a1ac <GetPort>
 800d26a:	4b04      	ldr	r3, [pc, #16]	; (800d27c <HAL_UART_TxCpltCallback+0x2c>)
 800d26c:	0080      	lsls	r0, r0, #2
 800d26e:	58c0      	ldr	r0, [r0, r3]
 800d270:	a901      	add	r1, sp, #4
 800d272:	f001 f9ed 	bl	800e650 <xQueueGiveFromISR>
}
 800d276:	b002      	add	sp, #8
 800d278:	bd10      	pop	{r4, pc}
 800d27a:	46c0      	nop			; (mov r8, r8)
 800d27c:	20006900 	.word	0x20006900

0800d280 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d280:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d282:	2369      	movs	r3, #105	; 0x69
 800d284:	2501      	movs	r5, #1
 800d286:	54c5      	strb	r5, [r0, r3]
{
 800d288:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d28a:	f7fc ff8f 	bl	800a1ac <GetPort>
	if (portStatus[port] == STREAM) {
 800d28e:	4b0b      	ldr	r3, [pc, #44]	; (800d2bc <HAL_UART_ErrorCallback+0x3c>)
 800d290:	5c1b      	ldrb	r3, [r3, r0]
 800d292:	2b02      	cmp	r3, #2
 800d294:	d004      	beq.n	800d2a0 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d296:	4b0a      	ldr	r3, [pc, #40]	; (800d2c0 <HAL_UART_ErrorCallback+0x40>)
 800d298:	1818      	adds	r0, r3, r0
 800d29a:	3801      	subs	r0, #1
 800d29c:	7005      	strb	r5, [r0, #0]
	}	
}
 800d29e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d2a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2a2:	3801      	subs	r0, #1
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	0080      	lsls	r0, r0, #2
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	4b06      	ldr	r3, [pc, #24]	; (800d2c4 <HAL_UART_ErrorCallback+0x44>)
 800d2ac:	b292      	uxth	r2, r2
 800d2ae:	58c3      	ldr	r3, [r0, r3]
 800d2b0:	0020      	movs	r0, r4
 800d2b2:	6819      	ldr	r1, [r3, #0]
 800d2b4:	3128      	adds	r1, #40	; 0x28
 800d2b6:	f005 fca1 	bl	8012bfc <HAL_UART_Receive_DMA>
 800d2ba:	e7f0      	b.n	800d29e <HAL_UART_ErrorCallback+0x1e>
 800d2bc:	20000c3c 	.word	0x20000c3c
 800d2c0:	2000189c 	.word	0x2000189c
 800d2c4:	20001860 	.word	0x20001860

0800d2c8 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800d2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ca:	46de      	mov	lr, fp
 800d2cc:	464e      	mov	r6, r9
 800d2ce:	4645      	mov	r5, r8
 800d2d0:	4657      	mov	r7, sl
 800d2d2:	b5e0      	push	{r5, r6, r7, lr}
 800d2d4:	b085      	sub	sp, #20
 800d2d6:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800d2d8:	f7fc ff68 	bl	800a1ac <GetPort>
	uint8_t port_index = port_number - 1;
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d2dc:	4e63      	ldr	r6, [pc, #396]	; (800d46c <HAL_UART_RxCpltCallback+0x1a4>)
	uint8_t port_index = port_number - 1;
 800d2de:	1e43      	subs	r3, r0, #1
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	4a63      	ldr	r2, [pc, #396]	; (800d470 <HAL_UART_RxCpltCallback+0x1a8>)
 800d2e4:	5cf5      	ldrb	r5, [r6, r3]
 800d2e6:	5c11      	ldrb	r1, [r2, r0]
 800d2e8:	2d0d      	cmp	r5, #13
 800d2ea:	d00a      	beq.n	800d302 <HAL_UART_RxCpltCallback+0x3a>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800d2ec:	2903      	cmp	r1, #3
 800d2ee:	d00c      	beq.n	800d30a <HAL_UART_RxCpltCallback+0x42>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d2f0:	2d48      	cmp	r5, #72	; 0x48
 800d2f2:	d06d      	beq.n	800d3d0 <HAL_UART_RxCpltCallback+0x108>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800d2f4:	2d5a      	cmp	r5, #90	; 0x5a
 800d2f6:	d11b      	bne.n	800d330 <HAL_UART_RxCpltCallback+0x68>
 800d2f8:	2907      	cmp	r1, #7
 800d2fa:	d11c      	bne.n	800d336 <HAL_UART_RxCpltCallback+0x6e>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800d2fc:	2308      	movs	r3, #8
 800d2fe:	5413      	strb	r3, [r2, r0]
 800d300:	e006      	b.n	800d310 <HAL_UART_RxCpltCallback+0x48>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d302:	2900      	cmp	r1, #0
 800d304:	d048      	beq.n	800d398 <HAL_UART_RxCpltCallback+0xd0>
	else if(portStatus[port_number] == CLI)
 800d306:	2903      	cmp	r1, #3
 800d308:	d112      	bne.n	800d330 <HAL_UART_RxCpltCallback+0x68>
		Read_In_CLI_Task_Flag = 1;
 800d30a:	4b5a      	ldr	r3, [pc, #360]	; (800d474 <HAL_UART_RxCpltCallback+0x1ac>)
 800d30c:	2201      	movs	r2, #1
 800d30e:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800d310:	0020      	movs	r0, r4
 800d312:	f7fc ff4b 	bl	800a1ac <GetPort>
 800d316:	1e41      	subs	r1, r0, #1
 800d318:	1871      	adds	r1, r6, r1
 800d31a:	2201      	movs	r2, #1
 800d31c:	0020      	movs	r0, r4
 800d31e:	f005 fc6d 	bl	8012bfc <HAL_UART_Receive_DMA>
}
 800d322:	b005      	add	sp, #20
 800d324:	bc3c      	pop	{r2, r3, r4, r5}
 800d326:	4690      	mov	r8, r2
 800d328:	4699      	mov	r9, r3
 800d32a:	46a2      	mov	sl, r4
 800d32c:	46ab      	mov	fp, r5
 800d32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800d330:	2907      	cmp	r1, #7
 800d332:	d100      	bne.n	800d336 <HAL_UART_RxCpltCallback+0x6e>
 800d334:	e081      	b.n	800d43a <HAL_UART_RxCpltCallback+0x172>
	else if(portStatus[port_number] == Z_Status)
 800d336:	2908      	cmp	r1, #8
 800d338:	d100      	bne.n	800d33c <HAL_UART_RxCpltCallback+0x74>
 800d33a:	e081      	b.n	800d440 <HAL_UART_RxCpltCallback+0x178>
	else if(portStatus[port_number] == MSG)
 800d33c:	2901      	cmp	r1, #1
 800d33e:	d1e7      	bne.n	800d310 <HAL_UART_RxCpltCallback+0x48>
 800d340:	4f4d      	ldr	r7, [pc, #308]	; (800d478 <HAL_UART_RxCpltCallback+0x1b0>)
		if(temp_length[port_index] > 1)
 800d342:	494d      	ldr	r1, [pc, #308]	; (800d478 <HAL_UART_RxCpltCallback+0x1b0>)
 800d344:	5cff      	ldrb	r7, [r7, r3]
 800d346:	18c9      	adds	r1, r1, r3
 800d348:	46b9      	mov	r9, r7
 800d34a:	2701      	movs	r7, #1
 800d34c:	444f      	add	r7, r9
 800d34e:	b2ff      	uxtb	r7, r7
 800d350:	4688      	mov	r8, r1
 800d352:	7a09      	ldrb	r1, [r1, #8]
 800d354:	9702      	str	r7, [sp, #8]
 800d356:	2701      	movs	r7, #1
 800d358:	468c      	mov	ip, r1
 800d35a:	427f      	negs	r7, r7
 800d35c:	4467      	add	r7, ip
 800d35e:	b2ff      	uxtb	r7, r7
 800d360:	9701      	str	r7, [sp, #4]
 800d362:	4667      	mov	r7, ip
 800d364:	4945      	ldr	r1, [pc, #276]	; (800d47c <HAL_UART_RxCpltCallback+0x1b4>)
 800d366:	468a      	mov	sl, r1
 800d368:	5cc9      	ldrb	r1, [r1, r3]
 800d36a:	9100      	str	r1, [sp, #0]
 800d36c:	2f01      	cmp	r7, #1
 800d36e:	d934      	bls.n	800d3da <HAL_UART_RxCpltCallback+0x112>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d370:	00ca      	lsls	r2, r1, #3
 800d372:	1a52      	subs	r2, r2, r1
 800d374:	4694      	mov	ip, r2
 800d376:	0099      	lsls	r1, r3, #2
 800d378:	18c9      	adds	r1, r1, r3
 800d37a:	00ca      	lsls	r2, r1, #3
 800d37c:	1a51      	subs	r1, r2, r1
 800d37e:	4461      	add	r1, ip
 800d380:	4a3f      	ldr	r2, [pc, #252]	; (800d480 <HAL_UART_RxCpltCallback+0x1b8>)
 800d382:	00c9      	lsls	r1, r1, #3
 800d384:	1851      	adds	r1, r2, r1
 800d386:	464a      	mov	r2, r9
			temp_index[port_index]++;
 800d388:	9f02      	ldr	r7, [sp, #8]
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d38a:	548d      	strb	r5, [r1, r2]
			temp_index[port_index]++;
 800d38c:	4a3a      	ldr	r2, [pc, #232]	; (800d478 <HAL_UART_RxCpltCallback+0x1b0>)
 800d38e:	54d7      	strb	r7, [r2, r3]
			temp_length[port_index]--;
 800d390:	4643      	mov	r3, r8
 800d392:	9f01      	ldr	r7, [sp, #4]
 800d394:	721f      	strb	r7, [r3, #8]
 800d396:	e7bb      	b.n	800d310 <HAL_UART_RxCpltCallback+0x48>
		for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 800d398:	2300      	movs	r3, #0
				portStatus[i] = FREE;
 800d39a:	2700      	movs	r7, #0
			if(portStatus[i] == CLI)
 800d39c:	18d1      	adds	r1, r2, r3
 800d39e:	780d      	ldrb	r5, [r1, #0]
 800d3a0:	2d03      	cmp	r5, #3
 800d3a2:	d100      	bne.n	800d3a6 <HAL_UART_RxCpltCallback+0xde>
				portStatus[i] = FREE;
 800d3a4:	700f      	strb	r7, [r1, #0]
		for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	2b06      	cmp	r3, #6
 800d3aa:	d1f7      	bne.n	800d39c <HAL_UART_RxCpltCallback+0xd4>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800d3ac:	3b03      	subs	r3, #3
 800d3ae:	5413      	strb	r3, [r2, r0]
		PcPort = port_number;
 800d3b0:	4b34      	ldr	r3, [pc, #208]	; (800d484 <HAL_UART_RxCpltCallback+0x1bc>)
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800d3b2:	2202      	movs	r2, #2
		PcPort = port_number;
 800d3b4:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800d3b6:	4b34      	ldr	r3, [pc, #208]	; (800d488 <HAL_UART_RxCpltCallback+0x1c0>)
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	6818      	ldr	r0, [r3, #0]
 800d3bc:	2300      	movs	r3, #0
 800d3be:	f002 f897 	bl	800f4f0 <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800d3c2:	4b32      	ldr	r3, [pc, #200]	; (800d48c <HAL_UART_RxCpltCallback+0x1c4>)
 800d3c4:	781a      	ldrb	r2, [r3, #0]
 800d3c6:	2a01      	cmp	r2, #1
 800d3c8:	d1a0      	bne.n	800d30c <HAL_UART_RxCpltCallback+0x44>
 800d3ca:	492a      	ldr	r1, [pc, #168]	; (800d474 <HAL_UART_RxCpltCallback+0x1ac>)
 800d3cc:	700a      	strb	r2, [r1, #0]
 800d3ce:	e79d      	b.n	800d30c <HAL_UART_RxCpltCallback+0x44>
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d3d0:	2900      	cmp	r1, #0
 800d3d2:	d1ad      	bne.n	800d330 <HAL_UART_RxCpltCallback+0x68>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800d3d4:	2307      	movs	r3, #7
 800d3d6:	5413      	strb	r3, [r2, r0]
 800d3d8:	e79a      	b.n	800d310 <HAL_UART_RxCpltCallback+0x48>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d3da:	9900      	ldr	r1, [sp, #0]
 800d3dc:	00cf      	lsls	r7, r1, #3
 800d3de:	1a7f      	subs	r7, r7, r1
 800d3e0:	9703      	str	r7, [sp, #12]
 800d3e2:	009f      	lsls	r7, r3, #2
 800d3e4:	46bb      	mov	fp, r7
 800d3e6:	449b      	add	fp, r3
 800d3e8:	465f      	mov	r7, fp
 800d3ea:	4659      	mov	r1, fp
 800d3ec:	00ff      	lsls	r7, r7, #3
 800d3ee:	1a7f      	subs	r7, r7, r1
 800d3f0:	46bc      	mov	ip, r7
 800d3f2:	9f03      	ldr	r7, [sp, #12]
 800d3f4:	46bb      	mov	fp, r7
 800d3f6:	44dc      	add	ip, fp
 800d3f8:	4661      	mov	r1, ip
 800d3fa:	00c9      	lsls	r1, r1, #3
 800d3fc:	468c      	mov	ip, r1
 800d3fe:	4920      	ldr	r1, [pc, #128]	; (800d480 <HAL_UART_RxCpltCallback+0x1b8>)
 800d400:	464f      	mov	r7, r9
 800d402:	468b      	mov	fp, r1
 800d404:	44dc      	add	ip, fp
 800d406:	4661      	mov	r1, ip
 800d408:	55cd      	strb	r5, [r1, r7]
			temp_index[port_index]++;
 800d40a:	9902      	ldr	r1, [sp, #8]
 800d40c:	4d1a      	ldr	r5, [pc, #104]	; (800d478 <HAL_UART_RxCpltCallback+0x1b0>)
 800d40e:	54e9      	strb	r1, [r5, r3]
			temp_length[port_index]--;
 800d410:	4641      	mov	r1, r8
 800d412:	9d01      	ldr	r5, [sp, #4]
 800d414:	720d      	strb	r5, [r1, #8]
			MSG_Buffer_Index_End[port_index]++;
 800d416:	9900      	ldr	r1, [sp, #0]
 800d418:	3101      	adds	r1, #1
 800d41a:	b2c9      	uxtb	r1, r1
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800d41c:	2905      	cmp	r1, #5
 800d41e:	d100      	bne.n	800d422 <HAL_UART_RxCpltCallback+0x15a>
 800d420:	2100      	movs	r1, #0
 800d422:	4655      	mov	r5, sl
 800d424:	54e9      	strb	r1, [r5, r3]
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800d426:	491a      	ldr	r1, [pc, #104]	; (800d490 <HAL_UART_RxCpltCallback+0x1c8>)
 800d428:	4d1a      	ldr	r5, [pc, #104]	; (800d494 <HAL_UART_RxCpltCallback+0x1cc>)
 800d42a:	780b      	ldrb	r3, [r1, #0]
 800d42c:	54e8      	strb	r0, [r5, r3]
			Process_Message_Buffer_Index_End++;
 800d42e:	3301      	adds	r3, #1
 800d430:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d432:	2b05      	cmp	r3, #5
 800d434:	d100      	bne.n	800d438 <HAL_UART_RxCpltCallback+0x170>
 800d436:	2300      	movs	r3, #0
 800d438:	700b      	strb	r3, [r1, #0]
			portStatus[port_number] =FREE; // End of receiving message.
 800d43a:	2300      	movs	r3, #0
 800d43c:	5413      	strb	r3, [r2, r0]
 800d43e:	e767      	b.n	800d310 <HAL_UART_RxCpltCallback+0x48>
		portStatus[port_number] =MSG; // Receive length byte.
 800d440:	3907      	subs	r1, #7
 800d442:	5411      	strb	r1, [r2, r0]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800d444:	4a0d      	ldr	r2, [pc, #52]	; (800d47c <HAL_UART_RxCpltCallback+0x1b4>)
 800d446:	5cd7      	ldrb	r7, [r2, r3]
 800d448:	00fa      	lsls	r2, r7, #3
 800d44a:	1bd7      	subs	r7, r2, r7
 800d44c:	009a      	lsls	r2, r3, #2
 800d44e:	18d2      	adds	r2, r2, r3
 800d450:	00d1      	lsls	r1, r2, #3
 800d452:	1a8a      	subs	r2, r1, r2
 800d454:	19d2      	adds	r2, r2, r7
 800d456:	490a      	ldr	r1, [pc, #40]	; (800d480 <HAL_UART_RxCpltCallback+0x1b8>)
 800d458:	00d2      	lsls	r2, r2, #3
 800d45a:	188a      	adds	r2, r1, r2
		temp_index[port_index] = 3;
 800d45c:	2103      	movs	r1, #3
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800d45e:	7095      	strb	r5, [r2, #2]
		temp_index[port_index] = 3;
 800d460:	4a05      	ldr	r2, [pc, #20]	; (800d478 <HAL_UART_RxCpltCallback+0x1b0>)
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800d462:	3501      	adds	r5, #1
		temp_index[port_index] = 3;
 800d464:	54d1      	strb	r1, [r2, r3]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800d466:	18d3      	adds	r3, r2, r3
 800d468:	721d      	strb	r5, [r3, #8]
 800d46a:	e751      	b.n	800d310 <HAL_UART_RxCpltCallback+0x48>
 800d46c:	20001ca4 	.word	0x20001ca4
 800d470:	20000c3c 	.word	0x20000c3c
 800d474:	200016e1 	.word	0x200016e1
 800d478:	20002478 	.word	0x20002478
 800d47c:	200016d4 	.word	0x200016d4
 800d480:	2000115c 	.word	0x2000115c
 800d484:	20000c38 	.word	0x20000c38
 800d488:	20001cb8 	.word	0x20001cb8
 800d48c:	200016e2 	.word	0x200016e2
 800d490:	2000114f 	.word	0x2000114f
 800d494:	20001154 	.word	0x20001154

0800d498 <vApplicationStackOverflowHook>:

/*-----------------------------------------------------------*/
/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800d498:	b530      	push	{r4, r5, lr}
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800d49a:	24ff      	movs	r4, #255	; 0xff
 800d49c:	4d09      	ldr	r5, [pc, #36]	; (800d4c4 <vApplicationStackOverflowHook+0x2c>)
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800d49e:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800d4a0:	7828      	ldrb	r0, [r5, #0]
 800d4a2:	23ff      	movs	r3, #255	; 0xff
 800d4a4:	2210      	movs	r2, #16
 800d4a6:	4908      	ldr	r1, [pc, #32]	; (800d4c8 <vApplicationStackOverflowHook+0x30>)
 800d4a8:	9400      	str	r4, [sp, #0]
 800d4aa:	f000 fb8f 	bl	800dbcc <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d4ae:	4b07      	ldr	r3, [pc, #28]	; (800d4cc <vApplicationStackOverflowHook+0x34>)
 800d4b0:	7828      	ldrb	r0, [r5, #0]
 800d4b2:	6819      	ldr	r1, [r3, #0]
 800d4b4:	220f      	movs	r2, #15
 800d4b6:	23ff      	movs	r3, #255	; 0xff
 800d4b8:	9400      	str	r4, [sp, #0]
 800d4ba:	f000 fb87 	bl	800dbcc <writePxMutex>
	NVIC_SystemReset();
 800d4be:	f7ff fe1f 	bl	800d100 <NVIC_SystemReset>
 800d4c2:	46c0      	nop			; (mov r8, r8)
 800d4c4:	20000c38 	.word	0x20000c38
 800d4c8:	0801b6ec 	.word	0x0801b6ec
 800d4cc:	200000b0 	.word	0x200000b0

0800d4d0 <vApplicationMallocFailedHook>:
	 demo application.  If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
	void vApplicationMallocFailedHook(void){
 800d4d0:	b530      	push	{r4, r5, lr}
		uint8_t* error_message = "Heap size exceeded\r\n";
		writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800d4d2:	24ff      	movs	r4, #255	; 0xff
 800d4d4:	4d09      	ldr	r5, [pc, #36]	; (800d4fc <vApplicationMallocFailedHook+0x2c>)
	void vApplicationMallocFailedHook(void){
 800d4d6:	b083      	sub	sp, #12
		writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800d4d8:	7828      	ldrb	r0, [r5, #0]
 800d4da:	23ff      	movs	r3, #255	; 0xff
 800d4dc:	2214      	movs	r2, #20
 800d4de:	4908      	ldr	r1, [pc, #32]	; (800d500 <vApplicationMallocFailedHook+0x30>)
 800d4e0:	9400      	str	r4, [sp, #0]
 800d4e2:	f000 fb73 	bl	800dbcc <writePxMutex>
		writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d4e6:	4b07      	ldr	r3, [pc, #28]	; (800d504 <vApplicationMallocFailedHook+0x34>)
 800d4e8:	7828      	ldrb	r0, [r5, #0]
 800d4ea:	6819      	ldr	r1, [r3, #0]
 800d4ec:	220f      	movs	r2, #15
 800d4ee:	23ff      	movs	r3, #255	; 0xff
 800d4f0:	9400      	str	r4, [sp, #0]
 800d4f2:	f000 fb6b 	bl	800dbcc <writePxMutex>
		NVIC_SystemReset();
 800d4f6:	f7ff fe03 	bl	800d100 <NVIC_SystemReset>
 800d4fa:	46c0      	nop			; (mov r8, r8)
 800d4fc:	20000c38 	.word	0x20000c38
 800d500:	0801b700 	.word	0x0801b700
 800d504:	200000b0 	.word	0x200000b0

0800d508 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d50a:	46de      	mov	lr, fp
 800d50c:	464e      	mov	r6, r9
 800d50e:	4645      	mov	r5, r8
 800d510:	4657      	mov	r7, sl
 800d512:	b5e0      	push	{r5, r6, r7, lr}
 800d514:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d516:	ae04      	add	r6, sp, #16
 800d518:	0032      	movs	r2, r6
 800d51a:	4b34      	ldr	r3, [pc, #208]	; (800d5ec <RTC_CalendarConfig+0xe4>)
 800d51c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800d51e:	c213      	stmia	r2!, {r0, r1, r4}
 800d520:	ab01      	add	r3, sp, #4
 800d522:	4698      	mov	r8, r3
 800d524:	4642      	mov	r2, r8
 800d526:	4b32      	ldr	r3, [pc, #200]	; (800d5f0 <RTC_CalendarConfig+0xe8>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
 800d528:	2400      	movs	r4, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d52a:	cb03      	ldmia	r3!, {r0, r1}
 800d52c:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800d52e:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d530:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800d532:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d534:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800d536:	f005 ff70 	bl	801341a <atoi>
 800d53a:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800d53c:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800d53e:	469a      	mov	sl, r3
  *(comDate + 6) = 0;
 800d540:	71b4      	strb	r4, [r6, #6]
  day = atoi(comDate + 4);
 800d542:	f005 ff6a 	bl	801341a <atoi>
 800d546:	b2c3      	uxtb	r3, r0
 800d548:	4699      	mov	r9, r3
 800d54a:	4d2a      	ldr	r5, [pc, #168]	; (800d5f4 <RTC_CalendarConfig+0xec>)
  *(comDate + 3) = 0;
 800d54c:	70f4      	strb	r4, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d54e:	6829      	ldr	r1, [r5, #0]
 800d550:	0030      	movs	r0, r6
 800d552:	f7f2 fdd7 	bl	8000104 <strcmp>
 800d556:	3401      	adds	r4, #1
 800d558:	b2e4      	uxtb	r4, r4
 800d55a:	2800      	cmp	r0, #0
 800d55c:	d100      	bne.n	800d560 <RTC_CalendarConfig+0x58>
 800d55e:	0027      	movs	r7, r4
 800d560:	3504      	adds	r5, #4
  for (uint8_t i = 0; i < 12; i++)
 800d562:	2c0c      	cmp	r4, #12
 800d564:	d1f3      	bne.n	800d54e <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d566:	200a      	movs	r0, #10
 800d568:	4468      	add	r0, sp
 800d56a:	f005 ff56 	bl	801341a <atoi>
	*(comDate + 5) = 0;
 800d56e:	2300      	movs	r3, #0
 800d570:	7173      	strb	r3, [r6, #5]
 800d572:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800d574:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800d576:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800d578:	1dd8      	adds	r0, r3, #7
 800d57a:	f005 ff4e 	bl	801341a <atoi>
	*(comDate + 2) = 0;
 800d57e:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800d580:	0005      	movs	r5, r0
	hours = atoi(comTime);
 800d582:	4640      	mov	r0, r8
	*(comDate + 2) = 0;
 800d584:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800d586:	f005 ff48 	bl	801341a <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800d58a:	466b      	mov	r3, sp
 800d58c:	4652      	mov	r2, sl
 800d58e:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800d590:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800d592:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800d594:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d596:	466a      	mov	r2, sp
 800d598:	2301      	movs	r3, #1
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d59a:	4f17      	ldr	r7, [pc, #92]	; (800d5f8 <RTC_CalendarConfig+0xf0>)
	hours = atoi(comTime);
 800d59c:	0006      	movs	r6, r0
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d59e:	7013      	strb	r3, [r2, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d5a0:	4669      	mov	r1, sp
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	0038      	movs	r0, r7
 800d5a6:	f004 fe63 	bl	8012270 <HAL_RTC_SetDate>
 800d5aa:	2800      	cmp	r0, #0
 800d5ac:	d116      	bne.n	800d5dc <RTC_CalendarConfig+0xd4>

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d5ae:	2218      	movs	r2, #24
 800d5b0:	4b12      	ldr	r3, [pc, #72]	; (800d5fc <RTC_CalendarConfig+0xf4>)
  stimestructure.Hours = hours;
 800d5b2:	a907      	add	r1, sp, #28
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d5b4:	7208      	strb	r0, [r1, #8]
 800d5b6:	735a      	strb	r2, [r3, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d5b8:	60c8      	str	r0, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d5ba:	6108      	str	r0, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d5bc:	2200      	movs	r2, #0
 800d5be:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800d5c0:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800d5c2:	704d      	strb	r5, [r1, #1]
  stimestructure.Seconds = seconds;
 800d5c4:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d5c6:	f004 fdbf 	bl	8012148 <HAL_RTC_SetTime>
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d106      	bne.n	800d5dc <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d5ce:	0038      	movs	r0, r7
 800d5d0:	4a0b      	ldr	r2, [pc, #44]	; (800d600 <RTC_CalendarConfig+0xf8>)
 800d5d2:	2101      	movs	r1, #1
 800d5d4:	f004 fec8 	bl	8012368 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d5d8:	2000      	movs	r0, #0
 800d5da:	e000      	b.n	800d5de <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800d5dc:	20ff      	movs	r0, #255	; 0xff
}
 800d5de:	b00d      	add	sp, #52	; 0x34
 800d5e0:	bc3c      	pop	{r2, r3, r4, r5}
 800d5e2:	4690      	mov	r8, r2
 800d5e4:	4699      	mov	r9, r3
 800d5e6:	46a2      	mov	sl, r4
 800d5e8:	46ab      	mov	fp, r5
 800d5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5ec:	08018acc 	.word	0x08018acc
 800d5f0:	0801b728 	.word	0x0801b728
 800d5f4:	2000006c 	.word	0x2000006c
 800d5f8:	20006ca4 	.word	0x20006ca4
 800d5fc:	2000687c 	.word	0x2000687c
 800d600:	000032f2 	.word	0x000032f2

0800d604 <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800d604:	2380      	movs	r3, #128	; 0x80
{
 800d606:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800d608:	4d1e      	ldr	r5, [pc, #120]	; (800d684 <RTC_Init+0x80>)
 800d60a:	021b      	lsls	r3, r3, #8
 800d60c:	6a2a      	ldr	r2, [r5, #32]
	RtcHandle.Instance = RTC; 
 800d60e:	4c1e      	ldr	r4, [pc, #120]	; (800d688 <RTC_Init+0x84>)
  __HAL_RCC_RTC_ENABLE();
 800d610:	4313      	orrs	r3, r2
 800d612:	622b      	str	r3, [r5, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800d614:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800d616:	4b1d      	ldr	r3, [pc, #116]	; (800d68c <RTC_Init+0x88>)
  RtcHandle.Init.AsynchPrediv = 124;
 800d618:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800d61a:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d61c:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800d61e:	4a1c      	ldr	r2, [pc, #112]	; (800d690 <RTC_Init+0x8c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d620:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d622:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800d624:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d626:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d628:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d62a:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d62c:	f004 fd44 	bl	80120b8 <HAL_RTC_Init>
 800d630:	0006      	movs	r6, r0
 800d632:	20ff      	movs	r0, #255	; 0xff
 800d634:	2e00      	cmp	r6, #0
 800d636:	d119      	bne.n	800d66c <RTC_Init+0x68>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d638:	2101      	movs	r1, #1
 800d63a:	0020      	movs	r0, r4
 800d63c:	f004 fe9a 	bl	8012374 <HAL_RTCEx_BKUPRead>
 800d640:	4b14      	ldr	r3, [pc, #80]	; (800d694 <RTC_Init+0x90>)
 800d642:	4298      	cmp	r0, r3
 800d644:	d113      	bne.n	800d66e <RTC_Init+0x6a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d648:	011b      	lsls	r3, r3, #4
 800d64a:	d501      	bpl.n	800d650 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800d64c:	4b12      	ldr	r3, [pc, #72]	; (800d698 <RTC_Init+0x94>)
 800d64e:	701e      	strb	r6, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d650:	4b0c      	ldr	r3, [pc, #48]	; (800d684 <RTC_Init+0x80>)
 800d652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d654:	015b      	lsls	r3, r3, #5
 800d656:	d50c      	bpl.n	800d672 <RTC_Init+0x6e>
			bootStatus = RESET_BOOT;
 800d658:	2201      	movs	r2, #1
 800d65a:	4b0f      	ldr	r3, [pc, #60]	; (800d698 <RTC_Init+0x94>)
	return BOS_OK;
 800d65c:	2000      	movs	r0, #0
			bootStatus = RESET_BOOT;
 800d65e:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d660:	2380      	movs	r3, #128	; 0x80
 800d662:	4a08      	ldr	r2, [pc, #32]	; (800d684 <RTC_Init+0x80>)
 800d664:	045b      	lsls	r3, r3, #17
 800d666:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d668:	430b      	orrs	r3, r1
 800d66a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800d66c:	bd70      	pop	{r4, r5, r6, pc}
    RTC_CalendarConfig();
 800d66e:	f7ff ff4b 	bl	800d508 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d672:	2380      	movs	r3, #128	; 0x80
 800d674:	4a03      	ldr	r2, [pc, #12]	; (800d684 <RTC_Init+0x80>)
 800d676:	045b      	lsls	r3, r3, #17
 800d678:	6a51      	ldr	r1, [r2, #36]	; 0x24
	return BOS_OK;
 800d67a:	2000      	movs	r0, #0
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d67c:	430b      	orrs	r3, r1
 800d67e:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800d680:	e7f4      	b.n	800d66c <RTC_Init+0x68>
 800d682:	46c0      	nop			; (mov r8, r8)
 800d684:	40021000 	.word	0x40021000
 800d688:	20006ca4 	.word	0x20006ca4
 800d68c:	40002800 	.word	0x40002800
 800d690:	000007cf 	.word	0x000007cf
 800d694:	000032f2 	.word	0x000032f2
 800d698:	20002485 	.word	0x20002485

0800d69c <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d69c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d69e:	46c6      	mov	lr, r8
 800d6a0:	b500      	push	{lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	ac0c      	add	r4, sp, #48	; 0x30
 800d6a6:	7827      	ldrb	r7, [r4, #0]
 800d6a8:	ac0d      	add	r4, sp, #52	; 0x34
 800d6aa:	7824      	ldrb	r4, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d6ac:	3230      	adds	r2, #48	; 0x30
{
 800d6ae:	46a0      	mov	r8, r4
 800d6b0:	ac0e      	add	r4, sp, #56	; 0x38
 800d6b2:	7825      	ldrb	r5, [r4, #0]
 800d6b4:	ac0f      	add	r4, sp, #60	; 0x3c
 800d6b6:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 800d6b8:	466c      	mov	r4, sp
 800d6ba:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d6bc:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d6be:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d6c0:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d6c2:	4c20      	ldr	r4, [pc, #128]	; (800d744 <BOS_CalendarConfig+0xa8>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	4669      	mov	r1, sp
 800d6c8:	0020      	movs	r0, r4
 800d6ca:	f004 fdd1 	bl	8012270 <HAL_RTC_SetDate>
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d123      	bne.n	800d71a <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800d6d2:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800d6d4:	a901      	add	r1, sp, #4
 800d6d6:	700d      	strb	r5, [r1, #0]
  stimestructure.Minutes = minutes;
 800d6d8:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds; 
 800d6da:	708f      	strb	r7, [r1, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d6dc:	6108      	str	r0, [r1, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800d6de:	2d0c      	cmp	r5, #12
 800d6e0:	d820      	bhi.n	800d724 <BOS_CalendarConfig+0x88>
 800d6e2:	4d19      	ldr	r5, [pc, #100]	; (800d748 <BOS_CalendarConfig+0xac>)
	
	if (AMPM == RTC_AM) {
 800d6e4:	2e01      	cmp	r6, #1
 800d6e6:	d022      	beq.n	800d72e <BOS_CalendarConfig+0x92>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d6e8:	2e02      	cmp	r6, #2
 800d6ea:	d025      	beq.n	800d738 <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d6ec:	2318      	movs	r3, #24
 800d6ee:	736b      	strb	r3, [r5, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	0020      	movs	r0, r4
 800d6f4:	f004 fd28 	bl	8012148 <HAL_RTC_SetTime>
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	d10e      	bne.n	800d71a <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d6fc:	7b6b      	ldrb	r3, [r5, #13]
 800d6fe:	7929      	ldrb	r1, [r5, #4]
 800d700:	021b      	lsls	r3, r3, #8
 800d702:	301b      	adds	r0, #27
 800d704:	4319      	orrs	r1, r3
 800d706:	30ff      	adds	r0, #255	; 0xff
 800d708:	f7fe f9c0 	bl	800ba8c <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d70c:	0020      	movs	r0, r4
 800d70e:	4a0f      	ldr	r2, [pc, #60]	; (800d74c <BOS_CalendarConfig+0xb0>)
 800d710:	2101      	movs	r1, #1
 800d712:	f004 fe29 	bl	8012368 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d716:	2000      	movs	r0, #0
 800d718:	e000      	b.n	800d71c <BOS_CalendarConfig+0x80>
		return BOS_ERROR;
 800d71a:	20ff      	movs	r0, #255	; 0xff
}
 800d71c:	b006      	add	sp, #24
 800d71e:	bc04      	pop	{r2}
 800d720:	4690      	mov	r8, r2
 800d722:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800d724:	2318      	movs	r3, #24
 800d726:	4d08      	ldr	r5, [pc, #32]	; (800d748 <BOS_CalendarConfig+0xac>)
 800d728:	736b      	strb	r3, [r5, #13]
	if (AMPM == RTC_AM) {
 800d72a:	2e01      	cmp	r6, #1
 800d72c:	d1dc      	bne.n	800d6e8 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d72e:	2300      	movs	r3, #0
 800d730:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800d732:	330c      	adds	r3, #12
 800d734:	736b      	strb	r3, [r5, #13]
 800d736:	e7db      	b.n	800d6f0 <BOS_CalendarConfig+0x54>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d738:	2340      	movs	r3, #64	; 0x40
 800d73a:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800d73c:	3b34      	subs	r3, #52	; 0x34
 800d73e:	736b      	strb	r3, [r5, #13]
 800d740:	e7d6      	b.n	800d6f0 <BOS_CalendarConfig+0x54>
 800d742:	46c0      	nop			; (mov r8, r8)
 800d744:	20006ca4 	.word	0x20006ca4
 800d748:	2000687c 	.word	0x2000687c
 800d74c:	000032f2 	.word	0x000032f2

0800d750 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d750:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d752:	4d16      	ldr	r5, [pc, #88]	; (800d7ac <GetTimeDate+0x5c>)
{
 800d754:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d756:	ac01      	add	r4, sp, #4
 800d758:	0021      	movs	r1, r4
 800d75a:	2200      	movs	r2, #0
 800d75c:	0028      	movs	r0, r5
 800d75e:	f004 fc13 	bl	8011f88 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d762:	4669      	mov	r1, sp
 800d764:	2200      	movs	r2, #0
 800d766:	0028      	movs	r0, r5
 800d768:	f004 fc3e 	bl	8011fe8 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d76c:	7a22      	ldrb	r2, [r4, #8]
 800d76e:	4b10      	ldr	r3, [pc, #64]	; (800d7b0 <GetTimeDate+0x60>)
 800d770:	09d2      	lsrs	r2, r2, #7
 800d772:	3201      	adds	r2, #1
 800d774:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d776:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800d778:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d77a:	0852      	lsrs	r2, r2, #1
 800d77c:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d77e:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d780:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800d782:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d784:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d786:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800d788:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d78a:	7822      	ldrb	r2, [r4, #0]
 800d78c:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d78e:	466a      	mov	r2, sp
 800d790:	7892      	ldrb	r2, [r2, #2]
 800d792:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d794:	466a      	mov	r2, sp
 800d796:	7852      	ldrb	r2, [r2, #1]
 800d798:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d79a:	466a      	mov	r2, sp
 800d79c:	7812      	ldrb	r2, [r2, #0]
 800d79e:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d7a0:	466a      	mov	r2, sp
 800d7a2:	78d2      	ldrb	r2, [r2, #3]
 800d7a4:	4462      	add	r2, ip
 800d7a6:	831a      	strh	r2, [r3, #24]
}
 800d7a8:	b007      	add	sp, #28
 800d7aa:	bd30      	pop	{r4, r5, pc}
 800d7ac:	20006ca4 	.word	0x20006ca4
 800d7b0:	2000687c 	.word	0x2000687c

0800d7b4 <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d7b4:	2080      	movs	r0, #128	; 0x80
 800d7b6:	4a13      	ldr	r2, [pc, #76]	; (800d804 <TIM_USEC_Init+0x50>)
{
 800d7b8:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800d7ba:	69d1      	ldr	r1, [r2, #28]
 800d7bc:	0040      	lsls	r0, r0, #1
 800d7be:	4301      	orrs	r1, r0
 800d7c0:	61d1      	str	r1, [r2, #28]
 800d7c2:	69d3      	ldr	r3, [r2, #28]
{
 800d7c4:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800d7c6:	4003      	ands	r3, r0
 800d7c8:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d7ca:	4c0f      	ldr	r4, [pc, #60]	; (800d808 <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800d7cc:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800d7ce:	4b0f      	ldr	r3, [pc, #60]	; (800d80c <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d7d0:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800d7d2:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d7d4:	f004 fb28 	bl	8011e28 <HAL_RCC_GetPCLK1Freq>
 800d7d8:	490d      	ldr	r1, [pc, #52]	; (800d810 <TIM_USEC_Init+0x5c>)
 800d7da:	f7f2 fcb9 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800d7de:	4b0d      	ldr	r3, [pc, #52]	; (800d814 <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d7e0:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800d7e2:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800d7e4:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d7e6:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800d7e8:	f005 f85c 	bl	80128a4 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d7ec:	a902      	add	r1, sp, #8
 800d7ee:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d7f0:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d7f2:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d7f4:	f005 f932 	bl	8012a5c <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d7f8:	0020      	movs	r0, r4
 800d7fa:	f004 fe9b 	bl	8012534 <HAL_TIM_Base_Start>
}
 800d7fe:	b005      	add	sp, #20
 800d800:	bd30      	pop	{r4, r5, pc}
 800d802:	46c0      	nop			; (mov r8, r8)
 800d804:	40021000 	.word	0x40021000
 800d808:	20006d00 	.word	0x20006d00
 800d80c:	40002000 	.word	0x40002000
 800d810:	000f4240 	.word	0x000f4240
 800d814:	0000ffff 	.word	0x0000ffff

0800d818 <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d818:	2080      	movs	r0, #128	; 0x80
 800d81a:	4a13      	ldr	r2, [pc, #76]	; (800d868 <TIM_MSEC_Init+0x50>)
{
 800d81c:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800d81e:	6991      	ldr	r1, [r2, #24]
 800d820:	0240      	lsls	r0, r0, #9
 800d822:	4301      	orrs	r1, r0
 800d824:	6191      	str	r1, [r2, #24]
 800d826:	6993      	ldr	r3, [r2, #24]
{
 800d828:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800d82a:	4003      	ands	r3, r0
 800d82c:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d82e:	4c0f      	ldr	r4, [pc, #60]	; (800d86c <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE();
 800d830:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800d832:	4b0f      	ldr	r3, [pc, #60]	; (800d870 <TIM_MSEC_Init+0x58>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d834:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800d836:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d838:	f004 faf6 	bl	8011e28 <HAL_RCC_GetPCLK1Freq>
 800d83c:	21fa      	movs	r1, #250	; 0xfa
 800d83e:	0089      	lsls	r1, r1, #2
 800d840:	f7f2 fc86 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800d844:	4b0b      	ldr	r3, [pc, #44]	; (800d874 <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d846:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim15);
 800d848:	0020      	movs	r0, r4
  htim15.Init.Period = 0xFFFF;
 800d84a:	60e3      	str	r3, [r4, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d84c:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim15);
 800d84e:	f005 f829 	bl	80128a4 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d852:	a902      	add	r1, sp, #8
 800d854:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d856:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d858:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d85a:	f005 f8ff 	bl	8012a5c <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d85e:	0020      	movs	r0, r4
 800d860:	f004 fe68 	bl	8012534 <HAL_TIM_Base_Start>
}
 800d864:	b005      	add	sp, #20
 800d866:	bd30      	pop	{r4, r5, pc}
 800d868:	40021000 	.word	0x40021000
 800d86c:	20006cc4 	.word	0x20006cc4
 800d870:	40014000 	.word	0x40014000
 800d874:	0000ffff 	.word	0x0000ffff

0800d878 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d878:	b510      	push	{r4, lr}
 800d87a:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d87c:	f002 f8a8 	bl	800f9d0 <vPortEnterCritical>
	
	if (Delay)
 800d880:	2c00      	cmp	r4, #0
 800d882:	d006      	beq.n	800d892 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d884:	4b04      	ldr	r3, [pc, #16]	; (800d898 <StartMicroDelay+0x20>)
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d88a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d88c:	1a5b      	subs	r3, r3, r1
 800d88e:	42a3      	cmp	r3, r4
 800d890:	d9fb      	bls.n	800d88a <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d892:	f002 f8a9 	bl	800f9e8 <vPortExitCritical>
}
 800d896:	bd10      	pop	{r4, pc}
 800d898:	20006d00 	.word	0x20006d00

0800d89c <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d89c:	b510      	push	{r4, lr}
 800d89e:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d8a0:	f002 f896 	bl	800f9d0 <vPortEnterCritical>
	
	if (Delay)
 800d8a4:	2c00      	cmp	r4, #0
 800d8a6:	d006      	beq.n	800d8b6 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d8a8:	4b04      	ldr	r3, [pc, #16]	; (800d8bc <StartMilliDelay+0x20>)
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d8ae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d8b0:	1a5b      	subs	r3, r3, r1
 800d8b2:	42a3      	cmp	r3, r4
 800d8b4:	d9fb      	bls.n	800d8ae <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d8b6:	f002 f897 	bl	800f9e8 <vPortExitCritical>
}
 800d8ba:	bd10      	pop	{r4, pc}
 800d8bc:	20006cc4 	.word	0x20006cc4

0800d8c0 <SwapUartPins.part.0>:

/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
 800d8c0:	b570      	push	{r4, r5, r6, lr}
 800d8c2:	0004      	movs	r4, r0
{
	if (huart != NULL) {
		if (direction == REVERSED) {
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d8c4:	f7fc fc72 	bl	800a1ac <GetPort>
 800d8c8:	2180      	movs	r1, #128	; 0x80
 800d8ca:	0209      	lsls	r1, r1, #8
 800d8cc:	000a      	movs	r2, r1
 800d8ce:	3801      	subs	r0, #1
 800d8d0:	4102      	asrs	r2, r0
 800d8d2:	4b07      	ldr	r3, [pc, #28]	; (800d8f0 <SwapUartPins.part.0+0x30>)
 800d8d4:	4d07      	ldr	r5, [pc, #28]	; (800d8f4 <SwapUartPins.part.0+0x34>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d8d8:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	005b      	lsls	r3, r3, #1
 800d8de:	5b58      	ldrh	r0, [r3, r5]
 800d8e0:	4302      	orrs	r2, r0
 800d8e2:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d8e4:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800d8e6:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d8e8:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800d8ea:	f005 fc41 	bl	8013170 <HAL_UART_Init>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d8ee:	bd70      	pop	{r4, r5, r6, pc}
 800d8f0:	20000aa8 	.word	0x20000aa8
 800d8f4:	20006d3c 	.word	0x20006d3c

0800d8f8 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800d8f8:	4809      	ldr	r0, [pc, #36]	; (800d920 <MX_USART1_UART_Init+0x28>)
 800d8fa:	4b0a      	ldr	r3, [pc, #40]	; (800d924 <MX_USART1_UART_Init+0x2c>)
{
 800d8fc:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d8fe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d900:	23e1      	movs	r3, #225	; 0xe1
 800d902:	031b      	lsls	r3, r3, #12
 800d904:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d906:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d908:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d90a:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d90c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d90e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d910:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d912:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d914:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d916:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d918:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d91a:	f005 fc29 	bl	8013170 <HAL_UART_Init>
}
 800d91e:	bd10      	pop	{r4, pc}
 800d920:	20006ac8 	.word	0x20006ac8
 800d924:	40013800 	.word	0x40013800

0800d928 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 800d928:	4809      	ldr	r0, [pc, #36]	; (800d950 <MX_USART2_UART_Init+0x28>)
 800d92a:	4b0a      	ldr	r3, [pc, #40]	; (800d954 <MX_USART2_UART_Init+0x2c>)
{
 800d92c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d92e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d930:	23e1      	movs	r3, #225	; 0xe1
 800d932:	031b      	lsls	r3, r3, #12
 800d934:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d936:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d938:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d93a:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d93c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d93e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d940:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d942:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d944:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d946:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d948:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d94a:	f005 fc11 	bl	8013170 <HAL_UART_Init>
}
 800d94e:	bd10      	pop	{r4, pc}
 800d950:	20006bc0 	.word	0x20006bc0
 800d954:	40004400 	.word	0x40004400

0800d958 <MX_USART3_UART_Init>:
  huart3.Instance = USART3;
 800d958:	4809      	ldr	r0, [pc, #36]	; (800d980 <MX_USART3_UART_Init+0x28>)
 800d95a:	4b0a      	ldr	r3, [pc, #40]	; (800d984 <MX_USART3_UART_Init+0x2c>)
{
 800d95c:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d95e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d960:	23e1      	movs	r3, #225	; 0xe1
 800d962:	031b      	lsls	r3, r3, #12
 800d964:	6043      	str	r3, [r0, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d966:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d968:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d96a:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d96c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d96e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d970:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d972:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d974:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d976:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d978:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d97a:	f005 fbf9 	bl	8013170 <HAL_UART_Init>
}
 800d97e:	bd10      	pop	{r4, pc}
 800d980:	200069a0 	.word	0x200069a0
 800d984:	40004800 	.word	0x40004800

0800d988 <MX_USART5_UART_Init>:
  huart5.Instance = USART5;
 800d988:	4809      	ldr	r0, [pc, #36]	; (800d9b0 <MX_USART5_UART_Init+0x28>)
 800d98a:	4b0a      	ldr	r3, [pc, #40]	; (800d9b4 <MX_USART5_UART_Init+0x2c>)
{
 800d98c:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d98e:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d990:	23e1      	movs	r3, #225	; 0xe1
 800d992:	031b      	lsls	r3, r3, #12
 800d994:	6043      	str	r3, [r0, #4]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d996:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d998:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d99a:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d99c:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d99e:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d9a0:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d9a2:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d9a4:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d9a6:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d9a8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d9aa:	f005 fbe1 	bl	8013170 <HAL_UART_Init>
}
 800d9ae:	bd10      	pop	{r4, pc}
 800d9b0:	20006a58 	.word	0x20006a58
 800d9b4:	40005000 	.word	0x40005000

0800d9b8 <MX_USART6_UART_Init>:
  huart6.Instance = USART6;
 800d9b8:	4809      	ldr	r0, [pc, #36]	; (800d9e0 <MX_USART6_UART_Init+0x28>)
 800d9ba:	4b0a      	ldr	r3, [pc, #40]	; (800d9e4 <MX_USART6_UART_Init+0x2c>)
{
 800d9bc:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d9be:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d9c0:	23e1      	movs	r3, #225	; 0xe1
 800d9c2:	031b      	lsls	r3, r3, #12
 800d9c4:	6043      	str	r3, [r0, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d9c6:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d9c8:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d9ca:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d9cc:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d9ce:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d9d0:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d9d2:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d9d4:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d9d6:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d9d8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d9da:	f005 fbc9 	bl	8013170 <HAL_UART_Init>
}
 800d9de:	bd10      	pop	{r4, pc}
 800d9e0:	20006b48 	.word	0x20006b48
 800d9e4:	40011400 	.word	0x40011400

0800d9e8 <HAL_UART_MspInit>:
{
 800d9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9ea:	46c6      	mov	lr, r8
 800d9ec:	b500      	push	{lr}
  if(huart->Instance==USART1)
 800d9ee:	6803      	ldr	r3, [r0, #0]
 800d9f0:	4a6e      	ldr	r2, [pc, #440]	; (800dbac <HAL_UART_MspInit+0x1c4>)
{
 800d9f2:	b08a      	sub	sp, #40	; 0x28
  if(huart->Instance==USART1)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d041      	beq.n	800da7c <HAL_UART_MspInit+0x94>
  else if(huart->Instance==USART2)
 800d9f8:	4a6d      	ldr	r2, [pc, #436]	; (800dbb0 <HAL_UART_MspInit+0x1c8>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d06c      	beq.n	800dad8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800d9fe:	4a6d      	ldr	r2, [pc, #436]	; (800dbb4 <HAL_UART_MspInit+0x1cc>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d100      	bne.n	800da06 <HAL_UART_MspInit+0x1e>
 800da04:	e094      	b.n	800db30 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART4)
 800da06:	4a6c      	ldr	r2, [pc, #432]	; (800dbb8 <HAL_UART_MspInit+0x1d0>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d006      	beq.n	800da1a <HAL_UART_MspInit+0x32>
  else if(huart->Instance==USART5)
 800da0c:	4a6b      	ldr	r2, [pc, #428]	; (800dbbc <HAL_UART_MspInit+0x1d4>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d100      	bne.n	800da14 <HAL_UART_MspInit+0x2c>
 800da12:	e0b0      	b.n	800db76 <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART6)
 800da14:	4a6a      	ldr	r2, [pc, #424]	; (800dbc0 <HAL_UART_MspInit+0x1d8>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d003      	beq.n	800da22 <HAL_UART_MspInit+0x3a>
}
 800da1a:	b00a      	add	sp, #40	; 0x28
 800da1c:	bc04      	pop	{r2}
 800da1e:	4690      	mov	r8, r2
 800da20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART6_CLK_ENABLE();
 800da22:	2420      	movs	r4, #32
 800da24:	4b67      	ldr	r3, [pc, #412]	; (800dbc4 <HAL_UART_MspInit+0x1dc>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800da26:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800da28:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800da2a:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800da2c:	4322      	orrs	r2, r4
 800da2e:	619a      	str	r2, [r3, #24]
 800da30:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800da32:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800da34:	4023      	ands	r3, r4
 800da36:	9304      	str	r3, [sp, #16]
 800da38:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800da3a:	2310      	movs	r3, #16
 800da3c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da3e:	3b0e      	subs	r3, #14
 800da40:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800da42:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800da44:	a905      	add	r1, sp, #20
 800da46:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da48:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800da4a:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800da4c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800da4e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800da50:	f003 fc20 	bl	8011294 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da54:	4643      	mov	r3, r8
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800da56:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800da58:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da5a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800da5c:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800da5e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800da60:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800da62:	a905      	add	r1, sp, #20
 800da64:	05c0      	lsls	r0, r0, #23
 800da66:	f003 fc15 	bl	8011294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800da6a:	2200      	movs	r2, #0
 800da6c:	2101      	movs	r1, #1
 800da6e:	201d      	movs	r0, #29
 800da70:	f002 fc26 	bl	80102c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800da74:	201d      	movs	r0, #29
 800da76:	f002 fc4f 	bl	8010318 <HAL_NVIC_EnableIRQ>
}
 800da7a:	e7ce      	b.n	800da1a <HAL_UART_MspInit+0x32>
    __USART1_CLK_ENABLE();
 800da7c:	2080      	movs	r0, #128	; 0x80
 800da7e:	4a51      	ldr	r2, [pc, #324]	; (800dbc4 <HAL_UART_MspInit+0x1dc>)
 800da80:	01c0      	lsls	r0, r0, #7
 800da82:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800da84:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800da86:	4301      	orrs	r1, r0
 800da88:	6191      	str	r1, [r2, #24]
 800da8a:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da8c:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800da8e:	4003      	ands	r3, r0
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800da94:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800da96:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800da98:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800da9a:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800da9c:	a905      	add	r1, sp, #20
 800da9e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800daa0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800daa2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800daa4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800daa6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800daa8:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800daaa:	f003 fbf3 	bl	8011294 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800daae:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800dab0:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800dab2:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800dab4:	a905      	add	r1, sp, #20
 800dab6:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800dab8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800daba:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dabc:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dabe:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800dac0:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800dac2:	f003 fbe7 	bl	8011294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800dac6:	2200      	movs	r2, #0
 800dac8:	2101      	movs	r1, #1
 800daca:	201b      	movs	r0, #27
 800dacc:	f002 fbf8 	bl	80102c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800dad0:	201b      	movs	r0, #27
 800dad2:	f002 fc21 	bl	8010318 <HAL_NVIC_EnableIRQ>
 800dad6:	e7a0      	b.n	800da1a <HAL_UART_MspInit+0x32>
    __USART2_CLK_ENABLE();
 800dad8:	2080      	movs	r0, #128	; 0x80
 800dada:	4a3a      	ldr	r2, [pc, #232]	; (800dbc4 <HAL_UART_MspInit+0x1dc>)
 800dadc:	0280      	lsls	r0, r0, #10
 800dade:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dae0:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800dae2:	4301      	orrs	r1, r0
 800dae4:	61d1      	str	r1, [r2, #28]
 800dae6:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dae8:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800daea:	4003      	ands	r3, r0
 800daec:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800daee:	2090      	movs	r0, #144	; 0x90
    __USART2_CLK_ENABLE();
 800daf0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800daf2:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800daf4:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800daf6:	a905      	add	r1, sp, #20
 800daf8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800dafa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dafc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dafe:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db00:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800db02:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800db04:	f003 fbc6 	bl	8011294 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800db08:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800db0a:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800db0c:	a905      	add	r1, sp, #20
 800db0e:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800db10:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db12:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800db14:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db16:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800db18:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800db1a:	f003 fbbb 	bl	8011294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800db1e:	2200      	movs	r2, #0
 800db20:	2101      	movs	r1, #1
 800db22:	201c      	movs	r0, #28
 800db24:	f002 fbcc 	bl	80102c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800db28:	201c      	movs	r0, #28
 800db2a:	f002 fbf5 	bl	8010318 <HAL_NVIC_EnableIRQ>
 800db2e:	e774      	b.n	800da1a <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800db30:	2080      	movs	r0, #128	; 0x80
 800db32:	4a24      	ldr	r2, [pc, #144]	; (800dbc4 <HAL_UART_MspInit+0x1dc>)
 800db34:	02c0      	lsls	r0, r0, #11
 800db36:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db38:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800db3a:	4301      	orrs	r1, r0
 800db3c:	61d1      	str	r1, [r2, #28]
 800db3e:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800db40:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800db42:	4003      	ands	r3, r0
 800db44:	9302      	str	r3, [sp, #8]
 800db46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800db48:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db4a:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800db4c:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800db4e:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800db50:	a905      	add	r1, sp, #20
 800db52:	481d      	ldr	r0, [pc, #116]	; (800dbc8 <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800db54:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db56:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800db58:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db5a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800db5c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800db5e:	f003 fb99 	bl	8011294 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800db62:	2380      	movs	r3, #128	; 0x80
 800db64:	011b      	lsls	r3, r3, #4
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800db66:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db68:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800db6a:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db6c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800db6e:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800db70:	a905      	add	r1, sp, #20
 800db72:	4815      	ldr	r0, [pc, #84]	; (800dbc8 <HAL_UART_MspInit+0x1e0>)
 800db74:	e777      	b.n	800da66 <HAL_UART_MspInit+0x7e>
    __USART5_CLK_ENABLE();
 800db76:	2080      	movs	r0, #128	; 0x80
 800db78:	4a12      	ldr	r2, [pc, #72]	; (800dbc4 <HAL_UART_MspInit+0x1dc>)
 800db7a:	0340      	lsls	r0, r0, #13
 800db7c:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db7e:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800db80:	4301      	orrs	r1, r0
 800db82:	61d1      	str	r1, [r2, #28]
 800db84:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800db86:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800db88:	4003      	ands	r3, r0
 800db8a:	9303      	str	r3, [sp, #12]
 800db8c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db8e:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800db90:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800db92:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800db94:	a905      	add	r1, sp, #20
 800db96:	480c      	ldr	r0, [pc, #48]	; (800dbc8 <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800db98:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db9a:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800db9c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db9e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800dba0:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800dba2:	f003 fb77 	bl	8011294 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800dba6:	2310      	movs	r3, #16
 800dba8:	e7dd      	b.n	800db66 <HAL_UART_MspInit+0x17e>
 800dbaa:	46c0      	nop			; (mov r8, r8)
 800dbac:	40013800 	.word	0x40013800
 800dbb0:	40004400 	.word	0x40004400
 800dbb4:	40004800 	.word	0x40004800
 800dbb8:	40004c00 	.word	0x40004c00
 800dbbc:	40005000 	.word	0x40005000
 800dbc0:	40011400 	.word	0x40011400
 800dbc4:	40021000 	.word	0x40021000
 800dbc8:	48000400 	.word	0x48000400

0800dbcc <writePxMutex>:
{
 800dbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbce:	4647      	mov	r7, r8
 800dbd0:	46ce      	mov	lr, r9
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	0017      	movs	r7, r2
 800dbd6:	1e42      	subs	r2, r0, #1
 800dbd8:	b2d2      	uxtb	r2, r2
 800dbda:	000e      	movs	r6, r1
 800dbdc:	2a04      	cmp	r2, #4
 800dbde:	d80e      	bhi.n	800dbfe <writePxMutex+0x32>
 800dbe0:	4911      	ldr	r1, [pc, #68]	; (800dc28 <writePxMutex+0x5c>)
 800dbe2:	0092      	lsls	r2, r2, #2
 800dbe4:	5852      	ldr	r2, [r2, r1]
 800dbe6:	4690      	mov	r8, r2
	if (GetUart(port) != NULL) {
 800dbe8:	2a00      	cmp	r2, #0
 800dbea:	d008      	beq.n	800dbfe <writePxMutex+0x32>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dbec:	4a0f      	ldr	r2, [pc, #60]	; (800dc2c <writePxMutex+0x60>)
 800dbee:	0085      	lsls	r5, r0, #2
 800dbf0:	0019      	movs	r1, r3
 800dbf2:	5950      	ldr	r0, [r2, r5]
 800dbf4:	4691      	mov	r9, r2
 800dbf6:	f000 f9c5 	bl	800df84 <osSemaphoreWait>
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d007      	beq.n	800dc0e <writePxMutex+0x42>
	HAL_StatusTypeDef result = HAL_ERROR;
 800dbfe:	2401      	movs	r4, #1
}
 800dc00:	0020      	movs	r0, r4
 800dc02:	bc0c      	pop	{r2, r3}
 800dc04:	4690      	mov	r8, r2
 800dc06:	4699      	mov	r9, r3
 800dc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800dc0a:	2803      	cmp	r0, #3
 800dc0c:	d007      	beq.n	800dc1e <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800dc0e:	9b08      	ldr	r3, [sp, #32]
 800dc10:	003a      	movs	r2, r7
 800dc12:	0031      	movs	r1, r6
 800dc14:	4640      	mov	r0, r8
 800dc16:	f005 fa09 	bl	801302c <HAL_UART_Transmit>
 800dc1a:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800dc1c:	d1f5      	bne.n	800dc0a <writePxMutex+0x3e>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800dc1e:	464b      	mov	r3, r9
 800dc20:	5958      	ldr	r0, [r3, r5]
 800dc22:	f000 f9d9 	bl	800dfd8 <osSemaphoreRelease>
 800dc26:	e7eb      	b.n	800dc00 <writePxMutex+0x34>
 800dc28:	08018828 	.word	0x08018828
 800dc2c:	20006900 	.word	0x20006900

0800dc30 <writePxITMutex>:
{
 800dc30:	b570      	push	{r4, r5, r6, lr}
 800dc32:	0015      	movs	r5, r2
 800dc34:	1e42      	subs	r2, r0, #1
 800dc36:	b2d2      	uxtb	r2, r2
 800dc38:	000c      	movs	r4, r1
 800dc3a:	2a04      	cmp	r2, #4
 800dc3c:	d80c      	bhi.n	800dc58 <writePxITMutex+0x28>
 800dc3e:	490a      	ldr	r1, [pc, #40]	; (800dc68 <writePxITMutex+0x38>)
 800dc40:	0092      	lsls	r2, r2, #2
 800dc42:	5856      	ldr	r6, [r2, r1]
	if (GetUart(port) != NULL) {	
 800dc44:	2e00      	cmp	r6, #0
 800dc46:	d007      	beq.n	800dc58 <writePxITMutex+0x28>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dc48:	4a08      	ldr	r2, [pc, #32]	; (800dc6c <writePxITMutex+0x3c>)
 800dc4a:	0080      	lsls	r0, r0, #2
 800dc4c:	5880      	ldr	r0, [r0, r2]
 800dc4e:	0019      	movs	r1, r3
 800dc50:	f000 f998 	bl	800df84 <osSemaphoreWait>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d001      	beq.n	800dc5c <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dc58:	2001      	movs	r0, #1
}
 800dc5a:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800dc5c:	002a      	movs	r2, r5
 800dc5e:	0021      	movs	r1, r4
 800dc60:	0030      	movs	r0, r6
 800dc62:	f004 ff39 	bl	8012ad8 <HAL_UART_Transmit_IT>
 800dc66:	e7f8      	b.n	800dc5a <writePxITMutex+0x2a>
 800dc68:	08018828 	.word	0x08018828
 800dc6c:	20006900 	.word	0x20006900

0800dc70 <UpdateBaudrate>:
{
 800dc70:	3801      	subs	r0, #1
 800dc72:	b2c0      	uxtb	r0, r0
 800dc74:	b510      	push	{r4, lr}
 800dc76:	2804      	cmp	r0, #4
 800dc78:	d807      	bhi.n	800dc8a <UpdateBaudrate+0x1a>
 800dc7a:	4b05      	ldr	r3, [pc, #20]	; (800dc90 <UpdateBaudrate+0x20>)
 800dc7c:	0080      	lsls	r0, r0, #2
 800dc7e:	58c0      	ldr	r0, [r0, r3]
	huart->Init.BaudRate = baudrate;
 800dc80:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800dc82:	f005 fa75 	bl	8013170 <HAL_UART_Init>
}
 800dc86:	2000      	movs	r0, #0
 800dc88:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	605b      	str	r3, [r3, #4]
 800dc8e:	deff      	udf	#255	; 0xff
 800dc90:	08018828 	.word	0x08018828

0800dc94 <GetUart>:
{
 800dc94:	3801      	subs	r0, #1
 800dc96:	b2c3      	uxtb	r3, r0
 800dc98:	2000      	movs	r0, #0
 800dc9a:	2b04      	cmp	r3, #4
 800dc9c:	d802      	bhi.n	800dca4 <GetUart+0x10>
 800dc9e:	4a02      	ldr	r2, [pc, #8]	; (800dca8 <GetUart+0x14>)
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	5898      	ldr	r0, [r3, r2]
}
 800dca4:	4770      	bx	lr
 800dca6:	46c0      	nop			; (mov r8, r8)
 800dca8:	08018828 	.word	0x08018828

0800dcac <SwapUartPins>:
{
 800dcac:	b570      	push	{r4, r5, r6, lr}
 800dcae:	0004      	movs	r4, r0
 800dcb0:	000d      	movs	r5, r1
	if (huart != NULL) {
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	d003      	beq.n	800dcbe <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800dcb6:	2901      	cmp	r1, #1
 800dcb8:	d017      	beq.n	800dcea <SwapUartPins+0x3e>
		} else if (direction == NORMAL) {
 800dcba:	2900      	cmp	r1, #0
 800dcbc:	d000      	beq.n	800dcc0 <SwapUartPins+0x14>
}
 800dcbe:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800dcc0:	f7fc fa74 	bl	800a1ac <GetPort>
 800dcc4:	2180      	movs	r1, #128	; 0x80
 800dcc6:	3801      	subs	r0, #1
 800dcc8:	0209      	lsls	r1, r1, #8
 800dcca:	4101      	asrs	r1, r0
 800dccc:	4b08      	ldr	r3, [pc, #32]	; (800dcf0 <SwapUartPins+0x44>)
 800dcce:	4e09      	ldr	r6, [pc, #36]	; (800dcf4 <SwapUartPins+0x48>)
 800dcd0:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800dcd2:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800dcd4:	3b01      	subs	r3, #1
 800dcd6:	005b      	lsls	r3, r3, #1
 800dcd8:	5b9a      	ldrh	r2, [r3, r6]
			HAL_UART_Init(huart);		
 800dcda:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800dcdc:	438a      	bics	r2, r1
 800dcde:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dce0:	2308      	movs	r3, #8
 800dce2:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800dce4:	f005 fa44 	bl	8013170 <HAL_UART_Init>
}
 800dce8:	e7e9      	b.n	800dcbe <SwapUartPins+0x12>
 800dcea:	f7ff fde9 	bl	800d8c0 <SwapUartPins.part.0>
 800dcee:	e7e6      	b.n	800dcbe <SwapUartPins+0x12>
 800dcf0:	20000aa8 	.word	0x20000aa8
 800dcf4:	20006d3c 	.word	0x20006d3c

0800dcf8 <ReadPortsDir>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800dcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcfa:	46c6      	mov	lr, r8
 800dcfc:	b500      	push	{lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800dcfe:	4d12      	ldr	r5, [pc, #72]	; (800dd48 <ReadPortsDir+0x50>)
 800dd00:	782b      	ldrb	r3, [r5, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d01d      	beq.n	800dd42 <ReadPortsDir+0x4a>
	BOS_Status result = BOS_OK;
 800dd06:	2300      	movs	r3, #0
	for (uint8_t i = 1; i <= N; i++) {
 800dd08:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800dd0a:	4698      	mov	r8, r3
 800dd0c:	4e0f      	ldr	r6, [pc, #60]	; (800dd4c <ReadPortsDir+0x54>)
		if (i != myID) {
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800dd0e:	4f10      	ldr	r7, [pc, #64]	; (800dd50 <ReadPortsDir+0x58>)
		if (i != myID) {
 800dd10:	7833      	ldrb	r3, [r6, #0]
 800dd12:	42a3      	cmp	r3, r4
 800dd14:	d00c      	beq.n	800dd30 <ReadPortsDir+0x38>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800dd16:	2200      	movs	r2, #0
 800dd18:	2113      	movs	r1, #19
 800dd1a:	0020      	movs	r0, r4
 800dd1c:	f7fa fb18 	bl	8008350 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800dd20:	2032      	movs	r0, #50	; 0x32
 800dd22:	f7ff fdbb 	bl	800d89c <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800dd26:	783b      	ldrb	r3, [r7, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d001      	beq.n	800dd30 <ReadPortsDir+0x38>
				result = BOS_ERR_NoResponse;
 800dd2c:	2302      	movs	r3, #2
 800dd2e:	4698      	mov	r8, r3
	for (uint8_t i = 1; i <= N; i++) {
 800dd30:	3401      	adds	r4, #1
 800dd32:	782b      	ldrb	r3, [r5, #0]
 800dd34:	b2e4      	uxtb	r4, r4
 800dd36:	42a3      	cmp	r3, r4
 800dd38:	d2ea      	bcs.n	800dd10 <ReadPortsDir+0x18>
			}
		}
	}

	return result;
}
 800dd3a:	4640      	mov	r0, r8
 800dd3c:	bc04      	pop	{r2}
 800dd3e:	4690      	mov	r8, r2
 800dd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result = BOS_OK;
 800dd42:	2300      	movs	r3, #0
 800dd44:	4698      	mov	r8, r3
 800dd46:	e7f8      	b.n	800dd3a <ReadPortsDir+0x42>
 800dd48:	20000010 	.word	0x20000010
 800dd4c:	20000aa8 	.word	0x20000aa8
 800dd50:	20000c4c 	.word	0x20000c4c

0800dd54 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800dd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800dd56:	2301      	movs	r3, #1
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800dd58:	2580      	movs	r5, #128	; 0x80
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800dd5a:	490f      	ldr	r1, [pc, #60]	; (800dd98 <ReadPortsDirMSG+0x44>)
	uint16_t temp =0;
 800dd5c:	2200      	movs	r2, #0
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800dd5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dd60:	022d      	lsls	r5, r5, #8
			messageParams[temp++] = p;
 800dd62:	4f0e      	ldr	r7, [pc, #56]	; (800dd9c <ReadPortsDirMSG+0x48>)
 800dd64:	4e0e      	ldr	r6, [pc, #56]	; (800dda0 <ReadPortsDirMSG+0x4c>)
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800dd66:	b2dc      	uxtb	r4, r3
 800dd68:	42a9      	cmp	r1, r5
 800dd6a:	d102      	bne.n	800dd72 <ReadPortsDirMSG+0x1e>
			messageParams[temp++] = p;
 800dd6c:	1c51      	adds	r1, r2, #1
 800dd6e:	54bc      	strb	r4, [r7, r2]
 800dd70:	b28a      	uxth	r2, r1
	for (int p = 1; p <= NumOfPorts; p++) {
 800dd72:	3301      	adds	r3, #1
 800dd74:	2b06      	cmp	r3, #6
 800dd76:	d009      	beq.n	800dd8c <ReadPortsDirMSG+0x38>
 800dd78:	0099      	lsls	r1, r3, #2
 800dd7a:	3904      	subs	r1, #4
 800dd7c:	5871      	ldr	r1, [r6, r1]
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800dd7e:	b2dc      	uxtb	r4, r3
 800dd80:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dd82:	42a9      	cmp	r1, r5
 800dd84:	d0f2      	beq.n	800dd6c <ReadPortsDirMSG+0x18>
	for (int p = 1; p <= NumOfPorts; p++) {
 800dd86:	3301      	adds	r3, #1
 800dd88:	2b06      	cmp	r3, #6
 800dd8a:	d1f5      	bne.n	800dd78 <ReadPortsDirMSG+0x24>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800dd8c:	2114      	movs	r1, #20
 800dd8e:	f7fa fadf 	bl	8008350 <SendMessageToModule>
	return result;
}
 800dd92:	2000      	movs	r0, #0
 800dd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd96:	46c0      	nop			; (mov r8, r8)
 800dd98:	20006a58 	.word	0x20006a58
 800dd9c:	20000b4c 	.word	0x20000b4c
 800dda0:	08018828 	.word	0x08018828

0800dda4 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800dda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dda6:	46c6      	mov	lr, r8
 800dda8:	4b12      	ldr	r3, [pc, #72]	; (800ddf4 <UpdateMyPortsDir+0x50>)
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800ddaa:	2580      	movs	r5, #128	; 0x80
{
 800ddac:	2400      	movs	r4, #0
 800ddae:	4698      	mov	r8, r3
 800ddb0:	b500      	push	{lr}
 800ddb2:	4811      	ldr	r0, [pc, #68]	; (800ddf8 <UpdateMyPortsDir+0x54>)
 800ddb4:	4f11      	ldr	r7, [pc, #68]	; (800ddfc <UpdateMyPortsDir+0x58>)
 800ddb6:	4e12      	ldr	r6, [pc, #72]	; (800de00 <UpdateMyPortsDir+0x5c>)
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800ddb8:	022d      	lsls	r5, r5, #8
 800ddba:	002a      	movs	r2, r5
 800ddbc:	4122      	asrs	r2, r4
 800ddbe:	7833      	ldrb	r3, [r6, #0]
 800ddc0:	3b01      	subs	r3, #1
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	5afb      	ldrh	r3, [r7, r3]
 800ddc6:	421a      	tst	r2, r3
 800ddc8:	d00a      	beq.n	800dde0 <UpdateMyPortsDir+0x3c>
	if (huart != NULL) {
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	d001      	beq.n	800ddd2 <UpdateMyPortsDir+0x2e>
 800ddce:	f7ff fd77 	bl	800d8c0 <SwapUartPins.part.0>
 800ddd2:	3401      	adds	r4, #1
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800ddd4:	2c05      	cmp	r4, #5
 800ddd6:	d009      	beq.n	800ddec <UpdateMyPortsDir+0x48>
 800ddd8:	4642      	mov	r2, r8
 800ddda:	00a3      	lsls	r3, r4, #2
 800dddc:	5898      	ldr	r0, [r3, r2]
 800ddde:	e7ec      	b.n	800ddba <UpdateMyPortsDir+0x16>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
 800dde0:	2100      	movs	r1, #0
 800dde2:	3401      	adds	r4, #1
 800dde4:	f7ff ff62 	bl	800dcac <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800dde8:	2c05      	cmp	r4, #5
 800ddea:	d1f5      	bne.n	800ddd8 <UpdateMyPortsDir+0x34>
			SwapUartPins(GetUart(p), REVERSED);
		}
	}

	return result;
}
 800ddec:	2000      	movs	r0, #0
 800ddee:	bc04      	pop	{r2}
 800ddf0:	4690      	mov	r8, r2
 800ddf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddf4:	08018828 	.word	0x08018828
 800ddf8:	20006a58 	.word	0x20006a58
 800ddfc:	20006d3c 	.word	0x20006d3c
 800de00:	20000aa8 	.word	0x20000aa8

0800de04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800de04:	4816      	ldr	r0, [pc, #88]	; (800de60 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800de06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800de08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800de0a:	e003      	b.n	800de14 <LoopCopyDataInit>

0800de0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800de0c:	4b15      	ldr	r3, [pc, #84]	; (800de64 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800de0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800de10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800de12:	3104      	adds	r1, #4

0800de14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800de14:	4814      	ldr	r0, [pc, #80]	; (800de68 <LoopForever+0xc>)
  ldr r3, =_edata
 800de16:	4b15      	ldr	r3, [pc, #84]	; (800de6c <LoopForever+0x10>)
  adds r2, r0, r1
 800de18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800de1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800de1c:	d3f6      	bcc.n	800de0c <CopyDataInit>
  ldr r2, =_sbss
 800de1e:	4a14      	ldr	r2, [pc, #80]	; (800de70 <LoopForever+0x14>)
  b LoopFillZerobss
 800de20:	e002      	b.n	800de28 <LoopFillZerobss>

0800de22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800de22:	2300      	movs	r3, #0
  str  r3, [r2]
 800de24:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800de26:	3204      	adds	r2, #4

0800de28 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800de28:	4b12      	ldr	r3, [pc, #72]	; (800de74 <LoopForever+0x18>)
  cmp r2, r3
 800de2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800de2c:	d3f9      	bcc.n	800de22 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800de2e:	4812      	ldr	r0, [pc, #72]	; (800de78 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800de30:	4912      	ldr	r1, [pc, #72]	; (800de7c <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800de32:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800de34:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800de36:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800de38:	d005      	beq.n	800de46 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800de3a:	f000 f82b 	bl	800de94 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800de3e:	f005 fb2f 	bl	80134a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800de42:	f005 fadf 	bl	8013404 <main>

0800de46 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800de46:	480e      	ldr	r0, [pc, #56]	; (800de80 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800de48:	490e      	ldr	r1, [pc, #56]	; (800de84 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800de4a:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800de4c:	480e      	ldr	r0, [pc, #56]	; (800de88 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800de4e:	490d      	ldr	r1, [pc, #52]	; (800de84 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800de50:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800de52:	480e      	ldr	r0, [pc, #56]	; (800de8c <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800de54:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800de56:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800de58:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800de5a:	4700      	bx	r0

0800de5c <LoopForever>:


LoopForever:
    b LoopForever
 800de5c:	e7fe      	b.n	800de5c <LoopForever>
 800de5e:	0000      	.short	0x0000
  ldr   r0, =_estack
 800de60:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800de64:	0801bb84 	.word	0x0801bb84
  ldr r0, =_sdata
 800de68:	20000010 	.word	0x20000010
  ldr r3, =_edata
 800de6c:	20000a88 	.word	0x20000a88
  ldr r2, =_sbss
 800de70:	20000a88 	.word	0x20000a88
  ldr r3, = _ebss
 800de74:	20006de0 	.word	0x20006de0
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800de78:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800de7c:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800de80:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800de84:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800de88:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800de8c:	1fffd800 	.word	0x1fffd800

0800de90 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800de90:	e7fe      	b.n	800de90 <CEC_CAN_IRQHandler>
	...

0800de94 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800de94:	2101      	movs	r1, #1
 800de96:	4b11      	ldr	r3, [pc, #68]	; (800dedc <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800de98:	4811      	ldr	r0, [pc, #68]	; (800dee0 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	430a      	orrs	r2, r1
 800de9e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800dea0:	685a      	ldr	r2, [r3, #4]
 800dea2:	4002      	ands	r2, r0
 800dea4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	480e      	ldr	r0, [pc, #56]	; (800dee4 <SystemInit+0x50>)
 800deaa:	4002      	ands	r2, r0
 800deac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	480d      	ldr	r0, [pc, #52]	; (800dee8 <SystemInit+0x54>)
 800deb2:	4002      	ands	r2, r0
 800deb4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800deb6:	685a      	ldr	r2, [r3, #4]
 800deb8:	480c      	ldr	r0, [pc, #48]	; (800deec <SystemInit+0x58>)
 800deba:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800debc:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800debe:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800dec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec2:	4382      	bics	r2, r0
 800dec4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800dec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dec8:	4809      	ldr	r0, [pc, #36]	; (800def0 <SystemInit+0x5c>)
 800deca:	4002      	ands	r2, r0
 800decc:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800dece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ded0:	438a      	bics	r2, r1
 800ded2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ded4:	2200      	movs	r2, #0
 800ded6:	609a      	str	r2, [r3, #8]

}
 800ded8:	4770      	bx	lr
 800deda:	46c0      	nop			; (mov r8, r8)
 800dedc:	40021000 	.word	0x40021000
 800dee0:	08ffb80c 	.word	0x08ffb80c
 800dee4:	fef6ffff 	.word	0xfef6ffff
 800dee8:	fffbffff 	.word	0xfffbffff
 800deec:	ffc0ffff 	.word	0xffc0ffff
 800def0:	fff0feac 	.word	0xfff0feac

0800def4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800def4:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800def6:	f000 fef9 	bl	800ecec <vTaskStartScheduler>
  
  return osOK;
}
 800defa:	2000      	movs	r0, #0
 800defc:	bd10      	pop	{r4, pc}
 800defe:	46c0      	nop			; (mov r8, r8)

0800df00 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800df00:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800df02:	2800      	cmp	r0, #0
 800df04:	d100      	bne.n	800df08 <osDelay+0x8>
 800df06:	3001      	adds	r0, #1
 800df08:	f001 f814 	bl	800ef34 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800df0c:	2000      	movs	r0, #0
 800df0e:	bd10      	pop	{r4, pc}

0800df10 <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800df10:	2300      	movs	r3, #0
{
 800df12:	b500      	push	{lr}
 800df14:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800df16:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df18:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00a      	beq.n	800df36 <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800df20:	a901      	add	r1, sp, #4
 800df22:	f000 fb95 	bl	800e650 <xQueueGiveFromISR>
 800df26:	2801      	cmp	r0, #1
 800df28:	d10c      	bne.n	800df44 <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800df2a:	9b01      	ldr	r3, [sp, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d10b      	bne.n	800df48 <osMutexRelease+0x38>
  osStatus result = osOK;
 800df30:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800df32:	b003      	add	sp, #12
 800df34:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800df36:	2300      	movs	r3, #0
 800df38:	2200      	movs	r2, #0
 800df3a:	2100      	movs	r1, #0
 800df3c:	f000 fad4 	bl	800e4e8 <xQueueGenericSend>
 800df40:	2801      	cmp	r0, #1
 800df42:	d0f5      	beq.n	800df30 <osMutexRelease+0x20>
    result = osErrorOS;
 800df44:	20ff      	movs	r0, #255	; 0xff
 800df46:	e7f4      	b.n	800df32 <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800df48:	2280      	movs	r2, #128	; 0x80
 800df4a:	4b02      	ldr	r3, [pc, #8]	; (800df54 <osMutexRelease+0x44>)
 800df4c:	0552      	lsls	r2, r2, #21
 800df4e:	601a      	str	r2, [r3, #0]
 800df50:	e7ee      	b.n	800df30 <osMutexRelease+0x20>
 800df52:	46c0      	nop			; (mov r8, r8)
 800df54:	e000ed04 	.word	0xe000ed04

0800df58 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800df58:	b510      	push	{r4, lr}
 800df5a:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800df5c:	2901      	cmp	r1, #1
 800df5e:	d005      	beq.n	800df6c <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800df60:	2100      	movs	r1, #0
 800df62:	f000 fab7 	bl	800e4d4 <xQueueCreateCountingSemaphore>
 800df66:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800df68:	0020      	movs	r0, r4
 800df6a:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800df6c:	2203      	movs	r2, #3
 800df6e:	2100      	movs	r1, #0
 800df70:	f000 fa8e 	bl	800e490 <xQueueGenericCreate>
 800df74:	1e04      	subs	r4, r0, #0
 800df76:	d0f7      	beq.n	800df68 <osSemaphoreCreate+0x10>
 800df78:	2300      	movs	r3, #0
 800df7a:	2200      	movs	r2, #0
 800df7c:	2100      	movs	r1, #0
 800df7e:	f000 fab3 	bl	800e4e8 <xQueueGenericSend>
 800df82:	e7f1      	b.n	800df68 <osSemaphoreCreate+0x10>

0800df84 <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800df84:	2300      	movs	r3, #0
{
 800df86:	b500      	push	{lr}
 800df88:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 800df8a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d01e      	beq.n	800dfce <osSemaphoreWait+0x4a>
 800df90:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800df94:	2b00      	cmp	r3, #0
 800df96:	d00b      	beq.n	800dfb0 <osSemaphoreWait+0x2c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800df98:	aa01      	add	r2, sp, #4
 800df9a:	2100      	movs	r1, #0
 800df9c:	f000 fc1e 	bl	800e7dc <xQueueReceiveFromISR>
 800dfa0:	2801      	cmp	r0, #1
 800dfa2:	d10c      	bne.n	800dfbe <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800dfa4:	9b01      	ldr	r3, [sp, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d10b      	bne.n	800dfc2 <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800dfaa:	2000      	movs	r0, #0
}
 800dfac:	b003      	add	sp, #12
 800dfae:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dfb0:	000a      	movs	r2, r1
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	f000 fb75 	bl	800e6a4 <xQueueGenericReceive>
 800dfba:	2801      	cmp	r0, #1
 800dfbc:	d0f5      	beq.n	800dfaa <osSemaphoreWait+0x26>
      return osErrorOS;
 800dfbe:	20ff      	movs	r0, #255	; 0xff
 800dfc0:	e7f4      	b.n	800dfac <osSemaphoreWait+0x28>
	portEND_SWITCHING_ISR(taskWoken);
 800dfc2:	2280      	movs	r2, #128	; 0x80
 800dfc4:	4b03      	ldr	r3, [pc, #12]	; (800dfd4 <osSemaphoreWait+0x50>)
 800dfc6:	0552      	lsls	r2, r2, #21
 800dfc8:	601a      	str	r2, [r3, #0]
  return osOK;
 800dfca:	2000      	movs	r0, #0
 800dfcc:	e7ee      	b.n	800dfac <osSemaphoreWait+0x28>
    return osErrorParameter;
 800dfce:	2080      	movs	r0, #128	; 0x80
 800dfd0:	e7ec      	b.n	800dfac <osSemaphoreWait+0x28>
 800dfd2:	46c0      	nop			; (mov r8, r8)
 800dfd4:	e000ed04 	.word	0xe000ed04

0800dfd8 <osSemaphoreRelease>:
 800dfd8:	b510      	push	{r4, lr}
 800dfda:	f7ff ff99 	bl	800df10 <osMutexRelease>
 800dfde:	bd10      	pop	{r4, pc}

0800dfe0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800dfe0:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800dfe2:	f001 f919 	bl	800f218 <xTaskGetSchedulerState>
 800dfe6:	2801      	cmp	r0, #1
 800dfe8:	d001      	beq.n	800dfee <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800dfea:	f001 fd33 	bl	800fa54 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800dfee:	bd10      	pop	{r4, pc}

0800dff0 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800dff0:	b570      	push	{r4, r5, r6, lr}
 800dff2:	0006      	movs	r6, r0

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800dff4:	2008      	movs	r0, #8
 800dff6:	f001 fd65 	bl	800fac4 <pvPortMalloc>
portBASE_TYPE xReturn = pdFAIL;
 800dffa:	2500      	movs	r5, #0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800dffc:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );

	if( pxNewListItem != NULL )
 800dffe:	d00a      	beq.n	800e016 <FreeRTOS_CLIRegisterCommand+0x26>
	{
		taskENTER_CRITICAL();
 800e000:	f001 fce6 	bl	800f9d0 <vPortEnterCritical>
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800e004:	4b05      	ldr	r3, [pc, #20]	; (800e01c <FreeRTOS_CLIRegisterCommand+0x2c>)
			pxNewListItem->pxNext = NULL;
 800e006:	6065      	str	r5, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800e008:	681a      	ldr	r2, [r3, #0]
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e00a:	6026      	str	r6, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800e00c:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800e00e:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800e010:	f001 fcea 	bl	800f9e8 <vPortExitCritical>

		xReturn = pdPASS;
 800e014:	3501      	adds	r5, #1
	}

	return xReturn;
}
 800e016:	0028      	movs	r0, r5
 800e018:	bd70      	pop	{r4, r5, r6, pc}
 800e01a:	46c0      	nop			; (mov r8, r8)
 800e01c:	200000c8 	.word	0x200000c8

0800e020 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800e020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e022:	4657      	mov	r7, sl
 800e024:	46de      	mov	lr, fp
 800e026:	464e      	mov	r6, r9
 800e028:	4645      	mov	r5, r8
 800e02a:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800e02c:	4f34      	ldr	r7, [pc, #208]	; (800e100 <FreeRTOS_CLIProcessCommand+0xe0>)
{
 800e02e:	0006      	movs	r6, r0
	if( pxCommand == NULL )
 800e030:	683b      	ldr	r3, [r7, #0]
{
 800e032:	468a      	mov	sl, r1
 800e034:	4693      	mov	fp, r2
	if( pxCommand == NULL )
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00e      	beq.n	800e058 <FreeRTOS_CLIProcessCommand+0x38>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	0032      	movs	r2, r6
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	4659      	mov	r1, fp
 800e042:	4650      	mov	r0, sl
 800e044:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800e046:	2800      	cmp	r0, #0
 800e048:	d100      	bne.n	800e04c <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800e04a:	6038      	str	r0, [r7, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800e04c:	bc3c      	pop	{r2, r3, r4, r5}
 800e04e:	4690      	mov	r8, r2
 800e050:	4699      	mov	r9, r3
 800e052:	46a2      	mov	sl, r4
 800e054:	46ab      	mov	fp, r5
 800e056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e058:	3320      	adds	r3, #32
 800e05a:	4699      	mov	r9, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e05c:	4c29      	ldr	r4, [pc, #164]	; (800e104 <FreeRTOS_CLIProcessCommand+0xe4>)
 800e05e:	3404      	adds	r4, #4
 800e060:	603c      	str	r4, [r7, #0]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	681d      	ldr	r5, [r3, #0]
 800e066:	4698      	mov	r8, r3
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e068:	0028      	movs	r0, r5
 800e06a:	f7f2 f855 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e06e:	464a      	mov	r2, r9
 800e070:	5c33      	ldrb	r3, [r6, r0]
 800e072:	4393      	bics	r3, r2
 800e074:	d106      	bne.n	800e084 <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e076:	0002      	movs	r2, r0
 800e078:	0029      	movs	r1, r5
 800e07a:	0030      	movs	r0, r6
 800e07c:	f005 feda 	bl	8013e34 <strncmp>
 800e080:	2800      	cmp	r0, #0
 800e082:	d00a      	beq.n	800e09a <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e084:	6864      	ldr	r4, [r4, #4]
 800e086:	603c      	str	r4, [r7, #0]
 800e088:	2c00      	cmp	r4, #0
 800e08a:	d1ea      	bne.n	800e062 <FreeRTOS_CLIProcessCommand+0x42>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e08c:	465a      	mov	r2, fp
 800e08e:	491e      	ldr	r1, [pc, #120]	; (800e108 <FreeRTOS_CLIProcessCommand+0xe8>)
 800e090:	4650      	mov	r0, sl
 800e092:	f005 fee0 	bl	8013e56 <strncpy>
		xReturn = pdFALSE;
 800e096:	2000      	movs	r0, #0
	return xReturn;
 800e098:	e7d8      	b.n	800e04c <FreeRTOS_CLIProcessCommand+0x2c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e09a:	4643      	mov	r3, r8
 800e09c:	250c      	movs	r5, #12
 800e09e:	575d      	ldrsb	r5, [r3, r5]
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	2d00      	cmp	r5, #0
 800e0a4:	db26      	blt.n	800e0f4 <FreeRTOS_CLIProcessCommand+0xd4>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	56b2      	ldrsb	r2, [r6, r2]
 800e0aa:	2a00      	cmp	r2, #0
 800e0ac:	d025      	beq.n	800e0fa <FreeRTOS_CLIProcessCommand+0xda>
 800e0ae:	0031      	movs	r1, r6
int8_t cParameters = 0;
 800e0b0:	2400      	movs	r4, #0
 800e0b2:	e005      	b.n	800e0c0 <FreeRTOS_CLIProcessCommand+0xa0>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800e0b4:	2000      	movs	r0, #0
	while( *pcCommandString != 0x00 )
 800e0b6:	2200      	movs	r2, #0
		}

		pcCommandString++;
 800e0b8:	3101      	adds	r1, #1
	while( *pcCommandString != 0x00 )
 800e0ba:	568a      	ldrsb	r2, [r1, r2]
 800e0bc:	2a00      	cmp	r2, #0
 800e0be:	d007      	beq.n	800e0d0 <FreeRTOS_CLIProcessCommand+0xb0>
		if( ( *pcCommandString ) == ' ' )
 800e0c0:	2a20      	cmp	r2, #32
 800e0c2:	d1f7      	bne.n	800e0b4 <FreeRTOS_CLIProcessCommand+0x94>
			if( xLastCharacterWasSpace != pdTRUE )
 800e0c4:	2801      	cmp	r0, #1
 800e0c6:	d0f6      	beq.n	800e0b6 <FreeRTOS_CLIProcessCommand+0x96>
				cParameters++;
 800e0c8:	3401      	adds	r4, #1
 800e0ca:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800e0cc:	2001      	movs	r0, #1
 800e0ce:	e7f2      	b.n	800e0b6 <FreeRTOS_CLIProcessCommand+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e0d0:	2801      	cmp	r0, #1
 800e0d2:	d00c      	beq.n	800e0ee <FreeRTOS_CLIProcessCommand+0xce>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800e0d4:	42a5      	cmp	r5, r4
 800e0d6:	d00d      	beq.n	800e0f4 <FreeRTOS_CLIProcessCommand+0xd4>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d0d7      	beq.n	800e08c <FreeRTOS_CLIProcessCommand+0x6c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e0dc:	465a      	mov	r2, fp
 800e0de:	490b      	ldr	r1, [pc, #44]	; (800e10c <FreeRTOS_CLIProcessCommand+0xec>)
 800e0e0:	4650      	mov	r0, sl
 800e0e2:	f005 feb8 	bl	8013e56 <strncpy>
		pxCommand = NULL;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	603b      	str	r3, [r7, #0]
 800e0ec:	e7ae      	b.n	800e04c <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800e0ee:	3c01      	subs	r4, #1
 800e0f0:	b264      	sxtb	r4, r4
 800e0f2:	e7ef      	b.n	800e0d4 <FreeRTOS_CLIProcessCommand+0xb4>
	else if( pxCommand != NULL )
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d1a0      	bne.n	800e03a <FreeRTOS_CLIProcessCommand+0x1a>
 800e0f8:	e7c8      	b.n	800e08c <FreeRTOS_CLIProcessCommand+0x6c>
int8_t cParameters = 0;
 800e0fa:	2400      	movs	r4, #0
 800e0fc:	e7ea      	b.n	800e0d4 <FreeRTOS_CLIProcessCommand+0xb4>
 800e0fe:	46c0      	nop			; (mov r8, r8)
 800e100:	20002488 	.word	0x20002488
 800e104:	200000c8 	.word	0x200000c8
 800e108:	0801b78c 	.word	0x0801b78c
 800e10c:	0801b734 	.word	0x0801b734

0800e110 <FreeRTOS_CLIGetOutputBuffer>:
}
 800e110:	4800      	ldr	r0, [pc, #0]	; (800e114 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e112:	4770      	bx	lr
 800e114:	20002498 	.word	0x20002498

0800e118 <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800e118:	2300      	movs	r3, #0
{
 800e11a:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800e11c:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e11e:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e120:	2900      	cmp	r1, #0
 800e122:	d021      	beq.n	800e168 <FreeRTOS_CLIGetParameter+0x50>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e124:	2300      	movs	r3, #0
 800e126:	56c3      	ldrsb	r3, [r0, r3]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d105      	bne.n	800e138 <FreeRTOS_CLIGetParameter+0x20>
 800e12c:	e01c      	b.n	800e168 <FreeRTOS_CLIGetParameter+0x50>
 800e12e:	2300      	movs	r3, #0
			pcCommandString++;
 800e130:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e132:	56c3      	ldrsb	r3, [r0, r3]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d017      	beq.n	800e168 <FreeRTOS_CLIGetParameter+0x50>
 800e138:	2b20      	cmp	r3, #32
 800e13a:	d1f8      	bne.n	800e12e <FreeRTOS_CLIGetParameter+0x16>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e13c:	2300      	movs	r3, #0
			pcCommandString++;
 800e13e:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e140:	56c3      	ldrsb	r3, [r0, r3]
 800e142:	2b20      	cmp	r3, #32
 800e144:	d0fa      	beq.n	800e13c <FreeRTOS_CLIGetParameter+0x24>
		if( *pcCommandString != 0x00 )
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00e      	beq.n	800e168 <FreeRTOS_CLIGetParameter+0x50>
			uxParametersFound++;
 800e14a:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e14c:	42a1      	cmp	r1, r4
 800e14e:	d1e9      	bne.n	800e124 <FreeRTOS_CLIGetParameter+0xc>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e150:	2120      	movs	r1, #32
 800e152:	7803      	ldrb	r3, [r0, #0]
 800e154:	438b      	bics	r3, r1
 800e156:	d007      	beq.n	800e168 <FreeRTOS_CLIGetParameter+0x50>
 800e158:	2300      	movs	r3, #0
 800e15a:	2420      	movs	r4, #32
					( *pxParameterStringLength )++;
 800e15c:	3301      	adds	r3, #1
 800e15e:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e160:	5cc1      	ldrb	r1, [r0, r3]
 800e162:	43a1      	bics	r1, r4
 800e164:	d1fa      	bne.n	800e15c <FreeRTOS_CLIGetParameter+0x44>
 800e166:	e000      	b.n	800e16a <FreeRTOS_CLIGetParameter+0x52>
					pcReturn = NULL;
 800e168:	2000      	movs	r0, #0
}
 800e16a:	bd10      	pop	{r4, pc}

0800e16c <prvHelpCommand>:
{
 800e16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e16e:	46ce      	mov	lr, r9
 800e170:	4647      	mov	r7, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800e172:	2300      	movs	r3, #0
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b083      	sub	sp, #12
 800e178:	0004      	movs	r4, r0
 800e17a:	000d      	movs	r5, r1
 800e17c:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e17e:	2101      	movs	r1, #1
 800e180:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800e182:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e184:	f7ff ffc8 	bl	800e118 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e188:	2800      	cmp	r0, #0
 800e18a:	d024      	beq.n	800e1d6 <prvHelpCommand+0x6a>
 800e18c:	2206      	movs	r2, #6
 800e18e:	4931      	ldr	r1, [pc, #196]	; (800e254 <prvHelpCommand+0xe8>)
 800e190:	f005 fe50 	bl	8013e34 <strncmp>
 800e194:	1e07      	subs	r7, r0, #0
 800e196:	d118      	bne.n	800e1ca <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800e198:	4b2f      	ldr	r3, [pc, #188]	; (800e258 <prvHelpCommand+0xec>)
 800e19a:	4698      	mov	r8, r3
 800e19c:	791b      	ldrb	r3, [r3, #4]
 800e19e:	2b07      	cmp	r3, #7
 800e1a0:	d047      	beq.n	800e232 <prvHelpCommand+0xc6>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e1a2:	1c5a      	adds	r2, r3, #1
 800e1a4:	b2d2      	uxtb	r2, r2
 800e1a6:	4691      	mov	r9, r2
 800e1a8:	4642      	mov	r2, r8
 800e1aa:	4649      	mov	r1, r9
 800e1ac:	7111      	strb	r1, [r2, #4]
 800e1ae:	4a2b      	ldr	r2, [pc, #172]	; (800e25c <prvHelpCommand+0xf0>)
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	5899      	ldr	r1, [r3, r2]
 800e1b4:	0020      	movs	r0, r4
 800e1b6:	002a      	movs	r2, r5
 800e1b8:	f005 fe4d 	bl	8013e56 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800e1bc:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800e1be:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800e1c0:	2b07      	cmp	r3, #7
 800e1c2:	d102      	bne.n	800e1ca <prvHelpCommand+0x5e>
			xReturn = pdFALSE; str = 0;
 800e1c4:	4643      	mov	r3, r8
 800e1c6:	2600      	movs	r6, #0
 800e1c8:	711f      	strb	r7, [r3, #4]
}
 800e1ca:	0030      	movs	r0, r6
 800e1cc:	b003      	add	sp, #12
 800e1ce:	bc0c      	pop	{r2, r3}
 800e1d0:	4690      	mov	r8, r2
 800e1d2:	4699      	mov	r9, r3
 800e1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800e1d6:	4f20      	ldr	r7, [pc, #128]	; (800e258 <prvHelpCommand+0xec>)
 800e1d8:	68be      	ldr	r6, [r7, #8]
 800e1da:	2e00      	cmp	r6, #0
 800e1dc:	d020      	beq.n	800e220 <prvHelpCommand+0xb4>
 800e1de:	7b3b      	ldrb	r3, [r7, #12]
 800e1e0:	1c5a      	adds	r2, r3, #1
 800e1e2:	b2d2      	uxtb	r2, r2
 800e1e4:	4690      	mov	r8, r2
 800e1e6:	6832      	ldr	r2, [r6, #0]
 800e1e8:	6851      	ldr	r1, [r2, #4]
		if (counter > numOfBosCommands) {
 800e1ea:	4a1d      	ldr	r2, [pc, #116]	; (800e260 <prvHelpCommand+0xf4>)
 800e1ec:	7812      	ldrb	r2, [r2, #0]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d22a      	bcs.n	800e248 <prvHelpCommand+0xdc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e1f2:	002a      	movs	r2, r5
 800e1f4:	0020      	movs	r0, r4
 800e1f6:	3a08      	subs	r2, #8
 800e1f8:	3008      	adds	r0, #8
 800e1fa:	f005 fe2c 	bl	8013e56 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e1fe:	1c60      	adds	r0, r4, #1
 800e200:	4918      	ldr	r1, [pc, #96]	; (800e264 <prvHelpCommand+0xf8>)
 800e202:	f005 fe0f 	bl	8013e24 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e206:	2328      	movs	r3, #40	; 0x28
 800e208:	7023      	strb	r3, [r4, #0]
 800e20a:	3301      	adds	r3, #1
 800e20c:	71a3      	strb	r3, [r4, #6]
 800e20e:	3b09      	subs	r3, #9
 800e210:	71e3      	strb	r3, [r4, #7]
		counter++;
 800e212:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800e214:	6876      	ldr	r6, [r6, #4]
		counter++;
 800e216:	733b      	strb	r3, [r7, #12]
		pxCommand = pxCommand->pxNext;
 800e218:	60be      	str	r6, [r7, #8]
			xReturn = pdTRUE;
 800e21a:	1e73      	subs	r3, r6, #1
 800e21c:	419e      	sbcs	r6, r3
 800e21e:	e7d4      	b.n	800e1ca <prvHelpCommand+0x5e>
			counter = 1;
 800e220:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800e222:	4e11      	ldr	r6, [pc, #68]	; (800e268 <prvHelpCommand+0xfc>)
			counter = 1;
 800e224:	733b      	strb	r3, [r7, #12]
			pxCommand = &xRegisteredCommands;
 800e226:	3604      	adds	r6, #4
			counter = 1;
 800e228:	3301      	adds	r3, #1
 800e22a:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800e22c:	60be      	str	r6, [r7, #8]
			counter = 1;
 800e22e:	3b01      	subs	r3, #1
 800e230:	e7d9      	b.n	800e1e6 <prvHelpCommand+0x7a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e232:	4642      	mov	r2, r8
 800e234:	3b06      	subs	r3, #6
 800e236:	7113      	strb	r3, [r2, #4]
 800e238:	4b08      	ldr	r3, [pc, #32]	; (800e25c <prvHelpCommand+0xf0>)
 800e23a:	002a      	movs	r2, r5
 800e23c:	6819      	ldr	r1, [r3, #0]
 800e23e:	0020      	movs	r0, r4
 800e240:	f005 fe09 	bl	8013e56 <strncpy>
			xReturn = pdTRUE;
 800e244:	2601      	movs	r6, #1
 800e246:	e7c0      	b.n	800e1ca <prvHelpCommand+0x5e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e248:	002a      	movs	r2, r5
 800e24a:	0020      	movs	r0, r4
 800e24c:	f005 fe03 	bl	8013e56 <strncpy>
 800e250:	e7df      	b.n	800e212 <prvHelpCommand+0xa6>
 800e252:	46c0      	nop			; (mov r8, r8)
 800e254:	08019b68 	.word	0x08019b68
 800e258:	20002488 	.word	0x20002488
 800e25c:	2000003c 	.word	0x2000003c
 800e260:	200067f8 	.word	0x200067f8
 800e264:	0801825c 	.word	0x0801825c
 800e268:	200000c8 	.word	0x200000c8

0800e26c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e26c:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e26e:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e270:	3308      	adds	r3, #8
 800e272:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e274:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e276:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e278:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e27a:	4252      	negs	r2, r2
 800e27c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e27e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e280:	4770      	bx	lr
 800e282:	46c0      	nop			; (mov r8, r8)

0800e284 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e284:	2300      	movs	r3, #0
 800e286:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e288:	4770      	bx	lr
 800e28a:	46c0      	nop			; (mov r8, r8)

0800e28c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e28c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e28e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800e290:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e292:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e294:	689a      	ldr	r2, [r3, #8]
 800e296:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e298:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800e29a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e29c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e29e:	3301      	adds	r3, #1
 800e2a0:	6003      	str	r3, [r0, #0]
}
 800e2a2:	4770      	bx	lr

0800e2a4 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2a4:	0002      	movs	r2, r0
{
 800e2a6:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e2a8:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2aa:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800e2ac:	1c63      	adds	r3, r4, #1
 800e2ae:	d101      	bne.n	800e2b4 <vListInsert+0x10>
 800e2b0:	e00d      	b.n	800e2ce <vListInsert+0x2a>
 800e2b2:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2b4:	6853      	ldr	r3, [r2, #4]
 800e2b6:	681d      	ldr	r5, [r3, #0]
 800e2b8:	42a5      	cmp	r5, r4
 800e2ba:	d9fa      	bls.n	800e2b2 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e2bc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e2be:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800e2c0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800e2c2:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800e2c4:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800e2c6:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e2c8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e2ca:	6003      	str	r3, [r0, #0]
}
 800e2cc:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800e2ce:	6902      	ldr	r2, [r0, #16]
 800e2d0:	6853      	ldr	r3, [r2, #4]
 800e2d2:	e7f3      	b.n	800e2bc <vListInsert+0x18>

0800e2d4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e2d4:	6842      	ldr	r2, [r0, #4]
 800e2d6:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e2d8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e2da:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e2dc:	6881      	ldr	r1, [r0, #8]
 800e2de:	604a      	str	r2, [r1, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e2e0:	685a      	ldr	r2, [r3, #4]
 800e2e2:	4282      	cmp	r2, r0
 800e2e4:	d100      	bne.n	800e2e8 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e2e6:	6059      	str	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	1e50      	subs	r0, r2, #1
 800e2f0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e2f2:	4770      	bx	lr

0800e2f4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e2f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800e2fa:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e2fc:	2a00      	cmp	r2, #0
 800e2fe:	d107      	bne.n	800e310 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e300:	6805      	ldr	r5, [r0, #0]
 800e302:	2d00      	cmp	r5, #0
 800e304:	d02d      	beq.n	800e362 <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800e306:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800e308:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e30a:	3301      	adds	r3, #1
 800e30c:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800e30e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800e310:	2d00      	cmp	r5, #0
 800e312:	d10e      	bne.n	800e332 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e314:	6880      	ldr	r0, [r0, #8]
 800e316:	f005 fb46 	bl	80139a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e31a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e31c:	68a3      	ldr	r3, [r4, #8]
 800e31e:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e320:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e322:	4463      	add	r3, ip
 800e324:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e326:	4293      	cmp	r3, r2
 800e328:	d3ed      	bcc.n	800e306 <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e32a:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800e32c:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e32e:	60a3      	str	r3, [r4, #8]
 800e330:	e7ea      	b.n	800e308 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e332:	68c0      	ldr	r0, [r0, #12]
 800e334:	f005 fb37 	bl	80139a6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e338:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e33a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e33c:	425a      	negs	r2, r3
 800e33e:	68e3      	ldr	r3, [r4, #12]
 800e340:	189b      	adds	r3, r3, r2
 800e342:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e344:	428b      	cmp	r3, r1
 800e346:	d203      	bcs.n	800e350 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e348:	6863      	ldr	r3, [r4, #4]
 800e34a:	469c      	mov	ip, r3
 800e34c:	4462      	add	r2, ip
 800e34e:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e350:	2d02      	cmp	r5, #2
 800e352:	d1d8      	bne.n	800e306 <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e354:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e356:	2b00      	cmp	r3, #0
 800e358:	d0d5      	beq.n	800e306 <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800e35a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e35c:	3b01      	subs	r3, #1
 800e35e:	63a3      	str	r3, [r4, #56]	; 0x38
 800e360:	e7d1      	b.n	800e306 <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e362:	6840      	ldr	r0, [r0, #4]
 800e364:	f000 ff98 	bl	800f298 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e368:	6065      	str	r5, [r4, #4]
 800e36a:	e7cd      	b.n	800e308 <prvCopyDataToQueue+0x14>

0800e36c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e36c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800e36e:	b510      	push	{r4, lr}
 800e370:	000b      	movs	r3, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e372:	2a00      	cmp	r2, #0
 800e374:	d008      	beq.n	800e388 <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e376:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e378:	6844      	ldr	r4, [r0, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e37a:	1889      	adds	r1, r1, r2
 800e37c:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e37e:	42a1      	cmp	r1, r4
 800e380:	d203      	bcs.n	800e38a <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e382:	0018      	movs	r0, r3
 800e384:	f005 fb0f 	bl	80139a6 <memcpy>
	}
}
 800e388:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e38a:	6801      	ldr	r1, [r0, #0]
 800e38c:	60c1      	str	r1, [r0, #12]
 800e38e:	e7f8      	b.n	800e382 <prvCopyDataFromQueue+0x16>

0800e390 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e390:	b570      	push	{r4, r5, r6, lr}
 800e392:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e394:	f001 fb1c 	bl	800f9d0 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e398:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	dd1b      	ble.n	800e3d6 <prvUnlockQueue+0x46>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e39e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d018      	beq.n	800e3d6 <prvUnlockQueue+0x46>
 800e3a4:	0025      	movs	r5, r4
 800e3a6:	3524      	adds	r5, #36	; 0x24
 800e3a8:	e008      	b.n	800e3bc <prvUnlockQueue+0x2c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800e3aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e3b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	dd0f      	ble.n	800e3d6 <prvUnlockQueue+0x46>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d00c      	beq.n	800e3d6 <prvUnlockQueue+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3bc:	0028      	movs	r0, r5
 800e3be:	f000 feb7 	bl	800f130 <xTaskRemoveFromEventList>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	d0f1      	beq.n	800e3aa <prvUnlockQueue+0x1a>
						vTaskMissedYield();
 800e3c6:	f000 ff21 	bl	800f20c <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800e3ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e3d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	dcef      	bgt.n	800e3b6 <prvUnlockQueue+0x26>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	425b      	negs	r3, r3
 800e3da:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800e3dc:	f001 fb04 	bl	800f9e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e3e0:	f001 faf6 	bl	800f9d0 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e3e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	dd1b      	ble.n	800e422 <prvUnlockQueue+0x92>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3ea:	6923      	ldr	r3, [r4, #16]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d018      	beq.n	800e422 <prvUnlockQueue+0x92>
 800e3f0:	0025      	movs	r5, r4
 800e3f2:	3510      	adds	r5, #16
 800e3f4:	e008      	b.n	800e408 <prvUnlockQueue+0x78>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800e3f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e3fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	dd0f      	ble.n	800e422 <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e402:	6923      	ldr	r3, [r4, #16]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00c      	beq.n	800e422 <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e408:	0028      	movs	r0, r5
 800e40a:	f000 fe91 	bl	800f130 <xTaskRemoveFromEventList>
 800e40e:	2800      	cmp	r0, #0
 800e410:	d0f1      	beq.n	800e3f6 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800e412:	f000 fefb 	bl	800f20c <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800e416:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e418:	3b01      	subs	r3, #1
 800e41a:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e41c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e41e:	2b00      	cmp	r3, #0
 800e420:	dcef      	bgt.n	800e402 <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800e422:	2301      	movs	r3, #1
 800e424:	425b      	negs	r3, r3
 800e426:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e428:	f001 fade 	bl	800f9e8 <vPortExitCritical>
}
 800e42c:	bd70      	pop	{r4, r5, r6, pc}
 800e42e:	46c0      	nop			; (mov r8, r8)

0800e430 <xQueueGenericReset>:
{
 800e430:	b570      	push	{r4, r5, r6, lr}
 800e432:	0004      	movs	r4, r0
 800e434:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800e436:	f001 facb 	bl	800f9d0 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e43a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e43c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e43e:	6822      	ldr	r2, [r4, #0]
 800e440:	434b      	muls	r3, r1
 800e442:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e444:	1a5b      	subs	r3, r3, r1
 800e446:	18d3      	adds	r3, r2, r3
 800e448:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e44a:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e44c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e44e:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800e450:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e452:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e454:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800e456:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e458:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e45a:	2d00      	cmp	r5, #0
 800e45c:	d10f      	bne.n	800e47e <xQueueGenericReset+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e45e:	6923      	ldr	r3, [r4, #16]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d103      	bne.n	800e46c <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 800e464:	f001 fac0 	bl	800f9e8 <vPortExitCritical>
}
 800e468:	2001      	movs	r0, #1
 800e46a:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e46c:	0020      	movs	r0, r4
 800e46e:	3010      	adds	r0, #16
 800e470:	f000 fe5e 	bl	800f130 <xTaskRemoveFromEventList>
 800e474:	2801      	cmp	r0, #1
 800e476:	d1f5      	bne.n	800e464 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800e478:	f001 fa9e 	bl	800f9b8 <vPortYield>
 800e47c:	e7f2      	b.n	800e464 <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e47e:	0020      	movs	r0, r4
 800e480:	3010      	adds	r0, #16
 800e482:	f7ff fef3 	bl	800e26c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e486:	0020      	movs	r0, r4
 800e488:	3024      	adds	r0, #36	; 0x24
 800e48a:	f7ff feef 	bl	800e26c <vListInitialise>
 800e48e:	e7e9      	b.n	800e464 <xQueueGenericReset+0x34>

0800e490 <xQueueGenericCreate>:
{
 800e490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e492:	0006      	movs	r6, r0
 800e494:	000d      	movs	r5, r1
 800e496:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e498:	2900      	cmp	r1, #0
 800e49a:	d009      	beq.n	800e4b0 <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e49c:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e49e:	3055      	adds	r0, #85	; 0x55
 800e4a0:	f001 fb10 	bl	800fac4 <pvPortMalloc>
 800e4a4:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e4a6:	d013      	beq.n	800e4d0 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e4a8:	0003      	movs	r3, r0
 800e4aa:	3354      	adds	r3, #84	; 0x54
 800e4ac:	6003      	str	r3, [r0, #0]
 800e4ae:	e005      	b.n	800e4bc <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e4b0:	2054      	movs	r0, #84	; 0x54
 800e4b2:	f001 fb07 	bl	800fac4 <pvPortMalloc>
 800e4b6:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e4b8:	d00a      	beq.n	800e4d0 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e4ba:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e4bc:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e4be:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e4c0:	2101      	movs	r1, #1
 800e4c2:	0020      	movs	r0, r4
 800e4c4:	f7ff ffb4 	bl	800e430 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e4c8:	2350      	movs	r3, #80	; 0x50
 800e4ca:	54e7      	strb	r7, [r4, r3]
}
 800e4cc:	0020      	movs	r0, r4
 800e4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
QueueHandle_t xReturn = NULL;
 800e4d0:	2400      	movs	r4, #0
 800e4d2:	e7fb      	b.n	800e4cc <xQueueGenericCreate+0x3c>

0800e4d4 <xQueueCreateCountingSemaphore>:
	{
 800e4d4:	b510      	push	{r4, lr}
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e4d6:	2202      	movs	r2, #2
	{
 800e4d8:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e4da:	2100      	movs	r1, #0
 800e4dc:	f7ff ffd8 	bl	800e490 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	d000      	beq.n	800e4e6 <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e4e4:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e4e6:	bd10      	pop	{r4, pc}

0800e4e8 <xQueueGenericSend>:
{
 800e4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4ea:	46c6      	mov	lr, r8
 800e4ec:	0004      	movs	r4, r0
 800e4ee:	b500      	push	{lr}
 800e4f0:	b084      	sub	sp, #16
 800e4f2:	9201      	str	r2, [sp, #4]
 800e4f4:	001e      	movs	r6, r3
 800e4f6:	4688      	mov	r8, r1
		taskENTER_CRITICAL();
 800e4f8:	f001 fa6a 	bl	800f9d0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e4fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e500:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800e502:	2700      	movs	r7, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e504:	4293      	cmp	r3, r2
 800e506:	d330      	bcc.n	800e56a <xQueueGenericSend+0x82>
 800e508:	2e02      	cmp	r6, #2
 800e50a:	d02e      	beq.n	800e56a <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e50c:	9b01      	ldr	r3, [sp, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d052      	beq.n	800e5b8 <xQueueGenericSend+0xd0>
				else if( xEntryTimeSet == pdFALSE )
 800e512:	2d00      	cmp	r5, #0
 800e514:	d03a      	beq.n	800e58c <xQueueGenericSend+0xa4>
		taskEXIT_CRITICAL();
 800e516:	f001 fa67 	bl	800f9e8 <vPortExitCritical>
		vTaskSuspendAll();
 800e51a:	f000 fc0f 	bl	800ed3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e51e:	f001 fa57 	bl	800f9d0 <vPortEnterCritical>
 800e522:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e524:	3301      	adds	r3, #1
 800e526:	d100      	bne.n	800e52a <xQueueGenericSend+0x42>
 800e528:	6467      	str	r7, [r4, #68]	; 0x44
 800e52a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e52c:	3301      	adds	r3, #1
 800e52e:	d100      	bne.n	800e532 <xQueueGenericSend+0x4a>
 800e530:	64a7      	str	r7, [r4, #72]	; 0x48
 800e532:	f001 fa59 	bl	800f9e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e536:	a901      	add	r1, sp, #4
 800e538:	a802      	add	r0, sp, #8
 800e53a:	f000 fe3b 	bl	800f1b4 <xTaskCheckForTimeOut>
 800e53e:	2800      	cmp	r0, #0
 800e540:	d13e      	bne.n	800e5c0 <xQueueGenericSend+0xd8>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e542:	f001 fa45 	bl	800f9d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e546:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e548:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d022      	beq.n	800e594 <xQueueGenericSend+0xac>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e54e:	f001 fa4b 	bl	800f9e8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800e552:	0020      	movs	r0, r4
 800e554:	f7ff ff1c 	bl	800e390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e558:	f000 fc8e 	bl	800ee78 <xTaskResumeAll>
 800e55c:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800e55e:	f001 fa37 	bl	800f9d0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e562:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e564:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e566:	4293      	cmp	r3, r2
 800e568:	d2ce      	bcs.n	800e508 <xQueueGenericSend+0x20>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e56a:	0032      	movs	r2, r6
 800e56c:	4641      	mov	r1, r8
 800e56e:	0020      	movs	r0, r4
 800e570:	f7ff fec0 	bl	800e2f4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e576:	2b00      	cmp	r3, #0
 800e578:	d129      	bne.n	800e5ce <xQueueGenericSend+0xe6>
					else if( xYieldRequired != pdFALSE )
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d12d      	bne.n	800e5da <xQueueGenericSend+0xf2>
				taskEXIT_CRITICAL();
 800e57e:	f001 fa33 	bl	800f9e8 <vPortExitCritical>
				return pdPASS;
 800e582:	2001      	movs	r0, #1
}
 800e584:	b004      	add	sp, #16
 800e586:	bc04      	pop	{r2}
 800e588:	4690      	mov	r8, r2
 800e58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vTaskSetTimeOutState( &xTimeOut );
 800e58c:	a802      	add	r0, sp, #8
 800e58e:	f000 fe05 	bl	800f19c <vTaskSetTimeOutState>
 800e592:	e7c0      	b.n	800e516 <xQueueGenericSend+0x2e>
	taskEXIT_CRITICAL();
 800e594:	f001 fa28 	bl	800f9e8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e598:	0020      	movs	r0, r4
 800e59a:	9901      	ldr	r1, [sp, #4]
 800e59c:	3010      	adds	r0, #16
 800e59e:	f000 fd99 	bl	800f0d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e5a2:	0020      	movs	r0, r4
 800e5a4:	f7ff fef4 	bl	800e390 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e5a8:	f000 fc66 	bl	800ee78 <xTaskResumeAll>
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	d1d5      	bne.n	800e55c <xQueueGenericSend+0x74>
					portYIELD_WITHIN_API();
 800e5b0:	f001 fa02 	bl	800f9b8 <vPortYield>
 800e5b4:	2501      	movs	r5, #1
 800e5b6:	e7d2      	b.n	800e55e <xQueueGenericSend+0x76>
					taskEXIT_CRITICAL();
 800e5b8:	f001 fa16 	bl	800f9e8 <vPortExitCritical>
					return errQUEUE_FULL;
 800e5bc:	2000      	movs	r0, #0
 800e5be:	e7e1      	b.n	800e584 <xQueueGenericSend+0x9c>
			prvUnlockQueue( pxQueue );
 800e5c0:	0020      	movs	r0, r4
 800e5c2:	f7ff fee5 	bl	800e390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5c6:	f000 fc57 	bl	800ee78 <xTaskResumeAll>
			return errQUEUE_FULL;
 800e5ca:	2000      	movs	r0, #0
 800e5cc:	e7da      	b.n	800e584 <xQueueGenericSend+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e5ce:	0020      	movs	r0, r4
 800e5d0:	3024      	adds	r0, #36	; 0x24
 800e5d2:	f000 fdad 	bl	800f130 <xTaskRemoveFromEventList>
 800e5d6:	2801      	cmp	r0, #1
 800e5d8:	d1d1      	bne.n	800e57e <xQueueGenericSend+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 800e5da:	f001 f9ed 	bl	800f9b8 <vPortYield>
 800e5de:	e7ce      	b.n	800e57e <xQueueGenericSend+0x96>

0800e5e0 <xQueueGenericSendFromISR>:
{
 800e5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5e2:	46ce      	mov	lr, r9
 800e5e4:	4647      	mov	r7, r8
 800e5e6:	0004      	movs	r4, r0
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	4691      	mov	r9, r2
 800e5ec:	001d      	movs	r5, r3
 800e5ee:	4688      	mov	r8, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5f0:	f001 fa04 	bl	800f9fc <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e5f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e5f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5f8:	0007      	movs	r7, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d30a      	bcc.n	800e614 <xQueueGenericSendFromISR+0x34>
			xReturn = errQUEUE_FULL;
 800e5fe:	2600      	movs	r6, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e600:	2d02      	cmp	r5, #2
 800e602:	d007      	beq.n	800e614 <xQueueGenericSendFromISR+0x34>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e604:	0038      	movs	r0, r7
 800e606:	f001 f9ff 	bl	800fa08 <vClearInterruptMaskFromISR>
}
 800e60a:	0030      	movs	r0, r6
 800e60c:	bc0c      	pop	{r2, r3}
 800e60e:	4690      	mov	r8, r2
 800e610:	4699      	mov	r9, r3
 800e612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e614:	002a      	movs	r2, r5
 800e616:	4641      	mov	r1, r8
 800e618:	0020      	movs	r0, r4
 800e61a:	f7ff fe6b 	bl	800e2f4 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e61e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e620:	3301      	adds	r3, #1
 800e622:	d004      	beq.n	800e62e <xQueueGenericSendFromISR+0x4e>
				++( pxQueue->xTxLock );
 800e624:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e626:	3301      	adds	r3, #1
 800e628:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e62a:	2601      	movs	r6, #1
 800e62c:	e7ea      	b.n	800e604 <xQueueGenericSendFromISR+0x24>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e62e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e630:	2b00      	cmp	r3, #0
 800e632:	d0fa      	beq.n	800e62a <xQueueGenericSendFromISR+0x4a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e634:	0020      	movs	r0, r4
 800e636:	3024      	adds	r0, #36	; 0x24
 800e638:	f000 fd7a 	bl	800f130 <xTaskRemoveFromEventList>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d0f4      	beq.n	800e62a <xQueueGenericSendFromISR+0x4a>
							if( pxHigherPriorityTaskWoken != NULL )
 800e640:	464b      	mov	r3, r9
 800e642:	2b00      	cmp	r3, #0
 800e644:	d0f1      	beq.n	800e62a <xQueueGenericSendFromISR+0x4a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e646:	2301      	movs	r3, #1
 800e648:	464a      	mov	r2, r9
			xReturn = pdPASS;
 800e64a:	2601      	movs	r6, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e64c:	6013      	str	r3, [r2, #0]
 800e64e:	e7d9      	b.n	800e604 <xQueueGenericSendFromISR+0x24>

0800e650 <xQueueGiveFromISR>:
{
 800e650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e652:	0004      	movs	r4, r0
 800e654:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e656:	f001 f9d1 	bl	800f9fc <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e65a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e65c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e65e:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 800e660:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e662:	4293      	cmp	r3, r2
 800e664:	d209      	bcs.n	800e67a <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800e666:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e668:	3301      	adds	r3, #1
 800e66a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e66c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e66e:	3301      	adds	r3, #1
 800e670:	d008      	beq.n	800e684 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800e672:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e674:	3301      	adds	r3, #1
 800e676:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e678:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e67a:	0030      	movs	r0, r6
 800e67c:	f001 f9c4 	bl	800fa08 <vClearInterruptMaskFromISR>
}
 800e680:	0028      	movs	r0, r5
 800e682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e686:	2b00      	cmp	r3, #0
 800e688:	d0f6      	beq.n	800e678 <xQueueGiveFromISR+0x28>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e68a:	0020      	movs	r0, r4
 800e68c:	3024      	adds	r0, #36	; 0x24
 800e68e:	f000 fd4f 	bl	800f130 <xTaskRemoveFromEventList>
 800e692:	2800      	cmp	r0, #0
 800e694:	d0f0      	beq.n	800e678 <xQueueGiveFromISR+0x28>
							if( pxHigherPriorityTaskWoken != NULL )
 800e696:	2f00      	cmp	r7, #0
 800e698:	d0ee      	beq.n	800e678 <xQueueGiveFromISR+0x28>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e69a:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800e69c:	2501      	movs	r5, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e69e:	603b      	str	r3, [r7, #0]
 800e6a0:	e7eb      	b.n	800e67a <xQueueGiveFromISR+0x2a>
 800e6a2:	46c0      	nop			; (mov r8, r8)

0800e6a4 <xQueueGenericReceive>:
{
 800e6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6a6:	46c6      	mov	lr, r8
 800e6a8:	0004      	movs	r4, r0
 800e6aa:	b500      	push	{lr}
 800e6ac:	b084      	sub	sp, #16
 800e6ae:	4698      	mov	r8, r3
 800e6b0:	000f      	movs	r7, r1
 800e6b2:	9201      	str	r2, [sp, #4]
		taskENTER_CRITICAL();
 800e6b4:	f001 f98c 	bl	800f9d0 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d148      	bne.n	800e750 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6be:	9b01      	ldr	r3, [sp, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d06a      	beq.n	800e79a <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6c4:	0026      	movs	r6, r4
					vTaskSetTimeOutState( &xTimeOut );
 800e6c6:	a802      	add	r0, sp, #8
 800e6c8:	f000 fd68 	bl	800f19c <vTaskSetTimeOutState>
		prvLockQueue( pxQueue );
 800e6cc:	2500      	movs	r5, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6ce:	3624      	adds	r6, #36	; 0x24
 800e6d0:	e017      	b.n	800e702 <xQueueGenericReceive+0x5e>
	taskEXIT_CRITICAL();
 800e6d2:	f001 f989 	bl	800f9e8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d056      	beq.n	800e78a <xQueueGenericReceive+0xe6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6dc:	9901      	ldr	r1, [sp, #4]
 800e6de:	0030      	movs	r0, r6
 800e6e0:	f000 fcf8 	bl	800f0d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e6e4:	0020      	movs	r0, r4
 800e6e6:	f7ff fe53 	bl	800e390 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e6ea:	f000 fbc5 	bl	800ee78 <xTaskResumeAll>
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	d048      	beq.n	800e784 <xQueueGenericReceive+0xe0>
		taskENTER_CRITICAL();
 800e6f2:	f001 f96d 	bl	800f9d0 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d129      	bne.n	800e750 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6fc:	9b01      	ldr	r3, [sp, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d04b      	beq.n	800e79a <xQueueGenericReceive+0xf6>
		taskEXIT_CRITICAL();
 800e702:	f001 f971 	bl	800f9e8 <vPortExitCritical>
		vTaskSuspendAll();
 800e706:	f000 fb19 	bl	800ed3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e70a:	f001 f961 	bl	800f9d0 <vPortEnterCritical>
 800e70e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e710:	3301      	adds	r3, #1
 800e712:	d100      	bne.n	800e716 <xQueueGenericReceive+0x72>
 800e714:	6465      	str	r5, [r4, #68]	; 0x44
 800e716:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e718:	3301      	adds	r3, #1
 800e71a:	d100      	bne.n	800e71e <xQueueGenericReceive+0x7a>
 800e71c:	64a5      	str	r5, [r4, #72]	; 0x48
 800e71e:	f001 f963 	bl	800f9e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e722:	a901      	add	r1, sp, #4
 800e724:	a802      	add	r0, sp, #8
 800e726:	f000 fd45 	bl	800f1b4 <xTaskCheckForTimeOut>
 800e72a:	2800      	cmp	r0, #0
 800e72c:	d13c      	bne.n	800e7a8 <xQueueGenericReceive+0x104>
	taskENTER_CRITICAL();
 800e72e:	f001 f94f 	bl	800f9d0 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e732:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e734:	2b00      	cmp	r3, #0
 800e736:	d0cc      	beq.n	800e6d2 <xQueueGenericReceive+0x2e>
	taskEXIT_CRITICAL();
 800e738:	f001 f956 	bl	800f9e8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800e73c:	0020      	movs	r0, r4
 800e73e:	f7ff fe27 	bl	800e390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e742:	f000 fb99 	bl	800ee78 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e746:	f001 f943 	bl	800f9d0 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e74a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d0d5      	beq.n	800e6fc <xQueueGenericReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e750:	0039      	movs	r1, r7
 800e752:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e754:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e756:	f7ff fe09 	bl	800e36c <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e75a:	4643      	mov	r3, r8
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d12a      	bne.n	800e7b6 <xQueueGenericReceive+0x112>
					--( pxQueue->uxMessagesWaiting );
 800e760:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e762:	3b01      	subs	r3, #1
 800e764:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d033      	beq.n	800e7d4 <xQueueGenericReceive+0x130>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e76c:	6923      	ldr	r3, [r4, #16]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d025      	beq.n	800e7be <xQueueGenericReceive+0x11a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e772:	0020      	movs	r0, r4
 800e774:	3010      	adds	r0, #16
 800e776:	f000 fcdb 	bl	800f130 <xTaskRemoveFromEventList>
 800e77a:	2801      	cmp	r0, #1
 800e77c:	d11f      	bne.n	800e7be <xQueueGenericReceive+0x11a>
							queueYIELD_IF_USING_PREEMPTION();
 800e77e:	f001 f91b 	bl	800f9b8 <vPortYield>
 800e782:	e01c      	b.n	800e7be <xQueueGenericReceive+0x11a>
					portYIELD_WITHIN_API();
 800e784:	f001 f918 	bl	800f9b8 <vPortYield>
 800e788:	e7b3      	b.n	800e6f2 <xQueueGenericReceive+0x4e>
						taskENTER_CRITICAL();
 800e78a:	f001 f921 	bl	800f9d0 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e78e:	6860      	ldr	r0, [r4, #4]
 800e790:	f000 fd4e 	bl	800f230 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e794:	f001 f928 	bl	800f9e8 <vPortExitCritical>
 800e798:	e7a0      	b.n	800e6dc <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
 800e79a:	f001 f925 	bl	800f9e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e79e:	2000      	movs	r0, #0
}
 800e7a0:	b004      	add	sp, #16
 800e7a2:	bc04      	pop	{r2}
 800e7a4:	4690      	mov	r8, r2
 800e7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 800e7a8:	0020      	movs	r0, r4
 800e7aa:	f7ff fdf1 	bl	800e390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7ae:	f000 fb63 	bl	800ee78 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e7b2:	2000      	movs	r0, #0
 800e7b4:	e7f4      	b.n	800e7a0 <xQueueGenericReceive+0xfc>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e7b8:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d103      	bne.n	800e7c6 <xQueueGenericReceive+0x122>
				taskEXIT_CRITICAL();
 800e7be:	f001 f913 	bl	800f9e8 <vPortExitCritical>
				return pdPASS;
 800e7c2:	2001      	movs	r0, #1
 800e7c4:	e7ec      	b.n	800e7a0 <xQueueGenericReceive+0xfc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7c6:	0020      	movs	r0, r4
 800e7c8:	3024      	adds	r0, #36	; 0x24
 800e7ca:	f000 fcb1 	bl	800f130 <xTaskRemoveFromEventList>
 800e7ce:	2800      	cmp	r0, #0
 800e7d0:	d0f5      	beq.n	800e7be <xQueueGenericReceive+0x11a>
 800e7d2:	e7d4      	b.n	800e77e <xQueueGenericReceive+0xda>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e7d4:	f000 fe40 	bl	800f458 <pvTaskIncrementMutexHeldCount>
 800e7d8:	6060      	str	r0, [r4, #4]
 800e7da:	e7c7      	b.n	800e76c <xQueueGenericReceive+0xc8>

0800e7dc <xQueueReceiveFromISR>:
{
 800e7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7de:	46c6      	mov	lr, r8
 800e7e0:	0004      	movs	r4, r0
 800e7e2:	b500      	push	{lr}
 800e7e4:	000f      	movs	r7, r1
 800e7e6:	4690      	mov	r8, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7e8:	f001 f908 	bl	800f9fc <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7ee:	0006      	movs	r6, r0
			xReturn = pdFAIL;
 800e7f0:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d106      	bne.n	800e804 <xQueueReceiveFromISR+0x28>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e7f6:	0030      	movs	r0, r6
 800e7f8:	f001 f906 	bl	800fa08 <vClearInterruptMaskFromISR>
}
 800e7fc:	0028      	movs	r0, r5
 800e7fe:	bc04      	pop	{r2}
 800e800:	4690      	mov	r8, r2
 800e802:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e804:	0039      	movs	r1, r7
 800e806:	0020      	movs	r0, r4
 800e808:	f7ff fdb0 	bl	800e36c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e80c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e80e:	3b01      	subs	r3, #1
 800e810:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e812:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e814:	3301      	adds	r3, #1
 800e816:	d004      	beq.n	800e822 <xQueueReceiveFromISR+0x46>
				++( pxQueue->xRxLock );
 800e818:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e81a:	3301      	adds	r3, #1
 800e81c:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800e81e:	2501      	movs	r5, #1
 800e820:	e7e9      	b.n	800e7f6 <xQueueReceiveFromISR+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e822:	6923      	ldr	r3, [r4, #16]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d0fa      	beq.n	800e81e <xQueueReceiveFromISR+0x42>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e828:	0020      	movs	r0, r4
 800e82a:	3010      	adds	r0, #16
 800e82c:	f000 fc80 	bl	800f130 <xTaskRemoveFromEventList>
 800e830:	2800      	cmp	r0, #0
 800e832:	d0f4      	beq.n	800e81e <xQueueReceiveFromISR+0x42>
						if( pxHigherPriorityTaskWoken != NULL )
 800e834:	4643      	mov	r3, r8
 800e836:	2b00      	cmp	r3, #0
 800e838:	d0f1      	beq.n	800e81e <xQueueReceiveFromISR+0x42>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e83a:	2301      	movs	r3, #1
 800e83c:	4642      	mov	r2, r8
			xReturn = pdPASS;
 800e83e:	2501      	movs	r5, #1
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e840:	6013      	str	r3, [r2, #0]
 800e842:	e7d8      	b.n	800e7f6 <xQueueReceiveFromISR+0x1a>

0800e844 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e844:	2300      	movs	r3, #0
	{
 800e846:	b570      	push	{r4, r5, r6, lr}
 800e848:	4d06      	ldr	r5, [pc, #24]	; (800e864 <vQueueAddToRegistry+0x20>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e84a:	00dc      	lsls	r4, r3, #3
 800e84c:	192a      	adds	r2, r5, r4
 800e84e:	6816      	ldr	r6, [r2, #0]
 800e850:	2e00      	cmp	r6, #0
 800e852:	d003      	beq.n	800e85c <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e854:	3301      	adds	r3, #1
 800e856:	2b08      	cmp	r3, #8
 800e858:	d1f7      	bne.n	800e84a <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e85a:	bd70      	pop	{r4, r5, r6, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e85c:	5129      	str	r1, [r5, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e85e:	6050      	str	r0, [r2, #4]
				break;
 800e860:	e7fb      	b.n	800e85a <vQueueAddToRegistry+0x16>
 800e862:	46c0      	nop			; (mov r8, r8)
 800e864:	20006d70 	.word	0x20006d70

0800e868 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e868:	b570      	push	{r4, r5, r6, lr}
 800e86a:	0004      	movs	r4, r0
 800e86c:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e86e:	f001 f8af 	bl	800f9d0 <vPortEnterCritical>
 800e872:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e874:	3301      	adds	r3, #1
 800e876:	d101      	bne.n	800e87c <vQueueWaitForMessageRestricted+0x14>
 800e878:	2300      	movs	r3, #0
 800e87a:	6463      	str	r3, [r4, #68]	; 0x44
 800e87c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e87e:	3301      	adds	r3, #1
 800e880:	d101      	bne.n	800e886 <vQueueWaitForMessageRestricted+0x1e>
 800e882:	2300      	movs	r3, #0
 800e884:	64a3      	str	r3, [r4, #72]	; 0x48
 800e886:	f001 f8af 	bl	800f9e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e88a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d104      	bne.n	800e89a <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e890:	0020      	movs	r0, r4
 800e892:	0029      	movs	r1, r5
 800e894:	3024      	adds	r0, #36	; 0x24
 800e896:	f000 fc39 	bl	800f10c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e89a:	0020      	movs	r0, r4
 800e89c:	f7ff fd78 	bl	800e390 <prvUnlockQueue>
	}
 800e8a0:	bd70      	pop	{r4, r5, r6, pc}
 800e8a2:	46c0      	nop			; (mov r8, r8)

0800e8a4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e8a4:	b510      	push	{r4, lr}
 800e8a6:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e8a8:	f005 fabc 	bl	8013e24 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e8ac:	0020      	movs	r0, r4
 800e8ae:	f7f1 fc33 	bl	8000118 <strlen>
 800e8b2:	0003      	movs	r3, r0
 800e8b4:	280b      	cmp	r0, #11
 800e8b6:	d808      	bhi.n	800e8ca <prvWriteNameToBuffer+0x26>
 800e8b8:	0022      	movs	r2, r4
		{
			pcBuffer[ x ] = ' ';
 800e8ba:	2320      	movs	r3, #32
 800e8bc:	1820      	adds	r0, r4, r0
 800e8be:	320c      	adds	r2, #12
 800e8c0:	7003      	strb	r3, [r0, #0]
 800e8c2:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e8c4:	4290      	cmp	r0, r2
 800e8c6:	d1fb      	bne.n	800e8c0 <prvWriteNameToBuffer+0x1c>
 800e8c8:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e8ca:	18e0      	adds	r0, r4, r3
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e8d0:	bd10      	pop	{r4, pc}
 800e8d2:	46c0      	nop			; (mov r8, r8)

0800e8d4 <prvListTaskWithinSingleList.part.1>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8d6:	46d6      	mov	lr, sl
 800e8d8:	464f      	mov	r7, r9
 800e8da:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e8dc:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e8de:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e8e0:	685f      	ldr	r7, [r3, #4]
 800e8e2:	2308      	movs	r3, #8
 800e8e4:	469c      	mov	ip, r3
 800e8e6:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e8e8:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e8ea:	604f      	str	r7, [r1, #4]
 800e8ec:	4567      	cmp	r7, ip
 800e8ee:	d042      	beq.n	800e976 <prvListTaskWithinSingleList.part.1+0xa2>
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	0005      	movs	r5, r0
 800e8f4:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e8f6:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800e8f8:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e8fa:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e8fc:	687f      	ldr	r7, [r7, #4]
 800e8fe:	604f      	str	r7, [r1, #4]
 800e900:	45bc      	cmp	ip, r7
 800e902:	d035      	beq.n	800e970 <prvListTaskWithinSingleList.part.1+0x9c>
 800e904:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e906:	0033      	movs	r3, r6
 800e908:	3334      	adds	r3, #52	; 0x34
 800e90a:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e90c:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e90e:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e910:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e912:	4653      	mov	r3, sl
 800e914:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e916:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e918:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800e91a:	4653      	mov	r3, sl
 800e91c:	2b03      	cmp	r3, #3
 800e91e:	d018      	beq.n	800e952 <prvListTaskWithinSingleList.part.1+0x7e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e920:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e922:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e924:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e926:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e928:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e92a:	7813      	ldrb	r3, [r2, #0]
 800e92c:	2ba5      	cmp	r3, #165	; 0xa5
 800e92e:	d11d      	bne.n	800e96c <prvListTaskWithinSingleList.part.1+0x98>
	uint32_t ulCount = 0U;
 800e930:	2300      	movs	r3, #0
			ulCount++;
 800e932:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e934:	5cd4      	ldrb	r4, [r2, r3]
 800e936:	2ca5      	cmp	r4, #165	; 0xa5
 800e938:	d0fb      	beq.n	800e932 <prvListTaskWithinSingleList.part.1+0x5e>
 800e93a:	089b      	lsrs	r3, r3, #2
 800e93c:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e93e:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800e940:	3001      	adds	r0, #1
 800e942:	3520      	adds	r5, #32
			} while( pxNextTCB != pxFirstTCB );
 800e944:	45b0      	cmp	r8, r6
 800e946:	d1d9      	bne.n	800e8fc <prvListTaskWithinSingleList.part.1+0x28>
	}
 800e948:	bc1c      	pop	{r2, r3, r4}
 800e94a:	4690      	mov	r8, r2
 800e94c:	4699      	mov	r9, r3
 800e94e:	46a2      	mov	sl, r4
 800e950:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e952:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800e954:	2b00      	cmp	r3, #0
 800e956:	d0e3      	beq.n	800e920 <prvListTaskWithinSingleList.part.1+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e958:	464b      	mov	r3, r9
 800e95a:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e95c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e95e:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e960:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e962:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e964:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e966:	7813      	ldrb	r3, [r2, #0]
 800e968:	2ba5      	cmp	r3, #165	; 0xa5
 800e96a:	d0e1      	beq.n	800e930 <prvListTaskWithinSingleList.part.1+0x5c>
 800e96c:	2300      	movs	r3, #0
 800e96e:	e7e6      	b.n	800e93e <prvListTaskWithinSingleList.part.1+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e970:	68cf      	ldr	r7, [r1, #12]
 800e972:	604f      	str	r7, [r1, #4]
 800e974:	e7c6      	b.n	800e904 <prvListTaskWithinSingleList.part.1+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e976:	68cf      	ldr	r7, [r1, #12]
 800e978:	e7ba      	b.n	800e8f0 <prvListTaskWithinSingleList.part.1+0x1c>
 800e97a:	46c0      	nop			; (mov r8, r8)

0800e97c <prvResetNextTaskUnblockTime.part.2>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e97c:	4b03      	ldr	r3, [pc, #12]	; (800e98c <prvResetNextTaskUnblockTime.part.2+0x10>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e982:	68db      	ldr	r3, [r3, #12]
 800e984:	685a      	ldr	r2, [r3, #4]
 800e986:	4b02      	ldr	r3, [pc, #8]	; (800e990 <prvResetNextTaskUnblockTime.part.2+0x14>)
 800e988:	601a      	str	r2, [r3, #0]
}
 800e98a:	4770      	bx	lr
 800e98c:	200026fc 	.word	0x200026fc
 800e990:	200000d4 	.word	0x200000d4

0800e994 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e994:	4b0c      	ldr	r3, [pc, #48]	; (800e9c8 <prvAddCurrentTaskToDelayedList+0x34>)
{
 800e996:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e998:	685a      	ldr	r2, [r3, #4]
{
 800e99a:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e99c:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800e99e:	689a      	ldr	r2, [r3, #8]
 800e9a0:	4282      	cmp	r2, r0
 800e9a2:	d80a      	bhi.n	800e9ba <prvAddCurrentTaskToDelayedList+0x26>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e9a4:	6818      	ldr	r0, [r3, #0]
 800e9a6:	6859      	ldr	r1, [r3, #4]
 800e9a8:	3104      	adds	r1, #4
 800e9aa:	f7ff fc7b 	bl	800e2a4 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e9ae:	4b07      	ldr	r3, [pc, #28]	; (800e9cc <prvAddCurrentTaskToDelayedList+0x38>)
 800e9b0:	681a      	ldr	r2, [r3, #0]
 800e9b2:	42a2      	cmp	r2, r4
 800e9b4:	d900      	bls.n	800e9b8 <prvAddCurrentTaskToDelayedList+0x24>
			xNextTaskUnblockTime = xTimeToWake;
 800e9b6:	601c      	str	r4, [r3, #0]
}
 800e9b8:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e9ba:	68d8      	ldr	r0, [r3, #12]
 800e9bc:	6859      	ldr	r1, [r3, #4]
 800e9be:	3104      	adds	r1, #4
 800e9c0:	f7ff fc70 	bl	800e2a4 <vListInsert>
 800e9c4:	e7f8      	b.n	800e9b8 <prvAddCurrentTaskToDelayedList+0x24>
 800e9c6:	46c0      	nop			; (mov r8, r8)
 800e9c8:	200026fc 	.word	0x200026fc
 800e9cc:	200000d4 	.word	0x200000d4

0800e9d0 <vTaskSwitchContext.part.5>:
		xYieldPending = pdFALSE;
 800e9d0:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800e9d2:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 800e9d4:	4c26      	ldr	r4, [pc, #152]	; (800ea70 <vTaskSwitchContext.part.5+0xa0>)
 800e9d6:	6123      	str	r3, [r4, #16]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e9d8:	f7f9 f936 	bl	8007c48 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e9dc:	6963      	ldr	r3, [r4, #20]
 800e9de:	4298      	cmp	r0, r3
 800e9e0:	d904      	bls.n	800e9ec <vTaskSwitchContext.part.5+0x1c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e9e2:	6862      	ldr	r2, [r4, #4]
 800e9e4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e9e6:	1acb      	subs	r3, r1, r3
 800e9e8:	181b      	adds	r3, r3, r0
 800e9ea:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e9ec:	6862      	ldr	r2, [r4, #4]
 800e9ee:	6863      	ldr	r3, [r4, #4]
 800e9f0:	6812      	ldr	r2, [r2, #0]
 800e9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e9f4:	6160      	str	r0, [r4, #20]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d923      	bls.n	800ea42 <vTaskSwitchContext.part.5+0x72>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e9fa:	6863      	ldr	r3, [r4, #4]
 800e9fc:	2214      	movs	r2, #20
 800e9fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ea00:	491c      	ldr	r1, [pc, #112]	; (800ea74 <vTaskSwitchContext.part.5+0xa4>)
 800ea02:	f004 ffc1 	bl	8013988 <memcmp>
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d128      	bne.n	800ea5c <vTaskSwitchContext.part.5+0x8c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ea0a:	69a2      	ldr	r2, [r4, #24]
 800ea0c:	491a      	ldr	r1, [pc, #104]	; (800ea78 <vTaskSwitchContext.part.5+0xa8>)
 800ea0e:	e003      	b.n	800ea18 <vTaskSwitchContext.part.5+0x48>
 800ea10:	69a3      	ldr	r3, [r4, #24]
 800ea12:	3b01      	subs	r3, #1
 800ea14:	61a3      	str	r3, [r4, #24]
 800ea16:	69a2      	ldr	r2, [r4, #24]
 800ea18:	0093      	lsls	r3, r2, #2
 800ea1a:	189b      	adds	r3, r3, r2
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	58cb      	ldr	r3, [r1, r3]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d0f5      	beq.n	800ea10 <vTaskSwitchContext.part.5+0x40>
 800ea24:	69a2      	ldr	r2, [r4, #24]
 800ea26:	0093      	lsls	r3, r2, #2
 800ea28:	189b      	adds	r3, r3, r2
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	18c8      	adds	r0, r1, r3
 800ea2e:	6842      	ldr	r2, [r0, #4]
 800ea30:	3308      	adds	r3, #8
 800ea32:	6852      	ldr	r2, [r2, #4]
 800ea34:	18c9      	adds	r1, r1, r3
 800ea36:	6042      	str	r2, [r0, #4]
 800ea38:	428a      	cmp	r2, r1
 800ea3a:	d015      	beq.n	800ea68 <vTaskSwitchContext.part.5+0x98>
 800ea3c:	68d3      	ldr	r3, [r2, #12]
 800ea3e:	6063      	str	r3, [r4, #4]
}
 800ea40:	bd10      	pop	{r4, pc}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800ea42:	6860      	ldr	r0, [r4, #4]
 800ea44:	6861      	ldr	r1, [r4, #4]
 800ea46:	3134      	adds	r1, #52	; 0x34
 800ea48:	f7fe fd26 	bl	800d498 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800ea4c:	6863      	ldr	r3, [r4, #4]
 800ea4e:	2214      	movs	r2, #20
 800ea50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ea52:	4908      	ldr	r1, [pc, #32]	; (800ea74 <vTaskSwitchContext.part.5+0xa4>)
 800ea54:	f004 ff98 	bl	8013988 <memcmp>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	d0d6      	beq.n	800ea0a <vTaskSwitchContext.part.5+0x3a>
 800ea5c:	6860      	ldr	r0, [r4, #4]
 800ea5e:	6861      	ldr	r1, [r4, #4]
 800ea60:	3134      	adds	r1, #52	; 0x34
 800ea62:	f7fe fd19 	bl	800d498 <vApplicationStackOverflowHook>
 800ea66:	e7d0      	b.n	800ea0a <vTaskSwitchContext.part.5+0x3a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ea68:	6852      	ldr	r2, [r2, #4]
 800ea6a:	6042      	str	r2, [r0, #4]
 800ea6c:	e7e6      	b.n	800ea3c <vTaskSwitchContext.part.5+0x6c>
 800ea6e:	46c0      	nop			; (mov r8, r8)
 800ea70:	200026fc 	.word	0x200026fc
 800ea74:	0801884c 	.word	0x0801884c
 800ea78:	20002798 	.word	0x20002798

0800ea7c <xTaskGenericCreate>:
{
 800ea7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea7e:	464f      	mov	r7, r9
 800ea80:	4646      	mov	r6, r8
 800ea82:	46d6      	mov	lr, sl
 800ea84:	b5c0      	push	{r6, r7, lr}
 800ea86:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ea88:	4680      	mov	r8, r0
 800ea8a:	000c      	movs	r4, r1
 800ea8c:	0015      	movs	r5, r2
 800ea8e:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea90:	2f00      	cmp	r7, #0
 800ea92:	d100      	bne.n	800ea96 <xTaskGenericCreate+0x1a>
 800ea94:	e0ae      	b.n	800ebf4 <xTaskGenericCreate+0x178>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800ea96:	2060      	movs	r0, #96	; 0x60
 800ea98:	f001 f814 	bl	800fac4 <pvPortMalloc>
 800ea9c:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800ea9e:	d100      	bne.n	800eaa2 <xTaskGenericCreate+0x26>
 800eaa0:	e0b1      	b.n	800ec06 <xTaskGenericCreate+0x18a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800eaa2:	00ad      	lsls	r5, r5, #2
				pxNewTCB->pxStack = pxStack;
 800eaa4:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800eaa6:	002a      	movs	r2, r5
 800eaa8:	0038      	movs	r0, r7
 800eaaa:	21a5      	movs	r1, #165	; 0xa5
 800eaac:	f004 ff84 	bl	80139b8 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800eab0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800eab2:	1f2f      	subs	r7, r5, #4
 800eab4:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800eab6:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800eab8:	4467      	add	r7, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800eaba:	439f      	bics	r7, r3
 800eabc:	0030      	movs	r0, r6
 800eabe:	0033      	movs	r3, r6
 800eac0:	3041      	adds	r0, #65	; 0x41
 800eac2:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800eac4:	7822      	ldrb	r2, [r4, #0]
 800eac6:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800eac8:	7822      	ldrb	r2, [r4, #0]
 800eaca:	2a00      	cmp	r2, #0
 800eacc:	d003      	beq.n	800ead6 <xTaskGenericCreate+0x5a>
 800eace:	3301      	adds	r3, #1
 800ead0:	3401      	adds	r4, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ead2:	4298      	cmp	r0, r3
 800ead4:	d1f6      	bne.n	800eac4 <xTaskGenericCreate+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ead6:	2340      	movs	r3, #64	; 0x40
 800ead8:	2200      	movs	r2, #0
 800eada:	9d08      	ldr	r5, [sp, #32]
 800eadc:	54f2      	strb	r2, [r6, r3]
 800eade:	2d06      	cmp	r5, #6
 800eae0:	d84f      	bhi.n	800eb82 <xTaskGenericCreate+0x106>
		pxTCB->uxMutexesHeld = 0;
 800eae2:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800eae4:	1d33      	adds	r3, r6, #4
 800eae6:	0018      	movs	r0, r3
	pxTCB->uxPriority = uxPriority;
 800eae8:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800eaea:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800eaec:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800eaee:	469a      	mov	sl, r3
 800eaf0:	f7ff fbc8 	bl	800e284 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800eaf4:	0030      	movs	r0, r6
 800eaf6:	3018      	adds	r0, #24
 800eaf8:	f7ff fbc4 	bl	800e284 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eafc:	2307      	movs	r3, #7
 800eafe:	1b5b      	subs	r3, r3, r5
 800eb00:	61b3      	str	r3, [r6, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800eb02:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800eb04:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800eb06:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800eb08:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800eb0a:	65b4      	str	r4, [r6, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eb0c:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800eb0e:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eb10:	4641      	mov	r1, r8
 800eb12:	0038      	movs	r0, r7
 800eb14:	f000 ff14 	bl	800f940 <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800eb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eb1a:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d000      	beq.n	800eb22 <xTaskGenericCreate+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eb20:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800eb22:	f000 ff55 	bl	800f9d0 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800eb26:	4c3b      	ldr	r4, [pc, #236]	; (800ec14 <xTaskGenericCreate+0x198>)
 800eb28:	69e3      	ldr	r3, [r4, #28]
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	61e3      	str	r3, [r4, #28]
			if( pxCurrentTCB == NULL )
 800eb2e:	6863      	ldr	r3, [r4, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d02f      	beq.n	800eb94 <xTaskGenericCreate+0x118>
				if( xSchedulerRunning == pdFALSE )
 800eb34:	4d38      	ldr	r5, [pc, #224]	; (800ec18 <xTaskGenericCreate+0x19c>)
 800eb36:	686b      	ldr	r3, [r5, #4]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d024      	beq.n	800eb86 <xTaskGenericCreate+0x10a>
 800eb3c:	4f37      	ldr	r7, [pc, #220]	; (800ec1c <xTaskGenericCreate+0x1a0>)
			uxTaskNumber++;
 800eb3e:	68ab      	ldr	r3, [r5, #8]
			prvAddTaskToReadyList( pxNewTCB );
 800eb40:	69a2      	ldr	r2, [r4, #24]
			uxTaskNumber++;
 800eb42:	3301      	adds	r3, #1
 800eb44:	60ab      	str	r3, [r5, #8]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eb46:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800eb48:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d817      	bhi.n	800eb7e <xTaskGenericCreate+0x102>
 800eb4e:	0098      	lsls	r0, r3, #2
 800eb50:	18c0      	adds	r0, r0, r3
 800eb52:	0080      	lsls	r0, r0, #2
 800eb54:	1838      	adds	r0, r7, r0
 800eb56:	4651      	mov	r1, sl
 800eb58:	f7ff fb98 	bl	800e28c <vListInsertEnd>
		taskEXIT_CRITICAL();
 800eb5c:	f000 ff44 	bl	800f9e8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800eb60:	686b      	ldr	r3, [r5, #4]
			xReturn = pdPASS;
 800eb62:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d004      	beq.n	800eb72 <xTaskGenericCreate+0xf6>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800eb68:	6863      	ldr	r3, [r4, #4]
 800eb6a:	9a08      	ldr	r2, [sp, #32]
 800eb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d317      	bcc.n	800eba2 <xTaskGenericCreate+0x126>
}
 800eb72:	0028      	movs	r0, r5
 800eb74:	bc1c      	pop	{r2, r3, r4}
 800eb76:	4690      	mov	r8, r2
 800eb78:	4699      	mov	r9, r3
 800eb7a:	46a2      	mov	sl, r4
 800eb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvAddTaskToReadyList( pxNewTCB );
 800eb7e:	61a3      	str	r3, [r4, #24]
 800eb80:	e7e5      	b.n	800eb4e <xTaskGenericCreate+0xd2>
 800eb82:	2506      	movs	r5, #6
 800eb84:	e7ad      	b.n	800eae2 <xTaskGenericCreate+0x66>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800eb86:	6863      	ldr	r3, [r4, #4]
 800eb88:	9a08      	ldr	r2, [sp, #32]
 800eb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d8d5      	bhi.n	800eb3c <xTaskGenericCreate+0xc0>
						pxCurrentTCB = pxNewTCB;
 800eb90:	6066      	str	r6, [r4, #4]
 800eb92:	e7d3      	b.n	800eb3c <xTaskGenericCreate+0xc0>
				pxCurrentTCB =  pxNewTCB;
 800eb94:	6066      	str	r6, [r4, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eb96:	69e3      	ldr	r3, [r4, #28]
 800eb98:	4f20      	ldr	r7, [pc, #128]	; (800ec1c <xTaskGenericCreate+0x1a0>)
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d004      	beq.n	800eba8 <xTaskGenericCreate+0x12c>
 800eb9e:	4d1e      	ldr	r5, [pc, #120]	; (800ec18 <xTaskGenericCreate+0x19c>)
 800eba0:	e7cd      	b.n	800eb3e <xTaskGenericCreate+0xc2>
				taskYIELD_IF_USING_PREEMPTION();
 800eba2:	f000 ff09 	bl	800f9b8 <vPortYield>
 800eba6:	e7e4      	b.n	800eb72 <xTaskGenericCreate+0xf6>
 800eba8:	238c      	movs	r3, #140	; 0x8c
 800ebaa:	4698      	mov	r8, r3
 800ebac:	003d      	movs	r5, r7
 800ebae:	44b8      	add	r8, r7
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ebb0:	0028      	movs	r0, r5
 800ebb2:	3514      	adds	r5, #20
 800ebb4:	f7ff fb5a 	bl	800e26c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ebb8:	4545      	cmp	r5, r8
 800ebba:	d1f9      	bne.n	800ebb0 <xTaskGenericCreate+0x134>
	vListInitialise( &xDelayedTaskList1 );
 800ebbc:	2320      	movs	r3, #32
 800ebbe:	4698      	mov	r8, r3
	vListInitialise( &xDelayedTaskList2 );
 800ebc0:	0025      	movs	r5, r4
	vListInitialise( &xDelayedTaskList1 );
 800ebc2:	44a0      	add	r8, r4
	vListInitialise( &xDelayedTaskList2 );
 800ebc4:	3534      	adds	r5, #52	; 0x34
	vListInitialise( &xDelayedTaskList1 );
 800ebc6:	4640      	mov	r0, r8
 800ebc8:	f7ff fb50 	bl	800e26c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ebcc:	0028      	movs	r0, r5
 800ebce:	f7ff fb4d 	bl	800e26c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ebd2:	0020      	movs	r0, r4
 800ebd4:	3048      	adds	r0, #72	; 0x48
 800ebd6:	f7ff fb49 	bl	800e26c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ebda:	0020      	movs	r0, r4
 800ebdc:	305c      	adds	r0, #92	; 0x5c
 800ebde:	f7ff fb45 	bl	800e26c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ebe2:	0020      	movs	r0, r4
 800ebe4:	3070      	adds	r0, #112	; 0x70
 800ebe6:	f7ff fb41 	bl	800e26c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800ebea:	4643      	mov	r3, r8
 800ebec:	6023      	str	r3, [r4, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ebee:	60e5      	str	r5, [r4, #12]
 800ebf0:	4d09      	ldr	r5, [pc, #36]	; (800ec18 <xTaskGenericCreate+0x19c>)
 800ebf2:	e7a4      	b.n	800eb3e <xTaskGenericCreate+0xc2>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebf4:	0090      	lsls	r0, r2, #2
 800ebf6:	f000 ff65 	bl	800fac4 <pvPortMalloc>
 800ebfa:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800ebfc:	d000      	beq.n	800ec00 <xTaskGenericCreate+0x184>
 800ebfe:	e74a      	b.n	800ea96 <xTaskGenericCreate+0x1a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ec00:	2501      	movs	r5, #1
 800ec02:	426d      	negs	r5, r5
 800ec04:	e7b5      	b.n	800eb72 <xTaskGenericCreate+0xf6>
 800ec06:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800ec08:	0038      	movs	r0, r7
 800ec0a:	f000 ffd1 	bl	800fbb0 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ec0e:	426d      	negs	r5, r5
 800ec10:	e7af      	b.n	800eb72 <xTaskGenericCreate+0xf6>
 800ec12:	46c0      	nop			; (mov r8, r8)
 800ec14:	200026fc 	.word	0x200026fc
 800ec18:	2000277c 	.word	0x2000277c
 800ec1c:	20002798 	.word	0x20002798

0800ec20 <uxTaskPriorityGet>:
	{
 800ec20:	b510      	push	{r4, lr}
 800ec22:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800ec24:	f000 fed4 	bl	800f9d0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ec28:	2c00      	cmp	r4, #0
 800ec2a:	d101      	bne.n	800ec30 <uxTaskPriorityGet+0x10>
 800ec2c:	4b03      	ldr	r3, [pc, #12]	; (800ec3c <uxTaskPriorityGet+0x1c>)
 800ec2e:	685c      	ldr	r4, [r3, #4]
			uxReturn = pxTCB->uxPriority;
 800ec30:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800ec32:	f000 fed9 	bl	800f9e8 <vPortExitCritical>
	}
 800ec36:	0020      	movs	r0, r4
 800ec38:	bd10      	pop	{r4, pc}
 800ec3a:	46c0      	nop			; (mov r8, r8)
 800ec3c:	200026fc 	.word	0x200026fc

0800ec40 <vTaskPrioritySet>:
	{
 800ec40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec42:	46c6      	mov	lr, r8
 800ec44:	0004      	movs	r4, r0
 800ec46:	b500      	push	{lr}
 800ec48:	000d      	movs	r5, r1
 800ec4a:	2906      	cmp	r1, #6
 800ec4c:	d900      	bls.n	800ec50 <vTaskPrioritySet+0x10>
 800ec4e:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800ec50:	f000 febe 	bl	800f9d0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ec54:	2c00      	cmp	r4, #0
 800ec56:	d02b      	beq.n	800ecb0 <vTaskPrioritySet+0x70>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800ec58:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800ec5a:	42aa      	cmp	r2, r5
 800ec5c:	d01a      	beq.n	800ec94 <vTaskPrioritySet+0x54>
					if( pxTCB != pxCurrentTCB )
 800ec5e:	4f21      	ldr	r7, [pc, #132]	; (800ece4 <vTaskPrioritySet+0xa4>)
				if( uxNewPriority > uxCurrentBasePriority )
 800ec60:	d31d      	bcc.n	800ec9e <vTaskPrioritySet+0x5e>
				else if( pxTCB == pxCurrentTCB )
 800ec62:	687e      	ldr	r6, [r7, #4]
 800ec64:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800ec66:	4273      	negs	r3, r6
 800ec68:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ec6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ec6c:	428a      	cmp	r2, r1
 800ec6e:	d100      	bne.n	800ec72 <vTaskPrioritySet+0x32>
						pxTCB->uxPriority = uxNewPriority;
 800ec70:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec72:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800ec74:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	db02      	blt.n	800ec80 <vTaskPrioritySet+0x40>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec7a:	2307      	movs	r3, #7
 800ec7c:	1b5d      	subs	r5, r3, r5
 800ec7e:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ec80:	008b      	lsls	r3, r1, #2
 800ec82:	185b      	adds	r3, r3, r1
 800ec84:	4d18      	ldr	r5, [pc, #96]	; (800ece8 <vTaskPrioritySet+0xa8>)
 800ec86:	009b      	lsls	r3, r3, #2
 800ec88:	6962      	ldr	r2, [r4, #20]
 800ec8a:	18eb      	adds	r3, r5, r3
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d015      	beq.n	800ecbc <vTaskPrioritySet+0x7c>
				if( xYieldRequired == pdTRUE )
 800ec90:	2e01      	cmp	r6, #1
 800ec92:	d010      	beq.n	800ecb6 <vTaskPrioritySet+0x76>
		taskEXIT_CRITICAL();
 800ec94:	f000 fea8 	bl	800f9e8 <vPortExitCritical>
	}
 800ec98:	bc04      	pop	{r2}
 800ec9a:	4690      	mov	r8, r2
 800ec9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( pxTCB != pxCurrentTCB )
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	42a3      	cmp	r3, r4
 800eca2:	d01d      	beq.n	800ece0 <vTaskPrioritySet+0xa0>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800eca4:	2600      	movs	r6, #0
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecaa:	429d      	cmp	r5, r3
 800ecac:	4176      	adcs	r6, r6
 800ecae:	e7dc      	b.n	800ec6a <vTaskPrioritySet+0x2a>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ecb0:	4b0c      	ldr	r3, [pc, #48]	; (800ece4 <vTaskPrioritySet+0xa4>)
 800ecb2:	685c      	ldr	r4, [r3, #4]
 800ecb4:	e7d0      	b.n	800ec58 <vTaskPrioritySet+0x18>
					taskYIELD_IF_USING_PREEMPTION();
 800ecb6:	f000 fe7f 	bl	800f9b8 <vPortYield>
 800ecba:	e7eb      	b.n	800ec94 <vTaskPrioritySet+0x54>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ecbc:	1d23      	adds	r3, r4, #4
 800ecbe:	0018      	movs	r0, r3
 800ecc0:	4698      	mov	r8, r3
 800ecc2:	f7ff fb07 	bl	800e2d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ecc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ecc8:	69ba      	ldr	r2, [r7, #24]
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d900      	bls.n	800ecd0 <vTaskPrioritySet+0x90>
 800ecce:	61bb      	str	r3, [r7, #24]
 800ecd0:	0098      	lsls	r0, r3, #2
 800ecd2:	18c0      	adds	r0, r0, r3
 800ecd4:	0080      	lsls	r0, r0, #2
 800ecd6:	1828      	adds	r0, r5, r0
 800ecd8:	4641      	mov	r1, r8
 800ecda:	f7ff fad7 	bl	800e28c <vListInsertEnd>
 800ecde:	e7d7      	b.n	800ec90 <vTaskPrioritySet+0x50>
	BaseType_t xYieldRequired = pdFALSE;
 800ece0:	2600      	movs	r6, #0
 800ece2:	e7c2      	b.n	800ec6a <vTaskPrioritySet+0x2a>
 800ece4:	200026fc 	.word	0x200026fc
 800ece8:	20002798 	.word	0x20002798

0800ecec <vTaskStartScheduler>:
{
 800ecec:	b510      	push	{r4, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800ecee:	2400      	movs	r4, #0
{
 800ecf0:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800ecf2:	9403      	str	r4, [sp, #12]
 800ecf4:	9402      	str	r4, [sp, #8]
 800ecf6:	9401      	str	r4, [sp, #4]
 800ecf8:	9400      	str	r4, [sp, #0]
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	2296      	movs	r2, #150	; 0x96
 800ecfe:	490b      	ldr	r1, [pc, #44]	; (800ed2c <vTaskStartScheduler+0x40>)
 800ed00:	480b      	ldr	r0, [pc, #44]	; (800ed30 <vTaskStartScheduler+0x44>)
 800ed02:	f7ff febb 	bl	800ea7c <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800ed06:	2801      	cmp	r0, #1
 800ed08:	d001      	beq.n	800ed0e <vTaskStartScheduler+0x22>
}
 800ed0a:	b004      	add	sp, #16
 800ed0c:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
 800ed0e:	f000 fc83 	bl	800f618 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800ed12:	2801      	cmp	r0, #1
 800ed14:	d1f9      	bne.n	800ed0a <vTaskStartScheduler+0x1e>
		portDISABLE_INTERRUPTS();
 800ed16:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800ed18:	4b06      	ldr	r3, [pc, #24]	; (800ed34 <vTaskStartScheduler+0x48>)
 800ed1a:	6058      	str	r0, [r3, #4]
		xTickCount = ( TickType_t ) 0U;
 800ed1c:	4b06      	ldr	r3, [pc, #24]	; (800ed38 <vTaskStartScheduler+0x4c>)
 800ed1e:	609c      	str	r4, [r3, #8]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ed20:	f7f8 ff82 	bl	8007c28 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800ed24:	f000 fe1e 	bl	800f964 <xPortStartScheduler>
}
 800ed28:	e7ef      	b.n	800ed0a <vTaskStartScheduler+0x1e>
 800ed2a:	46c0      	nop			; (mov r8, r8)
 800ed2c:	0801b860 	.word	0x0801b860
 800ed30:	0800ef6d 	.word	0x0800ef6d
 800ed34:	2000277c 	.word	0x2000277c
 800ed38:	200026fc 	.word	0x200026fc

0800ed3c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ed3c:	4a02      	ldr	r2, [pc, #8]	; (800ed48 <vTaskSuspendAll+0xc>)
 800ed3e:	6913      	ldr	r3, [r2, #16]
 800ed40:	3301      	adds	r3, #1
 800ed42:	6113      	str	r3, [r2, #16]
}
 800ed44:	4770      	bx	lr
 800ed46:	46c0      	nop			; (mov r8, r8)
 800ed48:	2000277c 	.word	0x2000277c

0800ed4c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ed4c:	4b01      	ldr	r3, [pc, #4]	; (800ed54 <xTaskGetTickCount+0x8>)
 800ed4e:	6898      	ldr	r0, [r3, #8]
}
 800ed50:	4770      	bx	lr
 800ed52:	46c0      	nop			; (mov r8, r8)
 800ed54:	200026fc 	.word	0x200026fc

0800ed58 <xTaskGetTickCountFromISR>:
 800ed58:	4b01      	ldr	r3, [pc, #4]	; (800ed60 <xTaskGetTickCountFromISR+0x8>)
 800ed5a:	6898      	ldr	r0, [r3, #8]
 800ed5c:	4770      	bx	lr
 800ed5e:	46c0      	nop			; (mov r8, r8)
 800ed60:	200026fc 	.word	0x200026fc

0800ed64 <xTaskIncrementTick>:
{
 800ed64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed66:	46d6      	mov	lr, sl
 800ed68:	464f      	mov	r7, r9
 800ed6a:	4646      	mov	r6, r8
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed6c:	4b3e      	ldr	r3, [pc, #248]	; (800ee68 <xTaskIncrementTick+0x104>)
{
 800ed6e:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed70:	691a      	ldr	r2, [r3, #16]
 800ed72:	2a00      	cmp	r2, #0
 800ed74:	d11b      	bne.n	800edae <xTaskIncrementTick+0x4a>
		++xTickCount;
 800ed76:	4c3d      	ldr	r4, [pc, #244]	; (800ee6c <xTaskIncrementTick+0x108>)
 800ed78:	68a2      	ldr	r2, [r4, #8]
 800ed7a:	3201      	adds	r2, #1
 800ed7c:	60a2      	str	r2, [r4, #8]
			const TickType_t xConstTickCount = xTickCount;
 800ed7e:	68a2      	ldr	r2, [r4, #8]
 800ed80:	4690      	mov	r8, r2
			if( xConstTickCount == ( TickType_t ) 0U )
 800ed82:	2a00      	cmp	r2, #0
 800ed84:	d022      	beq.n	800edcc <xTaskIncrementTick+0x68>
 800ed86:	4b3a      	ldr	r3, [pc, #232]	; (800ee70 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800ed88:	2700      	movs	r7, #0
 800ed8a:	469a      	mov	sl, r3
			if( xConstTickCount >= xNextTaskUnblockTime )
 800ed8c:	4653      	mov	r3, sl
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4543      	cmp	r3, r8
 800ed92:	d931      	bls.n	800edf8 <xTaskIncrementTick+0x94>
 800ed94:	4b37      	ldr	r3, [pc, #220]	; (800ee74 <xTaskIncrementTick+0x110>)
 800ed96:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ed98:	6863      	ldr	r3, [r4, #4]
 800ed9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed9c:	0093      	lsls	r3, r2, #2
 800ed9e:	189b      	adds	r3, r3, r2
 800eda0:	464a      	mov	r2, r9
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	58d3      	ldr	r3, [r2, r3]
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d906      	bls.n	800edb8 <xTaskIncrementTick+0x54>
				xSwitchRequired = pdTRUE;
 800edaa:	2701      	movs	r7, #1
 800edac:	e004      	b.n	800edb8 <xTaskIncrementTick+0x54>
BaseType_t xSwitchRequired = pdFALSE;
 800edae:	2700      	movs	r7, #0
		++uxPendedTicks;
 800edb0:	699a      	ldr	r2, [r3, #24]
 800edb2:	4c2e      	ldr	r4, [pc, #184]	; (800ee6c <xTaskIncrementTick+0x108>)
 800edb4:	3201      	adds	r2, #1
 800edb6:	619a      	str	r2, [r3, #24]
		if( xYieldPending != pdFALSE )
 800edb8:	6923      	ldr	r3, [r4, #16]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d000      	beq.n	800edc0 <xTaskIncrementTick+0x5c>
			xSwitchRequired = pdTRUE;
 800edbe:	2701      	movs	r7, #1
}
 800edc0:	0038      	movs	r0, r7
 800edc2:	bc1c      	pop	{r2, r3, r4}
 800edc4:	4690      	mov	r8, r2
 800edc6:	4699      	mov	r9, r3
 800edc8:	46a2      	mov	sl, r4
 800edca:	bdf0      	pop	{r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 800edcc:	6822      	ldr	r2, [r4, #0]
 800edce:	68e1      	ldr	r1, [r4, #12]
 800edd0:	6021      	str	r1, [r4, #0]
 800edd2:	60e2      	str	r2, [r4, #12]
 800edd4:	695a      	ldr	r2, [r3, #20]
 800edd6:	3201      	adds	r2, #1
 800edd8:	615a      	str	r2, [r3, #20]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edda:	6823      	ldr	r3, [r4, #0]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d13b      	bne.n	800ee5a <xTaskIncrementTick+0xf6>
		xNextTaskUnblockTime = portMAX_DELAY;
 800ede2:	4b23      	ldr	r3, [pc, #140]	; (800ee70 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800ede4:	2700      	movs	r7, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 800ede6:	469a      	mov	sl, r3
 800ede8:	2301      	movs	r3, #1
 800edea:	4652      	mov	r2, sl
 800edec:	425b      	negs	r3, r3
 800edee:	6013      	str	r3, [r2, #0]
			if( xConstTickCount >= xNextTaskUnblockTime )
 800edf0:	4653      	mov	r3, sl
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4543      	cmp	r3, r8
 800edf6:	d8cd      	bhi.n	800ed94 <xTaskIncrementTick+0x30>
 800edf8:	4b1e      	ldr	r3, [pc, #120]	; (800ee74 <xTaskIncrementTick+0x110>)
 800edfa:	4699      	mov	r9, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edfc:	6823      	ldr	r3, [r4, #0]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d026      	beq.n	800ee52 <xTaskIncrementTick+0xee>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800ee0a:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 800ee0c:	4598      	cmp	r8, r3
 800ee0e:	d327      	bcc.n	800ee60 <xTaskIncrementTick+0xfc>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ee10:	1d2e      	adds	r6, r5, #4
 800ee12:	0030      	movs	r0, r6
 800ee14:	f7ff fa5e 	bl	800e2d4 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ee18:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d003      	beq.n	800ee26 <xTaskIncrementTick+0xc2>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee1e:	0028      	movs	r0, r5
 800ee20:	3018      	adds	r0, #24
 800ee22:	f7ff fa57 	bl	800e2d4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ee26:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ee28:	69a2      	ldr	r2, [r4, #24]
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d900      	bls.n	800ee30 <xTaskIncrementTick+0xcc>
 800ee2e:	61a3      	str	r3, [r4, #24]
 800ee30:	0098      	lsls	r0, r3, #2
 800ee32:	18c0      	adds	r0, r0, r3
 800ee34:	0080      	lsls	r0, r0, #2
 800ee36:	4448      	add	r0, r9
 800ee38:	0031      	movs	r1, r6
 800ee3a:	f7ff fa27 	bl	800e28c <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee3e:	6863      	ldr	r3, [r4, #4]
 800ee40:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ee42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d3d9      	bcc.n	800edfc <xTaskIncrementTick+0x98>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee48:	6823      	ldr	r3, [r4, #0]
								xSwitchRequired = pdTRUE;
 800ee4a:	2701      	movs	r7, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d1d8      	bne.n	800ee04 <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = portMAX_DELAY;
 800ee52:	4652      	mov	r2, sl
 800ee54:	3b01      	subs	r3, #1
 800ee56:	6013      	str	r3, [r2, #0]
						break;
 800ee58:	e79e      	b.n	800ed98 <xTaskIncrementTick+0x34>
 800ee5a:	f7ff fd8f 	bl	800e97c <prvResetNextTaskUnblockTime.part.2>
 800ee5e:	e792      	b.n	800ed86 <xTaskIncrementTick+0x22>
							xNextTaskUnblockTime = xItemValue;
 800ee60:	4652      	mov	r2, sl
 800ee62:	6013      	str	r3, [r2, #0]
							break;
 800ee64:	e798      	b.n	800ed98 <xTaskIncrementTick+0x34>
 800ee66:	46c0      	nop			; (mov r8, r8)
 800ee68:	2000277c 	.word	0x2000277c
 800ee6c:	200026fc 	.word	0x200026fc
 800ee70:	200000d4 	.word	0x200000d4
 800ee74:	20002798 	.word	0x20002798

0800ee78 <xTaskResumeAll>:
{
 800ee78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee7a:	46ce      	mov	lr, r9
 800ee7c:	4647      	mov	r7, r8
 800ee7e:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800ee80:	f000 fda6 	bl	800f9d0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800ee84:	4f28      	ldr	r7, [pc, #160]	; (800ef28 <xTaskResumeAll+0xb0>)
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	613b      	str	r3, [r7, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d13b      	bne.n	800ef0a <xTaskResumeAll+0x92>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ee92:	4c26      	ldr	r4, [pc, #152]	; (800ef2c <xTaskResumeAll+0xb4>)
 800ee94:	69e3      	ldr	r3, [r4, #28]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d037      	beq.n	800ef0a <xTaskResumeAll+0x92>
					prvAddTaskToReadyList( pxTCB );
 800ee9a:	4b25      	ldr	r3, [pc, #148]	; (800ef30 <xTaskResumeAll+0xb8>)
 800ee9c:	4698      	mov	r8, r3
						xYieldPending = pdTRUE;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	4699      	mov	r9, r3
 800eea2:	e01a      	b.n	800eeda <xTaskResumeAll+0x62>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800eea4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800eea6:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eea8:	0028      	movs	r0, r5
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800eeaa:	1d2e      	adds	r6, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eeac:	3018      	adds	r0, #24
 800eeae:	f7ff fa11 	bl	800e2d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800eeb2:	0030      	movs	r0, r6
 800eeb4:	f7ff fa0e 	bl	800e2d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eeb8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800eeba:	69a2      	ldr	r2, [r4, #24]
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d900      	bls.n	800eec2 <xTaskResumeAll+0x4a>
 800eec0:	61a3      	str	r3, [r4, #24]
 800eec2:	0098      	lsls	r0, r3, #2
 800eec4:	18c0      	adds	r0, r0, r3
 800eec6:	0080      	lsls	r0, r0, #2
 800eec8:	4440      	add	r0, r8
 800eeca:	0031      	movs	r1, r6
 800eecc:	f7ff f9de 	bl	800e28c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eed0:	6863      	ldr	r3, [r4, #4]
 800eed2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800eed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d21f      	bcs.n	800ef1a <xTaskResumeAll+0xa2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eeda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d1e1      	bne.n	800eea4 <xTaskResumeAll+0x2c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800eee0:	69bb      	ldr	r3, [r7, #24]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d00e      	beq.n	800ef04 <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800eee6:	69bb      	ldr	r3, [r7, #24]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d00b      	beq.n	800ef04 <xTaskResumeAll+0x8c>
							xYieldPending = pdTRUE;
 800eeec:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
 800eeee:	f7ff ff39 	bl	800ed64 <xTaskIncrementTick>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	d000      	beq.n	800eef8 <xTaskResumeAll+0x80>
							xYieldPending = pdTRUE;
 800eef6:	6125      	str	r5, [r4, #16]
						--uxPendedTicks;
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	3b01      	subs	r3, #1
 800eefc:	61bb      	str	r3, [r7, #24]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800eefe:	69bb      	ldr	r3, [r7, #24]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d1f4      	bne.n	800eeee <xTaskResumeAll+0x76>
				if( xYieldPending == pdTRUE )
 800ef04:	6923      	ldr	r3, [r4, #16]
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	d00a      	beq.n	800ef20 <xTaskResumeAll+0xa8>
BaseType_t xAlreadyYielded = pdFALSE;
 800ef0a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ef0c:	f000 fd6c 	bl	800f9e8 <vPortExitCritical>
}
 800ef10:	0020      	movs	r0, r4
 800ef12:	bc0c      	pop	{r2, r3}
 800ef14:	4690      	mov	r8, r2
 800ef16:	4699      	mov	r9, r3
 800ef18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800ef1a:	464b      	mov	r3, r9
 800ef1c:	6123      	str	r3, [r4, #16]
 800ef1e:	e7dc      	b.n	800eeda <xTaskResumeAll+0x62>
					taskYIELD_IF_USING_PREEMPTION();
 800ef20:	f000 fd4a 	bl	800f9b8 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800ef24:	2401      	movs	r4, #1
 800ef26:	e7f1      	b.n	800ef0c <xTaskResumeAll+0x94>
 800ef28:	2000277c 	.word	0x2000277c
 800ef2c:	200026fc 	.word	0x200026fc
 800ef30:	20002798 	.word	0x20002798

0800ef34 <vTaskDelay>:
	{
 800ef34:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ef36:	2800      	cmp	r0, #0
 800ef38:	d011      	beq.n	800ef5e <vTaskDelay+0x2a>
	++uxSchedulerSuspended;
 800ef3a:	4a0a      	ldr	r2, [pc, #40]	; (800ef64 <vTaskDelay+0x30>)
 800ef3c:	6913      	ldr	r3, [r2, #16]
 800ef3e:	3301      	adds	r3, #1
 800ef40:	6113      	str	r3, [r2, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800ef42:	4b09      	ldr	r3, [pc, #36]	; (800ef68 <vTaskDelay+0x34>)
 800ef44:	689c      	ldr	r4, [r3, #8]
 800ef46:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ef48:	6858      	ldr	r0, [r3, #4]
 800ef4a:	3004      	adds	r0, #4
 800ef4c:	f7ff f9c2 	bl	800e2d4 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ef50:	0020      	movs	r0, r4
 800ef52:	f7ff fd1f 	bl	800e994 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800ef56:	f7ff ff8f 	bl	800ee78 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	d101      	bne.n	800ef62 <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 800ef5e:	f000 fd2b 	bl	800f9b8 <vPortYield>
	}
 800ef62:	bd10      	pop	{r4, pc}
 800ef64:	2000277c 	.word	0x2000277c
 800ef68:	200026fc 	.word	0x200026fc

0800ef6c <prvIdleTask>:
{
 800ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6e:	4e15      	ldr	r6, [pc, #84]	; (800efc4 <prvIdleTask+0x58>)
 800ef70:	4c15      	ldr	r4, [pc, #84]	; (800efc8 <prvIdleTask+0x5c>)
 800ef72:	4f16      	ldr	r7, [pc, #88]	; (800efcc <prvIdleTask+0x60>)
 800ef74:	e007      	b.n	800ef86 <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800ef76:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800ef78:	6df5      	ldr	r5, [r6, #92]	; 0x5c
	++uxSchedulerSuspended;
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800ef7e:	f7ff ff7b 	bl	800ee78 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800ef82:	2d00      	cmp	r5, #0
 800ef84:	d108      	bne.n	800ef98 <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800ef86:	68e3      	ldr	r3, [r4, #12]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d1f4      	bne.n	800ef76 <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d9f9      	bls.n	800ef86 <prvIdleTask+0x1a>
				taskYIELD();
 800ef92:	f000 fd11 	bl	800f9b8 <vPortYield>
 800ef96:	e7f6      	b.n	800ef86 <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800ef98:	f000 fd1a 	bl	800f9d0 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ef9c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800ef9e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800efa0:	1d28      	adds	r0, r5, #4
 800efa2:	f7ff f997 	bl	800e2d4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800efa6:	69f3      	ldr	r3, [r6, #28]
 800efa8:	3b01      	subs	r3, #1
 800efaa:	61f3      	str	r3, [r6, #28]
					--uxTasksDeleted;
 800efac:	68e3      	ldr	r3, [r4, #12]
 800efae:	3b01      	subs	r3, #1
 800efb0:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800efb2:	f000 fd19 	bl	800f9e8 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800efb6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800efb8:	f000 fdfa 	bl	800fbb0 <vPortFree>
		vPortFree( pxTCB );
 800efbc:	0028      	movs	r0, r5
 800efbe:	f000 fdf7 	bl	800fbb0 <vPortFree>
 800efc2:	e7e0      	b.n	800ef86 <prvIdleTask+0x1a>
 800efc4:	200026fc 	.word	0x200026fc
 800efc8:	2000277c 	.word	0x2000277c
 800efcc:	20002798 	.word	0x20002798

0800efd0 <uxTaskGetSystemState>:
	{
 800efd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efd2:	4647      	mov	r7, r8
 800efd4:	46ce      	mov	lr, r9
 800efd6:	4690      	mov	r8, r2
	++uxSchedulerSuspended;
 800efd8:	4a33      	ldr	r2, [pc, #204]	; (800f0a8 <uxTaskGetSystemState+0xd8>)
	{
 800efda:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800efdc:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800efde:	4f33      	ldr	r7, [pc, #204]	; (800f0ac <uxTaskGetSystemState+0xdc>)
	++uxSchedulerSuspended;
 800efe0:	3301      	adds	r3, #1
 800efe2:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800efe4:	69fb      	ldr	r3, [r7, #28]
	{
 800efe6:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800efe8:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800efea:	428b      	cmp	r3, r1
 800efec:	d82c      	bhi.n	800f048 <uxTaskGetSystemState+0x78>
 800efee:	238c      	movs	r3, #140	; 0x8c
 800eff0:	425b      	negs	r3, r3
 800eff2:	4699      	mov	r9, r3
 800eff4:	4c2e      	ldr	r4, [pc, #184]	; (800f0b0 <uxTaskGetSystemState+0xe0>)
 800eff6:	2300      	movs	r3, #0
 800eff8:	44a1      	add	r9, r4
 800effa:	e002      	b.n	800f002 <uxTaskGetSystemState+0x32>
 800effc:	3c14      	subs	r4, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800effe:	454c      	cmp	r4, r9
 800f000:	d00d      	beq.n	800f01e <uxTaskGetSystemState+0x4e>
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f002:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f004:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f006:	2a00      	cmp	r2, #0
 800f008:	d0f8      	beq.n	800effc <uxTaskGetSystemState+0x2c>
 800f00a:	0021      	movs	r1, r4
 800f00c:	2201      	movs	r2, #1
 800f00e:	f7ff fc61 	bl	800e8d4 <prvListTaskWithinSingleList.part.1>
 800f012:	182d      	adds	r5, r5, r0
 800f014:	016b      	lsls	r3, r5, #5
 800f016:	3c14      	subs	r4, #20
 800f018:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f01a:	454c      	cmp	r4, r9
 800f01c:	d1f1      	bne.n	800f002 <uxTaskGetSystemState+0x32>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f01e:	6839      	ldr	r1, [r7, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f020:	680b      	ldr	r3, [r1, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d121      	bne.n	800f06a <uxTaskGetSystemState+0x9a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f026:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f028:	680b      	ldr	r3, [r1, #0]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d127      	bne.n	800f07e <uxTaskGetSystemState+0xae>
 800f02e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f030:	2b00      	cmp	r3, #0
 800f032:	d12d      	bne.n	800f090 <uxTaskGetSystemState+0xc0>
 800f034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f036:	2b00      	cmp	r3, #0
 800f038:	d10d      	bne.n	800f056 <uxTaskGetSystemState+0x86>
					if( pulTotalRunTime != NULL )
 800f03a:	4643      	mov	r3, r8
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d003      	beq.n	800f048 <uxTaskGetSystemState+0x78>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f040:	f7f8 fe02 	bl	8007c48 <ulMainGetRunTimeCounterValue>
 800f044:	4643      	mov	r3, r8
 800f046:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800f048:	f7ff ff16 	bl	800ee78 <xTaskResumeAll>
	}
 800f04c:	0028      	movs	r0, r5
 800f04e:	bc0c      	pop	{r2, r3}
 800f050:	4690      	mov	r8, r2
 800f052:	4699      	mov	r9, r3
 800f054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f056:	0039      	movs	r1, r7
 800f058:	2203      	movs	r2, #3
 800f05a:	3170      	adds	r1, #112	; 0x70
 800f05c:	f7ff fc3a 	bl	800e8d4 <prvListTaskWithinSingleList.part.1>
					if( pulTotalRunTime != NULL )
 800f060:	4643      	mov	r3, r8
 800f062:	182d      	adds	r5, r5, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d1eb      	bne.n	800f040 <uxTaskGetSystemState+0x70>
 800f068:	e7ee      	b.n	800f048 <uxTaskGetSystemState+0x78>
 800f06a:	2202      	movs	r2, #2
 800f06c:	f7ff fc32 	bl	800e8d4 <prvListTaskWithinSingleList.part.1>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f070:	68f9      	ldr	r1, [r7, #12]
 800f072:	182d      	adds	r5, r5, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f074:	680b      	ldr	r3, [r1, #0]
 800f076:	0168      	lsls	r0, r5, #5
 800f078:	1830      	adds	r0, r6, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d0d7      	beq.n	800f02e <uxTaskGetSystemState+0x5e>
 800f07e:	2202      	movs	r2, #2
 800f080:	f7ff fc28 	bl	800e8d4 <prvListTaskWithinSingleList.part.1>
 800f084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f086:	182d      	adds	r5, r5, r0
 800f088:	0168      	lsls	r0, r5, #5
 800f08a:	1830      	adds	r0, r6, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d0d1      	beq.n	800f034 <uxTaskGetSystemState+0x64>
 800f090:	0039      	movs	r1, r7
 800f092:	2204      	movs	r2, #4
 800f094:	315c      	adds	r1, #92	; 0x5c
 800f096:	f7ff fc1d 	bl	800e8d4 <prvListTaskWithinSingleList.part.1>
 800f09a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f09c:	182d      	adds	r5, r5, r0
 800f09e:	0168      	lsls	r0, r5, #5
 800f0a0:	1830      	adds	r0, r6, r0
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d0c9      	beq.n	800f03a <uxTaskGetSystemState+0x6a>
 800f0a6:	e7d6      	b.n	800f056 <uxTaskGetSystemState+0x86>
 800f0a8:	2000277c 	.word	0x2000277c
 800f0ac:	200026fc 	.word	0x200026fc
 800f0b0:	20002810 	.word	0x20002810

0800f0b4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f0b4:	4b05      	ldr	r3, [pc, #20]	; (800f0cc <vTaskSwitchContext+0x18>)
{
 800f0b6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f0b8:	691b      	ldr	r3, [r3, #16]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d003      	beq.n	800f0c6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f0be:	2201      	movs	r2, #1
 800f0c0:	4b03      	ldr	r3, [pc, #12]	; (800f0d0 <vTaskSwitchContext+0x1c>)
 800f0c2:	611a      	str	r2, [r3, #16]
}
 800f0c4:	bd10      	pop	{r4, pc}
 800f0c6:	f7ff fc83 	bl	800e9d0 <vTaskSwitchContext.part.5>
 800f0ca:	e7fb      	b.n	800f0c4 <vTaskSwitchContext+0x10>
 800f0cc:	2000277c 	.word	0x2000277c
 800f0d0:	200026fc 	.word	0x200026fc

0800f0d4 <vTaskPlaceOnEventList>:
{
 800f0d4:	b570      	push	{r4, r5, r6, lr}
 800f0d6:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f0d8:	4c0b      	ldr	r4, [pc, #44]	; (800f108 <vTaskPlaceOnEventList+0x34>)
 800f0da:	6861      	ldr	r1, [r4, #4]
 800f0dc:	3118      	adds	r1, #24
 800f0de:	f7ff f8e1 	bl	800e2a4 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f0e2:	6860      	ldr	r0, [r4, #4]
 800f0e4:	3004      	adds	r0, #4
 800f0e6:	f7ff f8f5 	bl	800e2d4 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f0ea:	1c6b      	adds	r3, r5, #1
 800f0ec:	d004      	beq.n	800f0f8 <vTaskPlaceOnEventList+0x24>
			xTimeToWake = xTickCount + xTicksToWait;
 800f0ee:	68a0      	ldr	r0, [r4, #8]
 800f0f0:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f0f2:	f7ff fc4f 	bl	800e994 <prvAddCurrentTaskToDelayedList>
}
 800f0f6:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f0f8:	0020      	movs	r0, r4
 800f0fa:	6861      	ldr	r1, [r4, #4]
 800f0fc:	3070      	adds	r0, #112	; 0x70
 800f0fe:	3104      	adds	r1, #4
 800f100:	f7ff f8c4 	bl	800e28c <vListInsertEnd>
 800f104:	e7f7      	b.n	800f0f6 <vTaskPlaceOnEventList+0x22>
 800f106:	46c0      	nop			; (mov r8, r8)
 800f108:	200026fc 	.word	0x200026fc

0800f10c <vTaskPlaceOnEventListRestricted>:
	{
 800f10c:	b570      	push	{r4, r5, r6, lr}
 800f10e:	000d      	movs	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f110:	4c06      	ldr	r4, [pc, #24]	; (800f12c <vTaskPlaceOnEventListRestricted+0x20>)
 800f112:	6861      	ldr	r1, [r4, #4]
 800f114:	3118      	adds	r1, #24
 800f116:	f7ff f8b9 	bl	800e28c <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f11a:	6860      	ldr	r0, [r4, #4]
 800f11c:	3004      	adds	r0, #4
 800f11e:	f7ff f8d9 	bl	800e2d4 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f122:	68a0      	ldr	r0, [r4, #8]
 800f124:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f126:	f7ff fc35 	bl	800e994 <prvAddCurrentTaskToDelayedList>
	}
 800f12a:	bd70      	pop	{r4, r5, r6, pc}
 800f12c:	200026fc 	.word	0x200026fc

0800f130 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f130:	68c3      	ldr	r3, [r0, #12]
{
 800f132:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f134:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f136:	0026      	movs	r6, r4
 800f138:	3618      	adds	r6, #24
 800f13a:	0030      	movs	r0, r6
 800f13c:	f7ff f8ca 	bl	800e2d4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f140:	4b13      	ldr	r3, [pc, #76]	; (800f190 <xTaskRemoveFromEventList+0x60>)
 800f142:	691b      	ldr	r3, [r3, #16]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d11a      	bne.n	800f17e <xTaskRemoveFromEventList+0x4e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f148:	1d26      	adds	r6, r4, #4
 800f14a:	0030      	movs	r0, r6
 800f14c:	f7ff f8c2 	bl	800e2d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f150:	4d10      	ldr	r5, [pc, #64]	; (800f194 <xTaskRemoveFromEventList+0x64>)
 800f152:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f154:	69aa      	ldr	r2, [r5, #24]
 800f156:	4293      	cmp	r3, r2
 800f158:	d818      	bhi.n	800f18c <xTaskRemoveFromEventList+0x5c>
 800f15a:	0098      	lsls	r0, r3, #2
 800f15c:	18c0      	adds	r0, r0, r3
 800f15e:	4b0e      	ldr	r3, [pc, #56]	; (800f198 <xTaskRemoveFromEventList+0x68>)
 800f160:	0080      	lsls	r0, r0, #2
 800f162:	18c0      	adds	r0, r0, r3
 800f164:	0031      	movs	r1, r6
 800f166:	f7ff f891 	bl	800e28c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f16a:	686b      	ldr	r3, [r5, #4]
 800f16c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800f170:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f172:	429a      	cmp	r2, r3
 800f174:	d902      	bls.n	800f17c <xTaskRemoveFromEventList+0x4c>
		xYieldPending = pdTRUE;
 800f176:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800f178:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800f17a:	612b      	str	r3, [r5, #16]
}
 800f17c:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f17e:	4d05      	ldr	r5, [pc, #20]	; (800f194 <xTaskRemoveFromEventList+0x64>)
 800f180:	0031      	movs	r1, r6
 800f182:	0028      	movs	r0, r5
 800f184:	3048      	adds	r0, #72	; 0x48
 800f186:	f7ff f881 	bl	800e28c <vListInsertEnd>
 800f18a:	e7ee      	b.n	800f16a <xTaskRemoveFromEventList+0x3a>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f18c:	61ab      	str	r3, [r5, #24]
 800f18e:	e7e4      	b.n	800f15a <xTaskRemoveFromEventList+0x2a>
 800f190:	2000277c 	.word	0x2000277c
 800f194:	200026fc 	.word	0x200026fc
 800f198:	20002798 	.word	0x20002798

0800f19c <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f19c:	4b03      	ldr	r3, [pc, #12]	; (800f1ac <vTaskSetTimeOutState+0x10>)
 800f19e:	695b      	ldr	r3, [r3, #20]
 800f1a0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f1a2:	4b03      	ldr	r3, [pc, #12]	; (800f1b0 <vTaskSetTimeOutState+0x14>)
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	6043      	str	r3, [r0, #4]
}
 800f1a8:	4770      	bx	lr
 800f1aa:	46c0      	nop			; (mov r8, r8)
 800f1ac:	2000277c 	.word	0x2000277c
 800f1b0:	200026fc 	.word	0x200026fc

0800f1b4 <xTaskCheckForTimeOut>:
{
 800f1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b6:	000e      	movs	r6, r1
 800f1b8:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800f1ba:	f000 fc09 	bl	800f9d0 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f1be:	4911      	ldr	r1, [pc, #68]	; (800f204 <xTaskCheckForTimeOut+0x50>)
			if( *pxTicksToWait == portMAX_DELAY )
 800f1c0:	6832      	ldr	r2, [r6, #0]
		const TickType_t xConstTickCount = xTickCount;
 800f1c2:	6888      	ldr	r0, [r1, #8]
			if( *pxTicksToWait == portMAX_DELAY )
 800f1c4:	1c53      	adds	r3, r2, #1
 800f1c6:	d01a      	beq.n	800f1fe <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f1c8:	4b0f      	ldr	r3, [pc, #60]	; (800f208 <xTaskCheckForTimeOut+0x54>)
 800f1ca:	6827      	ldr	r7, [r4, #0]
 800f1cc:	695d      	ldr	r5, [r3, #20]
 800f1ce:	469c      	mov	ip, r3
 800f1d0:	6863      	ldr	r3, [r4, #4]
 800f1d2:	42af      	cmp	r7, r5
 800f1d4:	d002      	beq.n	800f1dc <xTaskCheckForTimeOut+0x28>
			xReturn = pdTRUE;
 800f1d6:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f1d8:	4298      	cmp	r0, r3
 800f1da:	d20c      	bcs.n	800f1f6 <xTaskCheckForTimeOut+0x42>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f1dc:	1ac7      	subs	r7, r0, r3
			xReturn = pdTRUE;
 800f1de:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f1e0:	42ba      	cmp	r2, r7
 800f1e2:	d908      	bls.n	800f1f6 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f1e4:	1a1b      	subs	r3, r3, r0
 800f1e6:	189b      	adds	r3, r3, r2
 800f1e8:	6033      	str	r3, [r6, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f1ea:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800f1ec:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f1ee:	695b      	ldr	r3, [r3, #20]
 800f1f0:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f1f2:	688b      	ldr	r3, [r1, #8]
 800f1f4:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800f1f6:	f000 fbf7 	bl	800f9e8 <vPortExitCritical>
}
 800f1fa:	0028      	movs	r0, r5
 800f1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800f1fe:	2500      	movs	r5, #0
 800f200:	e7f9      	b.n	800f1f6 <xTaskCheckForTimeOut+0x42>
 800f202:	46c0      	nop			; (mov r8, r8)
 800f204:	200026fc 	.word	0x200026fc
 800f208:	2000277c 	.word	0x2000277c

0800f20c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f20c:	2201      	movs	r2, #1
 800f20e:	4b01      	ldr	r3, [pc, #4]	; (800f214 <vTaskMissedYield+0x8>)
 800f210:	611a      	str	r2, [r3, #16]
}
 800f212:	4770      	bx	lr
 800f214:	200026fc 	.word	0x200026fc

0800f218 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f218:	4b04      	ldr	r3, [pc, #16]	; (800f22c <xTaskGetSchedulerState+0x14>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f21a:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800f21c:	685a      	ldr	r2, [r3, #4]
 800f21e:	2a00      	cmp	r2, #0
 800f220:	d003      	beq.n	800f22a <xTaskGetSchedulerState+0x12>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f222:	6918      	ldr	r0, [r3, #16]
				xReturn = taskSCHEDULER_SUSPENDED;
 800f224:	4243      	negs	r3, r0
 800f226:	4158      	adcs	r0, r3
 800f228:	0040      	lsls	r0, r0, #1
	}
 800f22a:	4770      	bx	lr
 800f22c:	2000277c 	.word	0x2000277c

0800f230 <vTaskPriorityInherit>:
	{
 800f230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f232:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f234:	d018      	beq.n	800f268 <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f236:	4d16      	ldr	r5, [pc, #88]	; (800f290 <vTaskPriorityInherit+0x60>)
 800f238:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f23a:	686b      	ldr	r3, [r5, #4]
 800f23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f23e:	429a      	cmp	r2, r3
 800f240:	d212      	bcs.n	800f268 <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f242:	6983      	ldr	r3, [r0, #24]
 800f244:	2b00      	cmp	r3, #0
 800f246:	db04      	blt.n	800f252 <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f248:	686b      	ldr	r3, [r5, #4]
 800f24a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f24c:	2307      	movs	r3, #7
 800f24e:	1a5b      	subs	r3, r3, r1
 800f250:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f252:	0093      	lsls	r3, r2, #2
 800f254:	189b      	adds	r3, r3, r2
 800f256:	4e0f      	ldr	r6, [pc, #60]	; (800f294 <vTaskPriorityInherit+0x64>)
 800f258:	009b      	lsls	r3, r3, #2
 800f25a:	6962      	ldr	r2, [r4, #20]
 800f25c:	18f3      	adds	r3, r6, r3
 800f25e:	429a      	cmp	r2, r3
 800f260:	d003      	beq.n	800f26a <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f262:	686b      	ldr	r3, [r5, #4]
 800f264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f266:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f26a:	1d27      	adds	r7, r4, #4
 800f26c:	0038      	movs	r0, r7
 800f26e:	f7ff f831 	bl	800e2d4 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f272:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxTCB );
 800f274:	69aa      	ldr	r2, [r5, #24]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f278:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d900      	bls.n	800f280 <vTaskPriorityInherit+0x50>
 800f27e:	61ab      	str	r3, [r5, #24]
 800f280:	0098      	lsls	r0, r3, #2
 800f282:	18c0      	adds	r0, r0, r3
 800f284:	0080      	lsls	r0, r0, #2
 800f286:	1830      	adds	r0, r6, r0
 800f288:	0039      	movs	r1, r7
 800f28a:	f7fe ffff 	bl	800e28c <vListInsertEnd>
	}
 800f28e:	e7eb      	b.n	800f268 <vTaskPriorityInherit+0x38>
 800f290:	200026fc 	.word	0x200026fc
 800f294:	20002798 	.word	0x20002798

0800f298 <xTaskPriorityDisinherit>:
	{
 800f298:	b570      	push	{r4, r5, r6, lr}
 800f29a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f29c:	d008      	beq.n	800f2b0 <xTaskPriorityDisinherit+0x18>
			( pxTCB->uxMutexesHeld )--;
 800f29e:	6d03      	ldr	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f2a0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f2a2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800f2a4:	3b01      	subs	r3, #1
 800f2a6:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f2a8:	428a      	cmp	r2, r1
 800f2aa:	d001      	beq.n	800f2b0 <xTaskPriorityDisinherit+0x18>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d001      	beq.n	800f2b4 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800f2b0:	2000      	movs	r0, #0
	}
 800f2b2:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f2b4:	1d05      	adds	r5, r0, #4
 800f2b6:	0028      	movs	r0, r5
 800f2b8:	f7ff f80c 	bl	800e2d4 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2bc:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f2be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2c0:	1ad2      	subs	r2, r2, r3
 800f2c2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f2c4:	4a07      	ldr	r2, [pc, #28]	; (800f2e4 <xTaskPriorityDisinherit+0x4c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f2c6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f2c8:	6991      	ldr	r1, [r2, #24]
 800f2ca:	428b      	cmp	r3, r1
 800f2cc:	d900      	bls.n	800f2d0 <xTaskPriorityDisinherit+0x38>
 800f2ce:	6193      	str	r3, [r2, #24]
 800f2d0:	0098      	lsls	r0, r3, #2
 800f2d2:	18c0      	adds	r0, r0, r3
 800f2d4:	4b04      	ldr	r3, [pc, #16]	; (800f2e8 <xTaskPriorityDisinherit+0x50>)
 800f2d6:	0080      	lsls	r0, r0, #2
 800f2d8:	18c0      	adds	r0, r0, r3
 800f2da:	0029      	movs	r1, r5
 800f2dc:	f7fe ffd6 	bl	800e28c <vListInsertEnd>
					xReturn = pdTRUE;
 800f2e0:	2001      	movs	r0, #1
		return xReturn;
 800f2e2:	e7e6      	b.n	800f2b2 <xTaskPriorityDisinherit+0x1a>
 800f2e4:	200026fc 	.word	0x200026fc
 800f2e8:	20002798 	.word	0x20002798

0800f2ec <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2ee:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f2f0:	2600      	movs	r6, #0
	{
 800f2f2:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f2f4:	4b27      	ldr	r3, [pc, #156]	; (800f394 <vTaskList+0xa8>)
	{
 800f2f6:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800f2f8:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800f2fa:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800f2fc:	9202      	str	r2, [sp, #8]
	{
 800f2fe:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f300:	69d8      	ldr	r0, [r3, #28]
 800f302:	0140      	lsls	r0, r0, #5
 800f304:	f000 fbde 	bl	800fac4 <pvPortMalloc>
 800f308:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800f30a:	d03f      	beq.n	800f38c <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f30c:	2200      	movs	r2, #0
 800f30e:	9902      	ldr	r1, [sp, #8]
 800f310:	f7ff fe5e 	bl	800efd0 <uxTaskGetSystemState>
 800f314:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f316:	9603      	str	r6, [sp, #12]
 800f318:	9b03      	ldr	r3, [sp, #12]
 800f31a:	9a02      	ldr	r2, [sp, #8]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d932      	bls.n	800f386 <vTaskList+0x9a>
 800f320:	4b1d      	ldr	r3, [pc, #116]	; (800f398 <vTaskList+0xac>)
 800f322:	4e1e      	ldr	r6, [pc, #120]	; (800f39c <vTaskList+0xb0>)
 800f324:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f326:	9b03      	ldr	r3, [sp, #12]
 800f328:	2700      	movs	r7, #0
 800f32a:	015b      	lsls	r3, r3, #5
 800f32c:	18eb      	adds	r3, r5, r3
 800f32e:	7b1b      	ldrb	r3, [r3, #12]
 800f330:	3b01      	subs	r3, #1
 800f332:	b2db      	uxtb	r3, r3
 800f334:	2b03      	cmp	r3, #3
 800f336:	d801      	bhi.n	800f33c <vTaskList+0x50>
 800f338:	4443      	add	r3, r8
 800f33a:	7d1f      	ldrb	r7, [r3, #20]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f33c:	9b03      	ldr	r3, [sp, #12]
 800f33e:	0020      	movs	r0, r4
 800f340:	015b      	lsls	r3, r3, #5
 800f342:	18eb      	adds	r3, r5, r3
 800f344:	6859      	ldr	r1, [r3, #4]
 800f346:	f7ff faad 	bl	800e8a4 <prvWriteNameToBuffer>
 800f34a:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f34c:	9b03      	ldr	r3, [sp, #12]
 800f34e:	9a03      	ldr	r2, [sp, #12]
 800f350:	9903      	ldr	r1, [sp, #12]
 800f352:	015b      	lsls	r3, r3, #5
 800f354:	0149      	lsls	r1, r1, #5
 800f356:	1869      	adds	r1, r5, r1
 800f358:	6889      	ldr	r1, [r1, #8]
 800f35a:	18eb      	adds	r3, r5, r3
 800f35c:	0152      	lsls	r2, r2, #5
 800f35e:	691b      	ldr	r3, [r3, #16]
 800f360:	18aa      	adds	r2, r5, r2
 800f362:	9101      	str	r1, [sp, #4]
 800f364:	8b92      	ldrh	r2, [r2, #28]
 800f366:	0031      	movs	r1, r6
 800f368:	9200      	str	r2, [sp, #0]
 800f36a:	003a      	movs	r2, r7
 800f36c:	f004 fd1e 	bl	8013dac <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f370:	0020      	movs	r0, r4
 800f372:	f7f0 fed1 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800f376:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f378:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800f37a:	3301      	adds	r3, #1
 800f37c:	9303      	str	r3, [sp, #12]
 800f37e:	9a03      	ldr	r2, [sp, #12]
 800f380:	9b02      	ldr	r3, [sp, #8]
 800f382:	429a      	cmp	r2, r3
 800f384:	d3cf      	bcc.n	800f326 <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f386:	0028      	movs	r0, r5
 800f388:	f000 fc12 	bl	800fbb0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f38c:	b004      	add	sp, #16
 800f38e:	bc04      	pop	{r2}
 800f390:	4690      	mov	r8, r2
 800f392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f394:	200026fc 	.word	0x200026fc
 800f398:	0801884c 	.word	0x0801884c
 800f39c:	0801b868 	.word	0x0801b868

0800f3a0 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3a2:	46c6      	mov	lr, r8
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f3a4:	2600      	movs	r6, #0
	{
 800f3a6:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f3a8:	4b28      	ldr	r3, [pc, #160]	; (800f44c <vTaskGetRunTimeStats+0xac>)
	{
 800f3aa:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800f3ac:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800f3ae:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800f3b0:	9201      	str	r2, [sp, #4]
	{
 800f3b2:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f3b4:	69d8      	ldr	r0, [r3, #28]
 800f3b6:	0140      	lsls	r0, r0, #5
 800f3b8:	f000 fb84 	bl	800fac4 <pvPortMalloc>
 800f3bc:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800f3be:	d040      	beq.n	800f442 <vTaskGetRunTimeStats+0xa2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f3c0:	9901      	ldr	r1, [sp, #4]
 800f3c2:	aa03      	add	r2, sp, #12
 800f3c4:	f7ff fe04 	bl	800efd0 <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f3c8:	2164      	movs	r1, #100	; 0x64
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f3ca:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800f3cc:	9803      	ldr	r0, [sp, #12]
 800f3ce:	f7f0 febf 	bl	8000150 <__udivsi3>
 800f3d2:	1e01      	subs	r1, r0, #0
 800f3d4:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800f3d6:	d031      	beq.n	800f43c <vTaskGetRunTimeStats+0x9c>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f3d8:	9602      	str	r6, [sp, #8]
 800f3da:	9b02      	ldr	r3, [sp, #8]
 800f3dc:	9a01      	ldr	r2, [sp, #4]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d92c      	bls.n	800f43c <vTaskGetRunTimeStats+0x9c>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f3e2:	4b1b      	ldr	r3, [pc, #108]	; (800f450 <vTaskGetRunTimeStats+0xb0>)
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f3e4:	4f1b      	ldr	r7, [pc, #108]	; (800f454 <vTaskGetRunTimeStats+0xb4>)
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f3e6:	4698      	mov	r8, r3
 800f3e8:	e00f      	b.n	800f40a <vTaskGetRunTimeStats+0x6a>
 800f3ea:	0033      	movs	r3, r6
 800f3ec:	4641      	mov	r1, r8
 800f3ee:	f004 fcdd 	bl	8013dac <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800f3f2:	0020      	movs	r0, r4
 800f3f4:	f7f0 fe90 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800f3f8:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800f3fa:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	9302      	str	r3, [sp, #8]
 800f400:	9a02      	ldr	r2, [sp, #8]
 800f402:	9b01      	ldr	r3, [sp, #4]
 800f404:	429a      	cmp	r2, r3
 800f406:	d219      	bcs.n	800f43c <vTaskGetRunTimeStats+0x9c>
 800f408:	9903      	ldr	r1, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f40a:	9b02      	ldr	r3, [sp, #8]
 800f40c:	015b      	lsls	r3, r3, #5
 800f40e:	18eb      	adds	r3, r5, r3
 800f410:	6998      	ldr	r0, [r3, #24]
 800f412:	f7f0 fe9d 	bl	8000150 <__udivsi3>
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f416:	9b02      	ldr	r3, [sp, #8]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f418:	0006      	movs	r6, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f41a:	015b      	lsls	r3, r3, #5
 800f41c:	18eb      	adds	r3, r5, r3
 800f41e:	6859      	ldr	r1, [r3, #4]
 800f420:	0020      	movs	r0, r4
 800f422:	f7ff fa3f 	bl	800e8a4 <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f426:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f428:	0004      	movs	r4, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f42a:	015b      	lsls	r3, r3, #5
 800f42c:	18eb      	adds	r3, r5, r3
 800f42e:	699a      	ldr	r2, [r3, #24]
					if( ulStatsAsPercentage > 0UL )
 800f430:	2e00      	cmp	r6, #0
 800f432:	d1da      	bne.n	800f3ea <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f434:	0039      	movs	r1, r7
 800f436:	f004 fcb9 	bl	8013dac <sprintf>
 800f43a:	e7da      	b.n	800f3f2 <vTaskGetRunTimeStats+0x52>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f43c:	0028      	movs	r0, r5
 800f43e:	f000 fbb7 	bl	800fbb0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f442:	b004      	add	sp, #16
 800f444:	bc04      	pop	{r2}
 800f446:	4690      	mov	r8, r2
 800f448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f44a:	46c0      	nop			; (mov r8, r8)
 800f44c:	200026fc 	.word	0x200026fc
 800f450:	0801b878 	.word	0x0801b878
 800f454:	0801b884 	.word	0x0801b884

0800f458 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f458:	4b04      	ldr	r3, [pc, #16]	; (800f46c <pvTaskIncrementMutexHeldCount+0x14>)
 800f45a:	685a      	ldr	r2, [r3, #4]
 800f45c:	2a00      	cmp	r2, #0
 800f45e:	d003      	beq.n	800f468 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f460:	6859      	ldr	r1, [r3, #4]
 800f462:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f464:	3201      	adds	r2, #1
 800f466:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f468:	6858      	ldr	r0, [r3, #4]
	}
 800f46a:	4770      	bx	lr
 800f46c:	200026fc 	.word	0x200026fc

0800f470 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f470:	b570      	push	{r4, r5, r6, lr}
 800f472:	0006      	movs	r6, r0
 800f474:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f476:	f000 faab 	bl	800f9d0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f47a:	4c1c      	ldr	r4, [pc, #112]	; (800f4ec <ulTaskNotifyTake+0x7c>)
 800f47c:	6863      	ldr	r3, [r4, #4]
 800f47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f480:	2b00      	cmp	r3, #0
 800f482:	d105      	bne.n	800f490 <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f484:	2101      	movs	r1, #1
 800f486:	6862      	ldr	r2, [r4, #4]
 800f488:	335c      	adds	r3, #92	; 0x5c
 800f48a:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f48c:	2d00      	cmp	r5, #0
 800f48e:	d119      	bne.n	800f4c4 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f490:	f000 faaa 	bl	800f9e8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f494:	f000 fa9c 	bl	800f9d0 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f498:	6863      	ldr	r3, [r4, #4]
 800f49a:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f49c:	2d00      	cmp	r5, #0
 800f49e:	d005      	beq.n	800f4ac <ulTaskNotifyTake+0x3c>
			{
				if( xClearCountOnExit != pdFALSE )
 800f4a0:	2e00      	cmp	r6, #0
 800f4a2:	d10b      	bne.n	800f4bc <ulTaskNotifyTake+0x4c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800f4a4:	6862      	ldr	r2, [r4, #4]
 800f4a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f4ac:	235c      	movs	r3, #92	; 0x5c
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	6862      	ldr	r2, [r4, #4]
 800f4b2:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800f4b4:	f000 fa98 	bl	800f9e8 <vPortExitCritical>

		return ulReturn;
	}
 800f4b8:	0028      	movs	r0, r5
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f4bc:	2200      	movs	r2, #0
 800f4be:	6863      	ldr	r3, [r4, #4]
 800f4c0:	659a      	str	r2, [r3, #88]	; 0x58
 800f4c2:	e7f3      	b.n	800f4ac <ulTaskNotifyTake+0x3c>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f4c4:	6860      	ldr	r0, [r4, #4]
 800f4c6:	3004      	adds	r0, #4
 800f4c8:	f7fe ff04 	bl	800e2d4 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800f4cc:	1c6b      	adds	r3, r5, #1
 800f4ce:	d006      	beq.n	800f4de <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800f4d0:	68a0      	ldr	r0, [r4, #8]
 800f4d2:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f4d4:	f7ff fa5e 	bl	800e994 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f4d8:	f000 fa6e 	bl	800f9b8 <vPortYield>
 800f4dc:	e7d8      	b.n	800f490 <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f4de:	0020      	movs	r0, r4
 800f4e0:	6861      	ldr	r1, [r4, #4]
 800f4e2:	3070      	adds	r0, #112	; 0x70
 800f4e4:	3104      	adds	r1, #4
 800f4e6:	f7fe fed1 	bl	800e28c <vListInsertEnd>
 800f4ea:	e7f5      	b.n	800f4d8 <ulTaskNotifyTake+0x68>
 800f4ec:	200026fc 	.word	0x200026fc

0800f4f0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f2:	001e      	movs	r6, r3
 800f4f4:	0004      	movs	r4, r0
 800f4f6:	000f      	movs	r7, r1
 800f4f8:	0015      	movs	r5, r2
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800f4fa:	f000 fa69 	bl	800f9d0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f4fe:	2e00      	cmp	r6, #0
 800f500:	d001      	beq.n	800f506 <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f504:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f506:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800f508:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800f50a:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 800f50c:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800f50e:	b2db      	uxtb	r3, r3

			switch( eAction )
 800f510:	2d02      	cmp	r5, #2
 800f512:	d02e      	beq.n	800f572 <xTaskGenericNotify+0x82>
 800f514:	d927      	bls.n	800f566 <xTaskGenericNotify+0x76>
 800f516:	2d03      	cmp	r5, #3
 800f518:	d003      	beq.n	800f522 <xTaskGenericNotify+0x32>
 800f51a:	2d04      	cmp	r5, #4
 800f51c:	d102      	bne.n	800f524 <xTaskGenericNotify+0x34>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800f51e:	2b02      	cmp	r3, #2
 800f520:	d02b      	beq.n	800f57a <xTaskGenericNotify+0x8a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f522:	65a7      	str	r7, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f524:	2b01      	cmp	r3, #1
 800f526:	d004      	beq.n	800f532 <xTaskGenericNotify+0x42>
 800f528:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f52a:	f000 fa5d 	bl	800f9e8 <vPortExitCritical>

		return xReturn;
	}
 800f52e:	0020      	movs	r0, r4
 800f530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f532:	1d26      	adds	r6, r4, #4
 800f534:	0030      	movs	r0, r6
 800f536:	f7fe fecd 	bl	800e2d4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f53a:	4d11      	ldr	r5, [pc, #68]	; (800f580 <xTaskGenericNotify+0x90>)
 800f53c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f53e:	69aa      	ldr	r2, [r5, #24]
 800f540:	4293      	cmp	r3, r2
 800f542:	d900      	bls.n	800f546 <xTaskGenericNotify+0x56>
 800f544:	61ab      	str	r3, [r5, #24]
 800f546:	0098      	lsls	r0, r3, #2
 800f548:	18c0      	adds	r0, r0, r3
 800f54a:	4b0e      	ldr	r3, [pc, #56]	; (800f584 <xTaskGenericNotify+0x94>)
 800f54c:	0080      	lsls	r0, r0, #2
 800f54e:	18c0      	adds	r0, r0, r3
 800f550:	0031      	movs	r1, r6
 800f552:	f7fe fe9b 	bl	800e28c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f556:	686b      	ldr	r3, [r5, #4]
 800f558:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d9e3      	bls.n	800f528 <xTaskGenericNotify+0x38>
					taskYIELD_IF_USING_PREEMPTION();
 800f560:	f000 fa2a 	bl	800f9b8 <vPortYield>
 800f564:	e7e0      	b.n	800f528 <xTaskGenericNotify+0x38>
			switch( eAction )
 800f566:	2d01      	cmp	r5, #1
 800f568:	d1dc      	bne.n	800f524 <xTaskGenericNotify+0x34>
					pxTCB->ulNotifiedValue |= ulValue;
 800f56a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f56c:	4317      	orrs	r7, r2
 800f56e:	65a7      	str	r7, [r4, #88]	; 0x58
					break;
 800f570:	e7d8      	b.n	800f524 <xTaskGenericNotify+0x34>
					( pxTCB->ulNotifiedValue )++;
 800f572:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f574:	3201      	adds	r2, #1
 800f576:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800f578:	e7d4      	b.n	800f524 <xTaskGenericNotify+0x34>
						xReturn = pdFAIL;
 800f57a:	2400      	movs	r4, #0
 800f57c:	e7d5      	b.n	800f52a <xTaskGenericNotify+0x3a>
 800f57e:	46c0      	nop			; (mov r8, r8)
 800f580:	200026fc 	.word	0x200026fc
 800f584:	20002798 	.word	0x20002798

0800f588 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f588:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f58a:	f000 fa21 	bl	800f9d0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f58e:	4c0f      	ldr	r4, [pc, #60]	; (800f5cc <prvCheckForValidListAndQueue+0x44>)
 800f590:	6823      	ldr	r3, [r4, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d002      	beq.n	800f59c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f596:	f000 fa27 	bl	800f9e8 <vPortExitCritical>
}
 800f59a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800f59c:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800f59e:	1d26      	adds	r6, r4, #4
 800f5a0:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800f5a2:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800f5a4:	f7fe fe62 	bl	800e26c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f5a8:	0028      	movs	r0, r5
 800f5aa:	f7fe fe5f 	bl	800e26c <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	2110      	movs	r1, #16
 800f5b2:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800f5b4:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800f5b6:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f5b8:	f7fe ff6a 	bl	800e490 <xQueueGenericCreate>
 800f5bc:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	d0e9      	beq.n	800f596 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f5c2:	4903      	ldr	r1, [pc, #12]	; (800f5d0 <prvCheckForValidListAndQueue+0x48>)
 800f5c4:	f7ff f93e 	bl	800e844 <vQueueAddToRegistry>
 800f5c8:	e7e5      	b.n	800f596 <prvCheckForValidListAndQueue+0xe>
 800f5ca:	46c0      	nop			; (mov r8, r8)
 800f5cc:	20002824 	.word	0x20002824
 800f5d0:	0801b890 	.word	0x0801b890

0800f5d4 <prvInsertTimerInActiveList>:
{
 800f5d4:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f5d6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5d8:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800f5da:	4291      	cmp	r1, r2
 800f5dc:	d806      	bhi.n	800f5ec <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f5de:	1ad2      	subs	r2, r2, r3
 800f5e0:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800f5e2:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d30d      	bcc.n	800f604 <prvInsertTimerInActiveList+0x30>
}
 800f5e8:	0020      	movs	r0, r4
 800f5ea:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d202      	bcs.n	800f5f6 <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 800f5f0:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f5f2:	4299      	cmp	r1, r3
 800f5f4:	d2f8      	bcs.n	800f5e8 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f5f6:	4b07      	ldr	r3, [pc, #28]	; (800f614 <prvInsertTimerInActiveList+0x40>)
 800f5f8:	1d01      	adds	r1, r0, #4
 800f5fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f5fc:	f7fe fe52 	bl	800e2a4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f600:	2400      	movs	r4, #0
 800f602:	e7f1      	b.n	800f5e8 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f604:	4b03      	ldr	r3, [pc, #12]	; (800f614 <prvInsertTimerInActiveList+0x40>)
 800f606:	1d01      	adds	r1, r0, #4
 800f608:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f60a:	f7fe fe4b 	bl	800e2a4 <vListInsert>
 800f60e:	2400      	movs	r4, #0
 800f610:	e7ea      	b.n	800f5e8 <prvInsertTimerInActiveList+0x14>
 800f612:	46c0      	nop			; (mov r8, r8)
 800f614:	20002824 	.word	0x20002824

0800f618 <xTimerCreateTimerTask>:
{
 800f618:	b500      	push	{lr}
 800f61a:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f61c:	f7ff ffb4 	bl	800f588 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f620:	4b08      	ldr	r3, [pc, #32]	; (800f644 <xTimerCreateTimerTask+0x2c>)
BaseType_t xReturn = pdFAIL;
 800f622:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00a      	beq.n	800f640 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f62a:	2303      	movs	r3, #3
 800f62c:	9003      	str	r0, [sp, #12]
 800f62e:	9002      	str	r0, [sp, #8]
 800f630:	9001      	str	r0, [sp, #4]
 800f632:	9300      	str	r3, [sp, #0]
 800f634:	2296      	movs	r2, #150	; 0x96
 800f636:	2300      	movs	r3, #0
 800f638:	4903      	ldr	r1, [pc, #12]	; (800f648 <xTimerCreateTimerTask+0x30>)
 800f63a:	4804      	ldr	r0, [pc, #16]	; (800f64c <xTimerCreateTimerTask+0x34>)
 800f63c:	f7ff fa1e 	bl	800ea7c <xTaskGenericCreate>
}
 800f640:	b005      	add	sp, #20
 800f642:	bd00      	pop	{pc}
 800f644:	20002824 	.word	0x20002824
 800f648:	0801b898 	.word	0x0801b898
 800f64c:	0800f751 	.word	0x0800f751

0800f650 <xTimerCreate>:
{
 800f650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f652:	46c6      	mov	lr, r8
 800f654:	000d      	movs	r5, r1
 800f656:	b500      	push	{lr}
 800f658:	4680      	mov	r8, r0
 800f65a:	0017      	movs	r7, r2
 800f65c:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f65e:	2900      	cmp	r1, #0
 800f660:	d014      	beq.n	800f68c <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f662:	202c      	movs	r0, #44	; 0x2c
 800f664:	f000 fa2e 	bl	800fac4 <pvPortMalloc>
 800f668:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f66a:	d00b      	beq.n	800f684 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800f66c:	f7ff ff8c 	bl	800f588 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f670:	4643      	mov	r3, r8
 800f672:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f674:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f676:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f678:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f67a:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f67c:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f67e:	1d20      	adds	r0, r4, #4
 800f680:	f7fe fe00 	bl	800e284 <vListInitialiseItem>
}
 800f684:	0020      	movs	r0, r4
 800f686:	bc04      	pop	{r2}
 800f688:	4690      	mov	r8, r2
 800f68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTimer = NULL;
 800f68c:	2400      	movs	r4, #0
	return ( TimerHandle_t ) pxNewTimer;
 800f68e:	e7f9      	b.n	800f684 <xTimerCreate+0x34>

0800f690 <xTimerGenericCommand>:
{
 800f690:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800f692:	4d13      	ldr	r5, [pc, #76]	; (800f6e0 <xTimerGenericCommand+0x50>)
{
 800f694:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800f696:	682c      	ldr	r4, [r5, #0]
{
 800f698:	001e      	movs	r6, r3
	if( xTimerQueue != NULL )
 800f69a:	2c00      	cmp	r4, #0
 800f69c:	d017      	beq.n	800f6ce <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800f69e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f6a0:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f6a2:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f6a4:	2905      	cmp	r1, #5
 800f6a6:	dc0a      	bgt.n	800f6be <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f6a8:	f7ff fdb6 	bl	800f218 <xTaskGetSchedulerState>
 800f6ac:	2802      	cmp	r0, #2
 800f6ae:	d010      	beq.n	800f6d2 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f6b0:	6828      	ldr	r0, [r5, #0]
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	4669      	mov	r1, sp
 800f6b8:	f7fe ff16 	bl	800e4e8 <xQueueGenericSend>
 800f6bc:	e005      	b.n	800f6ca <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f6be:	2300      	movs	r3, #0
 800f6c0:	0032      	movs	r2, r6
 800f6c2:	4669      	mov	r1, sp
 800f6c4:	0020      	movs	r0, r4
 800f6c6:	f7fe ff8b 	bl	800e5e0 <xQueueGenericSendFromISR>
}
 800f6ca:	b004      	add	sp, #16
 800f6cc:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800f6ce:	2000      	movs	r0, #0
	return xReturn;
 800f6d0:	e7fb      	b.n	800f6ca <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f6d2:	6828      	ldr	r0, [r5, #0]
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	9a08      	ldr	r2, [sp, #32]
 800f6d8:	4669      	mov	r1, sp
 800f6da:	f7fe ff05 	bl	800e4e8 <xQueueGenericSend>
 800f6de:	e7f4      	b.n	800f6ca <xTimerGenericCommand+0x3a>
 800f6e0:	20002824 	.word	0x20002824

0800f6e4 <prvSwitchTimerLists>:
{
 800f6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6e6:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6e8:	2300      	movs	r3, #0
{
 800f6ea:	b500      	push	{lr}
 800f6ec:	4e17      	ldr	r6, [pc, #92]	; (800f74c <prvSwitchTimerLists+0x68>)
 800f6ee:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6f0:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6f2:	e00c      	b.n	800f70e <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6f4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6f6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6f8:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6fa:	1d25      	adds	r5, r4, #4
 800f6fc:	0028      	movs	r0, r5
 800f6fe:	f7fe fde9 	bl	800e2d4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f704:	0020      	movs	r0, r4
 800f706:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f708:	69e3      	ldr	r3, [r4, #28]
 800f70a:	2b01      	cmp	r3, #1
 800f70c:	d00a      	beq.n	800f724 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f70e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	2a00      	cmp	r2, #0
 800f714:	d1ee      	bne.n	800f6f4 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800f716:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800f718:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800f71a:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800f71c:	b002      	add	sp, #8
 800f71e:	bc04      	pop	{r2}
 800f720:	4690      	mov	r8, r2
 800f722:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f724:	69a3      	ldr	r3, [r4, #24]
 800f726:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800f728:	429f      	cmp	r7, r3
 800f72a:	d206      	bcs.n	800f73a <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f72c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f72e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f730:	0029      	movs	r1, r5
 800f732:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800f734:	f7fe fdb6 	bl	800e2a4 <vListInsert>
 800f738:	e7e9      	b.n	800f70e <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f73a:	4643      	mov	r3, r8
 800f73c:	003a      	movs	r2, r7
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	2100      	movs	r1, #0
 800f742:	2300      	movs	r3, #0
 800f744:	0020      	movs	r0, r4
 800f746:	f7ff ffa3 	bl	800f690 <xTimerGenericCommand>
 800f74a:	e7e0      	b.n	800f70e <prvSwitchTimerLists+0x2a>
 800f74c:	20002824 	.word	0x20002824

0800f750 <prvTimerTask>:
		xNextExpireTime = ( TickType_t ) 0U;
 800f750:	2300      	movs	r3, #0
{
 800f752:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f754:	4645      	mov	r5, r8
 800f756:	4657      	mov	r7, sl
 800f758:	46de      	mov	lr, fp
 800f75a:	464e      	mov	r6, r9
		xNextExpireTime = ( TickType_t ) 0U;
 800f75c:	4698      	mov	r8, r3
 800f75e:	3301      	adds	r3, #1
 800f760:	469a      	mov	sl, r3
{
 800f762:	b5e0      	push	{r5, r6, r7, lr}
 800f764:	4d61      	ldr	r5, [pc, #388]	; (800f8ec <prvTimerTask+0x19c>)
 800f766:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f768:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	2a00      	cmp	r2, #0
 800f76e:	d050      	beq.n	800f812 <prvTimerTask+0xc2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f770:	68db      	ldr	r3, [r3, #12]
 800f772:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800f774:	f7ff fae2 	bl	800ed3c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f778:	f7ff fae8 	bl	800ed4c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f77c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f77e:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f780:	4283      	cmp	r3, r0
 800f782:	d84e      	bhi.n	800f822 <prvTimerTask+0xd2>
	xLastTime = xTimeNow;
 800f784:	6368      	str	r0, [r5, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f786:	4286      	cmp	r6, r0
 800f788:	d961      	bls.n	800f84e <prvTimerTask+0xfe>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f78a:	1b31      	subs	r1, r6, r4
 800f78c:	6828      	ldr	r0, [r5, #0]
 800f78e:	f7ff f86b 	bl	800e868 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f792:	f7ff fb71 	bl	800ee78 <xTaskResumeAll>
 800f796:	2800      	cmp	r0, #0
 800f798:	d056      	beq.n	800f848 <prvTimerTask+0xf8>
 800f79a:	2784      	movs	r7, #132	; 0x84
 800f79c:	00bf      	lsls	r7, r7, #2
 800f79e:	23c7      	movs	r3, #199	; 0xc7
 800f7a0:	4699      	mov	r9, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	a904      	add	r1, sp, #16
 800f7a8:	6828      	ldr	r0, [r5, #0]
 800f7aa:	f7fe ff7b 	bl	800e6a4 <xQueueGenericReceive>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	d0da      	beq.n	800f768 <prvTimerTask+0x18>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f7b2:	9b04      	ldr	r3, [sp, #16]
 800f7b4:	9c06      	ldr	r4, [sp, #24]
 800f7b6:	9302      	str	r3, [sp, #8]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	da0b      	bge.n	800f7d4 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f7bc:	9b07      	ldr	r3, [sp, #28]
 800f7be:	0020      	movs	r0, r4
 800f7c0:	9302      	str	r3, [sp, #8]
 800f7c2:	9b05      	ldr	r3, [sp, #20]
 800f7c4:	9902      	ldr	r1, [sp, #8]
 800f7c6:	9303      	str	r3, [sp, #12]
 800f7c8:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f7ca:	9b04      	ldr	r3, [sp, #16]
 800f7cc:	9302      	str	r3, [sp, #8]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	dbe7      	blt.n	800f7a2 <prvTimerTask+0x52>
 800f7d2:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f7d4:	6963      	ldr	r3, [r4, #20]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d002      	beq.n	800f7e0 <prvTimerTask+0x90>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7da:	1d20      	adds	r0, r4, #4
 800f7dc:	f7fe fd7a 	bl	800e2d4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800f7e0:	f7ff fab4 	bl	800ed4c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f7e4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f7e6:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 800f7e8:	4298      	cmp	r0, r3
 800f7ea:	d320      	bcc.n	800f82e <prvTimerTask+0xde>
 800f7ec:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800f7ee:	636e      	str	r6, [r5, #52]	; 0x34
 800f7f0:	2b09      	cmp	r3, #9
 800f7f2:	d8d6      	bhi.n	800f7a2 <prvTimerTask+0x52>
 800f7f4:	4652      	mov	r2, sl
 800f7f6:	409a      	lsls	r2, r3
 800f7f8:	0013      	movs	r3, r2
 800f7fa:	403a      	ands	r2, r7
 800f7fc:	4693      	mov	fp, r2
 800f7fe:	d16b      	bne.n	800f8d8 <prvTimerTask+0x188>
 800f800:	464a      	mov	r2, r9
 800f802:	421a      	tst	r2, r3
 800f804:	d144      	bne.n	800f890 <prvTimerTask+0x140>
 800f806:	069b      	lsls	r3, r3, #26
 800f808:	d5cb      	bpl.n	800f7a2 <prvTimerTask+0x52>
					vPortFree( pxTimer );
 800f80a:	0020      	movs	r0, r4
 800f80c:	f000 f9d0 	bl	800fbb0 <vPortFree>
 800f810:	e7c5      	b.n	800f79e <prvTimerTask+0x4e>
	vTaskSuspendAll();
 800f812:	f7ff fa93 	bl	800ed3c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f816:	f7ff fa99 	bl	800ed4c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f81a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f81c:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f81e:	4283      	cmp	r3, r0
 800f820:	d908      	bls.n	800f834 <prvTimerTask+0xe4>
		prvSwitchTimerLists();
 800f822:	f7ff ff5f 	bl	800f6e4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800f826:	636c      	str	r4, [r5, #52]	; 0x34
			( void ) xTaskResumeAll();
 800f828:	f7ff fb26 	bl	800ee78 <xTaskResumeAll>
 800f82c:	e7b5      	b.n	800f79a <prvTimerTask+0x4a>
		prvSwitchTimerLists();
 800f82e:	f7ff ff59 	bl	800f6e4 <prvSwitchTimerLists>
 800f832:	e7db      	b.n	800f7ec <prvTimerTask+0x9c>
		xNextExpireTime = ( TickType_t ) 0U;
 800f834:	2600      	movs	r6, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f836:	6828      	ldr	r0, [r5, #0]
 800f838:	1b31      	subs	r1, r6, r4
	xLastTime = xTimeNow;
 800f83a:	636c      	str	r4, [r5, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f83c:	f7ff f814 	bl	800e868 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f840:	f7ff fb1a 	bl	800ee78 <xTaskResumeAll>
 800f844:	2800      	cmp	r0, #0
 800f846:	d1a8      	bne.n	800f79a <prvTimerTask+0x4a>
					portYIELD_WITHIN_API();
 800f848:	f000 f8b6 	bl	800f9b8 <vPortYield>
 800f84c:	e7a5      	b.n	800f79a <prvTimerTask+0x4a>
				( void ) xTaskResumeAll();
 800f84e:	f7ff fb13 	bl	800ee78 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f852:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f858:	1d38      	adds	r0, r7, #4
 800f85a:	f7fe fd3b 	bl	800e2d4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	2b01      	cmp	r3, #1
 800f862:	d003      	beq.n	800f86c <prvTimerTask+0x11c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f866:	0038      	movs	r0, r7
 800f868:	4798      	blx	r3
 800f86a:	e796      	b.n	800f79a <prvTimerTask+0x4a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f86c:	69bb      	ldr	r3, [r7, #24]
 800f86e:	0022      	movs	r2, r4
 800f870:	18f1      	adds	r1, r6, r3
 800f872:	0038      	movs	r0, r7
 800f874:	0033      	movs	r3, r6
 800f876:	f7ff fead 	bl	800f5d4 <prvInsertTimerInActiveList>
 800f87a:	2801      	cmp	r0, #1
 800f87c:	d1f2      	bne.n	800f864 <prvTimerTask+0x114>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f87e:	4643      	mov	r3, r8
 800f880:	0032      	movs	r2, r6
 800f882:	9300      	str	r3, [sp, #0]
 800f884:	2100      	movs	r1, #0
 800f886:	2300      	movs	r3, #0
 800f888:	0038      	movs	r0, r7
 800f88a:	f7ff ff01 	bl	800f690 <xTimerGenericCommand>
 800f88e:	e7e9      	b.n	800f864 <prvTimerTask+0x114>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f890:	9b05      	ldr	r3, [sp, #20]
 800f892:	0020      	movs	r0, r4
 800f894:	9302      	str	r3, [sp, #8]
 800f896:	9a02      	ldr	r2, [sp, #8]
 800f898:	69a3      	ldr	r3, [r4, #24]
 800f89a:	4694      	mov	ip, r2
 800f89c:	4463      	add	r3, ip
 800f89e:	0019      	movs	r1, r3
 800f8a0:	0013      	movs	r3, r2
 800f8a2:	0032      	movs	r2, r6
 800f8a4:	f7ff fe96 	bl	800f5d4 <prvInsertTimerInActiveList>
 800f8a8:	2801      	cmp	r0, #1
 800f8aa:	d000      	beq.n	800f8ae <prvTimerTask+0x15e>
 800f8ac:	e777      	b.n	800f79e <prvTimerTask+0x4e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8b0:	0020      	movs	r0, r4
 800f8b2:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f8b4:	69e3      	ldr	r3, [r4, #28]
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	d000      	beq.n	800f8bc <prvTimerTask+0x16c>
 800f8ba:	e770      	b.n	800f79e <prvTimerTask+0x4e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f8bc:	69a1      	ldr	r1, [r4, #24]
 800f8be:	9b05      	ldr	r3, [sp, #20]
 800f8c0:	468c      	mov	ip, r1
 800f8c2:	9302      	str	r3, [sp, #8]
 800f8c4:	4463      	add	r3, ip
 800f8c6:	001a      	movs	r2, r3
 800f8c8:	465b      	mov	r3, fp
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	9300      	str	r3, [sp, #0]
 800f8ce:	0020      	movs	r0, r4
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	f7ff fedd 	bl	800f690 <xTimerGenericCommand>
 800f8d6:	e762      	b.n	800f79e <prvTimerTask+0x4e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f8d8:	9905      	ldr	r1, [sp, #20]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f8da:	0033      	movs	r3, r6
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f8dc:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f8de:	0032      	movs	r2, r6
 800f8e0:	1989      	adds	r1, r1, r6
 800f8e2:	0020      	movs	r0, r4
 800f8e4:	f7ff fe76 	bl	800f5d4 <prvInsertTimerInActiveList>
 800f8e8:	e759      	b.n	800f79e <prvTimerTask+0x4e>
 800f8ea:	46c0      	nop			; (mov r8, r8)
 800f8ec:	20002824 	.word	0x20002824

0800f8f0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800f8f0:	b510      	push	{r4, lr}
 800f8f2:	0004      	movs	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800f8f4:	f000 f86c 	bl	800f9d0 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800f8f8:	6964      	ldr	r4, [r4, #20]
 800f8fa:	1e63      	subs	r3, r4, #1
 800f8fc:	419c      	sbcs	r4, r3
	}
	taskEXIT_CRITICAL();
 800f8fe:	f000 f873 	bl	800f9e8 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800f902:	0020      	movs	r0, r4
 800f904:	bd10      	pop	{r4, pc}
 800f906:	46c0      	nop			; (mov r8, r8)

0800f908 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f908:	b510      	push	{r4, lr}
 800f90a:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800f90c:	f000 f860 	bl	800f9d0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f910:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f912:	f000 f869 	bl	800f9e8 <vPortExitCritical>

	return pvReturn;
}
 800f916:	0020      	movs	r0, r4
 800f918:	bd10      	pop	{r4, pc}
 800f91a:	46c0      	nop			; (mov r8, r8)

0800f91c <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800f91c:	b672      	cpsid	i
 800f91e:	e7fe      	b.n	800f91e <prvTaskExitError+0x2>

0800f920 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f920:	4a06      	ldr	r2, [pc, #24]	; (800f93c <pxCurrentTCBConst2>)
 800f922:	6813      	ldr	r3, [r2, #0]
 800f924:	6818      	ldr	r0, [r3, #0]
 800f926:	3020      	adds	r0, #32
 800f928:	f380 8809 	msr	PSP, r0
 800f92c:	2002      	movs	r0, #2
 800f92e:	f380 8814 	msr	CONTROL, r0
 800f932:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f934:	46ae      	mov	lr, r5
 800f936:	b662      	cpsie	i
 800f938:	bd00      	pop	{pc}
 800f93a:	46c0      	nop			; (mov r8, r8)

0800f93c <pxCurrentTCBConst2>:
 800f93c:	20002700 	.word	0x20002700

0800f940 <pxPortInitialiseStack>:
{
 800f940:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f942:	2480      	movs	r4, #128	; 0x80
 800f944:	1f03      	subs	r3, r0, #4
 800f946:	0464      	lsls	r4, r4, #17
 800f948:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f94a:	3b04      	subs	r3, #4
 800f94c:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f94e:	4903      	ldr	r1, [pc, #12]	; (800f95c <pxPortInitialiseStack+0x1c>)
 800f950:	3b04      	subs	r3, #4
 800f952:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f954:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800f956:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f958:	601a      	str	r2, [r3, #0]
}
 800f95a:	bd10      	pop	{r4, pc}
 800f95c:	0800f91d 	.word	0x0800f91d

0800f960 <SVC_Handler>:
 800f960:	4770      	bx	lr
 800f962:	46c0      	nop			; (mov r8, r8)

0800f964 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f964:	22ff      	movs	r2, #255	; 0xff
 800f966:	4b0f      	ldr	r3, [pc, #60]	; (800f9a4 <xPortStartScheduler+0x40>)
 800f968:	0412      	lsls	r2, r2, #16
 800f96a:	6819      	ldr	r1, [r3, #0]
{
 800f96c:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f96e:	430a      	orrs	r2, r1
 800f970:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f972:	22ff      	movs	r2, #255	; 0xff
 800f974:	6819      	ldr	r1, [r3, #0]
 800f976:	0612      	lsls	r2, r2, #24
 800f978:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f97a:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f97c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f97e:	4b0a      	ldr	r3, [pc, #40]	; (800f9a8 <xPortStartScheduler+0x44>)
 800f980:	0089      	lsls	r1, r1, #2
 800f982:	6818      	ldr	r0, [r3, #0]
 800f984:	f7f0 fbe4 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f988:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f98a:	4b08      	ldr	r3, [pc, #32]	; (800f9ac <xPortStartScheduler+0x48>)
 800f98c:	3801      	subs	r0, #1
 800f98e:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f990:	4b07      	ldr	r3, [pc, #28]	; (800f9b0 <xPortStartScheduler+0x4c>)
 800f992:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f994:	2200      	movs	r2, #0
 800f996:	4b07      	ldr	r3, [pc, #28]	; (800f9b4 <xPortStartScheduler+0x50>)
 800f998:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f99a:	f7ff ffc1 	bl	800f920 <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 800f99e:	b672      	cpsid	i
 800f9a0:	e7fe      	b.n	800f9a0 <xPortStartScheduler+0x3c>
 800f9a2:	46c0      	nop			; (mov r8, r8)
 800f9a4:	e000ed20 	.word	0xe000ed20
 800f9a8:	200000c4 	.word	0x200000c4
 800f9ac:	e000e014 	.word	0xe000e014
 800f9b0:	e000e010 	.word	0xe000e010
 800f9b4:	200000d8 	.word	0x200000d8

0800f9b8 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f9b8:	2280      	movs	r2, #128	; 0x80
 800f9ba:	4b04      	ldr	r3, [pc, #16]	; (800f9cc <vPortYield+0x14>)
 800f9bc:	0552      	lsls	r2, r2, #21
 800f9be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f9c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f9c4:	f3bf 8f6f 	isb	sy
}
 800f9c8:	4770      	bx	lr
 800f9ca:	46c0      	nop			; (mov r8, r8)
 800f9cc:	e000ed04 	.word	0xe000ed04

0800f9d0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f9d0:	b672      	cpsid	i
    uxCriticalNesting++;
 800f9d2:	4a04      	ldr	r2, [pc, #16]	; (800f9e4 <vPortEnterCritical+0x14>)
 800f9d4:	6813      	ldr	r3, [r2, #0]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f9da:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f9de:	f3bf 8f6f 	isb	sy
}
 800f9e2:	4770      	bx	lr
 800f9e4:	200000d8 	.word	0x200000d8

0800f9e8 <vPortExitCritical>:
    uxCriticalNesting--;
 800f9e8:	4a03      	ldr	r2, [pc, #12]	; (800f9f8 <vPortExitCritical+0x10>)
 800f9ea:	6813      	ldr	r3, [r2, #0]
 800f9ec:	3b01      	subs	r3, #1
 800f9ee:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d100      	bne.n	800f9f6 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800f9f4:	b662      	cpsie	i
}
 800f9f6:	4770      	bx	lr
 800f9f8:	200000d8 	.word	0x200000d8

0800f9fc <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f9fc:	f3ef 8010 	mrs	r0, PRIMASK
 800fa00:	b672      	cpsid	i
 800fa02:	4770      	bx	lr
}
 800fa04:	2000      	movs	r0, #0
 800fa06:	46c0      	nop			; (mov r8, r8)

0800fa08 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800fa08:	f380 8810 	msr	PRIMASK, r0
 800fa0c:	4770      	bx	lr
 800fa0e:	46c0      	nop			; (mov r8, r8)

0800fa10 <PendSV_Handler>:
	__asm volatile
 800fa10:	f3ef 8009 	mrs	r0, PSP
 800fa14:	4b0e      	ldr	r3, [pc, #56]	; (800fa50 <pxCurrentTCBConst>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	3820      	subs	r0, #32
 800fa1a:	6010      	str	r0, [r2, #0]
 800fa1c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800fa1e:	4644      	mov	r4, r8
 800fa20:	464d      	mov	r5, r9
 800fa22:	4656      	mov	r6, sl
 800fa24:	465f      	mov	r7, fp
 800fa26:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800fa28:	b508      	push	{r3, lr}
 800fa2a:	b672      	cpsid	i
 800fa2c:	f7ff fb42 	bl	800f0b4 <vTaskSwitchContext>
 800fa30:	b662      	cpsie	i
 800fa32:	bc0c      	pop	{r2, r3}
 800fa34:	6811      	ldr	r1, [r2, #0]
 800fa36:	6808      	ldr	r0, [r1, #0]
 800fa38:	3010      	adds	r0, #16
 800fa3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fa3c:	46a0      	mov	r8, r4
 800fa3e:	46a9      	mov	r9, r5
 800fa40:	46b2      	mov	sl, r6
 800fa42:	46bb      	mov	fp, r7
 800fa44:	f380 8809 	msr	PSP, r0
 800fa48:	3820      	subs	r0, #32
 800fa4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fa4c:	4718      	bx	r3
 800fa4e:	46c0      	nop			; (mov r8, r8)

0800fa50 <pxCurrentTCBConst>:
 800fa50:	20002700 	.word	0x20002700

0800fa54 <xPortSysTickHandler>:
{
 800fa54:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa56:	f7ff ffd1 	bl	800f9fc <ulSetInterruptMaskFromISR>
 800fa5a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800fa5c:	f7ff f982 	bl	800ed64 <xTaskIncrementTick>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	d003      	beq.n	800fa6c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800fa64:	2280      	movs	r2, #128	; 0x80
 800fa66:	4b03      	ldr	r3, [pc, #12]	; (800fa74 <xPortSysTickHandler+0x20>)
 800fa68:	0552      	lsls	r2, r2, #21
 800fa6a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800fa6c:	0020      	movs	r0, r4
 800fa6e:	f7ff ffcb 	bl	800fa08 <vClearInterruptMaskFromISR>
}
 800fa72:	bd10      	pop	{r4, pc}
 800fa74:	e000ed04 	.word	0xe000ed04

0800fa78 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fa78:	b530      	push	{r4, r5, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fa7a:	4c11      	ldr	r4, [pc, #68]	; (800fac0 <prvInsertBlockIntoFreeList+0x48>)
 800fa7c:	0022      	movs	r2, r4
 800fa7e:	e000      	b.n	800fa82 <prvInsertBlockIntoFreeList+0xa>
 800fa80:	001a      	movs	r2, r3
 800fa82:	6813      	ldr	r3, [r2, #0]
 800fa84:	4283      	cmp	r3, r0
 800fa86:	d3fb      	bcc.n	800fa80 <prvInsertBlockIntoFreeList+0x8>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fa88:	6851      	ldr	r1, [r2, #4]
 800fa8a:	1855      	adds	r5, r2, r1
 800fa8c:	42a8      	cmp	r0, r5
 800fa8e:	d012      	beq.n	800fab6 <prvInsertBlockIntoFreeList+0x3e>
 800fa90:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fa92:	1845      	adds	r5, r0, r1
 800fa94:	42ab      	cmp	r3, r5
 800fa96:	d004      	beq.n	800faa2 <prvInsertBlockIntoFreeList+0x2a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fa98:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fa9a:	4290      	cmp	r0, r2
 800fa9c:	d000      	beq.n	800faa0 <prvInsertBlockIntoFreeList+0x28>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fa9e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800faa0:	bd30      	pop	{r4, r5, pc}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800faa2:	68a4      	ldr	r4, [r4, #8]
 800faa4:	42a3      	cmp	r3, r4
 800faa6:	d0f7      	beq.n	800fa98 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800faa8:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800faaa:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800faac:	46a4      	mov	ip, r4
 800faae:	4461      	add	r1, ip
 800fab0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fab2:	6003      	str	r3, [r0, #0]
 800fab4:	e7f1      	b.n	800fa9a <prvInsertBlockIntoFreeList+0x22>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fab6:	6840      	ldr	r0, [r0, #4]
 800fab8:	1809      	adds	r1, r1, r0
 800faba:	6051      	str	r1, [r2, #4]
 800fabc:	0010      	movs	r0, r2
 800fabe:	e7e8      	b.n	800fa92 <prvInsertBlockIntoFreeList+0x1a>
 800fac0:	2000285c 	.word	0x2000285c

0800fac4 <pvPortMalloc>:
{
 800fac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fac6:	46c6      	mov	lr, r8
 800fac8:	b500      	push	{lr}
 800faca:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800facc:	f7ff f936 	bl	800ed3c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800fad0:	4d35      	ldr	r5, [pc, #212]	; (800fba8 <pvPortMalloc+0xe4>)
 800fad2:	68ab      	ldr	r3, [r5, #8]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d03d      	beq.n	800fb54 <pvPortMalloc+0x90>
 800fad8:	68ee      	ldr	r6, [r5, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fada:	4226      	tst	r6, r4
 800fadc:	d101      	bne.n	800fae2 <pvPortMalloc+0x1e>
			if( xWantedSize > 0 )
 800fade:	2c00      	cmp	r4, #0
 800fae0:	d108      	bne.n	800faf4 <pvPortMalloc+0x30>
	( void ) xTaskResumeAll();
 800fae2:	f7ff f9c9 	bl	800ee78 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800fae6:	f7fd fcf3 	bl	800d4d0 <vApplicationMallocFailedHook>
 800faea:	2700      	movs	r7, #0
}
 800faec:	0038      	movs	r0, r7
 800faee:	bc04      	pop	{r2}
 800faf0:	4690      	mov	r8, r2
 800faf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xWantedSize += xHeapStructSize;
 800faf4:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800faf6:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 800faf8:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fafa:	421a      	tst	r2, r3
 800fafc:	d145      	bne.n	800fb8a <pvPortMalloc+0xc6>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d0ef      	beq.n	800fae2 <pvPortMalloc+0x1e>
 800fb02:	696a      	ldr	r2, [r5, #20]
 800fb04:	4690      	mov	r8, r2
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d3eb      	bcc.n	800fae2 <pvPortMalloc+0x1e>
				pxBlock = xStart.pxNextFreeBlock;
 800fb0a:	682c      	ldr	r4, [r5, #0]
				pxPreviousBlock = &xStart;
 800fb0c:	0028      	movs	r0, r5
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb0e:	e004      	b.n	800fb1a <pvPortMalloc+0x56>
 800fb10:	6822      	ldr	r2, [r4, #0]
 800fb12:	2a00      	cmp	r2, #0
 800fb14:	d004      	beq.n	800fb20 <pvPortMalloc+0x5c>
 800fb16:	0020      	movs	r0, r4
 800fb18:	0014      	movs	r4, r2
 800fb1a:	6861      	ldr	r1, [r4, #4]
 800fb1c:	4299      	cmp	r1, r3
 800fb1e:	d3f7      	bcc.n	800fb10 <pvPortMalloc+0x4c>
				if( pxBlock != pxEnd )
 800fb20:	68aa      	ldr	r2, [r5, #8]
 800fb22:	42a2      	cmp	r2, r4
 800fb24:	d0dd      	beq.n	800fae2 <pvPortMalloc+0x1e>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fb26:	6807      	ldr	r7, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fb28:	6822      	ldr	r2, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fb2a:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fb2c:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fb2e:	1aca      	subs	r2, r1, r3
 800fb30:	2a10      	cmp	r2, #16
 800fb32:	d831      	bhi.n	800fb98 <pvPortMalloc+0xd4>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb34:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb36:	692a      	ldr	r2, [r5, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb38:	1a5b      	subs	r3, r3, r1
 800fb3a:	616b      	str	r3, [r5, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d200      	bcs.n	800fb42 <pvPortMalloc+0x7e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb40:	612b      	str	r3, [r5, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800fb42:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb44:	4331      	orrs	r1, r6
 800fb46:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb48:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800fb4a:	f7ff f995 	bl	800ee78 <xTaskResumeAll>
		if( pvReturn == NULL )
 800fb4e:	2f00      	cmp	r7, #0
 800fb50:	d1cc      	bne.n	800faec <pvPortMalloc+0x28>
 800fb52:	e7c8      	b.n	800fae6 <pvPortMalloc+0x22>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fb54:	2107      	movs	r1, #7
	ulAddress = ( uint32_t ) ucHeap;
 800fb56:	4b15      	ldr	r3, [pc, #84]	; (800fbac <pvPortMalloc+0xe8>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fb58:	4219      	tst	r1, r3
 800fb5a:	d119      	bne.n	800fb90 <pvPortMalloc+0xcc>
 800fb5c:	001a      	movs	r2, r3
 800fb5e:	0019      	movs	r1, r3
	ulAddress -= xHeapStructSize;
 800fb60:	26fd      	movs	r6, #253	; 0xfd
 800fb62:	01b6      	lsls	r6, r6, #6
 800fb64:	46b4      	mov	ip, r6
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fb66:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800fb68:	4463      	add	r3, ip
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fb6a:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb6c:	2680      	movs	r6, #128	; 0x80
	xStart.xBlockSize = ( size_t ) 0;
 800fb6e:	2000      	movs	r0, #0
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800fb70:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb72:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800fb74:	6068      	str	r0, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fb76:	6029      	str	r1, [r5, #0]
	pxEnd->xBlockSize = 0;
 800fb78:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fb7a:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800fb7c:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800fb7e:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fb80:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb82:	612a      	str	r2, [r5, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb84:	616a      	str	r2, [r5, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb86:	60ee      	str	r6, [r5, #12]
 800fb88:	e7a7      	b.n	800fada <pvPortMalloc+0x16>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb8a:	4393      	bics	r3, r2
 800fb8c:	3308      	adds	r3, #8
 800fb8e:	e7b6      	b.n	800fafe <pvPortMalloc+0x3a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800fb90:	1dda      	adds	r2, r3, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fb92:	438a      	bics	r2, r1
 800fb94:	0011      	movs	r1, r2
 800fb96:	e7e3      	b.n	800fb60 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fb98:	18e0      	adds	r0, r4, r3
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fb9a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb9c:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800fb9e:	f7ff ff6b 	bl	800fa78 <prvInsertBlockIntoFreeList>
 800fba2:	6861      	ldr	r1, [r4, #4]
 800fba4:	e7c6      	b.n	800fb34 <pvPortMalloc+0x70>
 800fba6:	46c0      	nop			; (mov r8, r8)
 800fba8:	2000285c 	.word	0x2000285c
 800fbac:	20002874 	.word	0x20002874

0800fbb0 <vPortFree>:
{
 800fbb0:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800fbb2:	2800      	cmp	r0, #0
 800fbb4:	d009      	beq.n	800fbca <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fbb6:	4d0d      	ldr	r5, [pc, #52]	; (800fbec <vPortFree+0x3c>)
 800fbb8:	3808      	subs	r0, #8
 800fbba:	6843      	ldr	r3, [r0, #4]
 800fbbc:	68ea      	ldr	r2, [r5, #12]
 800fbbe:	0004      	movs	r4, r0
 800fbc0:	421a      	tst	r2, r3
 800fbc2:	d002      	beq.n	800fbca <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800fbc4:	6801      	ldr	r1, [r0, #0]
 800fbc6:	2900      	cmp	r1, #0
 800fbc8:	d000      	beq.n	800fbcc <vPortFree+0x1c>
}
 800fbca:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fbcc:	4393      	bics	r3, r2
 800fbce:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800fbd0:	f7ff f8b4 	bl	800ed3c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fbd4:	696a      	ldr	r2, [r5, #20]
 800fbd6:	6863      	ldr	r3, [r4, #4]
 800fbd8:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fbda:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fbdc:	4463      	add	r3, ip
 800fbde:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fbe0:	f7ff ff4a 	bl	800fa78 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800fbe4:	f7ff f948 	bl	800ee78 <xTaskResumeAll>
}
 800fbe8:	e7ef      	b.n	800fbca <vPortFree+0x1a>
 800fbea:	46c0      	nop			; (mov r8, r8)
 800fbec:	2000285c 	.word	0x2000285c

0800fbf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fbf0:	b510      	push	{r4, lr}
 800fbf2:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800fbf4:	f002 f904 	bl	8011e00 <HAL_RCC_GetHCLKFreq>
 800fbf8:	21fa      	movs	r1, #250	; 0xfa
 800fbfa:	0089      	lsls	r1, r1, #2
 800fbfc:	f7f0 faa8 	bl	8000150 <__udivsi3>
 800fc00:	f000 fb9e 	bl	8010340 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800fc04:	2001      	movs	r0, #1
 800fc06:	2200      	movs	r2, #0
 800fc08:	0021      	movs	r1, r4
 800fc0a:	4240      	negs	r0, r0
 800fc0c:	f000 fb58 	bl	80102c0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800fc10:	2000      	movs	r0, #0
 800fc12:	bd10      	pop	{r4, pc}

0800fc14 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fc14:	2110      	movs	r1, #16
 800fc16:	4a06      	ldr	r2, [pc, #24]	; (800fc30 <HAL_Init+0x1c>)
{
 800fc18:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fc1a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800fc1c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fc1e:	430b      	orrs	r3, r1
 800fc20:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800fc22:	f7ff ffe5 	bl	800fbf0 <HAL_InitTick>
  HAL_MspInit();
 800fc26:	f001 fcdf 	bl	80115e8 <HAL_MspInit>
}
 800fc2a:	2000      	movs	r0, #0
 800fc2c:	bd10      	pop	{r4, pc}
 800fc2e:	46c0      	nop			; (mov r8, r8)
 800fc30:	40022000 	.word	0x40022000

0800fc34 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800fc34:	4a02      	ldr	r2, [pc, #8]	; (800fc40 <HAL_IncTick+0xc>)
 800fc36:	6813      	ldr	r3, [r2, #0]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	6013      	str	r3, [r2, #0]
}
 800fc3c:	4770      	bx	lr
 800fc3e:	46c0      	nop			; (mov r8, r8)
 800fc40:	200067bc 	.word	0x200067bc

0800fc44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800fc44:	4b01      	ldr	r3, [pc, #4]	; (800fc4c <HAL_GetTick+0x8>)
 800fc46:	6818      	ldr	r0, [r3, #0]
}
 800fc48:	4770      	bx	lr
 800fc4a:	46c0      	nop			; (mov r8, r8)
 800fc4c:	200067bc 	.word	0x200067bc

0800fc50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800fc50:	b510      	push	{r4, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800fc56:	f7ff fff5 	bl	800fc44 <HAL_GetTick>
 800fc5a:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800fc5c:	f7ff fff2 	bl	800fc44 <HAL_GetTick>
 800fc60:	9b01      	ldr	r3, [sp, #4]
 800fc62:	1b00      	subs	r0, r0, r4
 800fc64:	4298      	cmp	r0, r3
 800fc66:	d3f9      	bcc.n	800fc5c <HAL_Delay+0xc>
  {
  }
}
 800fc68:	b002      	add	sp, #8
 800fc6a:	bd10      	pop	{r4, pc}

0800fc6c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800fc6c:	4b01      	ldr	r3, [pc, #4]	; (800fc74 <HAL_GetREVID+0x8>)
 800fc6e:	6818      	ldr	r0, [r3, #0]
 800fc70:	0c00      	lsrs	r0, r0, #16
}
 800fc72:	4770      	bx	lr
 800fc74:	40015800 	.word	0x40015800

0800fc78 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800fc78:	4b02      	ldr	r3, [pc, #8]	; (800fc84 <HAL_GetDEVID+0xc>)
 800fc7a:	6818      	ldr	r0, [r3, #0]
 800fc7c:	0500      	lsls	r0, r0, #20
 800fc7e:	0d00      	lsrs	r0, r0, #20
}
 800fc80:	4770      	bx	lr
 800fc82:	46c0      	nop			; (mov r8, r8)
 800fc84:	40015800 	.word	0x40015800

0800fc88 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fc88:	2303      	movs	r3, #3
 800fc8a:	6802      	ldr	r2, [r0, #0]
{
 800fc8c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fc8e:	6891      	ldr	r1, [r2, #8]
{
 800fc90:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fc92:	400b      	ands	r3, r1
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d001      	beq.n	800fc9c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800fc98:	2000      	movs	r0, #0
}
 800fc9a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fc9c:	6811      	ldr	r1, [r2, #0]
 800fc9e:	420b      	tst	r3, r1
 800fca0:	d00e      	beq.n	800fcc0 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800fca2:	2305      	movs	r3, #5
 800fca4:	6891      	ldr	r1, [r2, #8]
 800fca6:	400b      	ands	r3, r1
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d00d      	beq.n	800fcc8 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fcac:	2210      	movs	r2, #16
 800fcae:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800fcb0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fcb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fcb8:	3a0f      	subs	r2, #15
 800fcba:	4313      	orrs	r3, r2
 800fcbc:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800fcbe:	e7ec      	b.n	800fc9a <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fcc0:	68d3      	ldr	r3, [r2, #12]
 800fcc2:	041b      	lsls	r3, r3, #16
 800fcc4:	d4ed      	bmi.n	800fca2 <ADC_Disable+0x1a>
 800fcc6:	e7e7      	b.n	800fc98 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 800fcc8:	2102      	movs	r1, #2
 800fcca:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800fccc:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800fcce:	430b      	orrs	r3, r1
 800fcd0:	6093      	str	r3, [r2, #8]
 800fcd2:	2303      	movs	r3, #3
 800fcd4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800fcd6:	f7ff ffb5 	bl	800fc44 <HAL_GetTick>
 800fcda:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800fcdc:	e004      	b.n	800fce8 <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800fcde:	f7ff ffb1 	bl	800fc44 <HAL_GetTick>
 800fce2:	1b80      	subs	r0, r0, r6
 800fce4:	2802      	cmp	r0, #2
 800fce6:	d804      	bhi.n	800fcf2 <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800fce8:	6823      	ldr	r3, [r4, #0]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	421d      	tst	r5, r3
 800fcee:	d1f6      	bne.n	800fcde <ADC_Disable+0x56>
 800fcf0:	e7d2      	b.n	800fc98 <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fcf2:	2210      	movs	r2, #16
 800fcf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800fcf6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fcf8:	4313      	orrs	r3, r2
 800fcfa:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fcfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fcfe:	431d      	orrs	r5, r3
 800fd00:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fd02:	e7ca      	b.n	800fc9a <ADC_Disable+0x12>

0800fd04 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800fd04:	2300      	movs	r3, #0
{
 800fd06:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fd08:	6802      	ldr	r2, [r0, #0]
{
 800fd0a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800fd0c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fd0e:	6891      	ldr	r1, [r2, #8]
 800fd10:	3303      	adds	r3, #3
{
 800fd12:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fd14:	400b      	ands	r3, r1
 800fd16:	2b01      	cmp	r3, #1
 800fd18:	d031      	beq.n	800fd7e <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800fd1a:	6891      	ldr	r1, [r2, #8]
 800fd1c:	4b20      	ldr	r3, [pc, #128]	; (800fda0 <ADC_Enable+0x9c>)
 800fd1e:	4219      	tst	r1, r3
 800fd20:	d122      	bne.n	800fd68 <ADC_Enable+0x64>
    __HAL_ADC_ENABLE(hadc);
 800fd22:	2101      	movs	r1, #1
 800fd24:	6893      	ldr	r3, [r2, #8]
 800fd26:	430b      	orrs	r3, r1
 800fd28:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800fd2a:	4b1e      	ldr	r3, [pc, #120]	; (800fda4 <ADC_Enable+0xa0>)
 800fd2c:	491e      	ldr	r1, [pc, #120]	; (800fda8 <ADC_Enable+0xa4>)
 800fd2e:	6818      	ldr	r0, [r3, #0]
 800fd30:	f7f0 fa0e 	bl	8000150 <__udivsi3>
 800fd34:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800fd36:	9b01      	ldr	r3, [sp, #4]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d005      	beq.n	800fd48 <ADC_Enable+0x44>
      wait_loop_index--;
 800fd3c:	9b01      	ldr	r3, [sp, #4]
 800fd3e:	3b01      	subs	r3, #1
 800fd40:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800fd42:	9b01      	ldr	r3, [sp, #4]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d1f9      	bne.n	800fd3c <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800fd48:	f7ff ff7c 	bl	800fc44 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800fd4c:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800fd4e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800fd50:	e004      	b.n	800fd5c <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800fd52:	f7ff ff77 	bl	800fc44 <HAL_GetTick>
 800fd56:	1b80      	subs	r0, r0, r6
 800fd58:	2802      	cmp	r0, #2
 800fd5a:	d818      	bhi.n	800fd8e <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800fd5c:	6823      	ldr	r3, [r4, #0]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	421d      	tst	r5, r3
 800fd62:	d0f6      	beq.n	800fd52 <ADC_Enable+0x4e>
  return HAL_OK;
 800fd64:	2000      	movs	r0, #0
 800fd66:	e008      	b.n	800fd7a <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd68:	2210      	movs	r2, #16
      return HAL_ERROR;
 800fd6a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fd72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fd74:	3a0f      	subs	r2, #15
 800fd76:	4313      	orrs	r3, r2
 800fd78:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800fd7a:	b002      	add	sp, #8
 800fd7c:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fd7e:	6811      	ldr	r1, [r2, #0]
 800fd80:	420b      	tst	r3, r1
 800fd82:	d1ef      	bne.n	800fd64 <ADC_Enable+0x60>
 800fd84:	68d3      	ldr	r3, [r2, #12]
 800fd86:	041b      	lsls	r3, r3, #16
 800fd88:	d5c7      	bpl.n	800fd1a <ADC_Enable+0x16>
  return HAL_OK;
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	e7f5      	b.n	800fd7a <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd8e:	2210      	movs	r2, #16
 800fd90:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800fd92:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd94:	4313      	orrs	r3, r2
 800fd96:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fd98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fd9a:	431d      	orrs	r5, r3
 800fd9c:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fd9e:	e7ec      	b.n	800fd7a <ADC_Enable+0x76>
 800fda0:	80000017 	.word	0x80000017
 800fda4:	200000c4 	.word	0x200000c4
 800fda8:	000f4240 	.word	0x000f4240

0800fdac <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800fdac:	2204      	movs	r2, #4
 800fdae:	6803      	ldr	r3, [r0, #0]
{
 800fdb0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800fdb2:	6899      	ldr	r1, [r3, #8]
{
 800fdb4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800fdb6:	420a      	tst	r2, r1
 800fdb8:	d010      	beq.n	800fddc <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800fdba:	6899      	ldr	r1, [r3, #8]
 800fdbc:	420a      	tst	r2, r1
 800fdbe:	d10f      	bne.n	800fde0 <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800fdc0:	f7ff ff40 	bl	800fc44 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800fdc4:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800fdc6:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800fdc8:	e004      	b.n	800fdd4 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800fdca:	f7ff ff3b 	bl	800fc44 <HAL_GetTick>
 800fdce:	1b80      	subs	r0, r0, r6
 800fdd0:	2802      	cmp	r0, #2
 800fdd2:	d80d      	bhi.n	800fdf0 <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	689b      	ldr	r3, [r3, #8]
 800fdd8:	421d      	tst	r5, r3
 800fdda:	d1f6      	bne.n	800fdca <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800fddc:	2000      	movs	r0, #0
}
 800fdde:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800fde0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800fde2:	0792      	lsls	r2, r2, #30
 800fde4:	d4ec      	bmi.n	800fdc0 <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800fde6:	2110      	movs	r1, #16
 800fde8:	689a      	ldr	r2, [r3, #8]
 800fdea:	430a      	orrs	r2, r1
 800fdec:	609a      	str	r2, [r3, #8]
 800fdee:	e7e7      	b.n	800fdc0 <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fdf0:	2210      	movs	r2, #16
 800fdf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fdf4:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fdfa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fdfc:	3a0f      	subs	r2, #15
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	64a3      	str	r3, [r4, #72]	; 0x48
 800fe02:	e7ec      	b.n	800fdde <ADC_ConversionStop+0x32>

0800fe04 <HAL_ADC_Init>:
{
 800fe04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe06:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800fe08:	d100      	bne.n	800fe0c <HAL_ADC_Init+0x8>
 800fe0a:	e075      	b.n	800fef8 <HAL_ADC_Init+0xf4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800fe0c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d068      	beq.n	800fee4 <HAL_ADC_Init+0xe0>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800fe12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe14:	06db      	lsls	r3, r3, #27
 800fe16:	d505      	bpl.n	800fe24 <HAL_ADC_Init+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fe18:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800fe1a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fe1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	6463      	str	r3, [r4, #68]	; 0x44
}
 800fe22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800fe24:	2004      	movs	r0, #4
 800fe26:	6823      	ldr	r3, [r4, #0]
 800fe28:	689a      	ldr	r2, [r3, #8]
 800fe2a:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800fe2c:	d1f4      	bne.n	800fe18 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800fe2e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fe30:	4942      	ldr	r1, [pc, #264]	; (800ff3c <HAL_ADC_Init+0x138>)
 800fe32:	400a      	ands	r2, r1
 800fe34:	3106      	adds	r1, #6
 800fe36:	31ff      	adds	r1, #255	; 0xff
 800fe38:	430a      	orrs	r2, r1
 800fe3a:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800fe3c:	2203      	movs	r2, #3
 800fe3e:	6899      	ldr	r1, [r3, #8]
 800fe40:	400a      	ands	r2, r1
 800fe42:	2a01      	cmp	r2, #1
 800fe44:	d073      	beq.n	800ff2e <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CFGR1,
 800fe46:	2118      	movs	r1, #24
 800fe48:	68da      	ldr	r2, [r3, #12]
 800fe4a:	438a      	bics	r2, r1
 800fe4c:	68a1      	ldr	r1, [r4, #8]
 800fe4e:	430a      	orrs	r2, r1
 800fe50:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800fe52:	691a      	ldr	r2, [r3, #16]
 800fe54:	6861      	ldr	r1, [r4, #4]
 800fe56:	0092      	lsls	r2, r2, #2
 800fe58:	0892      	lsrs	r2, r2, #2
 800fe5a:	430a      	orrs	r2, r1
 800fe5c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800fe5e:	68da      	ldr	r2, [r3, #12]
 800fe60:	4937      	ldr	r1, [pc, #220]	; (800ff40 <HAL_ADC_Init+0x13c>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800fe62:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800fe64:	400a      	ands	r2, r1
 800fe66:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fe68:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800fe6a:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fe6c:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800fe6e:	69e2      	ldr	r2, [r4, #28]
 800fe70:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fe72:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800fe74:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fe76:	3a01      	subs	r2, #1
 800fe78:	1e55      	subs	r5, r2, #1
 800fe7a:	41aa      	sbcs	r2, r5
 800fe7c:	0315      	lsls	r5, r2, #12
 800fe7e:	68e2      	ldr	r2, [r4, #12]
 800fe80:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fe82:	6922      	ldr	r2, [r4, #16]
 800fe84:	4339      	orrs	r1, r7
 800fe86:	2a02      	cmp	r2, #2
 800fe88:	d100      	bne.n	800fe8c <HAL_ADC_Init+0x88>
 800fe8a:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800fe8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fe8e:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fe90:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800fe92:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fe94:	432a      	orrs	r2, r5
 800fe96:	4302      	orrs	r2, r0
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800fe98:	2901      	cmp	r1, #1
 800fe9a:	d042      	beq.n	800ff22 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fe9c:	20c2      	movs	r0, #194	; 0xc2
 800fe9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800fea0:	30ff      	adds	r0, #255	; 0xff
 800fea2:	4281      	cmp	r1, r0
 800fea4:	d002      	beq.n	800feac <HAL_ADC_Init+0xa8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800fea6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fea8:	4301      	orrs	r1, r0
 800feaa:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800feac:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800feae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800feb0:	4311      	orrs	r1, r2
 800feb2:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800feb4:	2180      	movs	r1, #128	; 0x80
 800feb6:	0549      	lsls	r1, r1, #21
 800feb8:	428d      	cmp	r5, r1
 800feba:	d01f      	beq.n	800fefc <HAL_ADC_Init+0xf8>
 800febc:	1e69      	subs	r1, r5, #1
 800febe:	2906      	cmp	r1, #6
 800fec0:	d91c      	bls.n	800fefc <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	491f      	ldr	r1, [pc, #124]	; (800ff44 <HAL_ADC_Init+0x140>)
 800fec6:	400b      	ands	r3, r1
 800fec8:	4293      	cmp	r3, r2
 800feca:	d020      	beq.n	800ff0e <HAL_ADC_Init+0x10a>
      ADC_STATE_CLR_SET(hadc->State,
 800fecc:	2212      	movs	r2, #18
 800fece:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800fed0:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800fed2:	4393      	bics	r3, r2
 800fed4:	3a02      	subs	r2, #2
 800fed6:	4313      	orrs	r3, r2
 800fed8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800feda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fedc:	3a0f      	subs	r2, #15
 800fede:	4313      	orrs	r3, r2
 800fee0:	64a3      	str	r3, [r4, #72]	; 0x48
 800fee2:	e79e      	b.n	800fe22 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800fee4:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800fee6:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800fee8:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800feea:	f7fc fb9d 	bl	800c628 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800feee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fef0:	06db      	lsls	r3, r3, #27
 800fef2:	d500      	bpl.n	800fef6 <HAL_ADC_Init+0xf2>
 800fef4:	e790      	b.n	800fe18 <HAL_ADC_Init+0x14>
 800fef6:	e795      	b.n	800fe24 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800fef8:	2001      	movs	r0, #1
 800fefa:	e792      	b.n	800fe22 <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fefc:	2107      	movs	r1, #7
 800fefe:	6958      	ldr	r0, [r3, #20]
 800ff00:	4388      	bics	r0, r1
 800ff02:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800ff04:	6958      	ldr	r0, [r3, #20]
 800ff06:	4029      	ands	r1, r5
 800ff08:	4301      	orrs	r1, r0
 800ff0a:	6159      	str	r1, [r3, #20]
 800ff0c:	e7d9      	b.n	800fec2 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800ff0e:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800ff10:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800ff12:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800ff14:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ff16:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800ff18:	4393      	bics	r3, r2
 800ff1a:	3a02      	subs	r2, #2
 800ff1c:	4313      	orrs	r3, r2
 800ff1e:	6463      	str	r3, [r4, #68]	; 0x44
 800ff20:	e77f      	b.n	800fe22 <HAL_ADC_Init+0x1e>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800ff22:	2e00      	cmp	r6, #0
 800ff24:	d1ba      	bne.n	800fe9c <HAL_ADC_Init+0x98>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800ff26:	2180      	movs	r1, #128	; 0x80
 800ff28:	0249      	lsls	r1, r1, #9
 800ff2a:	430a      	orrs	r2, r1
 800ff2c:	e7b6      	b.n	800fe9c <HAL_ADC_Init+0x98>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800ff2e:	6819      	ldr	r1, [r3, #0]
 800ff30:	420a      	tst	r2, r1
 800ff32:	d194      	bne.n	800fe5e <HAL_ADC_Init+0x5a>
 800ff34:	68da      	ldr	r2, [r3, #12]
 800ff36:	0412      	lsls	r2, r2, #16
 800ff38:	d491      	bmi.n	800fe5e <HAL_ADC_Init+0x5a>
 800ff3a:	e784      	b.n	800fe46 <HAL_ADC_Init+0x42>
 800ff3c:	fffffefd 	.word	0xfffffefd
 800ff40:	fffe0219 	.word	0xfffe0219
 800ff44:	833fffe7 	.word	0x833fffe7

0800ff48 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ff48:	6803      	ldr	r3, [r0, #0]
{
 800ff4a:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ff4c:	689a      	ldr	r2, [r3, #8]
{
 800ff4e:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ff50:	0752      	lsls	r2, r2, #29
 800ff52:	d421      	bmi.n	800ff98 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800ff54:	2240      	movs	r2, #64	; 0x40
 800ff56:	5c81      	ldrb	r1, [r0, r2]
 800ff58:	2901      	cmp	r1, #1
 800ff5a:	d01d      	beq.n	800ff98 <HAL_ADC_Start+0x50>
 800ff5c:	2101      	movs	r1, #1
 800ff5e:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800ff60:	69c2      	ldr	r2, [r0, #28]
 800ff62:	2a01      	cmp	r2, #1
 800ff64:	d112      	bne.n	800ff8c <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800ff66:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ff68:	490c      	ldr	r1, [pc, #48]	; (800ff9c <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800ff6a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800ff6c:	4011      	ands	r1, r2
 800ff6e:	2280      	movs	r2, #128	; 0x80
 800ff70:	0052      	lsls	r2, r2, #1
 800ff72:	430a      	orrs	r2, r1
 800ff74:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800ff76:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800ff78:	2200      	movs	r2, #0
 800ff7a:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800ff7c:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ff7e:	321c      	adds	r2, #28
 800ff80:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800ff82:	689a      	ldr	r2, [r3, #8]
 800ff84:	393c      	subs	r1, #60	; 0x3c
 800ff86:	430a      	orrs	r2, r1
 800ff88:	609a      	str	r2, [r3, #8]
}
 800ff8a:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800ff8c:	f7ff feba 	bl	800fd04 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d1fa      	bne.n	800ff8a <HAL_ADC_Start+0x42>
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	e7e6      	b.n	800ff66 <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800ff98:	2002      	movs	r0, #2
 800ff9a:	e7f6      	b.n	800ff8a <HAL_ADC_Start+0x42>
 800ff9c:	fffff0fe 	.word	0xfffff0fe

0800ffa0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800ffa0:	2340      	movs	r3, #64	; 0x40
{ 
 800ffa2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800ffa4:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800ffa6:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800ffa8:	2a01      	cmp	r2, #1
 800ffaa:	d014      	beq.n	800ffd6 <HAL_ADC_Stop+0x36>
 800ffac:	2501      	movs	r5, #1
 800ffae:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800ffb0:	f7ff fefc 	bl	800fdac <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	d003      	beq.n	800ffc0 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800ffb8:	2340      	movs	r3, #64	; 0x40
 800ffba:	2200      	movs	r2, #0
 800ffbc:	54e2      	strb	r2, [r4, r3]
}
 800ffbe:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800ffc0:	0020      	movs	r0, r4
 800ffc2:	f7ff fe61 	bl	800fc88 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	d1f6      	bne.n	800ffb8 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800ffca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ffcc:	4a03      	ldr	r2, [pc, #12]	; (800ffdc <HAL_ADC_Stop+0x3c>)
 800ffce:	4013      	ands	r3, r2
 800ffd0:	431d      	orrs	r5, r3
 800ffd2:	6465      	str	r5, [r4, #68]	; 0x44
 800ffd4:	e7f0      	b.n	800ffb8 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800ffd6:	2002      	movs	r0, #2
 800ffd8:	e7f1      	b.n	800ffbe <HAL_ADC_Stop+0x1e>
 800ffda:	46c0      	nop			; (mov r8, r8)
 800ffdc:	fffffefe 	.word	0xfffffefe

0800ffe0 <HAL_ADC_PollForConversion>:
{
 800ffe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800ffe2:	6943      	ldr	r3, [r0, #20]
{
 800ffe4:	0006      	movs	r6, r0
 800ffe6:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800ffe8:	2b08      	cmp	r3, #8
 800ffea:	d04c      	beq.n	8010086 <HAL_ADC_PollForConversion+0xa6>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800ffec:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800ffee:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	07db      	lsls	r3, r3, #31
 800fff4:	d43e      	bmi.n	8010074 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800fff6:	f7ff fe25 	bl	800fc44 <HAL_GetTick>
 800fffa:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fffc:	6832      	ldr	r2, [r6, #0]
 800fffe:	e001      	b.n	8010004 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 8010000:	1c63      	adds	r3, r4, #1
 8010002:	d127      	bne.n	8010054 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8010004:	6813      	ldr	r3, [r2, #0]
 8010006:	421d      	tst	r5, r3
 8010008:	d0fa      	beq.n	8010000 <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801000a:	2380      	movs	r3, #128	; 0x80
 801000c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	430b      	orrs	r3, r1
 8010012:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010014:	23c0      	movs	r3, #192	; 0xc0
 8010016:	68d1      	ldr	r1, [r2, #12]
 8010018:	011b      	lsls	r3, r3, #4
 801001a:	4219      	tst	r1, r3
 801001c:	d113      	bne.n	8010046 <HAL_ADC_PollForConversion+0x66>
 801001e:	6a33      	ldr	r3, [r6, #32]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d110      	bne.n	8010046 <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010024:	6813      	ldr	r3, [r2, #0]
 8010026:	071b      	lsls	r3, r3, #28
 8010028:	d50d      	bpl.n	8010046 <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801002a:	6893      	ldr	r3, [r2, #8]
 801002c:	075b      	lsls	r3, r3, #29
 801002e:	d42f      	bmi.n	8010090 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010030:	210c      	movs	r1, #12
 8010032:	6853      	ldr	r3, [r2, #4]
 8010034:	438b      	bics	r3, r1
 8010036:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010038:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801003a:	491a      	ldr	r1, [pc, #104]	; (80100a4 <HAL_ADC_PollForConversion+0xc4>)
 801003c:	400b      	ands	r3, r1
 801003e:	3104      	adds	r1, #4
 8010040:	31ff      	adds	r1, #255	; 0xff
 8010042:	430b      	orrs	r3, r1
 8010044:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010046:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 8010048:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 801004a:	2b00      	cmp	r3, #0
 801004c:	d101      	bne.n	8010052 <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801004e:	330c      	adds	r3, #12
 8010050:	6013      	str	r3, [r2, #0]
}
 8010052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010054:	2c00      	cmp	r4, #0
 8010056:	d004      	beq.n	8010062 <HAL_ADC_PollForConversion+0x82>
 8010058:	f7ff fdf4 	bl	800fc44 <HAL_GetTick>
 801005c:	1bc0      	subs	r0, r0, r7
 801005e:	42a0      	cmp	r0, r4
 8010060:	d9cc      	bls.n	800fffc <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010062:	2204      	movs	r2, #4
 8010064:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 8010066:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010068:	4313      	orrs	r3, r2
 801006a:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 801006c:	2200      	movs	r2, #0
 801006e:	2340      	movs	r3, #64	; 0x40
 8010070:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8010072:	e7ee      	b.n	8010052 <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010074:	2220      	movs	r2, #32
 8010076:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010078:	4313      	orrs	r3, r2
 801007a:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 801007c:	2200      	movs	r2, #0
 801007e:	2340      	movs	r3, #64	; 0x40
 8010080:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010082:	2001      	movs	r0, #1
 8010084:	e7e5      	b.n	8010052 <HAL_ADC_PollForConversion+0x72>
  tickstart = HAL_GetTick();
 8010086:	f7ff fddd 	bl	800fc44 <HAL_GetTick>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 801008a:	2508      	movs	r5, #8
  tickstart = HAL_GetTick();
 801008c:	0007      	movs	r7, r0
 801008e:	e7b5      	b.n	800fffc <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010090:	2120      	movs	r1, #32
 8010092:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010094:	430b      	orrs	r3, r1
 8010096:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010098:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 801009a:	391f      	subs	r1, #31
 801009c:	430b      	orrs	r3, r1
 801009e:	64b3      	str	r3, [r6, #72]	; 0x48
 80100a0:	e7d1      	b.n	8010046 <HAL_ADC_PollForConversion+0x66>
 80100a2:	46c0      	nop			; (mov r8, r8)
 80100a4:	fffffefe 	.word	0xfffffefe

080100a8 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80100a8:	2208      	movs	r2, #8
 80100aa:	6803      	ldr	r3, [r0, #0]
 80100ac:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 80100ae:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80100b0:	4770      	bx	lr
 80100b2:	46c0      	nop			; (mov r8, r8)

080100b4 <HAL_ADC_ConvCpltCallback>:
 80100b4:	4770      	bx	lr
 80100b6:	46c0      	nop			; (mov r8, r8)

080100b8 <HAL_ADC_LevelOutOfWindowCallback>:
 80100b8:	4770      	bx	lr
 80100ba:	46c0      	nop			; (mov r8, r8)

080100bc <HAL_ADC_ErrorCallback>:
 80100bc:	4770      	bx	lr
 80100be:	46c0      	nop			; (mov r8, r8)

080100c0 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80100c0:	2204      	movs	r2, #4
 80100c2:	6803      	ldr	r3, [r0, #0]
{
 80100c4:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80100c6:	6819      	ldr	r1, [r3, #0]
{
 80100c8:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80100ca:	420a      	tst	r2, r1
 80100cc:	d04a      	beq.n	8010164 <HAL_ADC_IRQHandler+0xa4>
 80100ce:	6859      	ldr	r1, [r3, #4]
 80100d0:	420a      	tst	r2, r1
 80100d2:	d047      	beq.n	8010164 <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80100d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80100d6:	06d2      	lsls	r2, r2, #27
 80100d8:	d404      	bmi.n	80100e4 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80100da:	2280      	movs	r2, #128	; 0x80
 80100dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80100de:	0092      	lsls	r2, r2, #2
 80100e0:	430a      	orrs	r2, r1
 80100e2:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80100e4:	22c0      	movs	r2, #192	; 0xc0
 80100e6:	68d9      	ldr	r1, [r3, #12]
 80100e8:	0112      	lsls	r2, r2, #4
 80100ea:	4211      	tst	r1, r2
 80100ec:	d113      	bne.n	8010116 <HAL_ADC_IRQHandler+0x56>
 80100ee:	6a22      	ldr	r2, [r4, #32]
 80100f0:	2a00      	cmp	r2, #0
 80100f2:	d110      	bne.n	8010116 <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	0712      	lsls	r2, r2, #28
 80100f8:	d50d      	bpl.n	8010116 <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80100fa:	689a      	ldr	r2, [r3, #8]
 80100fc:	0752      	lsls	r2, r2, #29
 80100fe:	d444      	bmi.n	801018a <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010100:	210c      	movs	r1, #12
 8010102:	685a      	ldr	r2, [r3, #4]
 8010104:	438a      	bics	r2, r1
 8010106:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8010108:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801010a:	4a24      	ldr	r2, [pc, #144]	; (801019c <HAL_ADC_IRQHandler+0xdc>)
 801010c:	4013      	ands	r3, r2
 801010e:	3204      	adds	r2, #4
 8010110:	32ff      	adds	r2, #255	; 0xff
 8010112:	4313      	orrs	r3, r2
 8010114:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8010116:	0020      	movs	r0, r4
 8010118:	f7ff ffcc 	bl	80100b4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 801011c:	220c      	movs	r2, #12
 801011e:	6823      	ldr	r3, [r4, #0]
 8010120:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8010122:	2580      	movs	r5, #128	; 0x80
 8010124:	681a      	ldr	r2, [r3, #0]
 8010126:	4215      	tst	r5, r2
 8010128:	d002      	beq.n	8010130 <HAL_ADC_IRQHandler+0x70>
 801012a:	685a      	ldr	r2, [r3, #4]
 801012c:	4215      	tst	r5, r2
 801012e:	d121      	bne.n	8010174 <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8010130:	2210      	movs	r2, #16
 8010132:	6819      	ldr	r1, [r3, #0]
 8010134:	420a      	tst	r2, r1
 8010136:	d014      	beq.n	8010162 <HAL_ADC_IRQHandler+0xa2>
 8010138:	6859      	ldr	r1, [r3, #4]
 801013a:	420a      	tst	r2, r1
 801013c:	d011      	beq.n	8010162 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 801013e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010140:	2a01      	cmp	r2, #1
 8010142:	d002      	beq.n	801014a <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8010144:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8010146:	07d2      	lsls	r2, r2, #31
 8010148:	d509      	bpl.n	801015e <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801014a:	2102      	movs	r1, #2
 801014c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 801014e:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8010150:	430a      	orrs	r2, r1
 8010152:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010154:	2210      	movs	r2, #16
 8010156:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8010158:	f7ff ffb0 	bl	80100bc <HAL_ADC_ErrorCallback>
 801015c:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801015e:	2210      	movs	r2, #16
 8010160:	601a      	str	r2, [r3, #0]
}
 8010162:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8010164:	2208      	movs	r2, #8
 8010166:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8010168:	420a      	tst	r2, r1
 801016a:	d0da      	beq.n	8010122 <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 801016c:	6859      	ldr	r1, [r3, #4]
 801016e:	420a      	tst	r2, r1
 8010170:	d0d7      	beq.n	8010122 <HAL_ADC_IRQHandler+0x62>
 8010172:	e7af      	b.n	80100d4 <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010174:	2380      	movs	r3, #128	; 0x80
 8010176:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010178:	025b      	lsls	r3, r3, #9
 801017a:	4313      	orrs	r3, r2
 801017c:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 801017e:	0020      	movs	r0, r4
 8010180:	f7ff ff9a 	bl	80100b8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8010184:	6823      	ldr	r3, [r4, #0]
 8010186:	601d      	str	r5, [r3, #0]
 8010188:	e7d2      	b.n	8010130 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801018a:	2220      	movs	r2, #32
 801018c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801018e:	4313      	orrs	r3, r2
 8010190:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010192:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010194:	3a1f      	subs	r2, #31
 8010196:	4313      	orrs	r3, r2
 8010198:	64a3      	str	r3, [r4, #72]	; 0x48
 801019a:	e7bc      	b.n	8010116 <HAL_ADC_IRQHandler+0x56>
 801019c:	fffffefe 	.word	0xfffffefe

080101a0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 80101a0:	2300      	movs	r3, #0
{
 80101a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101a4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80101a6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80101a8:	3340      	adds	r3, #64	; 0x40
 80101aa:	5cc2      	ldrb	r2, [r0, r3]
{
 80101ac:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80101ae:	2a01      	cmp	r2, #1
 80101b0:	d044      	beq.n	801023c <HAL_ADC_ConfigChannel+0x9c>
 80101b2:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80101b4:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80101b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 80101b8:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80101ba:	68b3      	ldr	r3, [r6, #8]
 80101bc:	075b      	lsls	r3, r3, #29
 80101be:	d509      	bpl.n	80101d4 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80101c0:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 80101c2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80101c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80101c6:	4313      	orrs	r3, r2
 80101c8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80101ca:	2340      	movs	r3, #64	; 0x40
 80101cc:	2200      	movs	r2, #0
 80101ce:	54e2      	strb	r2, [r4, r3]
}
 80101d0:	b003      	add	sp, #12
 80101d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101d4:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80101d6:	4d33      	ldr	r5, [pc, #204]	; (80102a4 <HAL_ADC_ConfigChannel+0x104>)
 80101d8:	001f      	movs	r7, r3
 80101da:	46ac      	mov	ip, r5
 80101dc:	684d      	ldr	r5, [r1, #4]
 80101de:	409a      	lsls	r2, r3
 80101e0:	3f10      	subs	r7, #16
 80101e2:	4565      	cmp	r5, ip
 80101e4:	d02c      	beq.n	8010240 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80101e6:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 80101e8:	432a      	orrs	r2, r5
 80101ea:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80101ec:	2280      	movs	r2, #128	; 0x80
 80101ee:	0552      	lsls	r2, r2, #21
 80101f0:	4290      	cmp	r0, r2
 80101f2:	d00f      	beq.n	8010214 <HAL_ADC_ConfigChannel+0x74>
 80101f4:	3801      	subs	r0, #1
 80101f6:	2806      	cmp	r0, #6
 80101f8:	d90c      	bls.n	8010214 <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80101fa:	2207      	movs	r2, #7
 80101fc:	6888      	ldr	r0, [r1, #8]
 80101fe:	6971      	ldr	r1, [r6, #20]
 8010200:	4011      	ands	r1, r2
 8010202:	4288      	cmp	r0, r1
 8010204:	d006      	beq.n	8010214 <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010206:	6971      	ldr	r1, [r6, #20]
 8010208:	4391      	bics	r1, r2
 801020a:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 801020c:	6971      	ldr	r1, [r6, #20]
 801020e:	4002      	ands	r2, r0
 8010210:	430a      	orrs	r2, r1
 8010212:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010214:	2f02      	cmp	r7, #2
 8010216:	d80f      	bhi.n	8010238 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010218:	4923      	ldr	r1, [pc, #140]	; (80102a8 <HAL_ADC_ConfigChannel+0x108>)
 801021a:	680a      	ldr	r2, [r1, #0]
 801021c:	2b10      	cmp	r3, #16
 801021e:	d029      	beq.n	8010274 <HAL_ADC_ConfigChannel+0xd4>
 8010220:	3b11      	subs	r3, #17
 8010222:	4258      	negs	r0, r3
 8010224:	4143      	adcs	r3, r0
 8010226:	4821      	ldr	r0, [pc, #132]	; (80102ac <HAL_ADC_ConfigChannel+0x10c>)
 8010228:	425b      	negs	r3, r3
 801022a:	4003      	ands	r3, r0
 801022c:	2080      	movs	r0, #128	; 0x80
 801022e:	0440      	lsls	r0, r0, #17
 8010230:	4684      	mov	ip, r0
 8010232:	4463      	add	r3, ip
 8010234:	4313      	orrs	r3, r2
 8010236:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010238:	2000      	movs	r0, #0
 801023a:	e7c6      	b.n	80101ca <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 801023c:	2002      	movs	r0, #2
 801023e:	e7c7      	b.n	80101d0 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010240:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8010242:	4391      	bics	r1, r2
 8010244:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010246:	2f02      	cmp	r7, #2
 8010248:	d8f6      	bhi.n	8010238 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801024a:	4a17      	ldr	r2, [pc, #92]	; (80102a8 <HAL_ADC_ConfigChannel+0x108>)
 801024c:	6811      	ldr	r1, [r2, #0]
 801024e:	2b10      	cmp	r3, #16
 8010250:	d00e      	beq.n	8010270 <HAL_ADC_ConfigChannel+0xd0>
 8010252:	3b11      	subs	r3, #17
 8010254:	001a      	movs	r2, r3
 8010256:	1e53      	subs	r3, r2, #1
 8010258:	419a      	sbcs	r2, r3
 801025a:	4b14      	ldr	r3, [pc, #80]	; (80102ac <HAL_ADC_ConfigChannel+0x10c>)
 801025c:	4252      	negs	r2, r2
 801025e:	4013      	ands	r3, r2
 8010260:	4a13      	ldr	r2, [pc, #76]	; (80102b0 <HAL_ADC_ConfigChannel+0x110>)
 8010262:	4694      	mov	ip, r2
 8010264:	4463      	add	r3, ip
 8010266:	4a10      	ldr	r2, [pc, #64]	; (80102a8 <HAL_ADC_ConfigChannel+0x108>)
 8010268:	400b      	ands	r3, r1
 801026a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801026c:	2000      	movs	r0, #0
 801026e:	e7ac      	b.n	80101ca <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010270:	4b10      	ldr	r3, [pc, #64]	; (80102b4 <HAL_ADC_ConfigChannel+0x114>)
 8010272:	e7f8      	b.n	8010266 <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010274:	2380      	movs	r3, #128	; 0x80
 8010276:	041b      	lsls	r3, r3, #16
 8010278:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 801027a:	4b0f      	ldr	r3, [pc, #60]	; (80102b8 <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801027c:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 801027e:	6818      	ldr	r0, [r3, #0]
 8010280:	490e      	ldr	r1, [pc, #56]	; (80102bc <HAL_ADC_ConfigChannel+0x11c>)
 8010282:	f7ef ff65 	bl	8000150 <__udivsi3>
 8010286:	0083      	lsls	r3, r0, #2
 8010288:	1818      	adds	r0, r3, r0
 801028a:	0040      	lsls	r0, r0, #1
 801028c:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 801028e:	9b01      	ldr	r3, [sp, #4]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d0d1      	beq.n	8010238 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 8010294:	9b01      	ldr	r3, [sp, #4]
 8010296:	3b01      	subs	r3, #1
 8010298:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 801029a:	9b01      	ldr	r3, [sp, #4]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d1f9      	bne.n	8010294 <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80102a0:	2000      	movs	r0, #0
 80102a2:	e792      	b.n	80101ca <HAL_ADC_ConfigChannel+0x2a>
 80102a4:	00001001 	.word	0x00001001
 80102a8:	40012708 	.word	0x40012708
 80102ac:	ff400000 	.word	0xff400000
 80102b0:	ffbfffff 	.word	0xffbfffff
 80102b4:	ff7fffff 	.word	0xff7fffff
 80102b8:	200000c4 	.word	0x200000c4
 80102bc:	000f4240 	.word	0x000f4240

080102c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80102c0:	22ff      	movs	r2, #255	; 0xff
 80102c2:	2303      	movs	r3, #3
 80102c4:	b530      	push	{r4, r5, lr}
 80102c6:	0014      	movs	r4, r2
 80102c8:	b2c5      	uxtb	r5, r0
 80102ca:	402b      	ands	r3, r5
 80102cc:	00db      	lsls	r3, r3, #3
 80102ce:	409c      	lsls	r4, r3
 80102d0:	0189      	lsls	r1, r1, #6
 80102d2:	400a      	ands	r2, r1
 80102d4:	43e4      	mvns	r4, r4
 80102d6:	409a      	lsls	r2, r3
  if((int32_t)(IRQn) < 0) {
 80102d8:	2800      	cmp	r0, #0
 80102da:	db0b      	blt.n	80102f4 <HAL_NVIC_SetPriority+0x34>
 80102dc:	4b0c      	ldr	r3, [pc, #48]	; (8010310 <HAL_NVIC_SetPriority+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80102de:	0880      	lsrs	r0, r0, #2
 80102e0:	469c      	mov	ip, r3
 80102e2:	23c0      	movs	r3, #192	; 0xc0
 80102e4:	0080      	lsls	r0, r0, #2
 80102e6:	4460      	add	r0, ip
 80102e8:	009b      	lsls	r3, r3, #2
 80102ea:	58c1      	ldr	r1, [r0, r3]
 80102ec:	400c      	ands	r4, r1
 80102ee:	4322      	orrs	r2, r4
 80102f0:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80102f2:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80102f4:	230f      	movs	r3, #15
 80102f6:	4907      	ldr	r1, [pc, #28]	; (8010314 <HAL_NVIC_SetPriority+0x54>)
 80102f8:	402b      	ands	r3, r5
 80102fa:	468c      	mov	ip, r1
 80102fc:	3b08      	subs	r3, #8
 80102fe:	089b      	lsrs	r3, r3, #2
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	4463      	add	r3, ip
 8010304:	69d9      	ldr	r1, [r3, #28]
 8010306:	400c      	ands	r4, r1
 8010308:	4322      	orrs	r2, r4
 801030a:	61da      	str	r2, [r3, #28]
 801030c:	e7f1      	b.n	80102f2 <HAL_NVIC_SetPriority+0x32>
 801030e:	46c0      	nop			; (mov r8, r8)
 8010310:	e000e100 	.word	0xe000e100
 8010314:	e000ed00 	.word	0xe000ed00

08010318 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010318:	231f      	movs	r3, #31
 801031a:	4018      	ands	r0, r3
 801031c:	3b1e      	subs	r3, #30
 801031e:	4083      	lsls	r3, r0
 8010320:	4a01      	ldr	r2, [pc, #4]	; (8010328 <HAL_NVIC_EnableIRQ+0x10>)
 8010322:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010324:	4770      	bx	lr
 8010326:	46c0      	nop			; (mov r8, r8)
 8010328:	e000e100 	.word	0xe000e100

0801032c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801032c:	231f      	movs	r3, #31
 801032e:	4018      	ands	r0, r3
 8010330:	3b1e      	subs	r3, #30
 8010332:	4083      	lsls	r3, r0
 8010334:	2280      	movs	r2, #128	; 0x80
 8010336:	4901      	ldr	r1, [pc, #4]	; (801033c <HAL_NVIC_DisableIRQ+0x10>)
 8010338:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 801033a:	4770      	bx	lr
 801033c:	e000e100 	.word	0xe000e100

08010340 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010340:	4a0a      	ldr	r2, [pc, #40]	; (801036c <HAL_SYSTICK_Config+0x2c>)
 8010342:	1e43      	subs	r3, r0, #1
 8010344:	2001      	movs	r0, #1
 8010346:	4293      	cmp	r3, r2
 8010348:	d80e      	bhi.n	8010368 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801034a:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801034c:	4a08      	ldr	r2, [pc, #32]	; (8010370 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801034e:	4809      	ldr	r0, [pc, #36]	; (8010374 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010350:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010352:	6a03      	ldr	r3, [r0, #32]
 8010354:	0609      	lsls	r1, r1, #24
 8010356:	021b      	lsls	r3, r3, #8
 8010358:	0a1b      	lsrs	r3, r3, #8
 801035a:	430b      	orrs	r3, r1
 801035c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801035e:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010360:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010362:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010364:	3307      	adds	r3, #7
 8010366:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010368:	4770      	bx	lr
 801036a:	46c0      	nop			; (mov r8, r8)
 801036c:	00ffffff 	.word	0x00ffffff
 8010370:	e000e010 	.word	0xe000e010
 8010374:	e000ed00 	.word	0xe000ed00

08010378 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010378:	4a05      	ldr	r2, [pc, #20]	; (8010390 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 801037a:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 801037c:	2804      	cmp	r0, #4
 801037e:	d003      	beq.n	8010388 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010380:	2104      	movs	r1, #4
 8010382:	438b      	bics	r3, r1
 8010384:	6013      	str	r3, [r2, #0]
  }
}
 8010386:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010388:	4318      	orrs	r0, r3
 801038a:	6010      	str	r0, [r2, #0]
 801038c:	e7fb      	b.n	8010386 <HAL_SYSTICK_CLKSourceConfig+0xe>
 801038e:	46c0      	nop			; (mov r8, r8)
 8010390:	e000e010 	.word	0xe000e010

08010394 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010396:	468c      	mov	ip, r1
 8010398:	6806      	ldr	r6, [r0, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 801039a:	0891      	lsrs	r1, r2, #2
 801039c:	d010      	beq.n	80103c0 <CRC_Handle_8+0x2c>
 801039e:	4664      	mov	r4, ip
 80103a0:	008f      	lsls	r7, r1, #2
 80103a2:	4467      	add	r7, ip
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 80103a4:	7823      	ldrb	r3, [r4, #0]
 80103a6:	7865      	ldrb	r5, [r4, #1]
 80103a8:	061b      	lsls	r3, r3, #24
 80103aa:	042d      	lsls	r5, r5, #16
 80103ac:	432b      	orrs	r3, r5
 80103ae:	78e5      	ldrb	r5, [r4, #3]
 80103b0:	432b      	orrs	r3, r5
 80103b2:	78a5      	ldrb	r5, [r4, #2]
 80103b4:	3404      	adds	r4, #4
 80103b6:	022d      	lsls	r5, r5, #8
 80103b8:	432b      	orrs	r3, r5
 80103ba:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 80103bc:	42a7      	cmp	r7, r4
 80103be:	d1f1      	bne.n	80103a4 <CRC_Handle_8+0x10>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 80103c0:	2303      	movs	r3, #3
 80103c2:	401a      	ands	r2, r3
 80103c4:	d00b      	beq.n	80103de <CRC_Handle_8+0x4a>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 80103c6:	0089      	lsls	r1, r1, #2
 80103c8:	4663      	mov	r3, ip
     if  (BufferLength%4 == 1)
 80103ca:	2a01      	cmp	r2, #1
 80103cc:	d013      	beq.n	80103f6 <CRC_Handle_8+0x62>
     }
     if  (BufferLength%4 == 2)
 80103ce:	2a02      	cmp	r2, #2
 80103d0:	d107      	bne.n	80103e2 <CRC_Handle_8+0x4e>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80103d2:	5c5a      	ldrb	r2, [r3, r1]
 80103d4:	4461      	add	r1, ip
 80103d6:	784b      	ldrb	r3, [r1, #1]
 80103d8:	0212      	lsls	r2, r2, #8
 80103da:	4313      	orrs	r3, r2
 80103dc:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80103de:	6830      	ldr	r0, [r6, #0]
}
 80103e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80103e2:	5c5a      	ldrb	r2, [r3, r1]
 80103e4:	4461      	add	r1, ip
 80103e6:	784b      	ldrb	r3, [r1, #1]
 80103e8:	0212      	lsls	r2, r2, #8
 80103ea:	4313      	orrs	r3, r2
 80103ec:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 80103ee:	788b      	ldrb	r3, [r1, #2]
 80103f0:	7033      	strb	r3, [r6, #0]
 80103f2:	6806      	ldr	r6, [r0, #0]
 80103f4:	e7f3      	b.n	80103de <CRC_Handle_8+0x4a>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 80103f6:	5ccb      	ldrb	r3, [r1, r3]
 80103f8:	7033      	strb	r3, [r6, #0]
 80103fa:	6806      	ldr	r6, [r0, #0]
 80103fc:	e7ef      	b.n	80103de <CRC_Handle_8+0x4a>
 80103fe:	46c0      	nop			; (mov r8, r8)

08010400 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010400:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010402:	0857      	lsrs	r7, r2, #1
 8010404:	6805      	ldr	r5, [r0, #0]
 8010406:	d00a      	beq.n	801041e <CRC_Handle_16+0x1e>
 8010408:	0008      	movs	r0, r1
 801040a:	00be      	lsls	r6, r7, #2
 801040c:	1876      	adds	r6, r6, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 801040e:	8803      	ldrh	r3, [r0, #0]
 8010410:	8844      	ldrh	r4, [r0, #2]
 8010412:	041b      	lsls	r3, r3, #16
 8010414:	4323      	orrs	r3, r4
 8010416:	3004      	adds	r0, #4
 8010418:	602b      	str	r3, [r5, #0]
  for(i = 0; i < (BufferLength/2); i++)
 801041a:	4286      	cmp	r6, r0
 801041c:	d1f7      	bne.n	801040e <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 801041e:	07d3      	lsls	r3, r2, #31
 8010420:	d502      	bpl.n	8010428 <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8010422:	00bf      	lsls	r7, r7, #2
 8010424:	5a7b      	ldrh	r3, [r7, r1]
 8010426:	802b      	strh	r3, [r5, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010428:	6828      	ldr	r0, [r5, #0]
}
 801042a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801042c <HAL_CRC_Init>:
{
 801042c:	b510      	push	{r4, lr}
 801042e:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010430:	d01f      	beq.n	8010472 <HAL_CRC_Init+0x46>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010432:	7f43      	ldrb	r3, [r0, #29]
 8010434:	b2db      	uxtb	r3, r3
 8010436:	2b00      	cmp	r3, #0
 8010438:	d01d      	beq.n	8010476 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 801043a:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 801043c:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 801043e:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010440:	f000 f8ae 	bl	80105a0 <HAL_CRCEx_Init>
 8010444:	2800      	cmp	r0, #0
 8010446:	d114      	bne.n	8010472 <HAL_CRC_Init+0x46>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010448:	7963      	ldrb	r3, [r4, #5]
 801044a:	6822      	ldr	r2, [r4, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d01d      	beq.n	801048c <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010450:	6923      	ldr	r3, [r4, #16]
 8010452:	6113      	str	r3, [r2, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010454:	2160      	movs	r1, #96	; 0x60
 8010456:	6893      	ldr	r3, [r2, #8]
 8010458:	438b      	bics	r3, r1
 801045a:	6961      	ldr	r1, [r4, #20]
 801045c:	430b      	orrs	r3, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 801045e:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010460:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010462:	6893      	ldr	r3, [r2, #8]
 8010464:	438b      	bics	r3, r1
 8010466:	69a1      	ldr	r1, [r4, #24]
 8010468:	430b      	orrs	r3, r1
 801046a:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 801046c:	2301      	movs	r3, #1
 801046e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8010470:	e000      	b.n	8010474 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010472:	2001      	movs	r0, #1
}
 8010474:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8010476:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010478:	f7fb fa22 	bl	800b8c0 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 801047c:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 801047e:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010480:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010482:	f000 f88d 	bl	80105a0 <HAL_CRCEx_Init>
 8010486:	2800      	cmp	r0, #0
 8010488:	d0de      	beq.n	8010448 <HAL_CRC_Init+0x1c>
 801048a:	e7f2      	b.n	8010472 <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 801048c:	3b01      	subs	r3, #1
 801048e:	6113      	str	r3, [r2, #16]
 8010490:	e7e0      	b.n	8010454 <HAL_CRC_Init+0x28>
 8010492:	46c0      	nop			; (mov r8, r8)

08010494 <HAL_CRC_Accumulate>:
{
 8010494:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 8010496:	7f03      	ldrb	r3, [r0, #28]
{
 8010498:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 801049a:	2b01      	cmp	r3, #1
 801049c:	d021      	beq.n	80104e2 <HAL_CRC_Accumulate+0x4e>
 801049e:	2301      	movs	r3, #1
 80104a0:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80104a2:	3301      	adds	r3, #1
 80104a4:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 80104a6:	6a03      	ldr	r3, [r0, #32]
 80104a8:	2b02      	cmp	r3, #2
 80104aa:	d017      	beq.n	80104dc <HAL_CRC_Accumulate+0x48>
 80104ac:	2b03      	cmp	r3, #3
 80104ae:	d00a      	beq.n	80104c6 <HAL_CRC_Accumulate+0x32>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 80104b0:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d102      	bne.n	80104bc <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80104b6:	0020      	movs	r0, r4
 80104b8:	f7ff ff6c 	bl	8010394 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY; 
 80104bc:	2301      	movs	r3, #1
 80104be:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80104c0:	2300      	movs	r3, #0
 80104c2:	7723      	strb	r3, [r4, #28]
}
 80104c4:	bd10      	pop	{r4, pc}
 80104c6:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 80104c8:	2a00      	cmp	r2, #0
 80104ca:	d005      	beq.n	80104d8 <HAL_CRC_Accumulate+0x44>
 80104cc:	0092      	lsls	r2, r2, #2
 80104ce:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80104d0:	c908      	ldmia	r1!, {r3}
 80104d2:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 80104d4:	428a      	cmp	r2, r1
 80104d6:	d1fb      	bne.n	80104d0 <HAL_CRC_Accumulate+0x3c>
      temp = hcrc->Instance->DR;
 80104d8:	6800      	ldr	r0, [r0, #0]
      break;
 80104da:	e7ef      	b.n	80104bc <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80104dc:	f7ff ff90 	bl	8010400 <CRC_Handle_16>
      break;
 80104e0:	e7ec      	b.n	80104bc <HAL_CRC_Accumulate+0x28>
  __HAL_LOCK(hcrc); 
 80104e2:	2002      	movs	r0, #2
 80104e4:	e7ee      	b.n	80104c4 <HAL_CRC_Accumulate+0x30>
 80104e6:	46c0      	nop			; (mov r8, r8)

080104e8 <HAL_CRC_Calculate>:
{
 80104e8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 80104ea:	7f03      	ldrb	r3, [r0, #28]
{
 80104ec:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	d026      	beq.n	8010540 <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80104f2:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 80104f4:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 80104f6:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80104f8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 80104fa:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 80104fc:	6898      	ldr	r0, [r3, #8]
 80104fe:	4328      	orrs	r0, r5
 8010500:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 8010502:	6a20      	ldr	r0, [r4, #32]
 8010504:	2802      	cmp	r0, #2
 8010506:	d017      	beq.n	8010538 <HAL_CRC_Calculate+0x50>
 8010508:	2803      	cmp	r0, #3
 801050a:	d007      	beq.n	801051c <HAL_CRC_Calculate+0x34>
 801050c:	2801      	cmp	r0, #1
 801050e:	d00f      	beq.n	8010530 <HAL_CRC_Calculate+0x48>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010510:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8010512:	2301      	movs	r3, #1
 8010514:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010516:	2300      	movs	r3, #0
 8010518:	7723      	strb	r3, [r4, #28]
}
 801051a:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 801051c:	2a00      	cmp	r2, #0
 801051e:	d005      	beq.n	801052c <HAL_CRC_Calculate+0x44>
 8010520:	0092      	lsls	r2, r2, #2
 8010522:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010524:	c901      	ldmia	r1!, {r0}
 8010526:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 8010528:	4291      	cmp	r1, r2
 801052a:	d1fb      	bne.n	8010524 <HAL_CRC_Calculate+0x3c>
      temp = hcrc->Instance->DR;
 801052c:	6818      	ldr	r0, [r3, #0]
      break;
 801052e:	e7f0      	b.n	8010512 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010530:	0020      	movs	r0, r4
 8010532:	f7ff ff2f 	bl	8010394 <CRC_Handle_8>
      break;
 8010536:	e7ec      	b.n	8010512 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010538:	0020      	movs	r0, r4
 801053a:	f7ff ff61 	bl	8010400 <CRC_Handle_16>
      break;
 801053e:	e7e8      	b.n	8010512 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010540:	2002      	movs	r0, #2
 8010542:	e7ea      	b.n	801051a <HAL_CRC_Calculate+0x32>

08010544 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010544:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010546:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010548:	2501      	movs	r5, #1
 801054a:	e001      	b.n	8010550 <HAL_CRCEx_Polynomial_Set+0xc>
 801054c:	3b01      	subs	r3, #1
 801054e:	d312      	bcc.n	8010576 <HAL_CRCEx_Polynomial_Set+0x32>
 8010550:	002c      	movs	r4, r5
 8010552:	409c      	lsls	r4, r3
 8010554:	4221      	tst	r1, r4
 8010556:	d0f9      	beq.n	801054c <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 8010558:	2a10      	cmp	r2, #16
 801055a:	d01c      	beq.n	8010596 <HAL_CRCEx_Polynomial_Set+0x52>
 801055c:	2a18      	cmp	r2, #24
 801055e:	d012      	beq.n	8010586 <HAL_CRCEx_Polynomial_Set+0x42>
 8010560:	2a08      	cmp	r2, #8
 8010562:	d014      	beq.n	801058e <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010564:	6800      	ldr	r0, [r0, #0]
 8010566:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010568:	2118      	movs	r1, #24
 801056a:	6883      	ldr	r3, [r0, #8]
 801056c:	438b      	bics	r3, r1
 801056e:	431a      	orrs	r2, r3
 8010570:	6082      	str	r2, [r0, #8]
 8010572:	2000      	movs	r0, #0
  
  /* Return function status */
  return HAL_OK;
}
 8010574:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 8010576:	2a10      	cmp	r2, #16
 8010578:	d003      	beq.n	8010582 <HAL_CRCEx_Polynomial_Set+0x3e>
 801057a:	2a18      	cmp	r2, #24
 801057c:	d001      	beq.n	8010582 <HAL_CRCEx_Polynomial_Set+0x3e>
 801057e:	2a08      	cmp	r2, #8
 8010580:	d1f0      	bne.n	8010564 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 8010582:	2001      	movs	r0, #1
 8010584:	e7f6      	b.n	8010574 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 8010586:	2b06      	cmp	r3, #6
 8010588:	d9ec      	bls.n	8010564 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 801058a:	2001      	movs	r0, #1
 801058c:	e7f2      	b.n	8010574 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 801058e:	2b0f      	cmp	r3, #15
 8010590:	d9e8      	bls.n	8010564 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 8010592:	2001      	movs	r0, #1
 8010594:	e7ee      	b.n	8010574 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 8010596:	2b07      	cmp	r3, #7
 8010598:	d9e4      	bls.n	8010564 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 801059a:	2001      	movs	r0, #1
 801059c:	e7ea      	b.n	8010574 <HAL_CRCEx_Polynomial_Set+0x30>
 801059e:	46c0      	nop			; (mov r8, r8)

080105a0 <HAL_CRCEx_Init>:
{
 80105a0:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80105a2:	7903      	ldrb	r3, [r0, #4]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d108      	bne.n	80105ba <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80105a8:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80105aa:	6803      	ldr	r3, [r0, #0]
   return HAL_OK;
 80105ac:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80105ae:	4a07      	ldr	r2, [pc, #28]	; (80105cc <HAL_CRCEx_Init+0x2c>)
 80105b0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80105b2:	689a      	ldr	r2, [r3, #8]
 80105b4:	438a      	bics	r2, r1
 80105b6:	609a      	str	r2, [r3, #8]
}
 80105b8:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80105ba:	68c2      	ldr	r2, [r0, #12]
 80105bc:	6881      	ldr	r1, [r0, #8]
 80105be:	f7ff ffc1 	bl	8010544 <HAL_CRCEx_Polynomial_Set>
 80105c2:	1e43      	subs	r3, r0, #1
 80105c4:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 80105c6:	b2c0      	uxtb	r0, r0
 80105c8:	e7f6      	b.n	80105b8 <HAL_CRCEx_Init+0x18>
 80105ca:	46c0      	nop			; (mov r8, r8)
 80105cc:	04c11db7 	.word	0x04c11db7

080105d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80105d0:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80105d2:	2800      	cmp	r0, #0
 80105d4:	d023      	beq.n	801061e <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 80105d6:	2321      	movs	r3, #33	; 0x21
 80105d8:	5cc3      	ldrb	r3, [r0, r3]
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d01b      	beq.n	8010618 <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80105e0:	2121      	movs	r1, #33	; 0x21
 80105e2:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80105e4:	6804      	ldr	r4, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80105e6:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 80105e8:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80105ea:	4a0e      	ldr	r2, [pc, #56]	; (8010624 <HAL_DMA_Init+0x54>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80105ec:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80105ee:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80105f0:	6843      	ldr	r3, [r0, #4]
 80105f2:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80105f4:	68c5      	ldr	r5, [r0, #12]
 80105f6:	432b      	orrs	r3, r5
 80105f8:	6905      	ldr	r5, [r0, #16]
 80105fa:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80105fc:	6945      	ldr	r5, [r0, #20]
 80105fe:	432b      	orrs	r3, r5
 8010600:	6985      	ldr	r5, [r0, #24]
 8010602:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010604:	69c5      	ldr	r5, [r0, #28]
 8010606:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010608:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 801060a:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801060c:	2300      	movs	r3, #0
 801060e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010610:	3301      	adds	r3, #1
 8010612:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010614:	2000      	movs	r0, #0
}  
 8010616:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 8010618:	2220      	movs	r2, #32
 801061a:	5483      	strb	r3, [r0, r2]
 801061c:	e7e0      	b.n	80105e0 <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 801061e:	2001      	movs	r0, #1
 8010620:	e7f9      	b.n	8010616 <HAL_DMA_Init+0x46>
 8010622:	46c0      	nop			; (mov r8, r8)
 8010624:	ffffc00f 	.word	0xffffc00f

08010628 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010628:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 801062a:	2420      	movs	r4, #32
 801062c:	5d05      	ldrb	r5, [r0, r4]
 801062e:	2d01      	cmp	r5, #1
 8010630:	d023      	beq.n	801067a <HAL_DMA_Start_IT+0x52>
 8010632:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010634:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 8010636:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010638:	3401      	adds	r4, #1
 801063a:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801063c:	6804      	ldr	r4, [r0, #0]
 801063e:	6825      	ldr	r5, [r4, #0]
 8010640:	43b5      	bics	r5, r6
 8010642:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010644:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010646:	6843      	ldr	r3, [r0, #4]
 8010648:	2b10      	cmp	r3, #16
 801064a:	d013      	beq.n	8010674 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 801064c:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 801064e:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010650:	2202      	movs	r2, #2
  return HAL_OK;    
 8010652:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010654:	6823      	ldr	r3, [r4, #0]
 8010656:	4313      	orrs	r3, r2
 8010658:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 801065a:	6823      	ldr	r3, [r4, #0]
 801065c:	3202      	adds	r2, #2
 801065e:	4313      	orrs	r3, r2
 8010660:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010662:	6823      	ldr	r3, [r4, #0]
 8010664:	3204      	adds	r2, #4
 8010666:	4313      	orrs	r3, r2
 8010668:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 801066a:	6823      	ldr	r3, [r4, #0]
 801066c:	3a07      	subs	r2, #7
 801066e:	4313      	orrs	r3, r2
 8010670:	6023      	str	r3, [r4, #0]
} 
 8010672:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8010674:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010676:	60e1      	str	r1, [r4, #12]
 8010678:	e7ea      	b.n	8010650 <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 801067a:	2002      	movs	r0, #2
 801067c:	e7f9      	b.n	8010672 <HAL_DMA_Start_IT+0x4a>
 801067e:	46c0      	nop			; (mov r8, r8)

08010680 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 8010680:	2101      	movs	r1, #1
 8010682:	6802      	ldr	r2, [r0, #0]
{
 8010684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 8010686:	6813      	ldr	r3, [r2, #0]
{
 8010688:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801068a:	438b      	bics	r3, r1
 801068c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 801068e:	f7ff fad9 	bl	800fc44 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010692:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 8010694:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010696:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010698:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801069a:	e004      	b.n	80106a6 <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 801069c:	f7ff fad2 	bl	800fc44 <HAL_GetTick>
 80106a0:	1bc0      	subs	r0, r0, r7
 80106a2:	42b0      	cmp	r0, r6
 80106a4:	d809      	bhi.n	80106ba <HAL_DMA_Abort+0x3a>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80106a6:	6823      	ldr	r3, [r4, #0]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	402b      	ands	r3, r5
 80106ac:	d1f6      	bne.n	801069c <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 80106ae:	2221      	movs	r2, #33	; 0x21
  return HAL_OK; 
 80106b0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 80106b2:	54a5      	strb	r5, [r4, r2]
  __HAL_UNLOCK(hdma);
 80106b4:	3a01      	subs	r2, #1
 80106b6:	54a3      	strb	r3, [r4, r2]
}
 80106b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80106ba:	2220      	movs	r2, #32
 80106bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80106be:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80106c0:	4313      	orrs	r3, r2
 80106c2:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80106c4:	2321      	movs	r3, #33	; 0x21
 80106c6:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 80106c8:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80106ca:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 80106cc:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 80106ce:	e7f3      	b.n	80106b8 <HAL_DMA_Abort+0x38>

080106d0 <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80106d0:	6803      	ldr	r3, [r0, #0]
 80106d2:	4aa2      	ldr	r2, [pc, #648]	; (801095c <HAL_DMA_IRQHandler+0x28c>)
{        
 80106d4:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80106d6:	0019      	movs	r1, r3
{        
 80106d8:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80106da:	4293      	cmp	r3, r2
 80106dc:	d937      	bls.n	801074e <HAL_DMA_IRQHandler+0x7e>
 80106de:	48a0      	ldr	r0, [pc, #640]	; (8010960 <HAL_DMA_IRQHandler+0x290>)
 80106e0:	4da0      	ldr	r5, [pc, #640]	; (8010964 <HAL_DMA_IRQHandler+0x294>)
 80106e2:	6806      	ldr	r6, [r0, #0]
 80106e4:	42ab      	cmp	r3, r5
 80106e6:	d100      	bne.n	80106ea <HAL_DMA_IRQHandler+0x1a>
 80106e8:	e0ed      	b.n	80108c6 <HAL_DMA_IRQHandler+0x1f6>
 80106ea:	4d9f      	ldr	r5, [pc, #636]	; (8010968 <HAL_DMA_IRQHandler+0x298>)
 80106ec:	42ab      	cmp	r3, r5
 80106ee:	d100      	bne.n	80106f2 <HAL_DMA_IRQHandler+0x22>
 80106f0:	e334      	b.n	8010d5c <HAL_DMA_IRQHandler+0x68c>
 80106f2:	4d9e      	ldr	r5, [pc, #632]	; (801096c <HAL_DMA_IRQHandler+0x29c>)
 80106f4:	42ab      	cmp	r3, r5
 80106f6:	d100      	bne.n	80106fa <HAL_DMA_IRQHandler+0x2a>
 80106f8:	e129      	b.n	801094e <HAL_DMA_IRQHandler+0x27e>
 80106fa:	4d9d      	ldr	r5, [pc, #628]	; (8010970 <HAL_DMA_IRQHandler+0x2a0>)
 80106fc:	42ab      	cmp	r3, r5
 80106fe:	d100      	bne.n	8010702 <HAL_DMA_IRQHandler+0x32>
 8010700:	e34b      	b.n	8010d9a <HAL_DMA_IRQHandler+0x6ca>
 8010702:	4d9c      	ldr	r5, [pc, #624]	; (8010974 <HAL_DMA_IRQHandler+0x2a4>)
 8010704:	42ab      	cmp	r3, r5
 8010706:	d100      	bne.n	801070a <HAL_DMA_IRQHandler+0x3a>
 8010708:	e38b      	b.n	8010e22 <HAL_DMA_IRQHandler+0x752>
 801070a:	4d9b      	ldr	r5, [pc, #620]	; (8010978 <HAL_DMA_IRQHandler+0x2a8>)
 801070c:	42ab      	cmp	r3, r5
 801070e:	d100      	bne.n	8010712 <HAL_DMA_IRQHandler+0x42>
 8010710:	e3cf      	b.n	8010eb2 <HAL_DMA_IRQHandler+0x7e2>
 8010712:	4293      	cmp	r3, r2
 8010714:	d100      	bne.n	8010718 <HAL_DMA_IRQHandler+0x48>
 8010716:	e35e      	b.n	8010dd6 <HAL_DMA_IRQHandler+0x706>
 8010718:	4a98      	ldr	r2, [pc, #608]	; (801097c <HAL_DMA_IRQHandler+0x2ac>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d101      	bne.n	8010722 <HAL_DMA_IRQHandler+0x52>
 801071e:	f000 fbe8 	bl	8010ef2 <HAL_DMA_IRQHandler+0x822>
 8010722:	4a97      	ldr	r2, [pc, #604]	; (8010980 <HAL_DMA_IRQHandler+0x2b0>)
 8010724:	4293      	cmp	r3, r2
 8010726:	d101      	bne.n	801072c <HAL_DMA_IRQHandler+0x5c>
 8010728:	f000 fc04 	bl	8010f34 <HAL_DMA_IRQHandler+0x864>
 801072c:	4a95      	ldr	r2, [pc, #596]	; (8010984 <HAL_DMA_IRQHandler+0x2b4>)
 801072e:	4293      	cmp	r3, r2
 8010730:	d101      	bne.n	8010736 <HAL_DMA_IRQHandler+0x66>
 8010732:	f000 fc21 	bl	8010f78 <HAL_DMA_IRQHandler+0x8a8>
 8010736:	4a94      	ldr	r2, [pc, #592]	; (8010988 <HAL_DMA_IRQHandler+0x2b8>)
 8010738:	4293      	cmp	r3, r2
 801073a:	d101      	bne.n	8010740 <HAL_DMA_IRQHandler+0x70>
 801073c:	f000 fc37 	bl	8010fae <HAL_DMA_IRQHandler+0x8de>
 8010740:	0332      	lsls	r2, r6, #12
 8010742:	d43c      	bmi.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010744:	4a86      	ldr	r2, [pc, #536]	; (8010960 <HAL_DMA_IRQHandler+0x290>)
 8010746:	6810      	ldr	r0, [r2, #0]
 8010748:	2280      	movs	r2, #128	; 0x80
 801074a:	02d2      	lsls	r2, r2, #11
 801074c:	e0c0      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801074e:	488f      	ldr	r0, [pc, #572]	; (801098c <HAL_DMA_IRQHandler+0x2bc>)
 8010750:	4d84      	ldr	r5, [pc, #528]	; (8010964 <HAL_DMA_IRQHandler+0x294>)
 8010752:	6806      	ldr	r6, [r0, #0]
 8010754:	42ab      	cmp	r3, r5
 8010756:	d02e      	beq.n	80107b6 <HAL_DMA_IRQHandler+0xe6>
 8010758:	4d83      	ldr	r5, [pc, #524]	; (8010968 <HAL_DMA_IRQHandler+0x298>)
 801075a:	42ab      	cmp	r3, r5
 801075c:	d100      	bne.n	8010760 <HAL_DMA_IRQHandler+0x90>
 801075e:	e2f6      	b.n	8010d4e <HAL_DMA_IRQHandler+0x67e>
 8010760:	4d82      	ldr	r5, [pc, #520]	; (801096c <HAL_DMA_IRQHandler+0x29c>)
 8010762:	42ab      	cmp	r3, r5
 8010764:	d100      	bne.n	8010768 <HAL_DMA_IRQHandler+0x98>
 8010766:	e0ea      	b.n	801093e <HAL_DMA_IRQHandler+0x26e>
 8010768:	4d81      	ldr	r5, [pc, #516]	; (8010970 <HAL_DMA_IRQHandler+0x2a0>)
 801076a:	42ab      	cmp	r3, r5
 801076c:	d100      	bne.n	8010770 <HAL_DMA_IRQHandler+0xa0>
 801076e:	e30c      	b.n	8010d8a <HAL_DMA_IRQHandler+0x6ba>
 8010770:	4d80      	ldr	r5, [pc, #512]	; (8010974 <HAL_DMA_IRQHandler+0x2a4>)
 8010772:	42ab      	cmp	r3, r5
 8010774:	d100      	bne.n	8010778 <HAL_DMA_IRQHandler+0xa8>
 8010776:	e35b      	b.n	8010e30 <HAL_DMA_IRQHandler+0x760>
 8010778:	4d7f      	ldr	r5, [pc, #508]	; (8010978 <HAL_DMA_IRQHandler+0x2a8>)
 801077a:	42ab      	cmp	r3, r5
 801077c:	d100      	bne.n	8010780 <HAL_DMA_IRQHandler+0xb0>
 801077e:	e390      	b.n	8010ea2 <HAL_DMA_IRQHandler+0x7d2>
 8010780:	4293      	cmp	r3, r2
 8010782:	d100      	bne.n	8010786 <HAL_DMA_IRQHandler+0xb6>
 8010784:	e31f      	b.n	8010dc6 <HAL_DMA_IRQHandler+0x6f6>
 8010786:	4a7d      	ldr	r2, [pc, #500]	; (801097c <HAL_DMA_IRQHandler+0x2ac>)
 8010788:	4293      	cmp	r3, r2
 801078a:	d100      	bne.n	801078e <HAL_DMA_IRQHandler+0xbe>
 801078c:	e3aa      	b.n	8010ee4 <HAL_DMA_IRQHandler+0x814>
 801078e:	4a7c      	ldr	r2, [pc, #496]	; (8010980 <HAL_DMA_IRQHandler+0x2b0>)
 8010790:	4293      	cmp	r3, r2
 8010792:	d100      	bne.n	8010796 <HAL_DMA_IRQHandler+0xc6>
 8010794:	e3c7      	b.n	8010f26 <HAL_DMA_IRQHandler+0x856>
 8010796:	4a7b      	ldr	r2, [pc, #492]	; (8010984 <HAL_DMA_IRQHandler+0x2b4>)
 8010798:	4293      	cmp	r3, r2
 801079a:	d101      	bne.n	80107a0 <HAL_DMA_IRQHandler+0xd0>
 801079c:	f000 fbe4 	bl	8010f68 <HAL_DMA_IRQHandler+0x898>
 80107a0:	4a79      	ldr	r2, [pc, #484]	; (8010988 <HAL_DMA_IRQHandler+0x2b8>)
 80107a2:	4293      	cmp	r3, r2
 80107a4:	d100      	bne.n	80107a8 <HAL_DMA_IRQHandler+0xd8>
 80107a6:	e2e8      	b.n	8010d7a <HAL_DMA_IRQHandler+0x6aa>
 80107a8:	0332      	lsls	r2, r6, #12
 80107aa:	d408      	bmi.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107ac:	4a77      	ldr	r2, [pc, #476]	; (801098c <HAL_DMA_IRQHandler+0x2bc>)
 80107ae:	6810      	ldr	r0, [r2, #0]
 80107b0:	2280      	movs	r2, #128	; 0x80
 80107b2:	02d2      	lsls	r2, r2, #11
 80107b4:	e15f      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80107b6:	0732      	lsls	r2, r6, #28
 80107b8:	d401      	bmi.n	80107be <HAL_DMA_IRQHandler+0xee>
 80107ba:	f000 fc0a 	bl	8010fd2 <HAL_DMA_IRQHandler+0x902>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80107be:	2208      	movs	r2, #8
 80107c0:	6818      	ldr	r0, [r3, #0]
 80107c2:	4202      	tst	r2, r0
 80107c4:	d100      	bne.n	80107c8 <HAL_DMA_IRQHandler+0xf8>
 80107c6:	e1f4      	b.n	8010bb2 <HAL_DMA_IRQHandler+0x4e2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80107c8:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80107ca:	4d66      	ldr	r5, [pc, #408]	; (8010964 <HAL_DMA_IRQHandler+0x294>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80107cc:	4390      	bics	r0, r2
 80107ce:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80107d0:	4862      	ldr	r0, [pc, #392]	; (801095c <HAL_DMA_IRQHandler+0x28c>)
 80107d2:	4283      	cmp	r3, r0
 80107d4:	d800      	bhi.n	80107d8 <HAL_DMA_IRQHandler+0x108>
 80107d6:	e1a9      	b.n	8010b2c <HAL_DMA_IRQHandler+0x45c>
 80107d8:	42ab      	cmp	r3, r5
 80107da:	d100      	bne.n	80107de <HAL_DMA_IRQHandler+0x10e>
 80107dc:	e310      	b.n	8010e00 <HAL_DMA_IRQHandler+0x730>
 80107de:	4a62      	ldr	r2, [pc, #392]	; (8010968 <HAL_DMA_IRQHandler+0x298>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d100      	bne.n	80107e6 <HAL_DMA_IRQHandler+0x116>
 80107e4:	e337      	b.n	8010e56 <HAL_DMA_IRQHandler+0x786>
 80107e6:	4a61      	ldr	r2, [pc, #388]	; (801096c <HAL_DMA_IRQHandler+0x29c>)
 80107e8:	4293      	cmp	r3, r2
 80107ea:	d100      	bne.n	80107ee <HAL_DMA_IRQHandler+0x11e>
 80107ec:	e2df      	b.n	8010dae <HAL_DMA_IRQHandler+0x6de>
 80107ee:	4a60      	ldr	r2, [pc, #384]	; (8010970 <HAL_DMA_IRQHandler+0x2a0>)
 80107f0:	4293      	cmp	r3, r2
 80107f2:	d100      	bne.n	80107f6 <HAL_DMA_IRQHandler+0x126>
 80107f4:	e370      	b.n	8010ed8 <HAL_DMA_IRQHandler+0x808>
 80107f6:	4a5f      	ldr	r2, [pc, #380]	; (8010974 <HAL_DMA_IRQHandler+0x2a4>)
 80107f8:	4293      	cmp	r3, r2
 80107fa:	d100      	bne.n	80107fe <HAL_DMA_IRQHandler+0x12e>
 80107fc:	e38a      	b.n	8010f14 <HAL_DMA_IRQHandler+0x844>
 80107fe:	4a5e      	ldr	r2, [pc, #376]	; (8010978 <HAL_DMA_IRQHandler+0x2a8>)
 8010800:	4293      	cmp	r3, r2
 8010802:	d100      	bne.n	8010806 <HAL_DMA_IRQHandler+0x136>
 8010804:	e3a4      	b.n	8010f50 <HAL_DMA_IRQHandler+0x880>
 8010806:	4283      	cmp	r3, r0
 8010808:	d100      	bne.n	801080c <HAL_DMA_IRQHandler+0x13c>
 801080a:	e3cd      	b.n	8010fa8 <HAL_DMA_IRQHandler+0x8d8>
 801080c:	4a5b      	ldr	r2, [pc, #364]	; (801097c <HAL_DMA_IRQHandler+0x2ac>)
 801080e:	4293      	cmp	r3, r2
 8010810:	d100      	bne.n	8010814 <HAL_DMA_IRQHandler+0x144>
 8010812:	e3d8      	b.n	8010fc6 <HAL_DMA_IRQHandler+0x8f6>
 8010814:	4a5a      	ldr	r2, [pc, #360]	; (8010980 <HAL_DMA_IRQHandler+0x2b0>)
 8010816:	4293      	cmp	r3, r2
 8010818:	d100      	bne.n	801081c <HAL_DMA_IRQHandler+0x14c>
 801081a:	e3d8      	b.n	8010fce <HAL_DMA_IRQHandler+0x8fe>
 801081c:	4a59      	ldr	r2, [pc, #356]	; (8010984 <HAL_DMA_IRQHandler+0x2b4>)
 801081e:	4293      	cmp	r3, r2
 8010820:	d100      	bne.n	8010824 <HAL_DMA_IRQHandler+0x154>
 8010822:	e2c4      	b.n	8010dae <HAL_DMA_IRQHandler+0x6de>
 8010824:	4a5a      	ldr	r2, [pc, #360]	; (8010990 <HAL_DMA_IRQHandler+0x2c0>)
 8010826:	189a      	adds	r2, r3, r2
 8010828:	4250      	negs	r0, r2
 801082a:	4142      	adcs	r2, r0
 801082c:	4859      	ldr	r0, [pc, #356]	; (8010994 <HAL_DMA_IRQHandler+0x2c4>)
 801082e:	4252      	negs	r2, r2
 8010830:	4002      	ands	r2, r0
 8010832:	2080      	movs	r0, #128	; 0x80
 8010834:	0300      	lsls	r0, r0, #12
 8010836:	4684      	mov	ip, r0
 8010838:	4462      	add	r2, ip
 801083a:	4849      	ldr	r0, [pc, #292]	; (8010960 <HAL_DMA_IRQHandler+0x290>)
 801083c:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801083e:	2001      	movs	r0, #1
 8010840:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010842:	4302      	orrs	r2, r0
 8010844:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010846:	2221      	movs	r2, #33	; 0x21
 8010848:	3003      	adds	r0, #3
 801084a:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801084c:	2000      	movs	r0, #0
 801084e:	3a01      	subs	r2, #1
 8010850:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010852:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010854:	2a00      	cmp	r2, #0
 8010856:	d000      	beq.n	801085a <HAL_DMA_IRQHandler+0x18a>
 8010858:	e1a7      	b.n	8010baa <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801085a:	4a41      	ldr	r2, [pc, #260]	; (8010960 <HAL_DMA_IRQHandler+0x290>)
 801085c:	4d41      	ldr	r5, [pc, #260]	; (8010964 <HAL_DMA_IRQHandler+0x294>)
 801085e:	6810      	ldr	r0, [r2, #0]
 8010860:	2204      	movs	r2, #4
 8010862:	42ab      	cmp	r3, r5
 8010864:	d034      	beq.n	80108d0 <HAL_DMA_IRQHandler+0x200>
 8010866:	4d40      	ldr	r5, [pc, #256]	; (8010968 <HAL_DMA_IRQHandler+0x298>)
 8010868:	2240      	movs	r2, #64	; 0x40
 801086a:	42ab      	cmp	r3, r5
 801086c:	d030      	beq.n	80108d0 <HAL_DMA_IRQHandler+0x200>
 801086e:	4a3f      	ldr	r2, [pc, #252]	; (801096c <HAL_DMA_IRQHandler+0x29c>)
 8010870:	4293      	cmp	r3, r2
 8010872:	d100      	bne.n	8010876 <HAL_DMA_IRQHandler+0x1a6>
 8010874:	e3b1      	b.n	8010fda <HAL_DMA_IRQHandler+0x90a>
 8010876:	4a3e      	ldr	r2, [pc, #248]	; (8010970 <HAL_DMA_IRQHandler+0x2a0>)
 8010878:	4293      	cmp	r3, r2
 801087a:	d100      	bne.n	801087e <HAL_DMA_IRQHandler+0x1ae>
 801087c:	e39e      	b.n	8010fbc <HAL_DMA_IRQHandler+0x8ec>
 801087e:	4a3d      	ldr	r2, [pc, #244]	; (8010974 <HAL_DMA_IRQHandler+0x2a4>)
 8010880:	4293      	cmp	r3, r2
 8010882:	d100      	bne.n	8010886 <HAL_DMA_IRQHandler+0x1b6>
 8010884:	e760      	b.n	8010748 <HAL_DMA_IRQHandler+0x78>
 8010886:	4a3c      	ldr	r2, [pc, #240]	; (8010978 <HAL_DMA_IRQHandler+0x2a8>)
 8010888:	4293      	cmp	r3, r2
 801088a:	d100      	bne.n	801088e <HAL_DMA_IRQHandler+0x1be>
 801088c:	e315      	b.n	8010eba <HAL_DMA_IRQHandler+0x7ea>
 801088e:	4a33      	ldr	r2, [pc, #204]	; (801095c <HAL_DMA_IRQHandler+0x28c>)
 8010890:	4293      	cmp	r3, r2
 8010892:	d100      	bne.n	8010896 <HAL_DMA_IRQHandler+0x1c6>
 8010894:	e2a3      	b.n	8010dde <HAL_DMA_IRQHandler+0x70e>
 8010896:	4d39      	ldr	r5, [pc, #228]	; (801097c <HAL_DMA_IRQHandler+0x2ac>)
 8010898:	2204      	movs	r2, #4
 801089a:	42ab      	cmp	r3, r5
 801089c:	d018      	beq.n	80108d0 <HAL_DMA_IRQHandler+0x200>
 801089e:	4d38      	ldr	r5, [pc, #224]	; (8010980 <HAL_DMA_IRQHandler+0x2b0>)
 80108a0:	323c      	adds	r2, #60	; 0x3c
 80108a2:	42ab      	cmp	r3, r5
 80108a4:	d014      	beq.n	80108d0 <HAL_DMA_IRQHandler+0x200>
 80108a6:	4a37      	ldr	r2, [pc, #220]	; (8010984 <HAL_DMA_IRQHandler+0x2b4>)
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d100      	bne.n	80108ae <HAL_DMA_IRQHandler+0x1de>
 80108ac:	e395      	b.n	8010fda <HAL_DMA_IRQHandler+0x90a>
 80108ae:	4a38      	ldr	r2, [pc, #224]	; (8010990 <HAL_DMA_IRQHandler+0x2c0>)
 80108b0:	189a      	adds	r2, r3, r2
 80108b2:	4255      	negs	r5, r2
 80108b4:	416a      	adcs	r2, r5
 80108b6:	4d38      	ldr	r5, [pc, #224]	; (8010998 <HAL_DMA_IRQHandler+0x2c8>)
 80108b8:	4252      	negs	r2, r2
 80108ba:	402a      	ands	r2, r5
 80108bc:	2580      	movs	r5, #128	; 0x80
 80108be:	02ed      	lsls	r5, r5, #11
 80108c0:	46ac      	mov	ip, r5
 80108c2:	4462      	add	r2, ip
 80108c4:	e004      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80108c6:	0732      	lsls	r2, r6, #28
 80108c8:	d500      	bpl.n	80108cc <HAL_DMA_IRQHandler+0x1fc>
 80108ca:	e778      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80108cc:	2204      	movs	r2, #4
 80108ce:	6800      	ldr	r0, [r0, #0]
 80108d0:	4210      	tst	r0, r2
 80108d2:	d000      	beq.n	80108d6 <HAL_DMA_IRQHandler+0x206>
 80108d4:	e0d1      	b.n	8010a7a <HAL_DMA_IRQHandler+0x3aa>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80108d6:	4a22      	ldr	r2, [pc, #136]	; (8010960 <HAL_DMA_IRQHandler+0x290>)
 80108d8:	6810      	ldr	r0, [r2, #0]
 80108da:	4a22      	ldr	r2, [pc, #136]	; (8010964 <HAL_DMA_IRQHandler+0x294>)
 80108dc:	4293      	cmp	r3, r2
 80108de:	d100      	bne.n	80108e2 <HAL_DMA_IRQHandler+0x212>
 80108e0:	e122      	b.n	8010b28 <HAL_DMA_IRQHandler+0x458>
 80108e2:	4a21      	ldr	r2, [pc, #132]	; (8010968 <HAL_DMA_IRQHandler+0x298>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d05b      	beq.n	80109a0 <HAL_DMA_IRQHandler+0x2d0>
 80108e8:	4a20      	ldr	r2, [pc, #128]	; (801096c <HAL_DMA_IRQHandler+0x29c>)
 80108ea:	4293      	cmp	r3, r2
 80108ec:	d100      	bne.n	80108f0 <HAL_DMA_IRQHandler+0x220>
 80108ee:	e19a      	b.n	8010c26 <HAL_DMA_IRQHandler+0x556>
 80108f0:	4a1f      	ldr	r2, [pc, #124]	; (8010970 <HAL_DMA_IRQHandler+0x2a0>)
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d100      	bne.n	80108f8 <HAL_DMA_IRQHandler+0x228>
 80108f6:	e237      	b.n	8010d68 <HAL_DMA_IRQHandler+0x698>
 80108f8:	4a1e      	ldr	r2, [pc, #120]	; (8010974 <HAL_DMA_IRQHandler+0x2a4>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d100      	bne.n	8010900 <HAL_DMA_IRQHandler+0x230>
 80108fe:	e239      	b.n	8010d74 <HAL_DMA_IRQHandler+0x6a4>
 8010900:	4a1d      	ldr	r2, [pc, #116]	; (8010978 <HAL_DMA_IRQHandler+0x2a8>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d100      	bne.n	8010908 <HAL_DMA_IRQHandler+0x238>
 8010906:	e24f      	b.n	8010da8 <HAL_DMA_IRQHandler+0x6d8>
 8010908:	4a14      	ldr	r2, [pc, #80]	; (801095c <HAL_DMA_IRQHandler+0x28c>)
 801090a:	4293      	cmp	r3, r2
 801090c:	d100      	bne.n	8010910 <HAL_DMA_IRQHandler+0x240>
 801090e:	e297      	b.n	8010e40 <HAL_DMA_IRQHandler+0x770>
 8010910:	4a1a      	ldr	r2, [pc, #104]	; (801097c <HAL_DMA_IRQHandler+0x2ac>)
 8010912:	4293      	cmp	r3, r2
 8010914:	d100      	bne.n	8010918 <HAL_DMA_IRQHandler+0x248>
 8010916:	e107      	b.n	8010b28 <HAL_DMA_IRQHandler+0x458>
 8010918:	4a19      	ldr	r2, [pc, #100]	; (8010980 <HAL_DMA_IRQHandler+0x2b0>)
 801091a:	4293      	cmp	r3, r2
 801091c:	d040      	beq.n	80109a0 <HAL_DMA_IRQHandler+0x2d0>
 801091e:	4a19      	ldr	r2, [pc, #100]	; (8010984 <HAL_DMA_IRQHandler+0x2b4>)
 8010920:	4293      	cmp	r3, r2
 8010922:	d100      	bne.n	8010926 <HAL_DMA_IRQHandler+0x256>
 8010924:	e17f      	b.n	8010c26 <HAL_DMA_IRQHandler+0x556>
 8010926:	4a1a      	ldr	r2, [pc, #104]	; (8010990 <HAL_DMA_IRQHandler+0x2c0>)
 8010928:	1899      	adds	r1, r3, r2
 801092a:	424a      	negs	r2, r1
 801092c:	4151      	adcs	r1, r2
 801092e:	4a1b      	ldr	r2, [pc, #108]	; (801099c <HAL_DMA_IRQHandler+0x2cc>)
 8010930:	4249      	negs	r1, r1
 8010932:	400a      	ands	r2, r1
 8010934:	2180      	movs	r1, #128	; 0x80
 8010936:	0289      	lsls	r1, r1, #10
 8010938:	468c      	mov	ip, r1
 801093a:	4462      	add	r2, ip
 801093c:	e031      	b.n	80109a2 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801093e:	0532      	lsls	r2, r6, #20
 8010940:	d500      	bpl.n	8010944 <HAL_DMA_IRQHandler+0x274>
 8010942:	e73c      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010944:	2280      	movs	r2, #128	; 0x80
 8010946:	6800      	ldr	r0, [r0, #0]
 8010948:	0019      	movs	r1, r3
 801094a:	00d2      	lsls	r2, r2, #3
 801094c:	e093      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801094e:	0532      	lsls	r2, r6, #20
 8010950:	d500      	bpl.n	8010954 <HAL_DMA_IRQHandler+0x284>
 8010952:	e734      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010954:	2280      	movs	r2, #128	; 0x80
 8010956:	6800      	ldr	r0, [r0, #0]
 8010958:	00d2      	lsls	r2, r2, #3
 801095a:	e7b9      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
 801095c:	40020080 	.word	0x40020080
 8010960:	40020400 	.word	0x40020400
 8010964:	40020008 	.word	0x40020008
 8010968:	4002001c 	.word	0x4002001c
 801096c:	40020030 	.word	0x40020030
 8010970:	40020044 	.word	0x40020044
 8010974:	40020058 	.word	0x40020058
 8010978:	4002006c 	.word	0x4002006c
 801097c:	40020408 	.word	0x40020408
 8010980:	4002041c 	.word	0x4002041c
 8010984:	40020430 	.word	0x40020430
 8010988:	40020444 	.word	0x40020444
 801098c:	40020000 	.word	0x40020000
 8010990:	bffdfbbc 	.word	0xbffdfbbc
 8010994:	fff88000 	.word	0xfff88000
 8010998:	fffc4000 	.word	0xfffc4000
 801099c:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80109a0:	2220      	movs	r2, #32
 80109a2:	4002      	ands	r2, r0
 80109a4:	1e51      	subs	r1, r2, #1
 80109a6:	418a      	sbcs	r2, r1
 80109a8:	b2d2      	uxtb	r2, r2
 80109aa:	2a00      	cmp	r2, #0
 80109ac:	d050      	beq.n	8010a50 <HAL_DMA_IRQHandler+0x380>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80109ae:	2202      	movs	r2, #2
 80109b0:	6819      	ldr	r1, [r3, #0]
 80109b2:	420a      	tst	r2, r1
 80109b4:	d04c      	beq.n	8010a50 <HAL_DMA_IRQHandler+0x380>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80109b6:	6819      	ldr	r1, [r3, #0]
 80109b8:	0689      	lsls	r1, r1, #26
 80109ba:	d402      	bmi.n	80109c2 <HAL_DMA_IRQHandler+0x2f2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80109bc:	6819      	ldr	r1, [r3, #0]
 80109be:	4391      	bics	r1, r2
 80109c0:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80109c2:	4ab5      	ldr	r2, [pc, #724]	; (8010c98 <HAL_DMA_IRQHandler+0x5c8>)
 80109c4:	49b5      	ldr	r1, [pc, #724]	; (8010c9c <HAL_DMA_IRQHandler+0x5cc>)
 80109c6:	4293      	cmp	r3, r2
 80109c8:	d800      	bhi.n	80109cc <HAL_DMA_IRQHandler+0x2fc>
 80109ca:	e12f      	b.n	8010c2c <HAL_DMA_IRQHandler+0x55c>
 80109cc:	428b      	cmp	r3, r1
 80109ce:	d100      	bne.n	80109d2 <HAL_DMA_IRQHandler+0x302>
 80109d0:	e20e      	b.n	8010df0 <HAL_DMA_IRQHandler+0x720>
 80109d2:	49b3      	ldr	r1, [pc, #716]	; (8010ca0 <HAL_DMA_IRQHandler+0x5d0>)
 80109d4:	428b      	cmp	r3, r1
 80109d6:	d100      	bne.n	80109da <HAL_DMA_IRQHandler+0x30a>
 80109d8:	e237      	b.n	8010e4a <HAL_DMA_IRQHandler+0x77a>
 80109da:	49b2      	ldr	r1, [pc, #712]	; (8010ca4 <HAL_DMA_IRQHandler+0x5d4>)
 80109dc:	428b      	cmp	r3, r1
 80109de:	d100      	bne.n	80109e2 <HAL_DMA_IRQHandler+0x312>
 80109e0:	e271      	b.n	8010ec6 <HAL_DMA_IRQHandler+0x7f6>
 80109e2:	49b1      	ldr	r1, [pc, #708]	; (8010ca8 <HAL_DMA_IRQHandler+0x5d8>)
 80109e4:	428b      	cmp	r3, r1
 80109e6:	d100      	bne.n	80109ea <HAL_DMA_IRQHandler+0x31a>
 80109e8:	e1fc      	b.n	8010de4 <HAL_DMA_IRQHandler+0x714>
 80109ea:	49b0      	ldr	r1, [pc, #704]	; (8010cac <HAL_DMA_IRQHandler+0x5dc>)
 80109ec:	428b      	cmp	r3, r1
 80109ee:	d100      	bne.n	80109f2 <HAL_DMA_IRQHandler+0x322>
 80109f0:	e28a      	b.n	8010f08 <HAL_DMA_IRQHandler+0x838>
 80109f2:	49af      	ldr	r1, [pc, #700]	; (8010cb0 <HAL_DMA_IRQHandler+0x5e0>)
 80109f4:	428b      	cmp	r3, r1
 80109f6:	d100      	bne.n	80109fa <HAL_DMA_IRQHandler+0x32a>
 80109f8:	e2a7      	b.n	8010f4a <HAL_DMA_IRQHandler+0x87a>
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d100      	bne.n	8010a00 <HAL_DMA_IRQHandler+0x330>
 80109fe:	e2c4      	b.n	8010f8a <HAL_DMA_IRQHandler+0x8ba>
 8010a00:	4aac      	ldr	r2, [pc, #688]	; (8010cb4 <HAL_DMA_IRQHandler+0x5e4>)
 8010a02:	4293      	cmp	r3, r2
 8010a04:	d100      	bne.n	8010a08 <HAL_DMA_IRQHandler+0x338>
 8010a06:	e1f3      	b.n	8010df0 <HAL_DMA_IRQHandler+0x720>
 8010a08:	4aab      	ldr	r2, [pc, #684]	; (8010cb8 <HAL_DMA_IRQHandler+0x5e8>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d100      	bne.n	8010a10 <HAL_DMA_IRQHandler+0x340>
 8010a0e:	e21c      	b.n	8010e4a <HAL_DMA_IRQHandler+0x77a>
 8010a10:	4aaa      	ldr	r2, [pc, #680]	; (8010cbc <HAL_DMA_IRQHandler+0x5ec>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d100      	bne.n	8010a18 <HAL_DMA_IRQHandler+0x348>
 8010a16:	e256      	b.n	8010ec6 <HAL_DMA_IRQHandler+0x7f6>
 8010a18:	4aa9      	ldr	r2, [pc, #676]	; (8010cc0 <HAL_DMA_IRQHandler+0x5f0>)
 8010a1a:	4694      	mov	ip, r2
 8010a1c:	4463      	add	r3, ip
 8010a1e:	1e5a      	subs	r2, r3, #1
 8010a20:	4193      	sbcs	r3, r2
 8010a22:	22f0      	movs	r2, #240	; 0xf0
 8010a24:	425b      	negs	r3, r3
 8010a26:	0252      	lsls	r2, r2, #9
 8010a28:	4013      	ands	r3, r2
 8010a2a:	2280      	movs	r2, #128	; 0x80
 8010a2c:	0192      	lsls	r2, r2, #6
 8010a2e:	4694      	mov	ip, r2
 8010a30:	4463      	add	r3, ip
 8010a32:	4aa4      	ldr	r2, [pc, #656]	; (8010cc4 <HAL_DMA_IRQHandler+0x5f4>)
 8010a34:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010a36:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010a38:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010a3a:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010a3c:	2321      	movs	r3, #33	; 0x21
 8010a3e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010a40:	2200      	movs	r2, #0
 8010a42:	3b01      	subs	r3, #1
 8010a44:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010a46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d001      	beq.n	8010a50 <HAL_DMA_IRQHandler+0x380>
        hdma->XferCpltCallback(hdma);
 8010a4c:	0020      	movs	r0, r4
 8010a4e:	4798      	blx	r3
}  
 8010a50:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010a52:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a54:	489c      	ldr	r0, [pc, #624]	; (8010cc8 <HAL_DMA_IRQHandler+0x5f8>)
 8010a56:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010a58:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010a5a:	432a      	orrs	r2, r5
 8010a5c:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010a5e:	2221      	movs	r2, #33	; 0x21
 8010a60:	3503      	adds	r5, #3
 8010a62:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010a64:	2500      	movs	r5, #0
 8010a66:	3a01      	subs	r2, #1
 8010a68:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010a6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010a6c:	2a00      	cmp	r2, #0
 8010a6e:	d000      	beq.n	8010a72 <HAL_DMA_IRQHandler+0x3a2>
 8010a70:	e09b      	b.n	8010baa <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010a72:	6800      	ldr	r0, [r0, #0]
 8010a74:	2204      	movs	r2, #4
 8010a76:	4210      	tst	r0, r2
 8010a78:	d050      	beq.n	8010b1c <HAL_DMA_IRQHandler+0x44c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010a7a:	2204      	movs	r2, #4
 8010a7c:	6818      	ldr	r0, [r3, #0]
 8010a7e:	4202      	tst	r2, r0
 8010a80:	d048      	beq.n	8010b14 <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010a82:	6818      	ldr	r0, [r3, #0]
 8010a84:	0680      	lsls	r0, r0, #26
 8010a86:	d402      	bmi.n	8010a8e <HAL_DMA_IRQHandler+0x3be>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010a88:	6818      	ldr	r0, [r3, #0]
 8010a8a:	4390      	bics	r0, r2
 8010a8c:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010a8e:	4a82      	ldr	r2, [pc, #520]	; (8010c98 <HAL_DMA_IRQHandler+0x5c8>)
 8010a90:	4291      	cmp	r1, r2
 8010a92:	d800      	bhi.n	8010a96 <HAL_DMA_IRQHandler+0x3c6>
 8010a94:	e11e      	b.n	8010cd4 <HAL_DMA_IRQHandler+0x604>
 8010a96:	4981      	ldr	r1, [pc, #516]	; (8010c9c <HAL_DMA_IRQHandler+0x5cc>)
 8010a98:	428b      	cmp	r3, r1
 8010a9a:	d100      	bne.n	8010a9e <HAL_DMA_IRQHandler+0x3ce>
 8010a9c:	e1ac      	b.n	8010df8 <HAL_DMA_IRQHandler+0x728>
 8010a9e:	4980      	ldr	r1, [pc, #512]	; (8010ca0 <HAL_DMA_IRQHandler+0x5d0>)
 8010aa0:	428b      	cmp	r3, r1
 8010aa2:	d100      	bne.n	8010aa6 <HAL_DMA_IRQHandler+0x3d6>
 8010aa4:	e1d5      	b.n	8010e52 <HAL_DMA_IRQHandler+0x782>
 8010aa6:	497f      	ldr	r1, [pc, #508]	; (8010ca4 <HAL_DMA_IRQHandler+0x5d4>)
 8010aa8:	428b      	cmp	r3, r1
 8010aaa:	d100      	bne.n	8010aae <HAL_DMA_IRQHandler+0x3de>
 8010aac:	e188      	b.n	8010dc0 <HAL_DMA_IRQHandler+0x6f0>
 8010aae:	497e      	ldr	r1, [pc, #504]	; (8010ca8 <HAL_DMA_IRQHandler+0x5d8>)
 8010ab0:	428b      	cmp	r3, r1
 8010ab2:	d100      	bne.n	8010ab6 <HAL_DMA_IRQHandler+0x3e6>
 8010ab4:	e20a      	b.n	8010ecc <HAL_DMA_IRQHandler+0x7fc>
 8010ab6:	497d      	ldr	r1, [pc, #500]	; (8010cac <HAL_DMA_IRQHandler+0x5dc>)
 8010ab8:	428b      	cmp	r3, r1
 8010aba:	d100      	bne.n	8010abe <HAL_DMA_IRQHandler+0x3ee>
 8010abc:	e22d      	b.n	8010f1a <HAL_DMA_IRQHandler+0x84a>
 8010abe:	497c      	ldr	r1, [pc, #496]	; (8010cb0 <HAL_DMA_IRQHandler+0x5e0>)
 8010ac0:	428b      	cmp	r3, r1
 8010ac2:	d100      	bne.n	8010ac6 <HAL_DMA_IRQHandler+0x3f6>
 8010ac4:	e247      	b.n	8010f56 <HAL_DMA_IRQHandler+0x886>
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d100      	bne.n	8010acc <HAL_DMA_IRQHandler+0x3fc>
 8010aca:	e264      	b.n	8010f96 <HAL_DMA_IRQHandler+0x8c6>
 8010acc:	4a79      	ldr	r2, [pc, #484]	; (8010cb4 <HAL_DMA_IRQHandler+0x5e4>)
 8010ace:	4293      	cmp	r3, r2
 8010ad0:	d100      	bne.n	8010ad4 <HAL_DMA_IRQHandler+0x404>
 8010ad2:	e191      	b.n	8010df8 <HAL_DMA_IRQHandler+0x728>
 8010ad4:	4a78      	ldr	r2, [pc, #480]	; (8010cb8 <HAL_DMA_IRQHandler+0x5e8>)
 8010ad6:	4293      	cmp	r3, r2
 8010ad8:	d100      	bne.n	8010adc <HAL_DMA_IRQHandler+0x40c>
 8010ada:	e1ba      	b.n	8010e52 <HAL_DMA_IRQHandler+0x782>
 8010adc:	4a77      	ldr	r2, [pc, #476]	; (8010cbc <HAL_DMA_IRQHandler+0x5ec>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d100      	bne.n	8010ae4 <HAL_DMA_IRQHandler+0x414>
 8010ae2:	e16d      	b.n	8010dc0 <HAL_DMA_IRQHandler+0x6f0>
 8010ae4:	4a76      	ldr	r2, [pc, #472]	; (8010cc0 <HAL_DMA_IRQHandler+0x5f0>)
 8010ae6:	189a      	adds	r2, r3, r2
 8010ae8:	1e51      	subs	r1, r2, #1
 8010aea:	418a      	sbcs	r2, r1
 8010aec:	21f0      	movs	r1, #240	; 0xf0
 8010aee:	4252      	negs	r2, r2
 8010af0:	0289      	lsls	r1, r1, #10
 8010af2:	400a      	ands	r2, r1
 8010af4:	2180      	movs	r1, #128	; 0x80
 8010af6:	01c9      	lsls	r1, r1, #7
 8010af8:	468c      	mov	ip, r1
 8010afa:	4462      	add	r2, ip
 8010afc:	4971      	ldr	r1, [pc, #452]	; (8010cc4 <HAL_DMA_IRQHandler+0x5f4>)
 8010afe:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010b00:	2221      	movs	r2, #33	; 0x21
 8010b02:	2111      	movs	r1, #17
 8010b04:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010b06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010b08:	2a00      	cmp	r2, #0
 8010b0a:	d100      	bne.n	8010b0e <HAL_DMA_IRQHandler+0x43e>
 8010b0c:	e6e3      	b.n	80108d6 <HAL_DMA_IRQHandler+0x206>
        hdma->XferHalfCpltCallback(hdma);
 8010b0e:	0020      	movs	r0, r4
 8010b10:	4790      	blx	r2
 8010b12:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010b14:	4a60      	ldr	r2, [pc, #384]	; (8010c98 <HAL_DMA_IRQHandler+0x5c8>)
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d900      	bls.n	8010b1c <HAL_DMA_IRQHandler+0x44c>
 8010b1a:	e6dc      	b.n	80108d6 <HAL_DMA_IRQHandler+0x206>
 8010b1c:	4a6a      	ldr	r2, [pc, #424]	; (8010cc8 <HAL_DMA_IRQHandler+0x5f8>)
 8010b1e:	6810      	ldr	r0, [r2, #0]
 8010b20:	4a5e      	ldr	r2, [pc, #376]	; (8010c9c <HAL_DMA_IRQHandler+0x5cc>)
 8010b22:	4293      	cmp	r3, r2
 8010b24:	d000      	beq.n	8010b28 <HAL_DMA_IRQHandler+0x458>
 8010b26:	e6dc      	b.n	80108e2 <HAL_DMA_IRQHandler+0x212>
 8010b28:	2202      	movs	r2, #2
 8010b2a:	e73a      	b.n	80109a2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010b2c:	42ab      	cmp	r3, r5
 8010b2e:	d090      	beq.n	8010a52 <HAL_DMA_IRQHandler+0x382>
 8010b30:	4a5b      	ldr	r2, [pc, #364]	; (8010ca0 <HAL_DMA_IRQHandler+0x5d0>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d100      	bne.n	8010b38 <HAL_DMA_IRQHandler+0x468>
 8010b36:	e1a1      	b.n	8010e7c <HAL_DMA_IRQHandler+0x7ac>
 8010b38:	4a5a      	ldr	r2, [pc, #360]	; (8010ca4 <HAL_DMA_IRQHandler+0x5d4>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d100      	bne.n	8010b40 <HAL_DMA_IRQHandler+0x470>
 8010b3e:	e13c      	b.n	8010dba <HAL_DMA_IRQHandler+0x6ea>
 8010b40:	4a59      	ldr	r2, [pc, #356]	; (8010ca8 <HAL_DMA_IRQHandler+0x5d8>)
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d100      	bne.n	8010b48 <HAL_DMA_IRQHandler+0x478>
 8010b46:	e1ca      	b.n	8010ede <HAL_DMA_IRQHandler+0x80e>
 8010b48:	4a58      	ldr	r2, [pc, #352]	; (8010cac <HAL_DMA_IRQHandler+0x5dc>)
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d100      	bne.n	8010b50 <HAL_DMA_IRQHandler+0x480>
 8010b4e:	e1de      	b.n	8010f0e <HAL_DMA_IRQHandler+0x83e>
 8010b50:	4a57      	ldr	r2, [pc, #348]	; (8010cb0 <HAL_DMA_IRQHandler+0x5e0>)
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d100      	bne.n	8010b58 <HAL_DMA_IRQHandler+0x488>
 8010b56:	e201      	b.n	8010f5c <HAL_DMA_IRQHandler+0x88c>
 8010b58:	4283      	cmp	r3, r0
 8010b5a:	d100      	bne.n	8010b5e <HAL_DMA_IRQHandler+0x48e>
 8010b5c:	e21e      	b.n	8010f9c <HAL_DMA_IRQHandler+0x8cc>
 8010b5e:	4a55      	ldr	r2, [pc, #340]	; (8010cb4 <HAL_DMA_IRQHandler+0x5e4>)
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d100      	bne.n	8010b66 <HAL_DMA_IRQHandler+0x496>
 8010b64:	e22d      	b.n	8010fc2 <HAL_DMA_IRQHandler+0x8f2>
 8010b66:	4a54      	ldr	r2, [pc, #336]	; (8010cb8 <HAL_DMA_IRQHandler+0x5e8>)
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d100      	bne.n	8010b6e <HAL_DMA_IRQHandler+0x49e>
 8010b6c:	e22d      	b.n	8010fca <HAL_DMA_IRQHandler+0x8fa>
 8010b6e:	4a53      	ldr	r2, [pc, #332]	; (8010cbc <HAL_DMA_IRQHandler+0x5ec>)
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d100      	bne.n	8010b76 <HAL_DMA_IRQHandler+0x4a6>
 8010b74:	e121      	b.n	8010dba <HAL_DMA_IRQHandler+0x6ea>
 8010b76:	4a52      	ldr	r2, [pc, #328]	; (8010cc0 <HAL_DMA_IRQHandler+0x5f0>)
 8010b78:	189a      	adds	r2, r3, r2
 8010b7a:	4250      	negs	r0, r2
 8010b7c:	4142      	adcs	r2, r0
 8010b7e:	4853      	ldr	r0, [pc, #332]	; (8010ccc <HAL_DMA_IRQHandler+0x5fc>)
 8010b80:	4252      	negs	r2, r2
 8010b82:	4002      	ands	r2, r0
 8010b84:	2080      	movs	r0, #128	; 0x80
 8010b86:	0300      	lsls	r0, r0, #12
 8010b88:	4684      	mov	ip, r0
 8010b8a:	4462      	add	r2, ip
 8010b8c:	484e      	ldr	r0, [pc, #312]	; (8010cc8 <HAL_DMA_IRQHandler+0x5f8>)
 8010b8e:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010b90:	2001      	movs	r0, #1
 8010b92:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010b94:	4302      	orrs	r2, r0
 8010b96:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010b98:	2221      	movs	r2, #33	; 0x21
 8010b9a:	3003      	adds	r0, #3
 8010b9c:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010b9e:	2000      	movs	r0, #0
 8010ba0:	3a01      	subs	r2, #1
 8010ba2:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010ba4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010ba6:	2a00      	cmp	r2, #0
 8010ba8:	d007      	beq.n	8010bba <HAL_DMA_IRQHandler+0x4ea>
        hdma->XferErrorCallback(hdma);
 8010baa:	0020      	movs	r0, r4
 8010bac:	4790      	blx	r2
 8010bae:	6823      	ldr	r3, [r4, #0]
 8010bb0:	0019      	movs	r1, r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010bb2:	4a39      	ldr	r2, [pc, #228]	; (8010c98 <HAL_DMA_IRQHandler+0x5c8>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d900      	bls.n	8010bba <HAL_DMA_IRQHandler+0x4ea>
 8010bb8:	e64f      	b.n	801085a <HAL_DMA_IRQHandler+0x18a>
 8010bba:	4a43      	ldr	r2, [pc, #268]	; (8010cc8 <HAL_DMA_IRQHandler+0x5f8>)
 8010bbc:	6810      	ldr	r0, [r2, #0]
 8010bbe:	4a37      	ldr	r2, [pc, #220]	; (8010c9c <HAL_DMA_IRQHandler+0x5cc>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d100      	bne.n	8010bc6 <HAL_DMA_IRQHandler+0x4f6>
 8010bc4:	e756      	b.n	8010a74 <HAL_DMA_IRQHandler+0x3a4>
 8010bc6:	4a36      	ldr	r2, [pc, #216]	; (8010ca0 <HAL_DMA_IRQHandler+0x5d0>)
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d100      	bne.n	8010bce <HAL_DMA_IRQHandler+0x4fe>
 8010bcc:	e0c4      	b.n	8010d58 <HAL_DMA_IRQHandler+0x688>
 8010bce:	4a35      	ldr	r2, [pc, #212]	; (8010ca4 <HAL_DMA_IRQHandler+0x5d4>)
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d100      	bne.n	8010bd6 <HAL_DMA_IRQHandler+0x506>
 8010bd4:	e0cb      	b.n	8010d6e <HAL_DMA_IRQHandler+0x69e>
 8010bd6:	4a34      	ldr	r2, [pc, #208]	; (8010ca8 <HAL_DMA_IRQHandler+0x5d8>)
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d100      	bne.n	8010bde <HAL_DMA_IRQHandler+0x50e>
 8010bdc:	e0d2      	b.n	8010d84 <HAL_DMA_IRQHandler+0x6b4>
 8010bde:	4a33      	ldr	r2, [pc, #204]	; (8010cac <HAL_DMA_IRQHandler+0x5dc>)
 8010be0:	4293      	cmp	r3, r2
 8010be2:	d100      	bne.n	8010be6 <HAL_DMA_IRQHandler+0x516>
 8010be4:	e5e4      	b.n	80107b0 <HAL_DMA_IRQHandler+0xe0>
 8010be6:	4a32      	ldr	r2, [pc, #200]	; (8010cb0 <HAL_DMA_IRQHandler+0x5e0>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d100      	bne.n	8010bee <HAL_DMA_IRQHandler+0x51e>
 8010bec:	e15e      	b.n	8010eac <HAL_DMA_IRQHandler+0x7dc>
 8010bee:	4a2a      	ldr	r2, [pc, #168]	; (8010c98 <HAL_DMA_IRQHandler+0x5c8>)
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d100      	bne.n	8010bf6 <HAL_DMA_IRQHandler+0x526>
 8010bf4:	e0ec      	b.n	8010dd0 <HAL_DMA_IRQHandler+0x700>
 8010bf6:	4a2f      	ldr	r2, [pc, #188]	; (8010cb4 <HAL_DMA_IRQHandler+0x5e4>)
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d100      	bne.n	8010bfe <HAL_DMA_IRQHandler+0x52e>
 8010bfc:	e73a      	b.n	8010a74 <HAL_DMA_IRQHandler+0x3a4>
 8010bfe:	4a2e      	ldr	r2, [pc, #184]	; (8010cb8 <HAL_DMA_IRQHandler+0x5e8>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d100      	bne.n	8010c06 <HAL_DMA_IRQHandler+0x536>
 8010c04:	e0a8      	b.n	8010d58 <HAL_DMA_IRQHandler+0x688>
 8010c06:	4a2d      	ldr	r2, [pc, #180]	; (8010cbc <HAL_DMA_IRQHandler+0x5ec>)
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d100      	bne.n	8010c0e <HAL_DMA_IRQHandler+0x53e>
 8010c0c:	e0af      	b.n	8010d6e <HAL_DMA_IRQHandler+0x69e>
 8010c0e:	4a2c      	ldr	r2, [pc, #176]	; (8010cc0 <HAL_DMA_IRQHandler+0x5f0>)
 8010c10:	189a      	adds	r2, r3, r2
 8010c12:	4255      	negs	r5, r2
 8010c14:	416a      	adcs	r2, r5
 8010c16:	4d2e      	ldr	r5, [pc, #184]	; (8010cd0 <HAL_DMA_IRQHandler+0x600>)
 8010c18:	4252      	negs	r2, r2
 8010c1a:	402a      	ands	r2, r5
 8010c1c:	2580      	movs	r5, #128	; 0x80
 8010c1e:	02ed      	lsls	r5, r5, #11
 8010c20:	46ac      	mov	ip, r5
 8010c22:	4462      	add	r2, ip
 8010c24:	e727      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010c26:	2280      	movs	r2, #128	; 0x80
 8010c28:	0092      	lsls	r2, r2, #2
 8010c2a:	e6ba      	b.n	80109a2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010c2c:	428b      	cmp	r3, r1
 8010c2e:	d100      	bne.n	8010c32 <HAL_DMA_IRQHandler+0x562>
 8010c30:	e0e0      	b.n	8010df4 <HAL_DMA_IRQHandler+0x724>
 8010c32:	491b      	ldr	r1, [pc, #108]	; (8010ca0 <HAL_DMA_IRQHandler+0x5d0>)
 8010c34:	428b      	cmp	r3, r1
 8010c36:	d100      	bne.n	8010c3a <HAL_DMA_IRQHandler+0x56a>
 8010c38:	e105      	b.n	8010e46 <HAL_DMA_IRQHandler+0x776>
 8010c3a:	491a      	ldr	r1, [pc, #104]	; (8010ca4 <HAL_DMA_IRQHandler+0x5d4>)
 8010c3c:	428b      	cmp	r3, r1
 8010c3e:	d100      	bne.n	8010c42 <HAL_DMA_IRQHandler+0x572>
 8010c40:	e13e      	b.n	8010ec0 <HAL_DMA_IRQHandler+0x7f0>
 8010c42:	4919      	ldr	r1, [pc, #100]	; (8010ca8 <HAL_DMA_IRQHandler+0x5d8>)
 8010c44:	428b      	cmp	r3, r1
 8010c46:	d100      	bne.n	8010c4a <HAL_DMA_IRQHandler+0x57a>
 8010c48:	e0cf      	b.n	8010dea <HAL_DMA_IRQHandler+0x71a>
 8010c4a:	4918      	ldr	r1, [pc, #96]	; (8010cac <HAL_DMA_IRQHandler+0x5dc>)
 8010c4c:	428b      	cmp	r3, r1
 8010c4e:	d100      	bne.n	8010c52 <HAL_DMA_IRQHandler+0x582>
 8010c50:	e157      	b.n	8010f02 <HAL_DMA_IRQHandler+0x832>
 8010c52:	4917      	ldr	r1, [pc, #92]	; (8010cb0 <HAL_DMA_IRQHandler+0x5e0>)
 8010c54:	428b      	cmp	r3, r1
 8010c56:	d100      	bne.n	8010c5a <HAL_DMA_IRQHandler+0x58a>
 8010c58:	e174      	b.n	8010f44 <HAL_DMA_IRQHandler+0x874>
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d100      	bne.n	8010c60 <HAL_DMA_IRQHandler+0x590>
 8010c5e:	e197      	b.n	8010f90 <HAL_DMA_IRQHandler+0x8c0>
 8010c60:	4a14      	ldr	r2, [pc, #80]	; (8010cb4 <HAL_DMA_IRQHandler+0x5e4>)
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d100      	bne.n	8010c68 <HAL_DMA_IRQHandler+0x598>
 8010c66:	e0c5      	b.n	8010df4 <HAL_DMA_IRQHandler+0x724>
 8010c68:	4a13      	ldr	r2, [pc, #76]	; (8010cb8 <HAL_DMA_IRQHandler+0x5e8>)
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d100      	bne.n	8010c70 <HAL_DMA_IRQHandler+0x5a0>
 8010c6e:	e0ea      	b.n	8010e46 <HAL_DMA_IRQHandler+0x776>
 8010c70:	4a12      	ldr	r2, [pc, #72]	; (8010cbc <HAL_DMA_IRQHandler+0x5ec>)
 8010c72:	4293      	cmp	r3, r2
 8010c74:	d100      	bne.n	8010c78 <HAL_DMA_IRQHandler+0x5a8>
 8010c76:	e123      	b.n	8010ec0 <HAL_DMA_IRQHandler+0x7f0>
 8010c78:	4a11      	ldr	r2, [pc, #68]	; (8010cc0 <HAL_DMA_IRQHandler+0x5f0>)
 8010c7a:	4694      	mov	ip, r2
 8010c7c:	4463      	add	r3, ip
 8010c7e:	1e5a      	subs	r2, r3, #1
 8010c80:	4193      	sbcs	r3, r2
 8010c82:	22f0      	movs	r2, #240	; 0xf0
 8010c84:	425b      	negs	r3, r3
 8010c86:	0252      	lsls	r2, r2, #9
 8010c88:	4013      	ands	r3, r2
 8010c8a:	2280      	movs	r2, #128	; 0x80
 8010c8c:	0192      	lsls	r2, r2, #6
 8010c8e:	4694      	mov	ip, r2
 8010c90:	4463      	add	r3, ip
 8010c92:	4a0d      	ldr	r2, [pc, #52]	; (8010cc8 <HAL_DMA_IRQHandler+0x5f8>)
 8010c94:	6053      	str	r3, [r2, #4]
 8010c96:	e6ce      	b.n	8010a36 <HAL_DMA_IRQHandler+0x366>
 8010c98:	40020080 	.word	0x40020080
 8010c9c:	40020008 	.word	0x40020008
 8010ca0:	4002001c 	.word	0x4002001c
 8010ca4:	40020030 	.word	0x40020030
 8010ca8:	40020044 	.word	0x40020044
 8010cac:	40020058 	.word	0x40020058
 8010cb0:	4002006c 	.word	0x4002006c
 8010cb4:	40020408 	.word	0x40020408
 8010cb8:	4002041c 	.word	0x4002041c
 8010cbc:	40020430 	.word	0x40020430
 8010cc0:	bffdfbbc 	.word	0xbffdfbbc
 8010cc4:	40020400 	.word	0x40020400
 8010cc8:	40020000 	.word	0x40020000
 8010ccc:	fff88000 	.word	0xfff88000
 8010cd0:	fffc4000 	.word	0xfffc4000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010cd4:	49c2      	ldr	r1, [pc, #776]	; (8010fe0 <HAL_DMA_IRQHandler+0x910>)
 8010cd6:	428b      	cmp	r3, r1
 8010cd8:	d100      	bne.n	8010cdc <HAL_DMA_IRQHandler+0x60c>
 8010cda:	e08f      	b.n	8010dfc <HAL_DMA_IRQHandler+0x72c>
 8010cdc:	49c1      	ldr	r1, [pc, #772]	; (8010fe4 <HAL_DMA_IRQHandler+0x914>)
 8010cde:	428b      	cmp	r3, r1
 8010ce0:	d100      	bne.n	8010ce4 <HAL_DMA_IRQHandler+0x614>
 8010ce2:	e0b4      	b.n	8010e4e <HAL_DMA_IRQHandler+0x77e>
 8010ce4:	49c0      	ldr	r1, [pc, #768]	; (8010fe8 <HAL_DMA_IRQHandler+0x918>)
 8010ce6:	428b      	cmp	r3, r1
 8010ce8:	d064      	beq.n	8010db4 <HAL_DMA_IRQHandler+0x6e4>
 8010cea:	49c0      	ldr	r1, [pc, #768]	; (8010fec <HAL_DMA_IRQHandler+0x91c>)
 8010cec:	428b      	cmp	r3, r1
 8010cee:	d100      	bne.n	8010cf2 <HAL_DMA_IRQHandler+0x622>
 8010cf0:	e0ef      	b.n	8010ed2 <HAL_DMA_IRQHandler+0x802>
 8010cf2:	49bf      	ldr	r1, [pc, #764]	; (8010ff0 <HAL_DMA_IRQHandler+0x920>)
 8010cf4:	428b      	cmp	r3, r1
 8010cf6:	d100      	bne.n	8010cfa <HAL_DMA_IRQHandler+0x62a>
 8010cf8:	e112      	b.n	8010f20 <HAL_DMA_IRQHandler+0x850>
 8010cfa:	49be      	ldr	r1, [pc, #760]	; (8010ff4 <HAL_DMA_IRQHandler+0x924>)
 8010cfc:	428b      	cmp	r3, r1
 8010cfe:	d100      	bne.n	8010d02 <HAL_DMA_IRQHandler+0x632>
 8010d00:	e12f      	b.n	8010f62 <HAL_DMA_IRQHandler+0x892>
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d100      	bne.n	8010d08 <HAL_DMA_IRQHandler+0x638>
 8010d06:	e14c      	b.n	8010fa2 <HAL_DMA_IRQHandler+0x8d2>
 8010d08:	4abb      	ldr	r2, [pc, #748]	; (8010ff8 <HAL_DMA_IRQHandler+0x928>)
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d076      	beq.n	8010dfc <HAL_DMA_IRQHandler+0x72c>
 8010d0e:	4abb      	ldr	r2, [pc, #748]	; (8010ffc <HAL_DMA_IRQHandler+0x92c>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d100      	bne.n	8010d16 <HAL_DMA_IRQHandler+0x646>
 8010d14:	e09b      	b.n	8010e4e <HAL_DMA_IRQHandler+0x77e>
 8010d16:	4aba      	ldr	r2, [pc, #744]	; (8011000 <HAL_DMA_IRQHandler+0x930>)
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d04b      	beq.n	8010db4 <HAL_DMA_IRQHandler+0x6e4>
 8010d1c:	4ab9      	ldr	r2, [pc, #740]	; (8011004 <HAL_DMA_IRQHandler+0x934>)
 8010d1e:	189a      	adds	r2, r3, r2
 8010d20:	1e51      	subs	r1, r2, #1
 8010d22:	418a      	sbcs	r2, r1
 8010d24:	21f0      	movs	r1, #240	; 0xf0
 8010d26:	4252      	negs	r2, r2
 8010d28:	0289      	lsls	r1, r1, #10
 8010d2a:	400a      	ands	r2, r1
 8010d2c:	2180      	movs	r1, #128	; 0x80
 8010d2e:	01c9      	lsls	r1, r1, #7
 8010d30:	468c      	mov	ip, r1
 8010d32:	4462      	add	r2, ip
 8010d34:	49b4      	ldr	r1, [pc, #720]	; (8011008 <HAL_DMA_IRQHandler+0x938>)
 8010d36:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010d38:	2221      	movs	r2, #33	; 0x21
 8010d3a:	2111      	movs	r1, #17
 8010d3c:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010d3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010d40:	2a00      	cmp	r2, #0
 8010d42:	d100      	bne.n	8010d46 <HAL_DMA_IRQHandler+0x676>
 8010d44:	e6ea      	b.n	8010b1c <HAL_DMA_IRQHandler+0x44c>
        hdma->XferHalfCpltCallback(hdma);
 8010d46:	0020      	movs	r0, r4
 8010d48:	4790      	blx	r2
 8010d4a:	6823      	ldr	r3, [r4, #0]
 8010d4c:	e6e2      	b.n	8010b14 <HAL_DMA_IRQHandler+0x444>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010d4e:	0632      	lsls	r2, r6, #24
 8010d50:	d500      	bpl.n	8010d54 <HAL_DMA_IRQHandler+0x684>
 8010d52:	e534      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d54:	0019      	movs	r1, r3
 8010d56:	6800      	ldr	r0, [r0, #0]
 8010d58:	2240      	movs	r2, #64	; 0x40
 8010d5a:	e68c      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010d5c:	0632      	lsls	r2, r6, #24
 8010d5e:	d500      	bpl.n	8010d62 <HAL_DMA_IRQHandler+0x692>
 8010d60:	e52d      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d62:	6800      	ldr	r0, [r0, #0]
 8010d64:	2240      	movs	r2, #64	; 0x40
 8010d66:	e5b3      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010d68:	2280      	movs	r2, #128	; 0x80
 8010d6a:	0192      	lsls	r2, r2, #6
 8010d6c:	e619      	b.n	80109a2 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d6e:	2280      	movs	r2, #128	; 0x80
 8010d70:	00d2      	lsls	r2, r2, #3
 8010d72:	e680      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010d74:	2280      	movs	r2, #128	; 0x80
 8010d76:	0292      	lsls	r2, r2, #10
 8010d78:	e613      	b.n	80109a2 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010d7a:	0432      	lsls	r2, r6, #16
 8010d7c:	d500      	bpl.n	8010d80 <HAL_DMA_IRQHandler+0x6b0>
 8010d7e:	e51e      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d80:	4aa1      	ldr	r2, [pc, #644]	; (8011008 <HAL_DMA_IRQHandler+0x938>)
 8010d82:	6810      	ldr	r0, [r2, #0]
 8010d84:	2280      	movs	r2, #128	; 0x80
 8010d86:	01d2      	lsls	r2, r2, #7
 8010d88:	e675      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010d8a:	0432      	lsls	r2, r6, #16
 8010d8c:	d500      	bpl.n	8010d90 <HAL_DMA_IRQHandler+0x6c0>
 8010d8e:	e516      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d90:	2280      	movs	r2, #128	; 0x80
 8010d92:	6800      	ldr	r0, [r0, #0]
 8010d94:	0019      	movs	r1, r3
 8010d96:	01d2      	lsls	r2, r2, #7
 8010d98:	e66d      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010d9a:	0432      	lsls	r2, r6, #16
 8010d9c:	d500      	bpl.n	8010da0 <HAL_DMA_IRQHandler+0x6d0>
 8010d9e:	e50e      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010da0:	2280      	movs	r2, #128	; 0x80
 8010da2:	6800      	ldr	r0, [r0, #0]
 8010da4:	01d2      	lsls	r2, r2, #7
 8010da6:	e593      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010da8:	2280      	movs	r2, #128	; 0x80
 8010daa:	0392      	lsls	r2, r2, #14
 8010dac:	e5f9      	b.n	80109a2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010dae:	2280      	movs	r2, #128	; 0x80
 8010db0:	0112      	lsls	r2, r2, #4
 8010db2:	e542      	b.n	801083a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010db4:	2280      	movs	r2, #128	; 0x80
 8010db6:	00d2      	lsls	r2, r2, #3
 8010db8:	e7bc      	b.n	8010d34 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010dba:	2280      	movs	r2, #128	; 0x80
 8010dbc:	0112      	lsls	r2, r2, #4
 8010dbe:	e6e5      	b.n	8010b8c <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010dc0:	2280      	movs	r2, #128	; 0x80
 8010dc2:	00d2      	lsls	r2, r2, #3
 8010dc4:	e69a      	b.n	8010afc <HAL_DMA_IRQHandler+0x42c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010dc6:	0132      	lsls	r2, r6, #4
 8010dc8:	d500      	bpl.n	8010dcc <HAL_DMA_IRQHandler+0x6fc>
 8010dca:	e4f8      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010dcc:	0019      	movs	r1, r3
 8010dce:	6800      	ldr	r0, [r0, #0]
 8010dd0:	2280      	movs	r2, #128	; 0x80
 8010dd2:	04d2      	lsls	r2, r2, #19
 8010dd4:	e64f      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010dd6:	0132      	lsls	r2, r6, #4
 8010dd8:	d500      	bpl.n	8010ddc <HAL_DMA_IRQHandler+0x70c>
 8010dda:	e4f0      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ddc:	6800      	ldr	r0, [r0, #0]
 8010dde:	2280      	movs	r2, #128	; 0x80
 8010de0:	04d2      	lsls	r2, r2, #19
 8010de2:	e575      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010de4:	2380      	movs	r3, #128	; 0x80
 8010de6:	019b      	lsls	r3, r3, #6
 8010de8:	e623      	b.n	8010a32 <HAL_DMA_IRQHandler+0x362>
 8010dea:	2380      	movs	r3, #128	; 0x80
 8010dec:	019b      	lsls	r3, r3, #6
 8010dee:	e750      	b.n	8010c92 <HAL_DMA_IRQHandler+0x5c2>
 8010df0:	2302      	movs	r3, #2
 8010df2:	e61e      	b.n	8010a32 <HAL_DMA_IRQHandler+0x362>
 8010df4:	2302      	movs	r3, #2
 8010df6:	e74c      	b.n	8010c92 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010df8:	2204      	movs	r2, #4
 8010dfa:	e67f      	b.n	8010afc <HAL_DMA_IRQHandler+0x42c>
 8010dfc:	2204      	movs	r2, #4
 8010dfe:	e799      	b.n	8010d34 <HAL_DMA_IRQHandler+0x664>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010e00:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010e02:	4882      	ldr	r0, [pc, #520]	; (801100c <HAL_DMA_IRQHandler+0x93c>)
 8010e04:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010e06:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010e08:	432a      	orrs	r2, r5
 8010e0a:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010e0c:	2221      	movs	r2, #33	; 0x21
 8010e0e:	3503      	adds	r5, #3
 8010e10:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010e12:	2500      	movs	r5, #0
 8010e14:	3a01      	subs	r2, #1
 8010e16:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010e18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e1a:	2a00      	cmp	r2, #0
 8010e1c:	d000      	beq.n	8010e20 <HAL_DMA_IRQHandler+0x750>
 8010e1e:	e6c4      	b.n	8010baa <HAL_DMA_IRQHandler+0x4da>
 8010e20:	e554      	b.n	80108cc <HAL_DMA_IRQHandler+0x1fc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010e22:	0332      	lsls	r2, r6, #12
 8010e24:	d500      	bpl.n	8010e28 <HAL_DMA_IRQHandler+0x758>
 8010e26:	e4ca      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010e28:	2280      	movs	r2, #128	; 0x80
 8010e2a:	6800      	ldr	r0, [r0, #0]
 8010e2c:	02d2      	lsls	r2, r2, #11
 8010e2e:	e54f      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010e30:	0332      	lsls	r2, r6, #12
 8010e32:	d500      	bpl.n	8010e36 <HAL_DMA_IRQHandler+0x766>
 8010e34:	e4c3      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010e36:	2280      	movs	r2, #128	; 0x80
 8010e38:	6800      	ldr	r0, [r0, #0]
 8010e3a:	0019      	movs	r1, r3
 8010e3c:	02d2      	lsls	r2, r2, #11
 8010e3e:	e61a      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010e40:	2280      	movs	r2, #128	; 0x80
 8010e42:	0492      	lsls	r2, r2, #18
 8010e44:	e5ad      	b.n	80109a2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010e46:	2320      	movs	r3, #32
 8010e48:	e723      	b.n	8010c92 <HAL_DMA_IRQHandler+0x5c2>
 8010e4a:	2320      	movs	r3, #32
 8010e4c:	e5f1      	b.n	8010a32 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010e4e:	2240      	movs	r2, #64	; 0x40
 8010e50:	e770      	b.n	8010d34 <HAL_DMA_IRQHandler+0x664>
 8010e52:	2240      	movs	r2, #64	; 0x40
 8010e54:	e652      	b.n	8010afc <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010e56:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010e58:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010e5a:	486c      	ldr	r0, [pc, #432]	; (801100c <HAL_DMA_IRQHandler+0x93c>)
 8010e5c:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010e5e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010e60:	432a      	orrs	r2, r5
 8010e62:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010e64:	2221      	movs	r2, #33	; 0x21
 8010e66:	3503      	adds	r5, #3
 8010e68:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010e6a:	2500      	movs	r5, #0
 8010e6c:	3a01      	subs	r2, #1
 8010e6e:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010e70:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e72:	2a00      	cmp	r2, #0
 8010e74:	d000      	beq.n	8010e78 <HAL_DMA_IRQHandler+0x7a8>
 8010e76:	e698      	b.n	8010baa <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010e78:	6800      	ldr	r0, [r0, #0]
 8010e7a:	e4f4      	b.n	8010866 <HAL_DMA_IRQHandler+0x196>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010e7c:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010e7e:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010e80:	4861      	ldr	r0, [pc, #388]	; (8011008 <HAL_DMA_IRQHandler+0x938>)
 8010e82:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010e84:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010e86:	432a      	orrs	r2, r5
 8010e88:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010e8a:	2221      	movs	r2, #33	; 0x21
 8010e8c:	3503      	adds	r5, #3
 8010e8e:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010e90:	2500      	movs	r5, #0
 8010e92:	3a01      	subs	r2, #1
 8010e94:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010e96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e98:	2a00      	cmp	r2, #0
 8010e9a:	d000      	beq.n	8010e9e <HAL_DMA_IRQHandler+0x7ce>
 8010e9c:	e685      	b.n	8010baa <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010e9e:	6800      	ldr	r0, [r0, #0]
 8010ea0:	e691      	b.n	8010bc6 <HAL_DMA_IRQHandler+0x4f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010ea2:	0232      	lsls	r2, r6, #8
 8010ea4:	d500      	bpl.n	8010ea8 <HAL_DMA_IRQHandler+0x7d8>
 8010ea6:	e48a      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ea8:	0019      	movs	r1, r3
 8010eaa:	6800      	ldr	r0, [r0, #0]
 8010eac:	2280      	movs	r2, #128	; 0x80
 8010eae:	03d2      	lsls	r2, r2, #15
 8010eb0:	e5e1      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010eb2:	0232      	lsls	r2, r6, #8
 8010eb4:	d500      	bpl.n	8010eb8 <HAL_DMA_IRQHandler+0x7e8>
 8010eb6:	e482      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010eb8:	6800      	ldr	r0, [r0, #0]
 8010eba:	2280      	movs	r2, #128	; 0x80
 8010ebc:	03d2      	lsls	r2, r2, #15
 8010ebe:	e507      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010ec0:	2380      	movs	r3, #128	; 0x80
 8010ec2:	009b      	lsls	r3, r3, #2
 8010ec4:	e6e5      	b.n	8010c92 <HAL_DMA_IRQHandler+0x5c2>
 8010ec6:	2380      	movs	r3, #128	; 0x80
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	e5b2      	b.n	8010a32 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010ecc:	2280      	movs	r2, #128	; 0x80
 8010ece:	01d2      	lsls	r2, r2, #7
 8010ed0:	e614      	b.n	8010afc <HAL_DMA_IRQHandler+0x42c>
 8010ed2:	2280      	movs	r2, #128	; 0x80
 8010ed4:	01d2      	lsls	r2, r2, #7
 8010ed6:	e72d      	b.n	8010d34 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010ed8:	2280      	movs	r2, #128	; 0x80
 8010eda:	0212      	lsls	r2, r2, #8
 8010edc:	e4ad      	b.n	801083a <HAL_DMA_IRQHandler+0x16a>
 8010ede:	2280      	movs	r2, #128	; 0x80
 8010ee0:	0212      	lsls	r2, r2, #8
 8010ee2:	e653      	b.n	8010b8c <HAL_DMA_IRQHandler+0x4bc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010ee4:	0732      	lsls	r2, r6, #28
 8010ee6:	d500      	bpl.n	8010eea <HAL_DMA_IRQHandler+0x81a>
 8010ee8:	e469      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010eea:	4a47      	ldr	r2, [pc, #284]	; (8011008 <HAL_DMA_IRQHandler+0x938>)
 8010eec:	6810      	ldr	r0, [r2, #0]
 8010eee:	2204      	movs	r2, #4
 8010ef0:	e5c1      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010ef2:	0732      	lsls	r2, r6, #28
 8010ef4:	d500      	bpl.n	8010ef8 <HAL_DMA_IRQHandler+0x828>
 8010ef6:	e462      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ef8:	4a44      	ldr	r2, [pc, #272]	; (801100c <HAL_DMA_IRQHandler+0x93c>)
 8010efa:	493f      	ldr	r1, [pc, #252]	; (8010ff8 <HAL_DMA_IRQHandler+0x928>)
 8010efc:	6810      	ldr	r0, [r2, #0]
 8010efe:	2204      	movs	r2, #4
 8010f00:	e4e6      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010f02:	2380      	movs	r3, #128	; 0x80
 8010f04:	029b      	lsls	r3, r3, #10
 8010f06:	e6c4      	b.n	8010c92 <HAL_DMA_IRQHandler+0x5c2>
 8010f08:	2380      	movs	r3, #128	; 0x80
 8010f0a:	029b      	lsls	r3, r3, #10
 8010f0c:	e591      	b.n	8010a32 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010f0e:	2280      	movs	r2, #128	; 0x80
 8010f10:	0312      	lsls	r2, r2, #12
 8010f12:	e63b      	b.n	8010b8c <HAL_DMA_IRQHandler+0x4bc>
 8010f14:	2280      	movs	r2, #128	; 0x80
 8010f16:	0312      	lsls	r2, r2, #12
 8010f18:	e48f      	b.n	801083a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010f1a:	2280      	movs	r2, #128	; 0x80
 8010f1c:	02d2      	lsls	r2, r2, #11
 8010f1e:	e5ed      	b.n	8010afc <HAL_DMA_IRQHandler+0x42c>
 8010f20:	2280      	movs	r2, #128	; 0x80
 8010f22:	02d2      	lsls	r2, r2, #11
 8010f24:	e706      	b.n	8010d34 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010f26:	0632      	lsls	r2, r6, #24
 8010f28:	d500      	bpl.n	8010f2c <HAL_DMA_IRQHandler+0x85c>
 8010f2a:	e448      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010f2c:	4a36      	ldr	r2, [pc, #216]	; (8011008 <HAL_DMA_IRQHandler+0x938>)
 8010f2e:	6810      	ldr	r0, [r2, #0]
 8010f30:	2240      	movs	r2, #64	; 0x40
 8010f32:	e5a0      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010f34:	0632      	lsls	r2, r6, #24
 8010f36:	d500      	bpl.n	8010f3a <HAL_DMA_IRQHandler+0x86a>
 8010f38:	e441      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010f3a:	4a34      	ldr	r2, [pc, #208]	; (801100c <HAL_DMA_IRQHandler+0x93c>)
 8010f3c:	492f      	ldr	r1, [pc, #188]	; (8010ffc <HAL_DMA_IRQHandler+0x92c>)
 8010f3e:	6810      	ldr	r0, [r2, #0]
 8010f40:	2240      	movs	r2, #64	; 0x40
 8010f42:	e4c5      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010f44:	2380      	movs	r3, #128	; 0x80
 8010f46:	039b      	lsls	r3, r3, #14
 8010f48:	e6a3      	b.n	8010c92 <HAL_DMA_IRQHandler+0x5c2>
 8010f4a:	2380      	movs	r3, #128	; 0x80
 8010f4c:	039b      	lsls	r3, r3, #14
 8010f4e:	e570      	b.n	8010a32 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010f50:	2280      	movs	r2, #128	; 0x80
 8010f52:	0412      	lsls	r2, r2, #16
 8010f54:	e471      	b.n	801083a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010f56:	2280      	movs	r2, #128	; 0x80
 8010f58:	03d2      	lsls	r2, r2, #15
 8010f5a:	e5cf      	b.n	8010afc <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010f5c:	2280      	movs	r2, #128	; 0x80
 8010f5e:	0412      	lsls	r2, r2, #16
 8010f60:	e614      	b.n	8010b8c <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010f62:	2280      	movs	r2, #128	; 0x80
 8010f64:	03d2      	lsls	r2, r2, #15
 8010f66:	e6e5      	b.n	8010d34 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010f68:	0532      	lsls	r2, r6, #20
 8010f6a:	d500      	bpl.n	8010f6e <HAL_DMA_IRQHandler+0x89e>
 8010f6c:	e427      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010f6e:	4a26      	ldr	r2, [pc, #152]	; (8011008 <HAL_DMA_IRQHandler+0x938>)
 8010f70:	6810      	ldr	r0, [r2, #0]
 8010f72:	2280      	movs	r2, #128	; 0x80
 8010f74:	00d2      	lsls	r2, r2, #3
 8010f76:	e57e      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010f78:	0532      	lsls	r2, r6, #20
 8010f7a:	d500      	bpl.n	8010f7e <HAL_DMA_IRQHandler+0x8ae>
 8010f7c:	e41f      	b.n	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010f7e:	4a23      	ldr	r2, [pc, #140]	; (801100c <HAL_DMA_IRQHandler+0x93c>)
 8010f80:	0019      	movs	r1, r3
 8010f82:	6810      	ldr	r0, [r2, #0]
 8010f84:	2280      	movs	r2, #128	; 0x80
 8010f86:	00d2      	lsls	r2, r2, #3
 8010f88:	e4a2      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010f8a:	2380      	movs	r3, #128	; 0x80
 8010f8c:	049b      	lsls	r3, r3, #18
 8010f8e:	e550      	b.n	8010a32 <HAL_DMA_IRQHandler+0x362>
 8010f90:	2380      	movs	r3, #128	; 0x80
 8010f92:	049b      	lsls	r3, r3, #18
 8010f94:	e67d      	b.n	8010c92 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010f96:	2280      	movs	r2, #128	; 0x80
 8010f98:	04d2      	lsls	r2, r2, #19
 8010f9a:	e5af      	b.n	8010afc <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010f9c:	2280      	movs	r2, #128	; 0x80
 8010f9e:	0512      	lsls	r2, r2, #20
 8010fa0:	e5f4      	b.n	8010b8c <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010fa2:	2280      	movs	r2, #128	; 0x80
 8010fa4:	04d2      	lsls	r2, r2, #19
 8010fa6:	e6c5      	b.n	8010d34 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010fa8:	2280      	movs	r2, #128	; 0x80
 8010faa:	0512      	lsls	r2, r2, #20
 8010fac:	e445      	b.n	801083a <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010fae:	0432      	lsls	r2, r6, #16
 8010fb0:	d501      	bpl.n	8010fb6 <HAL_DMA_IRQHandler+0x8e6>
 8010fb2:	f7ff fc04 	bl	80107be <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010fb6:	0019      	movs	r1, r3
 8010fb8:	4a14      	ldr	r2, [pc, #80]	; (801100c <HAL_DMA_IRQHandler+0x93c>)
 8010fba:	6810      	ldr	r0, [r2, #0]
 8010fbc:	2280      	movs	r2, #128	; 0x80
 8010fbe:	01d2      	lsls	r2, r2, #7
 8010fc0:	e486      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010fc2:	2208      	movs	r2, #8
 8010fc4:	e5e2      	b.n	8010b8c <HAL_DMA_IRQHandler+0x4bc>
 8010fc6:	2208      	movs	r2, #8
 8010fc8:	e437      	b.n	801083a <HAL_DMA_IRQHandler+0x16a>
 8010fca:	2280      	movs	r2, #128	; 0x80
 8010fcc:	e5de      	b.n	8010b8c <HAL_DMA_IRQHandler+0x4bc>
 8010fce:	2280      	movs	r2, #128	; 0x80
 8010fd0:	e433      	b.n	801083a <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010fd2:	6800      	ldr	r0, [r0, #0]
 8010fd4:	0019      	movs	r1, r3
 8010fd6:	2204      	movs	r2, #4
 8010fd8:	e54d      	b.n	8010a76 <HAL_DMA_IRQHandler+0x3a6>
 8010fda:	2280      	movs	r2, #128	; 0x80
 8010fdc:	00d2      	lsls	r2, r2, #3
 8010fde:	e477      	b.n	80108d0 <HAL_DMA_IRQHandler+0x200>
 8010fe0:	40020008 	.word	0x40020008
 8010fe4:	4002001c 	.word	0x4002001c
 8010fe8:	40020030 	.word	0x40020030
 8010fec:	40020044 	.word	0x40020044
 8010ff0:	40020058 	.word	0x40020058
 8010ff4:	4002006c 	.word	0x4002006c
 8010ff8:	40020408 	.word	0x40020408
 8010ffc:	4002041c 	.word	0x4002041c
 8011000:	40020430 	.word	0x40020430
 8011004:	bffdfbbc 	.word	0xbffdfbbc
 8011008:	40020000 	.word	0x40020000
 801100c:	40020400 	.word	0x40020400

08011010 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011010:	4b05      	ldr	r3, [pc, #20]	; (8011028 <HAL_FLASH_Unlock+0x18>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 8011012:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011014:	691a      	ldr	r2, [r3, #16]
 8011016:	0612      	lsls	r2, r2, #24
 8011018:	d504      	bpl.n	8011024 <HAL_FLASH_Unlock+0x14>
  }

  return HAL_OK; 
 801101a:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801101c:	4a03      	ldr	r2, [pc, #12]	; (801102c <HAL_FLASH_Unlock+0x1c>)
 801101e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011020:	4a03      	ldr	r2, [pc, #12]	; (8011030 <HAL_FLASH_Unlock+0x20>)
 8011022:	605a      	str	r2, [r3, #4]
}
 8011024:	4770      	bx	lr
 8011026:	46c0      	nop			; (mov r8, r8)
 8011028:	40022000 	.word	0x40022000
 801102c:	45670123 	.word	0x45670123
 8011030:	cdef89ab 	.word	0xcdef89ab

08011034 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011034:	2180      	movs	r1, #128	; 0x80
 8011036:	4a03      	ldr	r2, [pc, #12]	; (8011044 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 8011038:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801103a:	6913      	ldr	r3, [r2, #16]
 801103c:	430b      	orrs	r3, r1
 801103e:	6113      	str	r3, [r2, #16]
}
 8011040:	4770      	bx	lr
 8011042:	46c0      	nop			; (mov r8, r8)
 8011044:	40022000 	.word	0x40022000

08011048 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8011048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801104a:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 801104c:	f7fe fdfa 	bl	800fc44 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011050:	4c1d      	ldr	r4, [pc, #116]	; (80110c8 <FLASH_WaitForLastOperation+0x80>)
  uint32_t tickstart = HAL_GetTick();
 8011052:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011054:	2601      	movs	r6, #1
 8011056:	e001      	b.n	801105c <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8011058:	1c6b      	adds	r3, r5, #1
 801105a:	d11d      	bne.n	8011098 <FLASH_WaitForLastOperation+0x50>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801105c:	68e3      	ldr	r3, [r4, #12]
 801105e:	421e      	tst	r6, r3
 8011060:	d1fa      	bne.n	8011058 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011062:	2320      	movs	r3, #32
 8011064:	68e2      	ldr	r2, [r4, #12]
 8011066:	4213      	tst	r3, r2
 8011068:	d000      	beq.n	801106c <FLASH_WaitForLastOperation+0x24>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801106a:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801106c:	4b16      	ldr	r3, [pc, #88]	; (80110c8 <FLASH_WaitForLastOperation+0x80>)
 801106e:	68da      	ldr	r2, [r3, #12]
 8011070:	06d2      	lsls	r2, r2, #27
 8011072:	d51a      	bpl.n	80110aa <FLASH_WaitForLastOperation+0x62>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011074:	4b14      	ldr	r3, [pc, #80]	; (80110c8 <FLASH_WaitForLastOperation+0x80>)
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	06db      	lsls	r3, r3, #27
 801107a:	d504      	bpl.n	8011086 <FLASH_WaitForLastOperation+0x3e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801107c:	2102      	movs	r1, #2
 801107e:	4a13      	ldr	r2, [pc, #76]	; (80110cc <FLASH_WaitForLastOperation+0x84>)
 8011080:	69d3      	ldr	r3, [r2, #28]
 8011082:	430b      	orrs	r3, r1
 8011084:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011086:	4b10      	ldr	r3, [pc, #64]	; (80110c8 <FLASH_WaitForLastOperation+0x80>)
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	075b      	lsls	r3, r3, #29
 801108c:	d416      	bmi.n	80110bc <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 801108e:	2214      	movs	r2, #20
    return HAL_ERROR;
 8011090:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011092:	4b0d      	ldr	r3, [pc, #52]	; (80110c8 <FLASH_WaitForLastOperation+0x80>)
 8011094:	60da      	str	r2, [r3, #12]
}
 8011096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011098:	2d00      	cmp	r5, #0
 801109a:	d004      	beq.n	80110a6 <FLASH_WaitForLastOperation+0x5e>
 801109c:	f7fe fdd2 	bl	800fc44 <HAL_GetTick>
 80110a0:	1bc0      	subs	r0, r0, r7
 80110a2:	42a8      	cmp	r0, r5
 80110a4:	d9da      	bls.n	801105c <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 80110a6:	2003      	movs	r0, #3
 80110a8:	e7f5      	b.n	8011096 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80110aa:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 80110ac:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80110ae:	075b      	lsls	r3, r3, #29
 80110b0:	d5f1      	bpl.n	8011096 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80110b2:	4b05      	ldr	r3, [pc, #20]	; (80110c8 <FLASH_WaitForLastOperation+0x80>)
 80110b4:	68db      	ldr	r3, [r3, #12]
 80110b6:	06db      	lsls	r3, r3, #27
 80110b8:	d5e5      	bpl.n	8011086 <FLASH_WaitForLastOperation+0x3e>
 80110ba:	e7df      	b.n	801107c <FLASH_WaitForLastOperation+0x34>
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80110bc:	2101      	movs	r1, #1
 80110be:	4a03      	ldr	r2, [pc, #12]	; (80110cc <FLASH_WaitForLastOperation+0x84>)
 80110c0:	69d3      	ldr	r3, [r2, #28]
 80110c2:	430b      	orrs	r3, r1
 80110c4:	61d3      	str	r3, [r2, #28]
 80110c6:	e7e2      	b.n	801108e <FLASH_WaitForLastOperation+0x46>
 80110c8:	40022000 	.word	0x40022000
 80110cc:	20006db0 	.word	0x20006db0

080110d0 <HAL_FLASH_Program>:
{
 80110d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110d2:	464e      	mov	r6, r9
 80110d4:	4657      	mov	r7, sl
 80110d6:	46de      	mov	lr, fp
 80110d8:	4645      	mov	r5, r8
 80110da:	b5e0      	push	{r5, r6, r7, lr}
 80110dc:	469a      	mov	sl, r3
 80110de:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 80110e0:	4b2a      	ldr	r3, [pc, #168]	; (801118c <HAL_FLASH_Program+0xbc>)
{
 80110e2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 80110e4:	4699      	mov	r9, r3
 80110e6:	7e1b      	ldrb	r3, [r3, #24]
{
 80110e8:	0004      	movs	r4, r0
 80110ea:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	d048      	beq.n	8011182 <HAL_FLASH_Program+0xb2>
 80110f0:	2501      	movs	r5, #1
 80110f2:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80110f4:	4826      	ldr	r0, [pc, #152]	; (8011190 <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 80110f6:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80110f8:	f7ff ffa6 	bl	8011048 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80110fc:	2800      	cmp	r0, #0
 80110fe:	d136      	bne.n	801116e <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011100:	2c01      	cmp	r4, #1
 8011102:	d040      	beq.n	8011186 <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 8011104:	3c02      	subs	r4, #2
 8011106:	4263      	negs	r3, r4
 8011108:	415c      	adcs	r4, r3
 801110a:	2304      	movs	r3, #4
 801110c:	4264      	negs	r4, r4
 801110e:	43ac      	bics	r4, r5
 8011110:	46a0      	mov	r8, r4
 8011112:	469c      	mov	ip, r3
 8011114:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011116:	2300      	movs	r3, #0
      nbiterations = 4;
 8011118:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801111a:	469b      	mov	fp, r3
 801111c:	e018      	b.n	8011150 <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801111e:	4653      	mov	r3, sl
 8011120:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011122:	464a      	mov	r2, r9
 8011124:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011126:	2701      	movs	r7, #1
 8011128:	4c1a      	ldr	r4, [pc, #104]	; (8011194 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801112a:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801112c:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801112e:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011130:	433a      	orrs	r2, r7
 8011132:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011134:	4816      	ldr	r0, [pc, #88]	; (8011190 <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 8011136:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011138:	f7ff ff86 	bl	8011048 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 801113c:	6923      	ldr	r3, [r4, #16]
 801113e:	43bb      	bics	r3, r7
 8011140:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011142:	2800      	cmp	r0, #0
 8011144:	d113      	bne.n	801116e <HAL_FLASH_Program+0x9e>
 8011146:	3501      	adds	r5, #1
    for (index = 0; index < nbiterations; index++)
 8011148:	b2eb      	uxtb	r3, r5
 801114a:	3602      	adds	r6, #2
 801114c:	4598      	cmp	r8, r3
 801114e:	d90e      	bls.n	801116e <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011150:	2220      	movs	r2, #32
 8011152:	012b      	lsls	r3, r5, #4
 8011154:	4252      	negs	r2, r2
 8011156:	189a      	adds	r2, r3, r2
 8011158:	d5e1      	bpl.n	801111e <HAL_FLASH_Program+0x4e>
 801115a:	2220      	movs	r2, #32
 801115c:	4651      	mov	r1, sl
 801115e:	1ad2      	subs	r2, r2, r3
 8011160:	4091      	lsls	r1, r2
 8011162:	000a      	movs	r2, r1
 8011164:	9901      	ldr	r1, [sp, #4]
 8011166:	40d9      	lsrs	r1, r3
 8011168:	000b      	movs	r3, r1
 801116a:	4313      	orrs	r3, r2
 801116c:	e7d9      	b.n	8011122 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 801116e:	2300      	movs	r3, #0
 8011170:	464a      	mov	r2, r9
 8011172:	7613      	strb	r3, [r2, #24]
}
 8011174:	b003      	add	sp, #12
 8011176:	bc3c      	pop	{r2, r3, r4, r5}
 8011178:	4690      	mov	r8, r2
 801117a:	4699      	mov	r9, r3
 801117c:	46a2      	mov	sl, r4
 801117e:	46ab      	mov	fp, r5
 8011180:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011182:	2002      	movs	r0, #2
 8011184:	e7f6      	b.n	8011174 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 8011186:	2301      	movs	r3, #1
 8011188:	4698      	mov	r8, r3
 801118a:	e7c4      	b.n	8011116 <HAL_FLASH_Program+0x46>
 801118c:	20006db0 	.word	0x20006db0
 8011190:	0000c350 	.word	0x0000c350
 8011194:	40022000 	.word	0x40022000

08011198 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8011198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801119a:	464f      	mov	r7, r9
 801119c:	4646      	mov	r6, r8
 801119e:	46d6      	mov	lr, sl
 80111a0:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80111a2:	4f30      	ldr	r7, [pc, #192]	; (8011264 <HAL_FLASHEx_Erase+0xcc>)
{
 80111a4:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 80111a6:	7e3b      	ldrb	r3, [r7, #24]
{
 80111a8:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 80111aa:	2b01      	cmp	r3, #1
 80111ac:	d057      	beq.n	801125e <HAL_FLASHEx_Erase+0xc6>
 80111ae:	2301      	movs	r3, #1
 80111b0:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80111b2:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80111b4:	482c      	ldr	r0, [pc, #176]	; (8011268 <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	d034      	beq.n	8011224 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80111ba:	f7ff ff45 	bl	8011048 <FLASH_WaitForLastOperation>
 80111be:	2800      	cmp	r0, #0
 80111c0:	d134      	bne.n	801122c <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 80111c2:	2301      	movs	r3, #1
 80111c4:	464a      	mov	r2, r9
 80111c6:	425b      	negs	r3, r3
 80111c8:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80111ca:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 80111cc:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80111ce:	02db      	lsls	r3, r3, #11
 80111d0:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 80111d2:	429d      	cmp	r5, r3
 80111d4:	d22a      	bcs.n	801122c <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80111d6:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80111d8:	4c24      	ldr	r4, [pc, #144]	; (801126c <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80111da:	4698      	mov	r8, r3
 80111dc:	e00a      	b.n	80111f4 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 80111de:	2380      	movs	r3, #128	; 0x80
 80111e0:	011b      	lsls	r3, r3, #4
 80111e2:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80111e4:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 80111e6:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80111e8:	4694      	mov	ip, r2
 80111ea:	68b3      	ldr	r3, [r6, #8]
 80111ec:	02db      	lsls	r3, r3, #11
 80111ee:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80111f0:	42ab      	cmp	r3, r5
 80111f2:	d91c      	bls.n	801122e <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80111f4:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80111f6:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80111f8:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80111fa:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80111fc:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80111fe:	481a      	ldr	r0, [pc, #104]	; (8011268 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011200:	4313      	orrs	r3, r2
 8011202:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011204:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011206:	6923      	ldr	r3, [r4, #16]
 8011208:	323e      	adds	r2, #62	; 0x3e
 801120a:	4313      	orrs	r3, r2
 801120c:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801120e:	f7ff ff1b 	bl	8011048 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011212:	4652      	mov	r2, sl
 8011214:	6923      	ldr	r3, [r4, #16]
 8011216:	4393      	bics	r3, r2
 8011218:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 801121a:	2800      	cmp	r0, #0
 801121c:	d0df      	beq.n	80111de <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 801121e:	464b      	mov	r3, r9
 8011220:	601d      	str	r5, [r3, #0]
            break;
 8011222:	e004      	b.n	801122e <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011224:	f7ff ff10 	bl	8011048 <FLASH_WaitForLastOperation>
 8011228:	2800      	cmp	r0, #0
 801122a:	d007      	beq.n	801123c <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 801122c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 801122e:	2300      	movs	r3, #0
 8011230:	763b      	strb	r3, [r7, #24]
}
 8011232:	bc1c      	pop	{r2, r3, r4}
 8011234:	4690      	mov	r8, r2
 8011236:	4699      	mov	r9, r3
 8011238:	46a2      	mov	sl, r4
 801123a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801123c:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801123e:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011240:	4c0a      	ldr	r4, [pc, #40]	; (801126c <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011242:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011244:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011246:	4808      	ldr	r0, [pc, #32]	; (8011268 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011248:	432b      	orrs	r3, r5
 801124a:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801124c:	6923      	ldr	r3, [r4, #16]
 801124e:	4313      	orrs	r3, r2
 8011250:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011252:	f7ff fef9 	bl	8011048 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8011256:	6923      	ldr	r3, [r4, #16]
 8011258:	43ab      	bics	r3, r5
 801125a:	6123      	str	r3, [r4, #16]
 801125c:	e7e7      	b.n	801122e <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 801125e:	2002      	movs	r0, #2
 8011260:	e7e7      	b.n	8011232 <HAL_FLASHEx_Erase+0x9a>
 8011262:	46c0      	nop			; (mov r8, r8)
 8011264:	20006db0 	.word	0x20006db0
 8011268:	0000c350 	.word	0x0000c350
 801126c:	40022000 	.word	0x40022000

08011270 <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011270:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011272:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011274:	4b05      	ldr	r3, [pc, #20]	; (801128c <FLASH_PageErase+0x1c>)
 8011276:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011278:	4b05      	ldr	r3, [pc, #20]	; (8011290 <FLASH_PageErase+0x20>)
 801127a:	691a      	ldr	r2, [r3, #16]
 801127c:	430a      	orrs	r2, r1
 801127e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011280:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011282:	691a      	ldr	r2, [r3, #16]
 8011284:	313e      	adds	r1, #62	; 0x3e
 8011286:	430a      	orrs	r2, r1
 8011288:	611a      	str	r2, [r3, #16]
}
 801128a:	4770      	bx	lr
 801128c:	20006db0 	.word	0x20006db0
 8011290:	40022000 	.word	0x40022000

08011294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011296:	464e      	mov	r6, r9
 8011298:	46de      	mov	lr, fp
 801129a:	4657      	mov	r7, sl
 801129c:	4645      	mov	r5, r8
 801129e:	b5e0      	push	{r5, r6, r7, lr}
 80112a0:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80112a2:	6809      	ldr	r1, [r1, #0]
{ 
 80112a4:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 80112a6:	2900      	cmp	r1, #0
 80112a8:	d100      	bne.n	80112ac <HAL_GPIO_Init+0x18>
 80112aa:	e080      	b.n	80113ae <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80112ac:	4b70      	ldr	r3, [pc, #448]	; (8011470 <HAL_GPIO_Init+0x1dc>)
  uint32_t position = 0x00;
 80112ae:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80112b0:	469b      	mov	fp, r3
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80112b2:	4b70      	ldr	r3, [pc, #448]	; (8011474 <HAL_GPIO_Init+0x1e0>)
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80112b4:	2601      	movs	r6, #1
        temp = EXTI->IMR;
 80112b6:	4698      	mov	r8, r3
 80112b8:	468a      	mov	sl, r1
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80112ba:	0033      	movs	r3, r6
 80112bc:	4652      	mov	r2, sl
 80112be:	40a3      	lsls	r3, r4
 80112c0:	4013      	ands	r3, r2
 80112c2:	9300      	str	r3, [sp, #0]
    if(iocurrent)
 80112c4:	d06f      	beq.n	80113a6 <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80112c6:	464b      	mov	r3, r9
 80112c8:	6859      	ldr	r1, [r3, #4]
 80112ca:	2310      	movs	r3, #16
 80112cc:	000f      	movs	r7, r1
 80112ce:	439f      	bics	r7, r3
 80112d0:	003b      	movs	r3, r7
 80112d2:	9701      	str	r7, [sp, #4]
 80112d4:	2f02      	cmp	r7, #2
 80112d6:	d100      	bne.n	80112da <HAL_GPIO_Init+0x46>
 80112d8:	e070      	b.n	80113bc <HAL_GPIO_Init+0x128>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80112da:	2203      	movs	r2, #3
 80112dc:	0065      	lsls	r5, r4, #1
 80112de:	40aa      	lsls	r2, r5
 80112e0:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 80112e2:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80112e4:	4013      	ands	r3, r2
 80112e6:	001f      	movs	r7, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80112e8:	2303      	movs	r3, #3
 80112ea:	400b      	ands	r3, r1
 80112ec:	40ab      	lsls	r3, r5
 80112ee:	469c      	mov	ip, r3
 80112f0:	003b      	movs	r3, r7
 80112f2:	4667      	mov	r7, ip
 80112f4:	433b      	orrs	r3, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80112f6:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 80112f8:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80112fa:	3f01      	subs	r7, #1
 80112fc:	2f01      	cmp	r7, #1
 80112fe:	d800      	bhi.n	8011302 <HAL_GPIO_Init+0x6e>
 8011300:	e079      	b.n	80113f6 <HAL_GPIO_Init+0x162>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011302:	464b      	mov	r3, r9
      temp = GPIOx->PUPDR;
 8011304:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011306:	403a      	ands	r2, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011308:	689f      	ldr	r7, [r3, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801130a:	2380      	movs	r3, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 801130c:	40af      	lsls	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801130e:	055b      	lsls	r3, r3, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011310:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8011312:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011314:	4219      	tst	r1, r3
 8011316:	d046      	beq.n	80113a6 <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011318:	465b      	mov	r3, fp
 801131a:	699a      	ldr	r2, [r3, #24]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801131c:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801131e:	4332      	orrs	r2, r6
 8011320:	619a      	str	r2, [r3, #24]
 8011322:	699a      	ldr	r2, [r3, #24]
 8011324:	4b54      	ldr	r3, [pc, #336]	; (8011478 <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011326:	4027      	ands	r7, r4
 8011328:	469c      	mov	ip, r3
 801132a:	230f      	movs	r3, #15
 801132c:	00bf      	lsls	r7, r7, #2
 801132e:	40bb      	lsls	r3, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011330:	4032      	ands	r2, r6
 8011332:	9203      	str	r2, [sp, #12]
 8011334:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8011336:	08a2      	lsrs	r2, r4, #2
 8011338:	0092      	lsls	r2, r2, #2
 801133a:	4462      	add	r2, ip
 801133c:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801133e:	439d      	bics	r5, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011340:	2390      	movs	r3, #144	; 0x90
 8011342:	05db      	lsls	r3, r3, #23
 8011344:	4298      	cmp	r0, r3
 8011346:	d012      	beq.n	801136e <HAL_GPIO_Init+0xda>
 8011348:	4b4c      	ldr	r3, [pc, #304]	; (801147c <HAL_GPIO_Init+0x1e8>)
 801134a:	4298      	cmp	r0, r3
 801134c:	d100      	bne.n	8011350 <HAL_GPIO_Init+0xbc>
 801134e:	e083      	b.n	8011458 <HAL_GPIO_Init+0x1c4>
 8011350:	4b4b      	ldr	r3, [pc, #300]	; (8011480 <HAL_GPIO_Init+0x1ec>)
 8011352:	4298      	cmp	r0, r3
 8011354:	d100      	bne.n	8011358 <HAL_GPIO_Init+0xc4>
 8011356:	e07b      	b.n	8011450 <HAL_GPIO_Init+0x1bc>
 8011358:	4b4a      	ldr	r3, [pc, #296]	; (8011484 <HAL_GPIO_Init+0x1f0>)
 801135a:	4298      	cmp	r0, r3
 801135c:	d100      	bne.n	8011360 <HAL_GPIO_Init+0xcc>
 801135e:	e07f      	b.n	8011460 <HAL_GPIO_Init+0x1cc>
 8011360:	4b49      	ldr	r3, [pc, #292]	; (8011488 <HAL_GPIO_Init+0x1f4>)
 8011362:	4298      	cmp	r0, r3
 8011364:	d100      	bne.n	8011368 <HAL_GPIO_Init+0xd4>
 8011366:	e07f      	b.n	8011468 <HAL_GPIO_Init+0x1d4>
 8011368:	2305      	movs	r3, #5
 801136a:	40bb      	lsls	r3, r7
 801136c:	431d      	orrs	r5, r3
        temp = EXTI->IMR;
 801136e:	4643      	mov	r3, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 8011370:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8011372:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011374:	9b00      	ldr	r3, [sp, #0]
 8011376:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011378:	03cb      	lsls	r3, r1, #15
 801137a:	d451      	bmi.n	8011420 <HAL_GPIO_Init+0x18c>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 801137c:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 801137e:	402a      	ands	r2, r5
        EXTI->IMR = temp;
 8011380:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8011382:	685a      	ldr	r2, [r3, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011384:	038b      	lsls	r3, r1, #14
 8011386:	d452      	bmi.n	801142e <HAL_GPIO_Init+0x19a>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8011388:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 801138a:	402a      	ands	r2, r5
        EXTI->EMR = temp;
 801138c:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801138e:	689a      	ldr	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011390:	02cb      	lsls	r3, r1, #11
 8011392:	d453      	bmi.n	801143c <HAL_GPIO_Init+0x1a8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011394:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011396:	402a      	ands	r2, r5
        EXTI->RTSR = temp;
 8011398:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 801139a:	68da      	ldr	r2, [r3, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801139c:	028b      	lsls	r3, r1, #10
 801139e:	d454      	bmi.n	801144a <HAL_GPIO_Init+0x1b6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80113a0:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 80113a2:	4643      	mov	r3, r8
 80113a4:	60da      	str	r2, [r3, #12]
  while ((GPIO_Init->Pin) >> position)
 80113a6:	4653      	mov	r3, sl
      }
    }
    
    position++;
 80113a8:	3401      	adds	r4, #1
  while ((GPIO_Init->Pin) >> position)
 80113aa:	40e3      	lsrs	r3, r4
 80113ac:	d185      	bne.n	80112ba <HAL_GPIO_Init+0x26>
  } 
}
 80113ae:	b005      	add	sp, #20
 80113b0:	bc3c      	pop	{r2, r3, r4, r5}
 80113b2:	4690      	mov	r8, r2
 80113b4:	4699      	mov	r9, r3
 80113b6:	46a2      	mov	sl, r4
 80113b8:	46ab      	mov	fp, r5
 80113ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80113bc:	2507      	movs	r5, #7
 80113be:	4025      	ands	r5, r4
 80113c0:	00ad      	lsls	r5, r5, #2
 80113c2:	330d      	adds	r3, #13
 80113c4:	40ab      	lsls	r3, r5
        temp = GPIOx->AFR[position >> 3];
 80113c6:	08e2      	lsrs	r2, r4, #3
 80113c8:	0092      	lsls	r2, r2, #2
 80113ca:	1882      	adds	r2, r0, r2
 80113cc:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80113ce:	439f      	bics	r7, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 80113d0:	464b      	mov	r3, r9
 80113d2:	691b      	ldr	r3, [r3, #16]
 80113d4:	40ab      	lsls	r3, r5
 80113d6:	001d      	movs	r5, r3
 80113d8:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 80113da:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80113dc:	2203      	movs	r2, #3
 80113de:	0065      	lsls	r5, r4, #1
 80113e0:	40aa      	lsls	r2, r5
 80113e2:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 80113e4:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80113e6:	4017      	ands	r7, r2
 80113e8:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80113ea:	2703      	movs	r7, #3
 80113ec:	400f      	ands	r7, r1
 80113ee:	40af      	lsls	r7, r5
 80113f0:	4663      	mov	r3, ip
 80113f2:	431f      	orrs	r7, r3
      GPIOx->MODER = temp;
 80113f4:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80113f6:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80113f8:	464b      	mov	r3, r9
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80113fa:	4017      	ands	r7, r2
 80113fc:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80113fe:	68df      	ldr	r7, [r3, #12]
 8011400:	4663      	mov	r3, ip
 8011402:	40af      	lsls	r7, r5
 8011404:	431f      	orrs	r7, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011406:	0033      	movs	r3, r6
 8011408:	40a3      	lsls	r3, r4
        GPIOx->OSPEEDR = temp;
 801140a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 801140c:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 801140e:	439f      	bics	r7, r3
 8011410:	46bc      	mov	ip, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011412:	090f      	lsrs	r7, r1, #4
 8011414:	4037      	ands	r7, r6
 8011416:	40a7      	lsls	r7, r4
 8011418:	4663      	mov	r3, ip
 801141a:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 801141c:	6047      	str	r7, [r0, #4]
 801141e:	e770      	b.n	8011302 <HAL_GPIO_Init+0x6e>
          SET_BIT(temp, iocurrent); 
 8011420:	9b00      	ldr	r3, [sp, #0]
 8011422:	431a      	orrs	r2, r3
        EXTI->IMR = temp;
 8011424:	4643      	mov	r3, r8
 8011426:	601a      	str	r2, [r3, #0]
        temp = EXTI->EMR;
 8011428:	685a      	ldr	r2, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801142a:	038b      	lsls	r3, r1, #14
 801142c:	d5ac      	bpl.n	8011388 <HAL_GPIO_Init+0xf4>
          SET_BIT(temp, iocurrent); 
 801142e:	9b00      	ldr	r3, [sp, #0]
 8011430:	431a      	orrs	r2, r3
        EXTI->EMR = temp;
 8011432:	4643      	mov	r3, r8
 8011434:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 8011436:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011438:	02cb      	lsls	r3, r1, #11
 801143a:	d5ab      	bpl.n	8011394 <HAL_GPIO_Init+0x100>
          SET_BIT(temp, iocurrent); 
 801143c:	9b00      	ldr	r3, [sp, #0]
 801143e:	431a      	orrs	r2, r3
        EXTI->RTSR = temp;
 8011440:	4643      	mov	r3, r8
 8011442:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 8011444:	68da      	ldr	r2, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011446:	028b      	lsls	r3, r1, #10
 8011448:	d5aa      	bpl.n	80113a0 <HAL_GPIO_Init+0x10c>
          SET_BIT(temp, iocurrent); 
 801144a:	9b00      	ldr	r3, [sp, #0]
 801144c:	431a      	orrs	r2, r3
 801144e:	e7a8      	b.n	80113a2 <HAL_GPIO_Init+0x10e>
 8011450:	2302      	movs	r3, #2
 8011452:	40bb      	lsls	r3, r7
 8011454:	431d      	orrs	r5, r3
 8011456:	e78a      	b.n	801136e <HAL_GPIO_Init+0xda>
 8011458:	0033      	movs	r3, r6
 801145a:	40bb      	lsls	r3, r7
 801145c:	431d      	orrs	r5, r3
 801145e:	e786      	b.n	801136e <HAL_GPIO_Init+0xda>
 8011460:	2303      	movs	r3, #3
 8011462:	40bb      	lsls	r3, r7
 8011464:	431d      	orrs	r5, r3
 8011466:	e782      	b.n	801136e <HAL_GPIO_Init+0xda>
 8011468:	2304      	movs	r3, #4
 801146a:	40bb      	lsls	r3, r7
 801146c:	431d      	orrs	r5, r3
 801146e:	e77e      	b.n	801136e <HAL_GPIO_Init+0xda>
 8011470:	40021000 	.word	0x40021000
 8011474:	40010400 	.word	0x40010400
 8011478:	40010000 	.word	0x40010000
 801147c:	48000400 	.word	0x48000400
 8011480:	48000800 	.word	0x48000800
 8011484:	48000c00 	.word	0x48000c00
 8011488:	48001000 	.word	0x48001000

0801148c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801148e:	46de      	mov	lr, fp
 8011490:	4657      	mov	r7, sl
 8011492:	464e      	mov	r6, r9
 8011494:	4645      	mov	r5, r8
 8011496:	b5e0      	push	{r5, r6, r7, lr}
 8011498:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 801149a:	2900      	cmp	r1, #0
 801149c:	d055      	beq.n	801154a <HAL_GPIO_DeInit+0xbe>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 801149e:	2201      	movs	r2, #1
 80114a0:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80114a2:	3202      	adds	r2, #2
 80114a4:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80114a6:	320c      	adds	r2, #12
  uint32_t position = 0x00;
 80114a8:	2300      	movs	r3, #0
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80114aa:	4691      	mov	r9, r2
    iocurrent = (GPIO_Pin) & (1 << position);
 80114ac:	4666      	mov	r6, ip
 80114ae:	000d      	movs	r5, r1
 80114b0:	409e      	lsls	r6, r3
 80114b2:	4035      	ands	r5, r6
    if (iocurrent)
 80114b4:	d045      	beq.n	8011542 <HAL_GPIO_DeInit+0xb6>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80114b6:	4647      	mov	r7, r8
 80114b8:	005c      	lsls	r4, r3, #1
 80114ba:	40a7      	lsls	r7, r4
 80114bc:	43fc      	mvns	r4, r7
 80114be:	6802      	ldr	r2, [r0, #0]
 80114c0:	4022      	ands	r2, r4
 80114c2:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80114c4:	08da      	lsrs	r2, r3, #3
 80114c6:	0092      	lsls	r2, r2, #2
 80114c8:	1887      	adds	r7, r0, r2
 80114ca:	9701      	str	r7, [sp, #4]
 80114cc:	6a3f      	ldr	r7, [r7, #32]
 80114ce:	46ba      	mov	sl, r7
 80114d0:	2707      	movs	r7, #7
 80114d2:	401f      	ands	r7, r3
 80114d4:	00bf      	lsls	r7, r7, #2
 80114d6:	46bb      	mov	fp, r7
 80114d8:	464f      	mov	r7, r9
 80114da:	465a      	mov	r2, fp
 80114dc:	4097      	lsls	r7, r2
 80114de:	46bb      	mov	fp, r7
 80114e0:	4657      	mov	r7, sl
 80114e2:	465a      	mov	r2, fp
 80114e4:	4397      	bics	r7, r2
 80114e6:	003a      	movs	r2, r7
 80114e8:	9f01      	ldr	r7, [sp, #4]
 80114ea:	623a      	str	r2, [r7, #32]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80114ec:	6882      	ldr	r2, [r0, #8]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80114ee:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80114f0:	4022      	ands	r2, r4
 80114f2:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80114f4:	6842      	ldr	r2, [r0, #4]
 80114f6:	43b2      	bics	r2, r6
 80114f8:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80114fa:	68c2      	ldr	r2, [r0, #12]
 80114fc:	4014      	ands	r4, r2
 80114fe:	60c4      	str	r4, [r0, #12]
 8011500:	4c2b      	ldr	r4, [pc, #172]	; (80115b0 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2];
 8011502:	089a      	lsrs	r2, r3, #2
 8011504:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011506:	4644      	mov	r4, r8
 8011508:	401c      	ands	r4, r3
 801150a:	00a4      	lsls	r4, r4, #2
 801150c:	40a7      	lsls	r7, r4
 801150e:	0092      	lsls	r2, r2, #2
 8011510:	4452      	add	r2, sl
      tmp = SYSCFG->EXTICR[position >> 2];
 8011512:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011514:	46ba      	mov	sl, r7
 8011516:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011518:	2790      	movs	r7, #144	; 0x90
 801151a:	05ff      	lsls	r7, r7, #23
 801151c:	42b8      	cmp	r0, r7
 801151e:	d01b      	beq.n	8011558 <HAL_GPIO_DeInit+0xcc>
 8011520:	4f24      	ldr	r7, [pc, #144]	; (80115b4 <HAL_GPIO_DeInit+0x128>)
 8011522:	42b8      	cmp	r0, r7
 8011524:	d033      	beq.n	801158e <HAL_GPIO_DeInit+0x102>
 8011526:	4f24      	ldr	r7, [pc, #144]	; (80115b8 <HAL_GPIO_DeInit+0x12c>)
 8011528:	42b8      	cmp	r0, r7
 801152a:	d038      	beq.n	801159e <HAL_GPIO_DeInit+0x112>
 801152c:	4f23      	ldr	r7, [pc, #140]	; (80115bc <HAL_GPIO_DeInit+0x130>)
 801152e:	42b8      	cmp	r0, r7
 8011530:	d039      	beq.n	80115a6 <HAL_GPIO_DeInit+0x11a>
 8011532:	4f23      	ldr	r7, [pc, #140]	; (80115c0 <HAL_GPIO_DeInit+0x134>)
 8011534:	42b8      	cmp	r0, r7
 8011536:	d02e      	beq.n	8011596 <HAL_GPIO_DeInit+0x10a>
 8011538:	2705      	movs	r7, #5
 801153a:	40a7      	lsls	r7, r4
 801153c:	003c      	movs	r4, r7
 801153e:	42a6      	cmp	r6, r4
 8011540:	d00d      	beq.n	801155e <HAL_GPIO_DeInit+0xd2>
  while (GPIO_Pin >> position)
 8011542:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8011544:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8011546:	40da      	lsrs	r2, r3
 8011548:	d1b0      	bne.n	80114ac <HAL_GPIO_DeInit+0x20>
  }
}
 801154a:	b003      	add	sp, #12
 801154c:	bc3c      	pop	{r2, r3, r4, r5}
 801154e:	4690      	mov	r8, r2
 8011550:	4699      	mov	r9, r3
 8011552:	46a2      	mov	sl, r4
 8011554:	46ab      	mov	fp, r5
 8011556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011558:	2400      	movs	r4, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801155a:	42a6      	cmp	r6, r4
 801155c:	d1f1      	bne.n	8011542 <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 801155e:	4656      	mov	r6, sl
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011560:	43ed      	mvns	r5, r5
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011562:	6894      	ldr	r4, [r2, #8]
    position++;
 8011564:	3301      	adds	r3, #1
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011566:	43b4      	bics	r4, r6
 8011568:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 801156a:	4c16      	ldr	r4, [pc, #88]	; (80115c4 <HAL_GPIO_DeInit+0x138>)
 801156c:	6822      	ldr	r2, [r4, #0]
 801156e:	402a      	ands	r2, r5
 8011570:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8011572:	6862      	ldr	r2, [r4, #4]
 8011574:	402a      	ands	r2, r5
 8011576:	6062      	str	r2, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8011578:	68a2      	ldr	r2, [r4, #8]
 801157a:	402a      	ands	r2, r5
 801157c:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 801157e:	68e2      	ldr	r2, [r4, #12]
 8011580:	4015      	ands	r5, r2
  while (GPIO_Pin >> position)
 8011582:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8011584:	60e5      	str	r5, [r4, #12]
  while (GPIO_Pin >> position)
 8011586:	40da      	lsrs	r2, r3
 8011588:	d000      	beq.n	801158c <HAL_GPIO_DeInit+0x100>
 801158a:	e78f      	b.n	80114ac <HAL_GPIO_DeInit+0x20>
 801158c:	e7dd      	b.n	801154a <HAL_GPIO_DeInit+0xbe>
 801158e:	4667      	mov	r7, ip
 8011590:	40a7      	lsls	r7, r4
 8011592:	003c      	movs	r4, r7
 8011594:	e7e1      	b.n	801155a <HAL_GPIO_DeInit+0xce>
 8011596:	2704      	movs	r7, #4
 8011598:	40a7      	lsls	r7, r4
 801159a:	003c      	movs	r4, r7
 801159c:	e7dd      	b.n	801155a <HAL_GPIO_DeInit+0xce>
 801159e:	2702      	movs	r7, #2
 80115a0:	40a7      	lsls	r7, r4
 80115a2:	003c      	movs	r4, r7
 80115a4:	e7d9      	b.n	801155a <HAL_GPIO_DeInit+0xce>
 80115a6:	4647      	mov	r7, r8
 80115a8:	40a7      	lsls	r7, r4
 80115aa:	003c      	movs	r4, r7
 80115ac:	e7d5      	b.n	801155a <HAL_GPIO_DeInit+0xce>
 80115ae:	46c0      	nop			; (mov r8, r8)
 80115b0:	40010000 	.word	0x40010000
 80115b4:	48000400 	.word	0x48000400
 80115b8:	48000800 	.word	0x48000800
 80115bc:	48000c00 	.word	0x48000c00
 80115c0:	48001000 	.word	0x48001000
 80115c4:	40010400 	.word	0x40010400

080115c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80115c8:	6900      	ldr	r0, [r0, #16]
 80115ca:	4008      	ands	r0, r1
 80115cc:	1e41      	subs	r1, r0, #1
 80115ce:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80115d0:	b2c0      	uxtb	r0, r0
  }
 80115d2:	4770      	bx	lr

080115d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80115d4:	2a00      	cmp	r2, #0
 80115d6:	d101      	bne.n	80115dc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80115d8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80115da:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80115dc:	6181      	str	r1, [r0, #24]
 80115de:	e7fc      	b.n	80115da <HAL_GPIO_WritePin+0x6>

080115e0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80115e0:	6943      	ldr	r3, [r0, #20]
 80115e2:	4059      	eors	r1, r3
 80115e4:	6141      	str	r1, [r0, #20]
}
 80115e6:	4770      	bx	lr

080115e8 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 80115e8:	4770      	bx	lr
 80115ea:	46c0      	nop			; (mov r8, r8)

080115ec <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80115ec:	2380      	movs	r3, #128	; 0x80
 80115ee:	4a03      	ldr	r2, [pc, #12]	; (80115fc <HAL_PWR_EnableBkUpAccess+0x10>)
 80115f0:	005b      	lsls	r3, r3, #1
 80115f2:	6811      	ldr	r1, [r2, #0]
 80115f4:	430b      	orrs	r3, r1
 80115f6:	6013      	str	r3, [r2, #0]
}
 80115f8:	4770      	bx	lr
 80115fa:	46c0      	nop			; (mov r8, r8)
 80115fc:	40007000 	.word	0x40007000

08011600 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011602:	46c6      	mov	lr, r8
 8011604:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011606:	6803      	ldr	r3, [r0, #0]
{
 8011608:	b082      	sub	sp, #8
 801160a:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801160c:	07da      	lsls	r2, r3, #31
 801160e:	d54b      	bpl.n	80116a8 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011610:	210c      	movs	r1, #12
 8011612:	48c4      	ldr	r0, [pc, #784]	; (8011924 <HAL_RCC_OscConfig+0x324>)
 8011614:	6842      	ldr	r2, [r0, #4]
 8011616:	400a      	ands	r2, r1
 8011618:	2a04      	cmp	r2, #4
 801161a:	d100      	bne.n	801161e <HAL_RCC_OscConfig+0x1e>
 801161c:	e153      	b.n	80118c6 <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 801161e:	6842      	ldr	r2, [r0, #4]
 8011620:	4011      	ands	r1, r2
 8011622:	2908      	cmp	r1, #8
 8011624:	d108      	bne.n	8011638 <HAL_RCC_OscConfig+0x38>
 8011626:	21c0      	movs	r1, #192	; 0xc0
 8011628:	6842      	ldr	r2, [r0, #4]
 801162a:	0249      	lsls	r1, r1, #9
 801162c:	400a      	ands	r2, r1
 801162e:	2180      	movs	r1, #128	; 0x80
 8011630:	0249      	lsls	r1, r1, #9
 8011632:	428a      	cmp	r2, r1
 8011634:	d100      	bne.n	8011638 <HAL_RCC_OscConfig+0x38>
 8011636:	e146      	b.n	80118c6 <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011638:	4dba      	ldr	r5, [pc, #744]	; (8011924 <HAL_RCC_OscConfig+0x324>)
 801163a:	4abb      	ldr	r2, [pc, #748]	; (8011928 <HAL_RCC_OscConfig+0x328>)
 801163c:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801163e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011640:	4013      	ands	r3, r2
 8011642:	602b      	str	r3, [r5, #0]
 8011644:	682b      	ldr	r3, [r5, #0]
 8011646:	4ab9      	ldr	r2, [pc, #740]	; (801192c <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011648:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 801164a:	4013      	ands	r3, r2
 801164c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 801164e:	f7fe faf9 	bl	800fc44 <HAL_GetTick>
 8011652:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011654:	e005      	b.n	8011662 <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011656:	f7fe faf5 	bl	800fc44 <HAL_GetTick>
 801165a:	1bc0      	subs	r0, r0, r7
 801165c:	2864      	cmp	r0, #100	; 0x64
 801165e:	d900      	bls.n	8011662 <HAL_RCC_OscConfig+0x62>
 8011660:	e13b      	b.n	80118da <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011662:	682b      	ldr	r3, [r5, #0]
 8011664:	4233      	tst	r3, r6
 8011666:	d1f6      	bne.n	8011656 <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011668:	6863      	ldr	r3, [r4, #4]
 801166a:	2b01      	cmp	r3, #1
 801166c:	d100      	bne.n	8011670 <HAL_RCC_OscConfig+0x70>
 801166e:	e196      	b.n	801199e <HAL_RCC_OscConfig+0x39e>
 8011670:	2b00      	cmp	r3, #0
 8011672:	d000      	beq.n	8011676 <HAL_RCC_OscConfig+0x76>
 8011674:	e1bc      	b.n	80119f0 <HAL_RCC_OscConfig+0x3f0>
 8011676:	682b      	ldr	r3, [r5, #0]
 8011678:	4aab      	ldr	r2, [pc, #684]	; (8011928 <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801167a:	4eaa      	ldr	r6, [pc, #680]	; (8011924 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801167c:	4013      	ands	r3, r2
 801167e:	602b      	str	r3, [r5, #0]
 8011680:	682b      	ldr	r3, [r5, #0]
 8011682:	4aaa      	ldr	r2, [pc, #680]	; (801192c <HAL_RCC_OscConfig+0x32c>)
 8011684:	4013      	ands	r3, r2
 8011686:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011688:	f7fe fadc 	bl	800fc44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801168c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 801168e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011690:	02ad      	lsls	r5, r5, #10
 8011692:	e005      	b.n	80116a0 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011694:	f7fe fad6 	bl	800fc44 <HAL_GetTick>
 8011698:	1bc0      	subs	r0, r0, r7
 801169a:	2864      	cmp	r0, #100	; 0x64
 801169c:	d900      	bls.n	80116a0 <HAL_RCC_OscConfig+0xa0>
 801169e:	e11c      	b.n	80118da <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80116a0:	6833      	ldr	r3, [r6, #0]
 80116a2:	422b      	tst	r3, r5
 80116a4:	d1f6      	bne.n	8011694 <HAL_RCC_OscConfig+0x94>
 80116a6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80116a8:	079a      	lsls	r2, r3, #30
 80116aa:	d529      	bpl.n	8011700 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80116ac:	220c      	movs	r2, #12
 80116ae:	499d      	ldr	r1, [pc, #628]	; (8011924 <HAL_RCC_OscConfig+0x324>)
 80116b0:	6848      	ldr	r0, [r1, #4]
 80116b2:	4202      	tst	r2, r0
 80116b4:	d100      	bne.n	80116b8 <HAL_RCC_OscConfig+0xb8>
 80116b6:	e0fd      	b.n	80118b4 <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80116b8:	6848      	ldr	r0, [r1, #4]
 80116ba:	4002      	ands	r2, r0
 80116bc:	2a08      	cmp	r2, #8
 80116be:	d100      	bne.n	80116c2 <HAL_RCC_OscConfig+0xc2>
 80116c0:	e0ef      	b.n	80118a2 <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80116c2:	68e3      	ldr	r3, [r4, #12]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d100      	bne.n	80116ca <HAL_RCC_OscConfig+0xca>
 80116c8:	e138      	b.n	801193c <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80116ca:	2201      	movs	r2, #1
 80116cc:	4f95      	ldr	r7, [pc, #596]	; (8011924 <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80116ce:	2502      	movs	r5, #2
        __HAL_RCC_HSI_ENABLE();
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	4313      	orrs	r3, r2
 80116d4:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80116d6:	f7fe fab5 	bl	800fc44 <HAL_GetTick>
 80116da:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80116dc:	e005      	b.n	80116ea <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80116de:	f7fe fab1 	bl	800fc44 <HAL_GetTick>
 80116e2:	1b80      	subs	r0, r0, r6
 80116e4:	2864      	cmp	r0, #100	; 0x64
 80116e6:	d900      	bls.n	80116ea <HAL_RCC_OscConfig+0xea>
 80116e8:	e0f7      	b.n	80118da <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	421d      	tst	r5, r3
 80116ee:	d0f6      	beq.n	80116de <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80116f0:	21f8      	movs	r1, #248	; 0xf8
 80116f2:	683a      	ldr	r2, [r7, #0]
 80116f4:	6923      	ldr	r3, [r4, #16]
 80116f6:	438a      	bics	r2, r1
 80116f8:	00db      	lsls	r3, r3, #3
 80116fa:	4313      	orrs	r3, r2
 80116fc:	603b      	str	r3, [r7, #0]
 80116fe:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011700:	071a      	lsls	r2, r3, #28
 8011702:	d45d      	bmi.n	80117c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011704:	075a      	lsls	r2, r3, #29
 8011706:	d474      	bmi.n	80117f2 <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011708:	06da      	lsls	r2, r3, #27
 801170a:	d512      	bpl.n	8011732 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 801170c:	6962      	ldr	r2, [r4, #20]
 801170e:	2a01      	cmp	r2, #1
 8011710:	d100      	bne.n	8011714 <HAL_RCC_OscConfig+0x114>
 8011712:	e18c      	b.n	8011a2e <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8011714:	3205      	adds	r2, #5
 8011716:	d000      	beq.n	801171a <HAL_RCC_OscConfig+0x11a>
 8011718:	e124      	b.n	8011964 <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 801171a:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801171c:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 801171e:	4981      	ldr	r1, [pc, #516]	; (8011924 <HAL_RCC_OscConfig+0x324>)
 8011720:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8011722:	4382      	bics	r2, r0
 8011724:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011726:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8011728:	69a2      	ldr	r2, [r4, #24]
 801172a:	43a8      	bics	r0, r5
 801172c:	00d2      	lsls	r2, r2, #3
 801172e:	4302      	orrs	r2, r0
 8011730:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011732:	069b      	lsls	r3, r3, #26
 8011734:	d522      	bpl.n	801177c <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011736:	220c      	movs	r2, #12
 8011738:	497a      	ldr	r1, [pc, #488]	; (8011924 <HAL_RCC_OscConfig+0x324>)
 801173a:	684b      	ldr	r3, [r1, #4]
 801173c:	4013      	ands	r3, r2
 801173e:	2b0c      	cmp	r3, #12
 8011740:	d100      	bne.n	8011744 <HAL_RCC_OscConfig+0x144>
 8011742:	e14a      	b.n	80119da <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011744:	684b      	ldr	r3, [r1, #4]
 8011746:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011748:	2a08      	cmp	r2, #8
 801174a:	d100      	bne.n	801174e <HAL_RCC_OscConfig+0x14e>
 801174c:	e13e      	b.n	80119cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801174e:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011750:	4d74      	ldr	r5, [pc, #464]	; (8011924 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011752:	2b00      	cmp	r3, #0
 8011754:	d100      	bne.n	8011758 <HAL_RCC_OscConfig+0x158>
 8011756:	e156      	b.n	8011a06 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8011758:	2680      	movs	r6, #128	; 0x80
 801175a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801175c:	0276      	lsls	r6, r6, #9
 801175e:	4333      	orrs	r3, r6
 8011760:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011762:	f7fe fa6f 	bl	800fc44 <HAL_GetTick>
 8011766:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011768:	e005      	b.n	8011776 <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801176a:	f7fe fa6b 	bl	800fc44 <HAL_GetTick>
 801176e:	1bc0      	subs	r0, r0, r7
 8011770:	2864      	cmp	r0, #100	; 0x64
 8011772:	d900      	bls.n	8011776 <HAL_RCC_OscConfig+0x176>
 8011774:	e0b1      	b.n	80118da <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011776:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011778:	4233      	tst	r3, r6
 801177a:	d0f6      	beq.n	801176a <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801177c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801177e:	2b00      	cmp	r3, #0
 8011780:	d01c      	beq.n	80117bc <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011782:	220c      	movs	r2, #12
 8011784:	4d67      	ldr	r5, [pc, #412]	; (8011924 <HAL_RCC_OscConfig+0x324>)
 8011786:	6869      	ldr	r1, [r5, #4]
 8011788:	400a      	ands	r2, r1
 801178a:	2a08      	cmp	r2, #8
 801178c:	d100      	bne.n	8011790 <HAL_RCC_OscConfig+0x190>
 801178e:	e098      	b.n	80118c2 <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011790:	2b02      	cmp	r3, #2
 8011792:	d100      	bne.n	8011796 <HAL_RCC_OscConfig+0x196>
 8011794:	e16a      	b.n	8011a6c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011796:	682b      	ldr	r3, [r5, #0]
 8011798:	4a65      	ldr	r2, [pc, #404]	; (8011930 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801179a:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 801179c:	4013      	ands	r3, r2
 801179e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80117a0:	f7fe fa50 	bl	800fc44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80117a4:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 80117a6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80117a8:	e005      	b.n	80117b6 <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80117aa:	f7fe fa4b 	bl	800fc44 <HAL_GetTick>
 80117ae:	1b80      	subs	r0, r0, r6
 80117b0:	2864      	cmp	r0, #100	; 0x64
 80117b2:	d900      	bls.n	80117b6 <HAL_RCC_OscConfig+0x1b6>
 80117b4:	e091      	b.n	80118da <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80117b6:	682b      	ldr	r3, [r5, #0]
 80117b8:	4223      	tst	r3, r4
 80117ba:	d1f6      	bne.n	80117aa <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80117bc:	2000      	movs	r0, #0
 80117be:	e08d      	b.n	80118dc <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80117c0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 80117c2:	4d58      	ldr	r5, [pc, #352]	; (8011924 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d100      	bne.n	80117ca <HAL_RCC_OscConfig+0x1ca>
 80117c8:	e08c      	b.n	80118e4 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 80117ca:	2201      	movs	r2, #1
 80117cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80117ce:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80117d0:	4313      	orrs	r3, r2
 80117d2:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80117d4:	f7fe fa36 	bl	800fc44 <HAL_GetTick>
 80117d8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80117da:	e004      	b.n	80117e6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80117dc:	f7fe fa32 	bl	800fc44 <HAL_GetTick>
 80117e0:	1bc0      	subs	r0, r0, r7
 80117e2:	2864      	cmp	r0, #100	; 0x64
 80117e4:	d879      	bhi.n	80118da <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80117e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80117e8:	421e      	tst	r6, r3
 80117ea:	d0f7      	beq.n	80117dc <HAL_RCC_OscConfig+0x1dc>
 80117ec:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80117ee:	075a      	lsls	r2, r3, #29
 80117f0:	d58a      	bpl.n	8011708 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 80117f2:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80117f4:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80117f6:	4a4b      	ldr	r2, [pc, #300]	; (8011924 <HAL_RCC_OscConfig+0x324>)
 80117f8:	0540      	lsls	r0, r0, #21
 80117fa:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80117fc:	4d4d      	ldr	r5, [pc, #308]	; (8011934 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80117fe:	4301      	orrs	r1, r0
 8011800:	61d1      	str	r1, [r2, #28]
 8011802:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011804:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8011806:	4003      	ands	r3, r0
 8011808:	9301      	str	r3, [sp, #4]
 801180a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801180c:	682b      	ldr	r3, [r5, #0]
 801180e:	4333      	orrs	r3, r6
 8011810:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8011812:	f7fe fa17 	bl	800fc44 <HAL_GetTick>
 8011816:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011818:	e004      	b.n	8011824 <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801181a:	f7fe fa13 	bl	800fc44 <HAL_GetTick>
 801181e:	1bc0      	subs	r0, r0, r7
 8011820:	2864      	cmp	r0, #100	; 0x64
 8011822:	d85a      	bhi.n	80118da <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011824:	682b      	ldr	r3, [r5, #0]
 8011826:	4233      	tst	r3, r6
 8011828:	d0f7      	beq.n	801181a <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 801182a:	2201      	movs	r2, #1
 801182c:	4d3d      	ldr	r5, [pc, #244]	; (8011924 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801182e:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8011830:	6a2b      	ldr	r3, [r5, #32]
 8011832:	4393      	bics	r3, r2
 8011834:	622b      	str	r3, [r5, #32]
 8011836:	6a2b      	ldr	r3, [r5, #32]
 8011838:	3203      	adds	r2, #3
 801183a:	4393      	bics	r3, r2
 801183c:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 801183e:	f7fe fa01 	bl	800fc44 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011842:	4b3d      	ldr	r3, [pc, #244]	; (8011938 <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 8011844:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011846:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011848:	e004      	b.n	8011854 <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801184a:	f7fe f9fb 	bl	800fc44 <HAL_GetTick>
 801184e:	1bc0      	subs	r0, r0, r7
 8011850:	4540      	cmp	r0, r8
 8011852:	d842      	bhi.n	80118da <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011854:	6a2b      	ldr	r3, [r5, #32]
 8011856:	421e      	tst	r6, r3
 8011858:	d1f7      	bne.n	801184a <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801185a:	68a3      	ldr	r3, [r4, #8]
 801185c:	2b01      	cmp	r3, #1
 801185e:	d100      	bne.n	8011862 <HAL_RCC_OscConfig+0x262>
 8011860:	e157      	b.n	8011b12 <HAL_RCC_OscConfig+0x512>
 8011862:	2b00      	cmp	r3, #0
 8011864:	d100      	bne.n	8011868 <HAL_RCC_OscConfig+0x268>
 8011866:	e139      	b.n	8011adc <HAL_RCC_OscConfig+0x4dc>
 8011868:	2b05      	cmp	r3, #5
 801186a:	d100      	bne.n	801186e <HAL_RCC_OscConfig+0x26e>
 801186c:	e155      	b.n	8011b1a <HAL_RCC_OscConfig+0x51a>
 801186e:	2201      	movs	r2, #1
 8011870:	6a2b      	ldr	r3, [r5, #32]
 8011872:	4393      	bics	r3, r2
 8011874:	622b      	str	r3, [r5, #32]
 8011876:	6a2b      	ldr	r3, [r5, #32]
 8011878:	3203      	adds	r2, #3
 801187a:	4393      	bics	r3, r2
 801187c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 801187e:	f7fe f9e1 	bl	800fc44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011882:	4e28      	ldr	r6, [pc, #160]	; (8011924 <HAL_RCC_OscConfig+0x324>)
      tickstart = HAL_GetTick();
 8011884:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011886:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011888:	4f2b      	ldr	r7, [pc, #172]	; (8011938 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801188a:	e005      	b.n	8011898 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801188c:	f7fe f9da 	bl	800fc44 <HAL_GetTick>
 8011890:	4643      	mov	r3, r8
 8011892:	1ac0      	subs	r0, r0, r3
 8011894:	42b8      	cmp	r0, r7
 8011896:	d820      	bhi.n	80118da <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011898:	6a33      	ldr	r3, [r6, #32]
 801189a:	421d      	tst	r5, r3
 801189c:	d0f6      	beq.n	801188c <HAL_RCC_OscConfig+0x28c>
 801189e:	6823      	ldr	r3, [r4, #0]
 80118a0:	e732      	b.n	8011708 <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80118a2:	684a      	ldr	r2, [r1, #4]
 80118a4:	21c0      	movs	r1, #192	; 0xc0
 80118a6:	0249      	lsls	r1, r1, #9
 80118a8:	400a      	ands	r2, r1
 80118aa:	2180      	movs	r1, #128	; 0x80
 80118ac:	0209      	lsls	r1, r1, #8
 80118ae:	428a      	cmp	r2, r1
 80118b0:	d000      	beq.n	80118b4 <HAL_RCC_OscConfig+0x2b4>
 80118b2:	e706      	b.n	80116c2 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80118b4:	4a1b      	ldr	r2, [pc, #108]	; (8011924 <HAL_RCC_OscConfig+0x324>)
 80118b6:	6812      	ldr	r2, [r2, #0]
 80118b8:	0792      	lsls	r2, r2, #30
 80118ba:	d526      	bpl.n	801190a <HAL_RCC_OscConfig+0x30a>
 80118bc:	68e2      	ldr	r2, [r4, #12]
 80118be:	2a01      	cmp	r2, #1
 80118c0:	d023      	beq.n	801190a <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 80118c2:	2001      	movs	r0, #1
 80118c4:	e00a      	b.n	80118dc <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80118c6:	4a17      	ldr	r2, [pc, #92]	; (8011924 <HAL_RCC_OscConfig+0x324>)
 80118c8:	6812      	ldr	r2, [r2, #0]
 80118ca:	0392      	lsls	r2, r2, #14
 80118cc:	d400      	bmi.n	80118d0 <HAL_RCC_OscConfig+0x2d0>
 80118ce:	e6eb      	b.n	80116a8 <HAL_RCC_OscConfig+0xa8>
 80118d0:	6862      	ldr	r2, [r4, #4]
 80118d2:	2a00      	cmp	r2, #0
 80118d4:	d000      	beq.n	80118d8 <HAL_RCC_OscConfig+0x2d8>
 80118d6:	e6e7      	b.n	80116a8 <HAL_RCC_OscConfig+0xa8>
 80118d8:	e7f3      	b.n	80118c2 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 80118da:	2003      	movs	r0, #3
}
 80118dc:	b002      	add	sp, #8
 80118de:	bc04      	pop	{r2}
 80118e0:	4690      	mov	r8, r2
 80118e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80118e4:	2201      	movs	r2, #1
 80118e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80118e8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80118ea:	4393      	bics	r3, r2
 80118ec:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80118ee:	f7fe f9a9 	bl	800fc44 <HAL_GetTick>
 80118f2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80118f4:	e004      	b.n	8011900 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80118f6:	f7fe f9a5 	bl	800fc44 <HAL_GetTick>
 80118fa:	1bc0      	subs	r0, r0, r7
 80118fc:	2864      	cmp	r0, #100	; 0x64
 80118fe:	d8ec      	bhi.n	80118da <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011900:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011902:	421e      	tst	r6, r3
 8011904:	d1f7      	bne.n	80118f6 <HAL_RCC_OscConfig+0x2f6>
 8011906:	6823      	ldr	r3, [r4, #0]
 8011908:	e771      	b.n	80117ee <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801190a:	25f8      	movs	r5, #248	; 0xf8
 801190c:	4805      	ldr	r0, [pc, #20]	; (8011924 <HAL_RCC_OscConfig+0x324>)
 801190e:	6922      	ldr	r2, [r4, #16]
 8011910:	6801      	ldr	r1, [r0, #0]
 8011912:	00d2      	lsls	r2, r2, #3
 8011914:	43a9      	bics	r1, r5
 8011916:	430a      	orrs	r2, r1
 8011918:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801191a:	071a      	lsls	r2, r3, #28
 801191c:	d400      	bmi.n	8011920 <HAL_RCC_OscConfig+0x320>
 801191e:	e6f1      	b.n	8011704 <HAL_RCC_OscConfig+0x104>
 8011920:	e74e      	b.n	80117c0 <HAL_RCC_OscConfig+0x1c0>
 8011922:	46c0      	nop			; (mov r8, r8)
 8011924:	40021000 	.word	0x40021000
 8011928:	fffeffff 	.word	0xfffeffff
 801192c:	fffbffff 	.word	0xfffbffff
 8011930:	feffffff 	.word	0xfeffffff
 8011934:	40007000 	.word	0x40007000
 8011938:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 801193c:	2201      	movs	r2, #1
 801193e:	4d7b      	ldr	r5, [pc, #492]	; (8011b2c <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011940:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8011942:	682b      	ldr	r3, [r5, #0]
 8011944:	4393      	bics	r3, r2
 8011946:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011948:	f7fe f97c 	bl	800fc44 <HAL_GetTick>
 801194c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801194e:	e004      	b.n	801195a <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011950:	f7fe f978 	bl	800fc44 <HAL_GetTick>
 8011954:	1bc0      	subs	r0, r0, r7
 8011956:	2864      	cmp	r0, #100	; 0x64
 8011958:	d8bf      	bhi.n	80118da <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801195a:	682b      	ldr	r3, [r5, #0]
 801195c:	421e      	tst	r6, r3
 801195e:	d1f7      	bne.n	8011950 <HAL_RCC_OscConfig+0x350>
 8011960:	6823      	ldr	r3, [r4, #0]
 8011962:	e6cd      	b.n	8011700 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011964:	2204      	movs	r2, #4
 8011966:	4d71      	ldr	r5, [pc, #452]	; (8011b2c <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011968:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 801196a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801196c:	4313      	orrs	r3, r2
 801196e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011970:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011972:	3a03      	subs	r2, #3
 8011974:	4393      	bics	r3, r2
 8011976:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011978:	f7fe f964 	bl	800fc44 <HAL_GetTick>
 801197c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801197e:	e004      	b.n	801198a <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011980:	f7fe f960 	bl	800fc44 <HAL_GetTick>
 8011984:	1bc0      	subs	r0, r0, r7
 8011986:	2864      	cmp	r0, #100	; 0x64
 8011988:	d8a7      	bhi.n	80118da <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801198a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801198c:	421e      	tst	r6, r3
 801198e:	d1f7      	bne.n	8011980 <HAL_RCC_OscConfig+0x380>
 8011990:	6823      	ldr	r3, [r4, #0]
 8011992:	e6ce      	b.n	8011732 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011994:	2380      	movs	r3, #128	; 0x80
 8011996:	682a      	ldr	r2, [r5, #0]
 8011998:	02db      	lsls	r3, r3, #11
 801199a:	4313      	orrs	r3, r2
 801199c:	602b      	str	r3, [r5, #0]
 801199e:	2380      	movs	r3, #128	; 0x80
 80119a0:	682a      	ldr	r2, [r5, #0]
 80119a2:	025b      	lsls	r3, r3, #9
 80119a4:	4313      	orrs	r3, r2
 80119a6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80119a8:	f7fe f94c 	bl	800fc44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80119ac:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80119ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80119b0:	4e5e      	ldr	r6, [pc, #376]	; (8011b2c <HAL_RCC_OscConfig+0x52c>)
 80119b2:	02ad      	lsls	r5, r5, #10
 80119b4:	e005      	b.n	80119c2 <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80119b6:	f7fe f945 	bl	800fc44 <HAL_GetTick>
 80119ba:	1bc0      	subs	r0, r0, r7
 80119bc:	2864      	cmp	r0, #100	; 0x64
 80119be:	d900      	bls.n	80119c2 <HAL_RCC_OscConfig+0x3c2>
 80119c0:	e78b      	b.n	80118da <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80119c2:	6833      	ldr	r3, [r6, #0]
 80119c4:	422b      	tst	r3, r5
 80119c6:	d0f6      	beq.n	80119b6 <HAL_RCC_OscConfig+0x3b6>
 80119c8:	6823      	ldr	r3, [r4, #0]
 80119ca:	e66d      	b.n	80116a8 <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80119cc:	22c0      	movs	r2, #192	; 0xc0
 80119ce:	684b      	ldr	r3, [r1, #4]
 80119d0:	0252      	lsls	r2, r2, #9
 80119d2:	4013      	ands	r3, r2
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d000      	beq.n	80119da <HAL_RCC_OscConfig+0x3da>
 80119d8:	e6b9      	b.n	801174e <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80119da:	4b54      	ldr	r3, [pc, #336]	; (8011b2c <HAL_RCC_OscConfig+0x52c>)
 80119dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119de:	03db      	lsls	r3, r3, #15
 80119e0:	d400      	bmi.n	80119e4 <HAL_RCC_OscConfig+0x3e4>
 80119e2:	e6cb      	b.n	801177c <HAL_RCC_OscConfig+0x17c>
 80119e4:	69e3      	ldr	r3, [r4, #28]
 80119e6:	2b01      	cmp	r3, #1
 80119e8:	d100      	bne.n	80119ec <HAL_RCC_OscConfig+0x3ec>
 80119ea:	e6c7      	b.n	801177c <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 80119ec:	2001      	movs	r0, #1
 80119ee:	e775      	b.n	80118dc <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80119f0:	2b05      	cmp	r3, #5
 80119f2:	d0cf      	beq.n	8011994 <HAL_RCC_OscConfig+0x394>
 80119f4:	682b      	ldr	r3, [r5, #0]
 80119f6:	4a4e      	ldr	r2, [pc, #312]	; (8011b30 <HAL_RCC_OscConfig+0x530>)
 80119f8:	4013      	ands	r3, r2
 80119fa:	602b      	str	r3, [r5, #0]
 80119fc:	682b      	ldr	r3, [r5, #0]
 80119fe:	4a4d      	ldr	r2, [pc, #308]	; (8011b34 <HAL_RCC_OscConfig+0x534>)
 8011a00:	4013      	ands	r3, r2
 8011a02:	602b      	str	r3, [r5, #0]
 8011a04:	e7d0      	b.n	80119a8 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 8011a06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011a08:	4a49      	ldr	r2, [pc, #292]	; (8011b30 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011a0a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8011a0c:	4013      	ands	r3, r2
 8011a0e:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011a10:	f7fe f918 	bl	800fc44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011a14:	0276      	lsls	r6, r6, #9
        tickstart = HAL_GetTick();
 8011a16:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011a18:	e005      	b.n	8011a26 <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011a1a:	f7fe f913 	bl	800fc44 <HAL_GetTick>
 8011a1e:	1bc0      	subs	r0, r0, r7
 8011a20:	2864      	cmp	r0, #100	; 0x64
 8011a22:	d900      	bls.n	8011a26 <HAL_RCC_OscConfig+0x426>
 8011a24:	e759      	b.n	80118da <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011a26:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011a28:	4233      	tst	r3, r6
 8011a2a:	d1f6      	bne.n	8011a1a <HAL_RCC_OscConfig+0x41a>
 8011a2c:	e6a6      	b.n	801177c <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011a2e:	2104      	movs	r1, #4
 8011a30:	4d3e      	ldr	r5, [pc, #248]	; (8011b2c <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011a32:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8011a34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011a36:	430b      	orrs	r3, r1
 8011a38:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8011a3a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011a3c:	431a      	orrs	r2, r3
 8011a3e:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011a40:	f7fe f900 	bl	800fc44 <HAL_GetTick>
 8011a44:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011a46:	e005      	b.n	8011a54 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011a48:	f7fe f8fc 	bl	800fc44 <HAL_GetTick>
 8011a4c:	1bc0      	subs	r0, r0, r7
 8011a4e:	2864      	cmp	r0, #100	; 0x64
 8011a50:	d900      	bls.n	8011a54 <HAL_RCC_OscConfig+0x454>
 8011a52:	e742      	b.n	80118da <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011a54:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011a56:	421e      	tst	r6, r3
 8011a58:	d0f6      	beq.n	8011a48 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011a5a:	21f8      	movs	r1, #248	; 0xf8
 8011a5c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8011a5e:	69a3      	ldr	r3, [r4, #24]
 8011a60:	438a      	bics	r2, r1
 8011a62:	00db      	lsls	r3, r3, #3
 8011a64:	4313      	orrs	r3, r2
 8011a66:	636b      	str	r3, [r5, #52]	; 0x34
 8011a68:	6823      	ldr	r3, [r4, #0]
 8011a6a:	e662      	b.n	8011732 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 8011a6c:	682b      	ldr	r3, [r5, #0]
 8011a6e:	4a32      	ldr	r2, [pc, #200]	; (8011b38 <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011a70:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8011a72:	4013      	ands	r3, r2
 8011a74:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011a76:	f7fe f8e5 	bl	800fc44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011a7a:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8011a7c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011a7e:	e005      	b.n	8011a8c <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011a80:	f7fe f8e0 	bl	800fc44 <HAL_GetTick>
 8011a84:	1bc0      	subs	r0, r0, r7
 8011a86:	2864      	cmp	r0, #100	; 0x64
 8011a88:	d900      	bls.n	8011a8c <HAL_RCC_OscConfig+0x48c>
 8011a8a:	e726      	b.n	80118da <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011a8c:	682b      	ldr	r3, [r5, #0]
 8011a8e:	4233      	tst	r3, r6
 8011a90:	d1f6      	bne.n	8011a80 <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011a92:	220f      	movs	r2, #15
 8011a94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8011a96:	4393      	bics	r3, r2
 8011a98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011a9a:	4313      	orrs	r3, r2
 8011a9c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8011a9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011aa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011aa2:	686a      	ldr	r2, [r5, #4]
 8011aa4:	430b      	orrs	r3, r1
 8011aa6:	4925      	ldr	r1, [pc, #148]	; (8011b3c <HAL_RCC_OscConfig+0x53c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011aa8:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011aaa:	400a      	ands	r2, r1
 8011aac:	4313      	orrs	r3, r2
 8011aae:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8011ab0:	2380      	movs	r3, #128	; 0x80
 8011ab2:	682a      	ldr	r2, [r5, #0]
 8011ab4:	045b      	lsls	r3, r3, #17
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011aba:	f7fe f8c3 	bl	800fc44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011abe:	4d1b      	ldr	r5, [pc, #108]	; (8011b2c <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 8011ac0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011ac2:	04a4      	lsls	r4, r4, #18
 8011ac4:	e005      	b.n	8011ad2 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011ac6:	f7fe f8bd 	bl	800fc44 <HAL_GetTick>
 8011aca:	1b80      	subs	r0, r0, r6
 8011acc:	2864      	cmp	r0, #100	; 0x64
 8011ace:	d900      	bls.n	8011ad2 <HAL_RCC_OscConfig+0x4d2>
 8011ad0:	e703      	b.n	80118da <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011ad2:	682b      	ldr	r3, [r5, #0]
 8011ad4:	4223      	tst	r3, r4
 8011ad6:	d0f6      	beq.n	8011ac6 <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8011ad8:	2000      	movs	r0, #0
 8011ada:	e6ff      	b.n	80118dc <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011adc:	2201      	movs	r2, #1
 8011ade:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011ae0:	4e12      	ldr	r6, [pc, #72]	; (8011b2c <HAL_RCC_OscConfig+0x52c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011ae2:	4393      	bics	r3, r2
 8011ae4:	622b      	str	r3, [r5, #32]
 8011ae6:	6a2b      	ldr	r3, [r5, #32]
 8011ae8:	3203      	adds	r2, #3
 8011aea:	4393      	bics	r3, r2
 8011aec:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8011aee:	f7fe f8a9 	bl	800fc44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011af2:	2502      	movs	r5, #2
      tickstart = HAL_GetTick();
 8011af4:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011af6:	4f12      	ldr	r7, [pc, #72]	; (8011b40 <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011af8:	e006      	b.n	8011b08 <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011afa:	f7fe f8a3 	bl	800fc44 <HAL_GetTick>
 8011afe:	4643      	mov	r3, r8
 8011b00:	1ac0      	subs	r0, r0, r3
 8011b02:	42b8      	cmp	r0, r7
 8011b04:	d900      	bls.n	8011b08 <HAL_RCC_OscConfig+0x508>
 8011b06:	e6e8      	b.n	80118da <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011b08:	6a33      	ldr	r3, [r6, #32]
 8011b0a:	421d      	tst	r5, r3
 8011b0c:	d1f5      	bne.n	8011afa <HAL_RCC_OscConfig+0x4fa>
 8011b0e:	6823      	ldr	r3, [r4, #0]
 8011b10:	e5fa      	b.n	8011708 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011b12:	6a2a      	ldr	r2, [r5, #32]
 8011b14:	4313      	orrs	r3, r2
 8011b16:	622b      	str	r3, [r5, #32]
 8011b18:	e6b1      	b.n	801187e <HAL_RCC_OscConfig+0x27e>
 8011b1a:	2204      	movs	r2, #4
 8011b1c:	6a2b      	ldr	r3, [r5, #32]
 8011b1e:	4313      	orrs	r3, r2
 8011b20:	622b      	str	r3, [r5, #32]
 8011b22:	6a2b      	ldr	r3, [r5, #32]
 8011b24:	3a03      	subs	r2, #3
 8011b26:	4313      	orrs	r3, r2
 8011b28:	622b      	str	r3, [r5, #32]
 8011b2a:	e6a8      	b.n	801187e <HAL_RCC_OscConfig+0x27e>
 8011b2c:	40021000 	.word	0x40021000
 8011b30:	fffeffff 	.word	0xfffeffff
 8011b34:	fffbffff 	.word	0xfffbffff
 8011b38:	feffffff 	.word	0xfeffffff
 8011b3c:	ffc27fff 	.word	0xffc27fff
 8011b40:	00001388 	.word	0x00001388

08011b44 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b46:	46ce      	mov	lr, r9
 8011b48:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011b4a:	2301      	movs	r3, #1
{
 8011b4c:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011b4e:	4985      	ldr	r1, [pc, #532]	; (8011d64 <HAL_RCC_ClockConfig+0x220>)
{
 8011b50:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011b52:	680a      	ldr	r2, [r1, #0]
{
 8011b54:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011b56:	401a      	ands	r2, r3
 8011b58:	42a2      	cmp	r2, r4
 8011b5a:	d20c      	bcs.n	8011b76 <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011b5c:	680a      	ldr	r2, [r1, #0]
 8011b5e:	439a      	bics	r2, r3
 8011b60:	4322      	orrs	r2, r4
 8011b62:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011b64:	680a      	ldr	r2, [r1, #0]
 8011b66:	4013      	ands	r3, r2
 8011b68:	42a3      	cmp	r3, r4
 8011b6a:	d054      	beq.n	8011c16 <HAL_RCC_ClockConfig+0xd2>
    {
      return HAL_ERROR;
 8011b6c:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8011b6e:	bc0c      	pop	{r2, r3}
 8011b70:	4690      	mov	r8, r2
 8011b72:	4699      	mov	r9, r3
 8011b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011b76:	6803      	ldr	r3, [r0, #0]
 8011b78:	079a      	lsls	r2, r3, #30
 8011b7a:	d506      	bpl.n	8011b8a <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011b7c:	20f0      	movs	r0, #240	; 0xf0
 8011b7e:	497a      	ldr	r1, [pc, #488]	; (8011d68 <HAL_RCC_ClockConfig+0x224>)
 8011b80:	684a      	ldr	r2, [r1, #4]
 8011b82:	4382      	bics	r2, r0
 8011b84:	68a8      	ldr	r0, [r5, #8]
 8011b86:	4302      	orrs	r2, r0
 8011b88:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011b8a:	07db      	lsls	r3, r3, #31
 8011b8c:	d52a      	bpl.n	8011be4 <HAL_RCC_ClockConfig+0xa0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011b8e:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011b90:	4a75      	ldr	r2, [pc, #468]	; (8011d68 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011b92:	2b01      	cmp	r3, #1
 8011b94:	d073      	beq.n	8011c7e <HAL_RCC_ClockConfig+0x13a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011b96:	2b02      	cmp	r3, #2
 8011b98:	d075      	beq.n	8011c86 <HAL_RCC_ClockConfig+0x142>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011b9a:	2b03      	cmp	r3, #3
 8011b9c:	d100      	bne.n	8011ba0 <HAL_RCC_ClockConfig+0x5c>
 8011b9e:	e09c      	b.n	8011cda <HAL_RCC_ClockConfig+0x196>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011ba0:	6812      	ldr	r2, [r2, #0]
 8011ba2:	0792      	lsls	r2, r2, #30
 8011ba4:	d5e2      	bpl.n	8011b6c <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011ba6:	2103      	movs	r1, #3
 8011ba8:	4e6f      	ldr	r6, [pc, #444]	; (8011d68 <HAL_RCC_ClockConfig+0x224>)
 8011baa:	6872      	ldr	r2, [r6, #4]
 8011bac:	438a      	bics	r2, r1
 8011bae:	4313      	orrs	r3, r2
 8011bb0:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 8011bb2:	f7fe f847 	bl	800fc44 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011bb6:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8011bb8:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d07d      	beq.n	8011cba <HAL_RCC_ClockConfig+0x176>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011bbe:	2b02      	cmp	r3, #2
 8011bc0:	d100      	bne.n	8011bc4 <HAL_RCC_ClockConfig+0x80>
 8011bc2:	e093      	b.n	8011cec <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011bc4:	2b03      	cmp	r3, #3
 8011bc6:	d066      	beq.n	8011c96 <HAL_RCC_ClockConfig+0x152>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011bc8:	230c      	movs	r3, #12
 8011bca:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011bcc:	4b67      	ldr	r3, [pc, #412]	; (8011d6c <HAL_RCC_ClockConfig+0x228>)
 8011bce:	4699      	mov	r9, r3
 8011bd0:	e004      	b.n	8011bdc <HAL_RCC_ClockConfig+0x98>
 8011bd2:	f7fe f837 	bl	800fc44 <HAL_GetTick>
 8011bd6:	1bc0      	subs	r0, r0, r7
 8011bd8:	4548      	cmp	r0, r9
 8011bda:	d86c      	bhi.n	8011cb6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011bdc:	4642      	mov	r2, r8
 8011bde:	6873      	ldr	r3, [r6, #4]
 8011be0:	421a      	tst	r2, r3
 8011be2:	d1f6      	bne.n	8011bd2 <HAL_RCC_ClockConfig+0x8e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011be4:	2201      	movs	r2, #1
 8011be6:	495f      	ldr	r1, [pc, #380]	; (8011d64 <HAL_RCC_ClockConfig+0x220>)
 8011be8:	680b      	ldr	r3, [r1, #0]
 8011bea:	4393      	bics	r3, r2
 8011bec:	4323      	orrs	r3, r4
 8011bee:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011bf0:	680b      	ldr	r3, [r1, #0]
 8011bf2:	401a      	ands	r2, r3
 8011bf4:	42a2      	cmp	r2, r4
 8011bf6:	d1b9      	bne.n	8011b6c <HAL_RCC_ClockConfig+0x28>
 8011bf8:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011bfa:	075b      	lsls	r3, r3, #29
 8011bfc:	d506      	bpl.n	8011c0c <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8011bfe:	4a5a      	ldr	r2, [pc, #360]	; (8011d68 <HAL_RCC_ClockConfig+0x224>)
 8011c00:	495b      	ldr	r1, [pc, #364]	; (8011d70 <HAL_RCC_ClockConfig+0x22c>)
 8011c02:	6853      	ldr	r3, [r2, #4]
 8011c04:	400b      	ands	r3, r1
 8011c06:	68e9      	ldr	r1, [r5, #12]
 8011c08:	430b      	orrs	r3, r1
 8011c0a:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	f7fd ffef 	bl	800fbf0 <HAL_InitTick>
  return HAL_OK;
 8011c12:	2000      	movs	r0, #0
 8011c14:	e7ab      	b.n	8011b6e <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011c16:	6803      	ldr	r3, [r0, #0]
 8011c18:	079a      	lsls	r2, r3, #30
 8011c1a:	d506      	bpl.n	8011c2a <HAL_RCC_ClockConfig+0xe6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011c1c:	20f0      	movs	r0, #240	; 0xf0
 8011c1e:	4952      	ldr	r1, [pc, #328]	; (8011d68 <HAL_RCC_ClockConfig+0x224>)
 8011c20:	684a      	ldr	r2, [r1, #4]
 8011c22:	4382      	bics	r2, r0
 8011c24:	68a8      	ldr	r0, [r5, #8]
 8011c26:	4302      	orrs	r2, r0
 8011c28:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011c2a:	07da      	lsls	r2, r3, #31
 8011c2c:	d5e5      	bpl.n	8011bfa <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c2e:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c30:	4a4d      	ldr	r2, [pc, #308]	; (8011d68 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c32:	2b01      	cmp	r3, #1
 8011c34:	d056      	beq.n	8011ce4 <HAL_RCC_ClockConfig+0x1a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011c36:	2b02      	cmp	r3, #2
 8011c38:	d029      	beq.n	8011c8e <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011c3a:	2b03      	cmp	r3, #3
 8011c3c:	d073      	beq.n	8011d26 <HAL_RCC_ClockConfig+0x1e2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c3e:	6812      	ldr	r2, [r2, #0]
 8011c40:	0792      	lsls	r2, r2, #30
 8011c42:	d593      	bpl.n	8011b6c <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011c44:	2103      	movs	r1, #3
 8011c46:	4c48      	ldr	r4, [pc, #288]	; (8011d68 <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011c48:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011c4a:	6862      	ldr	r2, [r4, #4]
 8011c4c:	438a      	bics	r2, r1
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8011c52:	f7fd fff7 	bl	800fc44 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c56:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8011c58:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c5a:	2b01      	cmp	r3, #1
 8011c5c:	d056      	beq.n	8011d0c <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011c5e:	2b02      	cmp	r3, #2
 8011c60:	d065      	beq.n	8011d2e <HAL_RCC_ClockConfig+0x1ea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011c62:	2b03      	cmp	r3, #3
 8011c64:	d070      	beq.n	8011d48 <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c66:	4b41      	ldr	r3, [pc, #260]	; (8011d6c <HAL_RCC_ClockConfig+0x228>)
 8011c68:	4698      	mov	r8, r3
 8011c6a:	e004      	b.n	8011c76 <HAL_RCC_ClockConfig+0x132>
 8011c6c:	f7fd ffea 	bl	800fc44 <HAL_GetTick>
 8011c70:	1b80      	subs	r0, r0, r6
 8011c72:	4540      	cmp	r0, r8
 8011c74:	d81f      	bhi.n	8011cb6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011c76:	6863      	ldr	r3, [r4, #4]
 8011c78:	421f      	tst	r7, r3
 8011c7a:	d1f7      	bne.n	8011c6c <HAL_RCC_ClockConfig+0x128>
 8011c7c:	e7bc      	b.n	8011bf8 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c7e:	6812      	ldr	r2, [r2, #0]
 8011c80:	0392      	lsls	r2, r2, #14
 8011c82:	d490      	bmi.n	8011ba6 <HAL_RCC_ClockConfig+0x62>
 8011c84:	e772      	b.n	8011b6c <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011c86:	6812      	ldr	r2, [r2, #0]
 8011c88:	0192      	lsls	r2, r2, #6
 8011c8a:	d48c      	bmi.n	8011ba6 <HAL_RCC_ClockConfig+0x62>
 8011c8c:	e76e      	b.n	8011b6c <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011c8e:	6812      	ldr	r2, [r2, #0]
 8011c90:	0192      	lsls	r2, r2, #6
 8011c92:	d4d7      	bmi.n	8011c44 <HAL_RCC_ClockConfig+0x100>
 8011c94:	e76a      	b.n	8011b6c <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011c96:	3309      	adds	r3, #9
 8011c98:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c9a:	4b34      	ldr	r3, [pc, #208]	; (8011d6c <HAL_RCC_ClockConfig+0x228>)
 8011c9c:	4699      	mov	r9, r3
 8011c9e:	e004      	b.n	8011caa <HAL_RCC_ClockConfig+0x166>
 8011ca0:	f7fd ffd0 	bl	800fc44 <HAL_GetTick>
 8011ca4:	1bc0      	subs	r0, r0, r7
 8011ca6:	4548      	cmp	r0, r9
 8011ca8:	d805      	bhi.n	8011cb6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011caa:	4642      	mov	r2, r8
 8011cac:	6873      	ldr	r3, [r6, #4]
 8011cae:	4013      	ands	r3, r2
 8011cb0:	2b0c      	cmp	r3, #12
 8011cb2:	d1f5      	bne.n	8011ca0 <HAL_RCC_ClockConfig+0x15c>
 8011cb4:	e796      	b.n	8011be4 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8011cb6:	2003      	movs	r0, #3
 8011cb8:	e759      	b.n	8011b6e <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011cba:	330b      	adds	r3, #11
 8011cbc:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011cbe:	4b2b      	ldr	r3, [pc, #172]	; (8011d6c <HAL_RCC_ClockConfig+0x228>)
 8011cc0:	4699      	mov	r9, r3
 8011cc2:	e004      	b.n	8011cce <HAL_RCC_ClockConfig+0x18a>
 8011cc4:	f7fd ffbe 	bl	800fc44 <HAL_GetTick>
 8011cc8:	1bc0      	subs	r0, r0, r7
 8011cca:	4548      	cmp	r0, r9
 8011ccc:	d8f3      	bhi.n	8011cb6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011cce:	4642      	mov	r2, r8
 8011cd0:	6873      	ldr	r3, [r6, #4]
 8011cd2:	4013      	ands	r3, r2
 8011cd4:	2b04      	cmp	r3, #4
 8011cd6:	d1f5      	bne.n	8011cc4 <HAL_RCC_ClockConfig+0x180>
 8011cd8:	e784      	b.n	8011be4 <HAL_RCC_ClockConfig+0xa0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011cda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011cdc:	03d2      	lsls	r2, r2, #15
 8011cde:	d500      	bpl.n	8011ce2 <HAL_RCC_ClockConfig+0x19e>
 8011ce0:	e761      	b.n	8011ba6 <HAL_RCC_ClockConfig+0x62>
 8011ce2:	e743      	b.n	8011b6c <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011ce4:	6812      	ldr	r2, [r2, #0]
 8011ce6:	0392      	lsls	r2, r2, #14
 8011ce8:	d4ac      	bmi.n	8011c44 <HAL_RCC_ClockConfig+0x100>
 8011cea:	e73f      	b.n	8011b6c <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011cec:	330a      	adds	r3, #10
 8011cee:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011cf0:	4b1e      	ldr	r3, [pc, #120]	; (8011d6c <HAL_RCC_ClockConfig+0x228>)
 8011cf2:	4699      	mov	r9, r3
 8011cf4:	e004      	b.n	8011d00 <HAL_RCC_ClockConfig+0x1bc>
 8011cf6:	f7fd ffa5 	bl	800fc44 <HAL_GetTick>
 8011cfa:	1bc0      	subs	r0, r0, r7
 8011cfc:	4548      	cmp	r0, r9
 8011cfe:	d8da      	bhi.n	8011cb6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011d00:	4642      	mov	r2, r8
 8011d02:	6873      	ldr	r3, [r6, #4]
 8011d04:	4013      	ands	r3, r2
 8011d06:	2b08      	cmp	r3, #8
 8011d08:	d1f5      	bne.n	8011cf6 <HAL_RCC_ClockConfig+0x1b2>
 8011d0a:	e76b      	b.n	8011be4 <HAL_RCC_ClockConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d0c:	4b17      	ldr	r3, [pc, #92]	; (8011d6c <HAL_RCC_ClockConfig+0x228>)
 8011d0e:	4698      	mov	r8, r3
 8011d10:	e004      	b.n	8011d1c <HAL_RCC_ClockConfig+0x1d8>
 8011d12:	f7fd ff97 	bl	800fc44 <HAL_GetTick>
 8011d16:	1b80      	subs	r0, r0, r6
 8011d18:	4540      	cmp	r0, r8
 8011d1a:	d8cc      	bhi.n	8011cb6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011d1c:	6863      	ldr	r3, [r4, #4]
 8011d1e:	403b      	ands	r3, r7
 8011d20:	2b04      	cmp	r3, #4
 8011d22:	d1f6      	bne.n	8011d12 <HAL_RCC_ClockConfig+0x1ce>
 8011d24:	e768      	b.n	8011bf8 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011d26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011d28:	03d2      	lsls	r2, r2, #15
 8011d2a:	d48b      	bmi.n	8011c44 <HAL_RCC_ClockConfig+0x100>
 8011d2c:	e71e      	b.n	8011b6c <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d2e:	4b0f      	ldr	r3, [pc, #60]	; (8011d6c <HAL_RCC_ClockConfig+0x228>)
 8011d30:	4698      	mov	r8, r3
 8011d32:	e004      	b.n	8011d3e <HAL_RCC_ClockConfig+0x1fa>
 8011d34:	f7fd ff86 	bl	800fc44 <HAL_GetTick>
 8011d38:	1b80      	subs	r0, r0, r6
 8011d3a:	4540      	cmp	r0, r8
 8011d3c:	d8bb      	bhi.n	8011cb6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011d3e:	6863      	ldr	r3, [r4, #4]
 8011d40:	403b      	ands	r3, r7
 8011d42:	2b08      	cmp	r3, #8
 8011d44:	d1f6      	bne.n	8011d34 <HAL_RCC_ClockConfig+0x1f0>
 8011d46:	e757      	b.n	8011bf8 <HAL_RCC_ClockConfig+0xb4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d48:	4b08      	ldr	r3, [pc, #32]	; (8011d6c <HAL_RCC_ClockConfig+0x228>)
 8011d4a:	4698      	mov	r8, r3
 8011d4c:	e004      	b.n	8011d58 <HAL_RCC_ClockConfig+0x214>
 8011d4e:	f7fd ff79 	bl	800fc44 <HAL_GetTick>
 8011d52:	1b80      	subs	r0, r0, r6
 8011d54:	4540      	cmp	r0, r8
 8011d56:	d8ae      	bhi.n	8011cb6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011d58:	6863      	ldr	r3, [r4, #4]
 8011d5a:	403b      	ands	r3, r7
 8011d5c:	2b0c      	cmp	r3, #12
 8011d5e:	d1f6      	bne.n	8011d4e <HAL_RCC_ClockConfig+0x20a>
 8011d60:	e74a      	b.n	8011bf8 <HAL_RCC_ClockConfig+0xb4>
 8011d62:	46c0      	nop			; (mov r8, r8)
 8011d64:	40022000 	.word	0x40022000
 8011d68:	40021000 	.word	0x40021000
 8011d6c:	00001388 	.word	0x00001388
 8011d70:	fffff8ff 	.word	0xfffff8ff

08011d74 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011d74:	b570      	push	{r4, r5, r6, lr}
 8011d76:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011d78:	4669      	mov	r1, sp
 8011d7a:	4b1c      	ldr	r3, [pc, #112]	; (8011dec <HAL_RCC_GetSysClockFreq+0x78>)
 8011d7c:	000a      	movs	r2, r1
 8011d7e:	0018      	movs	r0, r3
 8011d80:	c870      	ldmia	r0!, {r4, r5, r6}
 8011d82:	c270      	stmia	r2!, {r4, r5, r6}
 8011d84:	6800      	ldr	r0, [r0, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011d86:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011d88:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011d8a:	aa04      	add	r2, sp, #16
 8011d8c:	0010      	movs	r0, r2
 8011d8e:	cb70      	ldmia	r3!, {r4, r5, r6}
 8011d90:	c070      	stmia	r0!, {r4, r5, r6}
 8011d92:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011d94:	4d16      	ldr	r5, [pc, #88]	; (8011df0 <HAL_RCC_GetSysClockFreq+0x7c>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011d96:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011d98:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8011d9a:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8011d9c:	4018      	ands	r0, r3
 8011d9e:	2808      	cmp	r0, #8
 8011da0:	d00a      	beq.n	8011db8 <HAL_RCC_GetSysClockFreq+0x44>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8011da2:	380c      	subs	r0, #12
 8011da4:	4243      	negs	r3, r0
 8011da6:	4158      	adcs	r0, r3
 8011da8:	4b12      	ldr	r3, [pc, #72]	; (8011df4 <HAL_RCC_GetSysClockFreq+0x80>)
 8011daa:	4240      	negs	r0, r0
 8011dac:	4018      	ands	r0, r3
 8011dae:	4b12      	ldr	r3, [pc, #72]	; (8011df8 <HAL_RCC_GetSysClockFreq+0x84>)
 8011db0:	469c      	mov	ip, r3
 8011db2:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011db4:	b008      	add	sp, #32
 8011db6:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8011db8:	200f      	movs	r0, #15
 8011dba:	0c9c      	lsrs	r4, r3, #18
 8011dbc:	4004      	ands	r4, r0
 8011dbe:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011dc0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8011dc2:	4008      	ands	r0, r1
 8011dc4:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011dc6:	22c0      	movs	r2, #192	; 0xc0
 8011dc8:	2080      	movs	r0, #128	; 0x80
 8011dca:	0252      	lsls	r2, r2, #9
 8011dcc:	4013      	ands	r3, r2
 8011dce:	0240      	lsls	r0, r0, #9
 8011dd0:	4283      	cmp	r3, r0
 8011dd2:	d001      	beq.n	8011dd8 <HAL_RCC_GetSysClockFreq+0x64>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d004      	beq.n	8011de2 <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011dd8:	4807      	ldr	r0, [pc, #28]	; (8011df8 <HAL_RCC_GetSysClockFreq+0x84>)
 8011dda:	f7ee f9b9 	bl	8000150 <__udivsi3>
 8011dde:	4360      	muls	r0, r4
 8011de0:	e7e8      	b.n	8011db4 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011de2:	4806      	ldr	r0, [pc, #24]	; (8011dfc <HAL_RCC_GetSysClockFreq+0x88>)
 8011de4:	f7ee f9b4 	bl	8000150 <__udivsi3>
 8011de8:	4360      	muls	r0, r4
 8011dea:	e7e3      	b.n	8011db4 <HAL_RCC_GetSysClockFreq+0x40>
 8011dec:	08018864 	.word	0x08018864
 8011df0:	40021000 	.word	0x40021000
 8011df4:	02625a00 	.word	0x02625a00
 8011df8:	007a1200 	.word	0x007a1200
 8011dfc:	02dc6c00 	.word	0x02dc6c00

08011e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011e00:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011e02:	f7ff ffb7 	bl	8011d74 <HAL_RCC_GetSysClockFreq>
 8011e06:	4b05      	ldr	r3, [pc, #20]	; (8011e1c <HAL_RCC_GetHCLKFreq+0x1c>)
 8011e08:	4a05      	ldr	r2, [pc, #20]	; (8011e20 <HAL_RCC_GetHCLKFreq+0x20>)
 8011e0a:	685b      	ldr	r3, [r3, #4]
 8011e0c:	3220      	adds	r2, #32
 8011e0e:	061b      	lsls	r3, r3, #24
 8011e10:	0f1b      	lsrs	r3, r3, #28
 8011e12:	5cd3      	ldrb	r3, [r2, r3]
 8011e14:	40d8      	lsrs	r0, r3
 8011e16:	4b03      	ldr	r3, [pc, #12]	; (8011e24 <HAL_RCC_GetHCLKFreq+0x24>)
 8011e18:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011e1a:	bd10      	pop	{r4, pc}
 8011e1c:	40021000 	.word	0x40021000
 8011e20:	08018864 	.word	0x08018864
 8011e24:	200000c4 	.word	0x200000c4

08011e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011e28:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011e2a:	f7ff ffa3 	bl	8011d74 <HAL_RCC_GetSysClockFreq>
 8011e2e:	4908      	ldr	r1, [pc, #32]	; (8011e50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011e30:	4a08      	ldr	r2, [pc, #32]	; (8011e54 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8011e32:	684b      	ldr	r3, [r1, #4]
 8011e34:	3220      	adds	r2, #32
 8011e36:	061b      	lsls	r3, r3, #24
 8011e38:	0f1b      	lsrs	r3, r3, #28
 8011e3a:	5cd3      	ldrb	r3, [r2, r3]
 8011e3c:	40d8      	lsrs	r0, r3
 8011e3e:	4b06      	ldr	r3, [pc, #24]	; (8011e58 <HAL_RCC_GetPCLK1Freq+0x30>)
 8011e40:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011e42:	684b      	ldr	r3, [r1, #4]
 8011e44:	055b      	lsls	r3, r3, #21
 8011e46:	0f5b      	lsrs	r3, r3, #29
 8011e48:	5cd3      	ldrb	r3, [r2, r3]
 8011e4a:	40d8      	lsrs	r0, r3
}    
 8011e4c:	bd10      	pop	{r4, pc}
 8011e4e:	46c0      	nop			; (mov r8, r8)
 8011e50:	40021000 	.word	0x40021000
 8011e54:	08018864 	.word	0x08018864
 8011e58:	200000c4 	.word	0x200000c4

08011e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e5e:	46c6      	mov	lr, r8
 8011e60:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011e62:	6803      	ldr	r3, [r0, #0]
{
 8011e64:	b082      	sub	sp, #8
 8011e66:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011e68:	03da      	lsls	r2, r3, #15
 8011e6a:	d507      	bpl.n	8011e7c <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011e6c:	493e      	ldr	r1, [pc, #248]	; (8011f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011e6e:	6840      	ldr	r0, [r0, #4]
 8011e70:	6a0a      	ldr	r2, [r1, #32]
 8011e72:	4042      	eors	r2, r0
 8011e74:	20c0      	movs	r0, #192	; 0xc0
 8011e76:	0080      	lsls	r0, r0, #2
 8011e78:	4202      	tst	r2, r0
 8011e7a:	d131      	bne.n	8011ee0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011e7c:	07da      	lsls	r2, r3, #31
 8011e7e:	d506      	bpl.n	8011e8e <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011e80:	2003      	movs	r0, #3
 8011e82:	4939      	ldr	r1, [pc, #228]	; (8011f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011e84:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011e86:	4382      	bics	r2, r0
 8011e88:	68a0      	ldr	r0, [r4, #8]
 8011e8a:	4302      	orrs	r2, r0
 8011e8c:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011e8e:	079a      	lsls	r2, r3, #30
 8011e90:	d506      	bpl.n	8011ea0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011e92:	4935      	ldr	r1, [pc, #212]	; (8011f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011e94:	4835      	ldr	r0, [pc, #212]	; (8011f6c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8011e96:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011e98:	4002      	ands	r2, r0
 8011e9a:	68e0      	ldr	r0, [r4, #12]
 8011e9c:	4302      	orrs	r2, r0
 8011e9e:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011ea0:	035a      	lsls	r2, r3, #13
 8011ea2:	d506      	bpl.n	8011eb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011ea4:	4930      	ldr	r1, [pc, #192]	; (8011f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011ea6:	4832      	ldr	r0, [pc, #200]	; (8011f70 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011ea8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011eaa:	4002      	ands	r2, r0
 8011eac:	6920      	ldr	r0, [r4, #16]
 8011eae:	4302      	orrs	r2, r0
 8011eb0:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011eb2:	069a      	lsls	r2, r3, #26
 8011eb4:	d506      	bpl.n	8011ec4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011eb6:	2010      	movs	r0, #16
 8011eb8:	492b      	ldr	r1, [pc, #172]	; (8011f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011eba:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011ebc:	4382      	bics	r2, r0
 8011ebe:	6960      	ldr	r0, [r4, #20]
 8011ec0:	4302      	orrs	r2, r0
 8011ec2:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011ec4:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011ec6:	055b      	lsls	r3, r3, #21
 8011ec8:	d506      	bpl.n	8011ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011eca:	2140      	movs	r1, #64	; 0x40
 8011ecc:	4a26      	ldr	r2, [pc, #152]	; (8011f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011ece:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011ed0:	438b      	bics	r3, r1
 8011ed2:	69a1      	ldr	r1, [r4, #24]
 8011ed4:	430b      	orrs	r3, r1
 8011ed6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8011ed8:	b002      	add	sp, #8
 8011eda:	bc04      	pop	{r2}
 8011edc:	4690      	mov	r8, r2
 8011ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011ee0:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011ee2:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8011ee4:	69ca      	ldr	r2, [r1, #28]
 8011ee6:	0540      	lsls	r0, r0, #21
 8011ee8:	4302      	orrs	r2, r0
 8011eea:	61ca      	str	r2, [r1, #28]
 8011eec:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011eee:	4d21      	ldr	r5, [pc, #132]	; (8011f74 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8011ef0:	4003      	ands	r3, r0
 8011ef2:	9301      	str	r3, [sp, #4]
 8011ef4:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011ef6:	682b      	ldr	r3, [r5, #0]
 8011ef8:	0076      	lsls	r6, r6, #1
 8011efa:	4333      	orrs	r3, r6
 8011efc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8011efe:	f7fd fea1 	bl	800fc44 <HAL_GetTick>
 8011f02:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011f04:	e004      	b.n	8011f10 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011f06:	f7fd fe9d 	bl	800fc44 <HAL_GetTick>
 8011f0a:	1bc0      	subs	r0, r0, r7
 8011f0c:	2864      	cmp	r0, #100	; 0x64
 8011f0e:	d829      	bhi.n	8011f64 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011f10:	682b      	ldr	r3, [r5, #0]
 8011f12:	4233      	tst	r3, r6
 8011f14:	d0f7      	beq.n	8011f06 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 8011f16:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011f18:	4d13      	ldr	r5, [pc, #76]	; (8011f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8011f1a:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011f1c:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8011f1e:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011f20:	4b15      	ldr	r3, [pc, #84]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8011f22:	4302      	orrs	r2, r0
 8011f24:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011f26:	6a2a      	ldr	r2, [r5, #32]
 8011f28:	4814      	ldr	r0, [pc, #80]	; (8011f7c <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011f2a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011f2c:	4002      	ands	r2, r0
 8011f2e:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 8011f30:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011f32:	078b      	lsls	r3, r1, #30
 8011f34:	d408      	bmi.n	8011f48 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8011f36:	4a0c      	ldr	r2, [pc, #48]	; (8011f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011f38:	490f      	ldr	r1, [pc, #60]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8011f3a:	6a13      	ldr	r3, [r2, #32]
 8011f3c:	400b      	ands	r3, r1
 8011f3e:	6861      	ldr	r1, [r4, #4]
 8011f40:	430b      	orrs	r3, r1
 8011f42:	6213      	str	r3, [r2, #32]
 8011f44:	6823      	ldr	r3, [r4, #0]
 8011f46:	e799      	b.n	8011e7c <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8011f48:	f7fd fe7c 	bl	800fc44 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011f4c:	4b0c      	ldr	r3, [pc, #48]	; (8011f80 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 8011f4e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011f50:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011f52:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011f54:	6a2b      	ldr	r3, [r5, #32]
 8011f56:	421e      	tst	r6, r3
 8011f58:	d1ed      	bne.n	8011f36 <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011f5a:	f7fd fe73 	bl	800fc44 <HAL_GetTick>
 8011f5e:	1bc0      	subs	r0, r0, r7
 8011f60:	4540      	cmp	r0, r8
 8011f62:	d9f7      	bls.n	8011f54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8011f64:	2003      	movs	r0, #3
 8011f66:	e7b7      	b.n	8011ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8011f68:	40021000 	.word	0x40021000
 8011f6c:	fffcffff 	.word	0xfffcffff
 8011f70:	fff3ffff 	.word	0xfff3ffff
 8011f74:	40007000 	.word	0x40007000
 8011f78:	fffffcff 	.word	0xfffffcff
 8011f7c:	fffeffff 	.word	0xfffeffff
 8011f80:	00001388 	.word	0x00001388

08011f84 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011f84:	4770      	bx	lr
 8011f86:	46c0      	nop			; (mov r8, r8)

08011f88 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011f88:	6803      	ldr	r3, [r0, #0]
{
 8011f8a:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011f8c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011f8e:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011f90:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011f92:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011f94:	681c      	ldr	r4, [r3, #0]
 8011f96:	4b13      	ldr	r3, [pc, #76]	; (8011fe4 <HAL_RTC_GetTime+0x5c>)
 8011f98:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011f9a:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011f9c:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011f9e:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011fa0:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011fa2:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011fa4:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011fa6:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011fa8:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011faa:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011fac:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011fae:	2a00      	cmp	r2, #0
 8011fb0:	d115      	bne.n	8011fde <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8011fb2:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011fb4:	0900      	lsrs	r0, r0, #4
 8011fb6:	0082      	lsls	r2, r0, #2
 8011fb8:	1810      	adds	r0, r2, r0
 8011fba:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011fbc:	4035      	ands	r5, r6
 8011fbe:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011fc0:	0918      	lsrs	r0, r3, #4
 8011fc2:	0082      	lsls	r2, r0, #2
 8011fc4:	1812      	adds	r2, r2, r0
 8011fc6:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011fc8:	4033      	ands	r3, r6
 8011fca:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011fcc:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011fce:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011fd0:	0093      	lsls	r3, r2, #2
 8011fd2:	189b      	adds	r3, r3, r2
 8011fd4:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011fd6:	4034      	ands	r4, r6
 8011fd8:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011fda:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8011fdc:	708c      	strb	r4, [r1, #2]
}
 8011fde:	2000      	movs	r0, #0
 8011fe0:	bd70      	pop	{r4, r5, r6, pc}
 8011fe2:	46c0      	nop			; (mov r8, r8)
 8011fe4:	007f7f7f 	.word	0x007f7f7f

08011fe8 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011fe8:	6803      	ldr	r3, [r0, #0]
 8011fea:	4815      	ldr	r0, [pc, #84]	; (8012040 <HAL_RTC_GetDate+0x58>)
 8011fec:	685b      	ldr	r3, [r3, #4]
{
 8011fee:	b5f0      	push	{r4, r5, r6, r7, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011ff0:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011ff2:	201f      	movs	r0, #31
 8011ff4:	0a1c      	lsrs	r4, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011ff6:	0c1f      	lsrs	r7, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011ff8:	b2dd      	uxtb	r5, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011ffa:	b2e4      	uxtb	r4, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011ffc:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011ffe:	4020      	ands	r0, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012000:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012002:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012004:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012006:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012008:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 801200a:	2a00      	cmp	r2, #0
 801200c:	d115      	bne.n	801203a <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 801200e:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012010:	093b      	lsrs	r3, r7, #4
 8012012:	009a      	lsls	r2, r3, #2
 8012014:	18d2      	adds	r2, r2, r3
 8012016:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012018:	4037      	ands	r7, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801201a:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 801201c:	19d2      	adds	r2, r2, r7
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801201e:	0098      	lsls	r0, r3, #2
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012020:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012022:	092a      	lsrs	r2, r5, #4
 8012024:	18c0      	adds	r0, r0, r3
 8012026:	0093      	lsls	r3, r2, #2
 8012028:	189b      	adds	r3, r3, r2
 801202a:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801202c:	4034      	ands	r4, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801202e:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012030:	4035      	ands	r5, r6
 8012032:	1904      	adds	r4, r0, r4
 8012034:	195b      	adds	r3, r3, r5
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012036:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8012038:	708b      	strb	r3, [r1, #2]
}
 801203a:	2000      	movs	r0, #0
 801203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801203e:	46c0      	nop			; (mov r8, r8)
 8012040:	00ffff3f 	.word	0x00ffff3f

08012044 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012044:	21a0      	movs	r1, #160	; 0xa0
 8012046:	6802      	ldr	r2, [r0, #0]
{
 8012048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801204a:	68d3      	ldr	r3, [r2, #12]
{
 801204c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801204e:	438b      	bics	r3, r1
 8012050:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8012052:	f7fd fdf7 	bl	800fc44 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012056:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 8012058:	0007      	movs	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801205a:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801205c:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801205e:	e004      	b.n	801206a <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012060:	f7fd fdf0 	bl	800fc44 <HAL_GetTick>
 8012064:	1bc0      	subs	r0, r0, r7
 8012066:	42b0      	cmp	r0, r6
 8012068:	d805      	bhi.n	8012076 <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801206a:	6823      	ldr	r3, [r4, #0]
 801206c:	68db      	ldr	r3, [r3, #12]
 801206e:	421d      	tst	r5, r3
 8012070:	d0f6      	beq.n	8012060 <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 8012072:	2000      	movs	r0, #0
}
 8012074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8012076:	2003      	movs	r0, #3
 8012078:	e7fc      	b.n	8012074 <HAL_RTC_WaitForSynchro+0x30>
 801207a:	46c0      	nop			; (mov r8, r8)

0801207c <RTC_EnterInitMode>:
{
 801207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801207e:	6803      	ldr	r3, [r0, #0]
{
 8012080:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012082:	68da      	ldr	r2, [r3, #12]
 8012084:	0652      	lsls	r2, r2, #25
 8012086:	d501      	bpl.n	801208c <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 8012088:	2000      	movs	r0, #0
}
 801208a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801208c:	2201      	movs	r2, #1
 801208e:	4252      	negs	r2, r2
 8012090:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8012092:	f7fd fdd7 	bl	800fc44 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012096:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8012098:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801209a:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801209c:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801209e:	e004      	b.n	80120aa <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80120a0:	f7fd fdd0 	bl	800fc44 <HAL_GetTick>
 80120a4:	1bc0      	subs	r0, r0, r7
 80120a6:	42b0      	cmp	r0, r6
 80120a8:	d804      	bhi.n	80120b4 <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80120aa:	6823      	ldr	r3, [r4, #0]
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	421d      	tst	r5, r3
 80120b0:	d0f6      	beq.n	80120a0 <RTC_EnterInitMode+0x24>
 80120b2:	e7e9      	b.n	8012088 <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 80120b4:	2003      	movs	r0, #3
 80120b6:	e7e8      	b.n	801208a <RTC_EnterInitMode+0xe>

080120b8 <HAL_RTC_Init>:
{
 80120b8:	b570      	push	{r4, r5, r6, lr}
 80120ba:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 80120bc:	d03e      	beq.n	801213c <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80120be:	7f43      	ldrb	r3, [r0, #29]
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d036      	beq.n	8012134 <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80120c6:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80120c8:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80120ca:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80120cc:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80120ce:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80120d0:	625a      	str	r2, [r3, #36]	; 0x24
 80120d2:	3a77      	subs	r2, #119	; 0x77
 80120d4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80120d6:	f7ff ffd1 	bl	801207c <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80120da:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80120dc:	2800      	cmp	r0, #0
 80120de:	d123      	bne.n	8012128 <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80120e0:	689a      	ldr	r2, [r3, #8]
 80120e2:	4917      	ldr	r1, [pc, #92]	; (8012140 <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80120e4:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80120e6:	400a      	ands	r2, r1
 80120e8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80120ea:	6862      	ldr	r2, [r4, #4]
 80120ec:	6899      	ldr	r1, [r3, #8]
 80120ee:	432a      	orrs	r2, r5
 80120f0:	6965      	ldr	r5, [r4, #20]
 80120f2:	432a      	orrs	r2, r5
 80120f4:	430a      	orrs	r2, r1
 80120f6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80120f8:	68e2      	ldr	r2, [r4, #12]
 80120fa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80120fc:	68a2      	ldr	r2, [r4, #8]
 80120fe:	6919      	ldr	r1, [r3, #16]
 8012100:	0412      	lsls	r2, r2, #16
 8012102:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012104:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012106:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012108:	68da      	ldr	r2, [r3, #12]
 801210a:	438a      	bics	r2, r1
 801210c:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 801210e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012110:	490c      	ldr	r1, [pc, #48]	; (8012144 <HAL_RTC_Init+0x8c>)
 8012112:	400a      	ands	r2, r1
 8012114:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012118:	69a1      	ldr	r1, [r4, #24]
 801211a:	430a      	orrs	r2, r1
 801211c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801211e:	22ff      	movs	r2, #255	; 0xff
 8012120:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012122:	2301      	movs	r3, #1
 8012124:	7763      	strb	r3, [r4, #29]
}
 8012126:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012128:	22ff      	movs	r2, #255	; 0xff
 801212a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801212c:	2304      	movs	r3, #4
    return HAL_ERROR;
 801212e:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012130:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012132:	e7f8      	b.n	8012126 <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 8012134:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012136:	f7ff ff25 	bl	8011f84 <HAL_RTC_MspInit>
 801213a:	e7c4      	b.n	80120c6 <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 801213c:	2001      	movs	r0, #1
 801213e:	e7f2      	b.n	8012126 <HAL_RTC_Init+0x6e>
 8012140:	ff8fffbf 	.word	0xff8fffbf
 8012144:	fffbffff 	.word	0xfffbffff

08012148 <HAL_RTC_SetTime>:
{
 8012148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 801214a:	7f03      	ldrb	r3, [r0, #28]
{
 801214c:	0004      	movs	r4, r0
 801214e:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8012150:	2b01      	cmp	r3, #1
 8012152:	d100      	bne.n	8012156 <HAL_RTC_SetTime+0xe>
 8012154:	e074      	b.n	8012240 <HAL_RTC_SetTime+0xf8>
 8012156:	2301      	movs	r3, #1
 8012158:	6806      	ldr	r6, [r0, #0]
 801215a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801215c:	3301      	adds	r3, #1
 801215e:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012160:	68b3      	ldr	r3, [r6, #8]
 8012162:	2740      	movs	r7, #64	; 0x40
  if(Format == RTC_FORMAT_BIN)
 8012164:	2a00      	cmp	r2, #0
 8012166:	d031      	beq.n	80121cc <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012168:	403b      	ands	r3, r7
 801216a:	d065      	beq.n	8012238 <HAL_RTC_SetTime+0xf0>
 801216c:	7a0b      	ldrb	r3, [r1, #8]
 801216e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012170:	782f      	ldrb	r7, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012172:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012174:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012176:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012178:	430f      	orrs	r7, r1
              ((uint32_t)sTime->Seconds) | \
 801217a:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 801217c:	430f      	orrs	r7, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801217e:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012180:	23ca      	movs	r3, #202	; 0xca
 8012182:	6273      	str	r3, [r6, #36]	; 0x24
 8012184:	3b77      	subs	r3, #119	; 0x77
 8012186:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012188:	0020      	movs	r0, r4
 801218a:	f7ff ff77 	bl	801207c <RTC_EnterInitMode>
 801218e:	1e06      	subs	r6, r0, #0
 8012190:	d149      	bne.n	8012226 <HAL_RTC_SetTime+0xde>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012192:	4935      	ldr	r1, [pc, #212]	; (8012268 <HAL_RTC_SetTime+0x120>)
 8012194:	6822      	ldr	r2, [r4, #0]
 8012196:	4039      	ands	r1, r7
 8012198:	6011      	str	r1, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 801219a:	6893      	ldr	r3, [r2, #8]
 801219c:	4933      	ldr	r1, [pc, #204]	; (801226c <HAL_RTC_SetTime+0x124>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801219e:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80121a0:	400b      	ands	r3, r1
 80121a2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80121a4:	68eb      	ldr	r3, [r5, #12]
 80121a6:	6891      	ldr	r1, [r2, #8]
 80121a8:	4303      	orrs	r3, r0
 80121aa:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80121ac:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80121ae:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80121b0:	68d3      	ldr	r3, [r2, #12]
 80121b2:	438b      	bics	r3, r1
 80121b4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80121b6:	6893      	ldr	r3, [r2, #8]
 80121b8:	069b      	lsls	r3, r3, #26
 80121ba:	d543      	bpl.n	8012244 <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80121bc:	23ff      	movs	r3, #255	; 0xff
 80121be:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80121c0:	3bfe      	subs	r3, #254	; 0xfe
 80121c2:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 80121c4:	2300      	movs	r3, #0
 80121c6:	7723      	strb	r3, [r4, #28]
}
 80121c8:	0030      	movs	r0, r6
 80121ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80121cc:	401f      	ands	r7, r3
 80121ce:	d035      	beq.n	801223c <HAL_RTC_SetTime+0xf4>
 80121d0:	7a0f      	ldrb	r7, [r1, #8]
 80121d2:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80121d4:	7828      	ldrb	r0, [r5, #0]
  uint32_t bcdhigh = 0;
 80121d6:	2300      	movs	r3, #0
  while(Value >= 10)
 80121d8:	2809      	cmp	r0, #9
 80121da:	d906      	bls.n	80121ea <HAL_RTC_SetTime+0xa2>
    Value -= 10;
 80121dc:	380a      	subs	r0, #10
 80121de:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 80121e0:	3301      	adds	r3, #1
  while(Value >= 10)
 80121e2:	2809      	cmp	r0, #9
 80121e4:	d8fa      	bhi.n	80121dc <HAL_RTC_SetTime+0x94>
 80121e6:	011b      	lsls	r3, r3, #4
 80121e8:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80121ea:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80121ec:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80121ee:	0400      	lsls	r0, r0, #16
  uint32_t bcdhigh = 0;
 80121f0:	2100      	movs	r1, #0
  while(Value >= 10)
 80121f2:	2b09      	cmp	r3, #9
 80121f4:	d906      	bls.n	8012204 <HAL_RTC_SetTime+0xbc>
    Value -= 10;
 80121f6:	3b0a      	subs	r3, #10
 80121f8:	b2db      	uxtb	r3, r3
    bcdhigh++;
 80121fa:	3101      	adds	r1, #1
  while(Value >= 10)
 80121fc:	2b09      	cmp	r3, #9
 80121fe:	d8fa      	bhi.n	80121f6 <HAL_RTC_SetTime+0xae>
 8012200:	0109      	lsls	r1, r1, #4
 8012202:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012204:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012206:	78a9      	ldrb	r1, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012208:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 801220a:	2909      	cmp	r1, #9
 801220c:	d929      	bls.n	8012262 <HAL_RTC_SetTime+0x11a>
    Value -= 10;
 801220e:	390a      	subs	r1, #10
 8012210:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8012212:	3201      	adds	r2, #1
  while(Value >= 10)
 8012214:	2909      	cmp	r1, #9
 8012216:	d8fa      	bhi.n	801220e <HAL_RTC_SetTime+0xc6>
 8012218:	0112      	lsls	r2, r2, #4
 801221a:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801221c:	4307      	orrs	r7, r0
 801221e:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012220:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012222:	430f      	orrs	r7, r1
 8012224:	e7ac      	b.n	8012180 <HAL_RTC_SetTime+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012226:	22ff      	movs	r2, #255	; 0xff
 8012228:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 801222a:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801222c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801222e:	2304      	movs	r3, #4
 8012230:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012232:	2300      	movs	r3, #0
 8012234:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012236:	e7c7      	b.n	80121c8 <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00;
 8012238:	720b      	strb	r3, [r1, #8]
 801223a:	e799      	b.n	8012170 <HAL_RTC_SetTime+0x28>
      sTime->TimeFormat = 0x00;
 801223c:	720f      	strb	r7, [r1, #8]
 801223e:	e7c9      	b.n	80121d4 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8012240:	2602      	movs	r6, #2
 8012242:	e7c1      	b.n	80121c8 <HAL_RTC_SetTime+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012244:	0020      	movs	r0, r4
 8012246:	f7ff fefd 	bl	8012044 <HAL_RTC_WaitForSynchro>
 801224a:	2800      	cmp	r0, #0
 801224c:	d101      	bne.n	8012252 <HAL_RTC_SetTime+0x10a>
 801224e:	6822      	ldr	r2, [r4, #0]
 8012250:	e7b4      	b.n	80121bc <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012252:	22ff      	movs	r2, #255	; 0xff
 8012254:	6823      	ldr	r3, [r4, #0]
 8012256:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012258:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 801225a:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 801225c:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 801225e:	2601      	movs	r6, #1
 8012260:	e7b2      	b.n	80121c8 <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 8012262:	2200      	movs	r2, #0
 8012264:	e7da      	b.n	801221c <HAL_RTC_SetTime+0xd4>
 8012266:	46c0      	nop			; (mov r8, r8)
 8012268:	007f7f7f 	.word	0x007f7f7f
 801226c:	fffbffff 	.word	0xfffbffff

08012270 <HAL_RTC_SetDate>:
{
 8012270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8012272:	7f03      	ldrb	r3, [r0, #28]
{
 8012274:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8012276:	2b01      	cmp	r3, #1
 8012278:	d062      	beq.n	8012340 <HAL_RTC_SetDate+0xd0>
 801227a:	2301      	movs	r3, #1
 801227c:	780f      	ldrb	r7, [r1, #0]
 801227e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012280:	3301      	adds	r3, #1
 8012282:	7743      	strb	r3, [r0, #29]
 8012284:	7848      	ldrb	r0, [r1, #1]
 8012286:	788e      	ldrb	r6, [r1, #2]
 8012288:	78cb      	ldrb	r3, [r1, #3]
 801228a:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 801228c:	2a00      	cmp	r2, #0
 801228e:	d022      	beq.n	80122d6 <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012290:	041b      	lsls	r3, r3, #16
 8012292:	433b      	orrs	r3, r7
 8012294:	001c      	movs	r4, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8012296:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012298:	4334      	orrs	r4, r6
 801229a:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801229c:	22ca      	movs	r2, #202	; 0xca
 801229e:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80122a0:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80122a2:	625a      	str	r2, [r3, #36]	; 0x24
 80122a4:	3a77      	subs	r2, #119	; 0x77
 80122a6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80122a8:	f7ff fee8 	bl	801207c <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80122ac:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80122ae:	1e06      	subs	r6, r0, #0
 80122b0:	d13e      	bne.n	8012330 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80122b2:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80122b4:	4a2b      	ldr	r2, [pc, #172]	; (8012364 <HAL_RTC_SetDate+0xf4>)
 80122b6:	4014      	ands	r4, r2
 80122b8:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80122ba:	68da      	ldr	r2, [r3, #12]
 80122bc:	438a      	bics	r2, r1
 80122be:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80122c0:	689a      	ldr	r2, [r3, #8]
 80122c2:	0692      	lsls	r2, r2, #26
 80122c4:	d53e      	bpl.n	8012344 <HAL_RTC_SetDate+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80122c6:	22ff      	movs	r2, #255	; 0xff
 80122c8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80122ca:	2301      	movs	r3, #1
 80122cc:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80122ce:	2300      	movs	r3, #0
 80122d0:	772b      	strb	r3, [r5, #28]
}
 80122d2:	0030      	movs	r0, r6
 80122d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80122d6:	2410      	movs	r4, #16
 80122d8:	4204      	tst	r4, r0
 80122da:	d003      	beq.n	80122e4 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 80122dc:	43a0      	bics	r0, r4
 80122de:	300a      	adds	r0, #10
 80122e0:	b2c0      	uxtb	r0, r0
 80122e2:	7048      	strb	r0, [r1, #1]
  uint32_t bcdhigh = 0;
 80122e4:	2100      	movs	r1, #0
  while(Value >= 10)
 80122e6:	2b09      	cmp	r3, #9
 80122e8:	d906      	bls.n	80122f8 <HAL_RTC_SetDate+0x88>
    Value -= 10;
 80122ea:	3b0a      	subs	r3, #10
 80122ec:	b2db      	uxtb	r3, r3
    bcdhigh++;
 80122ee:	3101      	adds	r1, #1
  while(Value >= 10)
 80122f0:	2b09      	cmp	r3, #9
 80122f2:	d8fa      	bhi.n	80122ea <HAL_RTC_SetDate+0x7a>
 80122f4:	0109      	lsls	r1, r1, #4
 80122f6:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80122f8:	430b      	orrs	r3, r1
 80122fa:	041b      	lsls	r3, r3, #16
  uint32_t bcdhigh = 0;
 80122fc:	2100      	movs	r1, #0
  while(Value >= 10)
 80122fe:	2809      	cmp	r0, #9
 8012300:	d906      	bls.n	8012310 <HAL_RTC_SetDate+0xa0>
    Value -= 10;
 8012302:	380a      	subs	r0, #10
 8012304:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8012306:	3101      	adds	r1, #1
  while(Value >= 10)
 8012308:	2809      	cmp	r0, #9
 801230a:	d8fa      	bhi.n	8012302 <HAL_RTC_SetDate+0x92>
 801230c:	0109      	lsls	r1, r1, #4
 801230e:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012310:	4308      	orrs	r0, r1
 8012312:	0200      	lsls	r0, r0, #8
  while(Value >= 10)
 8012314:	2e09      	cmp	r6, #9
 8012316:	d922      	bls.n	801235e <HAL_RTC_SetDate+0xee>
    Value -= 10;
 8012318:	3e0a      	subs	r6, #10
 801231a:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 801231c:	3201      	adds	r2, #1
  while(Value >= 10)
 801231e:	2e09      	cmp	r6, #9
 8012320:	d8fa      	bhi.n	8012318 <HAL_RTC_SetDate+0xa8>
 8012322:	0112      	lsls	r2, r2, #4
 8012324:	b2d4      	uxtb	r4, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012326:	433b      	orrs	r3, r7
 8012328:	4303      	orrs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801232a:	4334      	orrs	r4, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801232c:	431c      	orrs	r4, r3
 801232e:	e7b5      	b.n	801229c <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012330:	22ff      	movs	r2, #255	; 0xff
 8012332:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012334:	2304      	movs	r3, #4
 8012336:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8012338:	2300      	movs	r3, #0
    return HAL_ERROR;
 801233a:	2601      	movs	r6, #1
    __HAL_UNLOCK(hrtc);
 801233c:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 801233e:	e7c8      	b.n	80122d2 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8012340:	2602      	movs	r6, #2
 8012342:	e7c6      	b.n	80122d2 <HAL_RTC_SetDate+0x62>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012344:	0028      	movs	r0, r5
 8012346:	f7ff fe7d 	bl	8012044 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801234a:	682b      	ldr	r3, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801234c:	2800      	cmp	r0, #0
 801234e:	d0ba      	beq.n	80122c6 <HAL_RTC_SetDate+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012350:	22ff      	movs	r2, #255	; 0xff
 8012352:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012354:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8012356:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012358:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 801235a:	2601      	movs	r6, #1
 801235c:	e7b9      	b.n	80122d2 <HAL_RTC_SetDate+0x62>
  while(Value >= 10)
 801235e:	2400      	movs	r4, #0
 8012360:	e7e1      	b.n	8012326 <HAL_RTC_SetDate+0xb6>
 8012362:	46c0      	nop			; (mov r8, r8)
 8012364:	00ffff3f 	.word	0x00ffff3f

08012368 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012368:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 801236a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801236c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801236e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012370:	600a      	str	r2, [r1, #0]
}
 8012372:	4770      	bx	lr

08012374 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012374:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8012376:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012378:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801237a:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801237c:	6808      	ldr	r0, [r1, #0]
}
 801237e:	4770      	bx	lr

08012380 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012380:	2201      	movs	r2, #1
{
 8012382:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012384:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012386:	6a03      	ldr	r3, [r0, #32]
 8012388:	4393      	bics	r3, r2
 801238a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 801238c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801238e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8012390:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012392:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012394:	680d      	ldr	r5, [r1, #0]
 8012396:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012398:	2502      	movs	r5, #2
 801239a:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801239c:	688d      	ldr	r5, [r1, #8]
 801239e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80123a0:	4d0e      	ldr	r5, [pc, #56]	; (80123dc <TIM_OC1_SetConfig+0x5c>)
 80123a2:	42a8      	cmp	r0, r5
 80123a4:	d008      	beq.n	80123b8 <TIM_OC1_SetConfig+0x38>
 80123a6:	4d0e      	ldr	r5, [pc, #56]	; (80123e0 <TIM_OC1_SetConfig+0x60>)
 80123a8:	42a8      	cmp	r0, r5
 80123aa:	d005      	beq.n	80123b8 <TIM_OC1_SetConfig+0x38>
 80123ac:	4d0d      	ldr	r5, [pc, #52]	; (80123e4 <TIM_OC1_SetConfig+0x64>)
 80123ae:	42a8      	cmp	r0, r5
 80123b0:	d002      	beq.n	80123b8 <TIM_OC1_SetConfig+0x38>
 80123b2:	4d0d      	ldr	r5, [pc, #52]	; (80123e8 <TIM_OC1_SetConfig+0x68>)
 80123b4:	42a8      	cmp	r0, r5
 80123b6:	d10b      	bne.n	80123d0 <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80123b8:	2508      	movs	r5, #8
 80123ba:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80123bc:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80123be:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80123c0:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80123c2:	2504      	movs	r5, #4
 80123c4:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80123c6:	4d09      	ldr	r5, [pc, #36]	; (80123ec <TIM_OC1_SetConfig+0x6c>)
 80123c8:	402a      	ands	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80123ca:	694d      	ldr	r5, [r1, #20]
 80123cc:	4335      	orrs	r5, r6
 80123ce:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80123d0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80123d2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80123d4:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80123d6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80123d8:	6203      	str	r3, [r0, #32]
}
 80123da:	bd70      	pop	{r4, r5, r6, pc}
 80123dc:	40012c00 	.word	0x40012c00
 80123e0:	40014000 	.word	0x40014000
 80123e4:	40014400 	.word	0x40014400
 80123e8:	40014800 	.word	0x40014800
 80123ec:	fffffcff 	.word	0xfffffcff

080123f0 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80123f0:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80123f2:	2473      	movs	r4, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80123f4:	6a03      	ldr	r3, [r0, #32]
 80123f6:	4a17      	ldr	r2, [pc, #92]	; (8012454 <TIM_OC3_SetConfig+0x64>)
 80123f8:	4013      	ands	r3, r2
 80123fa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80123fc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80123fe:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8012400:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012402:	43a5      	bics	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012404:	680c      	ldr	r4, [r1, #0]
 8012406:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012408:	4c13      	ldr	r4, [pc, #76]	; (8012458 <TIM_OC3_SetConfig+0x68>)
 801240a:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 801240c:	688c      	ldr	r4, [r1, #8]
 801240e:	0224      	lsls	r4, r4, #8
 8012410:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012412:	4c12      	ldr	r4, [pc, #72]	; (801245c <TIM_OC3_SetConfig+0x6c>)
 8012414:	42a0      	cmp	r0, r4
 8012416:	d015      	beq.n	8012444 <TIM_OC3_SetConfig+0x54>
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8012418:	4c11      	ldr	r4, [pc, #68]	; (8012460 <TIM_OC3_SetConfig+0x70>)
 801241a:	42a0      	cmp	r0, r4
 801241c:	d005      	beq.n	801242a <TIM_OC3_SetConfig+0x3a>
 801241e:	4c11      	ldr	r4, [pc, #68]	; (8012464 <TIM_OC3_SetConfig+0x74>)
 8012420:	42a0      	cmp	r0, r4
 8012422:	d002      	beq.n	801242a <TIM_OC3_SetConfig+0x3a>
 8012424:	4c10      	ldr	r4, [pc, #64]	; (8012468 <TIM_OC3_SetConfig+0x78>)
 8012426:	42a0      	cmp	r0, r4
 8012428:	d106      	bne.n	8012438 <TIM_OC3_SetConfig+0x48>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801242a:	4c10      	ldr	r4, [pc, #64]	; (801246c <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 801242c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801242e:	4014      	ands	r4, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8012430:	698a      	ldr	r2, [r1, #24]
 8012432:	4332      	orrs	r2, r6
 8012434:	0112      	lsls	r2, r2, #4
 8012436:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012438:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801243a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 801243c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 801243e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012440:	6203      	str	r3, [r0, #32]
}
 8012442:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8012444:	4c0a      	ldr	r4, [pc, #40]	; (8012470 <TIM_OC3_SetConfig+0x80>)
 8012446:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8012448:	68cb      	ldr	r3, [r1, #12]
 801244a:	021b      	lsls	r3, r3, #8
 801244c:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 801244e:	4c09      	ldr	r4, [pc, #36]	; (8012474 <TIM_OC3_SetConfig+0x84>)
 8012450:	4023      	ands	r3, r4
 8012452:	e7ea      	b.n	801242a <TIM_OC3_SetConfig+0x3a>
 8012454:	fffffeff 	.word	0xfffffeff
 8012458:	fffffdff 	.word	0xfffffdff
 801245c:	40012c00 	.word	0x40012c00
 8012460:	40014000 	.word	0x40014000
 8012464:	40014400 	.word	0x40014400
 8012468:	40014800 	.word	0x40014800
 801246c:	ffffcfff 	.word	0xffffcfff
 8012470:	fffff7ff 	.word	0xfffff7ff
 8012474:	fffffbff 	.word	0xfffffbff

08012478 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012478:	6a03      	ldr	r3, [r0, #32]
 801247a:	4a14      	ldr	r2, [pc, #80]	; (80124cc <TIM_OC4_SetConfig+0x54>)
{
 801247c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801247e:	4013      	ands	r3, r2
 8012480:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012482:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012484:	4d12      	ldr	r5, [pc, #72]	; (80124d0 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8012486:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8012488:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801248a:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 801248c:	680d      	ldr	r5, [r1, #0]
 801248e:	022d      	lsls	r5, r5, #8
 8012490:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012492:	4d10      	ldr	r5, [pc, #64]	; (80124d4 <TIM_OC4_SetConfig+0x5c>)
 8012494:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8012496:	688a      	ldr	r2, [r1, #8]
 8012498:	0312      	lsls	r2, r2, #12
 801249a:	432a      	orrs	r2, r5

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 801249c:	4d0e      	ldr	r5, [pc, #56]	; (80124d8 <TIM_OC4_SetConfig+0x60>)
 801249e:	42a8      	cmp	r0, r5
 80124a0:	d008      	beq.n	80124b4 <TIM_OC4_SetConfig+0x3c>
 80124a2:	4d0e      	ldr	r5, [pc, #56]	; (80124dc <TIM_OC4_SetConfig+0x64>)
 80124a4:	42a8      	cmp	r0, r5
 80124a6:	d005      	beq.n	80124b4 <TIM_OC4_SetConfig+0x3c>
 80124a8:	4d0d      	ldr	r5, [pc, #52]	; (80124e0 <TIM_OC4_SetConfig+0x68>)
 80124aa:	42a8      	cmp	r0, r5
 80124ac:	d002      	beq.n	80124b4 <TIM_OC4_SetConfig+0x3c>
 80124ae:	4d0d      	ldr	r5, [pc, #52]	; (80124e4 <TIM_OC4_SetConfig+0x6c>)
 80124b0:	42a8      	cmp	r0, r5
 80124b2:	d104      	bne.n	80124be <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80124b4:	4d0c      	ldr	r5, [pc, #48]	; (80124e8 <TIM_OC4_SetConfig+0x70>)
 80124b6:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80124b8:	694d      	ldr	r5, [r1, #20]
 80124ba:	01ad      	lsls	r5, r5, #6
 80124bc:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80124be:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80124c0:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80124c2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80124c4:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80124c6:	6202      	str	r2, [r0, #32]
}
 80124c8:	bd30      	pop	{r4, r5, pc}
 80124ca:	46c0      	nop			; (mov r8, r8)
 80124cc:	ffffefff 	.word	0xffffefff
 80124d0:	ffff8cff 	.word	0xffff8cff
 80124d4:	ffffdfff 	.word	0xffffdfff
 80124d8:	40012c00 	.word	0x40012c00
 80124dc:	40014000 	.word	0x40014000
 80124e0:	40014400 	.word	0x40014400
 80124e4:	40014800 	.word	0x40014800
 80124e8:	ffffbfff 	.word	0xffffbfff

080124ec <HAL_TIM_Base_MspInit>:
}
 80124ec:	4770      	bx	lr
 80124ee:	46c0      	nop			; (mov r8, r8)

080124f0 <HAL_TIM_Base_MspDeInit>:
 80124f0:	4770      	bx	lr
 80124f2:	46c0      	nop			; (mov r8, r8)

080124f4 <HAL_TIM_Base_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 80124f4:	2339      	movs	r3, #57	; 0x39
 80124f6:	2202      	movs	r2, #2
{
 80124f8:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 80124fa:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 80124fc:	6803      	ldr	r3, [r0, #0]
 80124fe:	4a0b      	ldr	r2, [pc, #44]	; (801252c <HAL_TIM_Base_DeInit+0x38>)
 8012500:	6a19      	ldr	r1, [r3, #32]
{
 8012502:	0004      	movs	r4, r0
  __HAL_TIM_DISABLE(htim);
 8012504:	4211      	tst	r1, r2
 8012506:	d107      	bne.n	8012518 <HAL_TIM_Base_DeInit+0x24>
 8012508:	6a19      	ldr	r1, [r3, #32]
 801250a:	4a09      	ldr	r2, [pc, #36]	; (8012530 <HAL_TIM_Base_DeInit+0x3c>)
 801250c:	4211      	tst	r1, r2
 801250e:	d103      	bne.n	8012518 <HAL_TIM_Base_DeInit+0x24>
 8012510:	2101      	movs	r1, #1
 8012512:	681a      	ldr	r2, [r3, #0]
 8012514:	438a      	bics	r2, r1
 8012516:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 8012518:	0020      	movs	r0, r4
 801251a:	f7ff ffe9 	bl	80124f0 <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 801251e:	2300      	movs	r3, #0
 8012520:	2239      	movs	r2, #57	; 0x39
 8012522:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 8012524:	3a01      	subs	r2, #1
}
 8012526:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8012528:	54a3      	strb	r3, [r4, r2]
}
 801252a:	bd10      	pop	{r4, pc}
 801252c:	00001111 	.word	0x00001111
 8012530:	00000444 	.word	0x00000444

08012534 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8012534:	2239      	movs	r2, #57	; 0x39
 8012536:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8012538:	2101      	movs	r1, #1
{
 801253a:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 801253c:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 801253e:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8012540:	6823      	ldr	r3, [r4, #0]
 8012542:	430b      	orrs	r3, r1
 8012544:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 8012546:	5481      	strb	r1, [r0, r2]
}
 8012548:	2000      	movs	r0, #0
 801254a:	bd10      	pop	{r4, pc}

0801254c <HAL_TIM_OC_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 801254c:	2201      	movs	r2, #1
 801254e:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012550:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012552:	6a19      	ldr	r1, [r3, #32]
 8012554:	4391      	bics	r1, r2
 8012556:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8012558:	6a19      	ldr	r1, [r3, #32]
 801255a:	430a      	orrs	r2, r1
 801255c:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801255e:	4a0b      	ldr	r2, [pc, #44]	; (801258c <HAL_TIM_OC_Start+0x40>)
 8012560:	4293      	cmp	r3, r2
 8012562:	d008      	beq.n	8012576 <HAL_TIM_OC_Start+0x2a>
 8012564:	4a0a      	ldr	r2, [pc, #40]	; (8012590 <HAL_TIM_OC_Start+0x44>)
 8012566:	4293      	cmp	r3, r2
 8012568:	d005      	beq.n	8012576 <HAL_TIM_OC_Start+0x2a>
 801256a:	4a0a      	ldr	r2, [pc, #40]	; (8012594 <HAL_TIM_OC_Start+0x48>)
 801256c:	4293      	cmp	r3, r2
 801256e:	d002      	beq.n	8012576 <HAL_TIM_OC_Start+0x2a>
 8012570:	4a09      	ldr	r2, [pc, #36]	; (8012598 <HAL_TIM_OC_Start+0x4c>)
 8012572:	4293      	cmp	r3, r2
 8012574:	d104      	bne.n	8012580 <HAL_TIM_OC_Start+0x34>
    __HAL_TIM_MOE_ENABLE(htim);
 8012576:	2280      	movs	r2, #128	; 0x80
 8012578:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801257a:	0212      	lsls	r2, r2, #8
 801257c:	430a      	orrs	r2, r1
 801257e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8012580:	2101      	movs	r1, #1
 8012582:	681a      	ldr	r2, [r3, #0]
}
 8012584:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8012586:	430a      	orrs	r2, r1
 8012588:	601a      	str	r2, [r3, #0]
}
 801258a:	4770      	bx	lr
 801258c:	40012c00 	.word	0x40012c00
 8012590:	40014000 	.word	0x40014000
 8012594:	40014400 	.word	0x40014400
 8012598:	40014800 	.word	0x40014800

0801259c <HAL_TIM_PWM_MspInit>:
 801259c:	4770      	bx	lr
 801259e:	46c0      	nop			; (mov r8, r8)

080125a0 <HAL_TIM_PWM_MspDeInit>:
 80125a0:	4770      	bx	lr
 80125a2:	46c0      	nop			; (mov r8, r8)

080125a4 <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 80125a4:	2339      	movs	r3, #57	; 0x39
 80125a6:	2202      	movs	r2, #2
{
 80125a8:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 80125aa:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 80125ac:	6803      	ldr	r3, [r0, #0]
 80125ae:	4a0b      	ldr	r2, [pc, #44]	; (80125dc <HAL_TIM_PWM_DeInit+0x38>)
 80125b0:	6a19      	ldr	r1, [r3, #32]
{
 80125b2:	0004      	movs	r4, r0
  __HAL_TIM_DISABLE(htim);
 80125b4:	4211      	tst	r1, r2
 80125b6:	d107      	bne.n	80125c8 <HAL_TIM_PWM_DeInit+0x24>
 80125b8:	6a19      	ldr	r1, [r3, #32]
 80125ba:	4a09      	ldr	r2, [pc, #36]	; (80125e0 <HAL_TIM_PWM_DeInit+0x3c>)
 80125bc:	4211      	tst	r1, r2
 80125be:	d103      	bne.n	80125c8 <HAL_TIM_PWM_DeInit+0x24>
 80125c0:	2101      	movs	r1, #1
 80125c2:	681a      	ldr	r2, [r3, #0]
 80125c4:	438a      	bics	r2, r1
 80125c6:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 80125c8:	0020      	movs	r0, r4
 80125ca:	f7ff ffe9 	bl	80125a0 <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 80125ce:	2300      	movs	r3, #0
 80125d0:	2239      	movs	r2, #57	; 0x39
 80125d2:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 80125d4:	3a01      	subs	r2, #1
}
 80125d6:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80125d8:	54a3      	strb	r3, [r4, r2]
}
 80125da:	bd10      	pop	{r4, pc}
 80125dc:	00001111 	.word	0x00001111
 80125e0:	00000444 	.word	0x00000444

080125e4 <HAL_TIM_PWM_Start>:
 80125e4:	b510      	push	{r4, lr}
 80125e6:	f7ff ffb1 	bl	801254c <HAL_TIM_OC_Start>
 80125ea:	bd10      	pop	{r4, pc}

080125ec <HAL_TIM_PWM_Stop>:
{
 80125ec:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80125ee:	2401      	movs	r4, #1
 80125f0:	408c      	lsls	r4, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80125f2:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 80125f4:	6a1a      	ldr	r2, [r3, #32]
 80125f6:	43a2      	bics	r2, r4
 80125f8:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80125fa:	6a1a      	ldr	r2, [r3, #32]
 80125fc:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80125fe:	4a15      	ldr	r2, [pc, #84]	; (8012654 <HAL_TIM_PWM_Stop+0x68>)
 8012600:	4293      	cmp	r3, r2
 8012602:	d019      	beq.n	8012638 <HAL_TIM_PWM_Stop+0x4c>
 8012604:	4a14      	ldr	r2, [pc, #80]	; (8012658 <HAL_TIM_PWM_Stop+0x6c>)
 8012606:	4293      	cmp	r3, r2
 8012608:	d016      	beq.n	8012638 <HAL_TIM_PWM_Stop+0x4c>
 801260a:	4a14      	ldr	r2, [pc, #80]	; (801265c <HAL_TIM_PWM_Stop+0x70>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d013      	beq.n	8012638 <HAL_TIM_PWM_Stop+0x4c>
 8012610:	4a13      	ldr	r2, [pc, #76]	; (8012660 <HAL_TIM_PWM_Stop+0x74>)
 8012612:	4293      	cmp	r3, r2
 8012614:	d010      	beq.n	8012638 <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8012616:	6a19      	ldr	r1, [r3, #32]
 8012618:	4a12      	ldr	r2, [pc, #72]	; (8012664 <HAL_TIM_PWM_Stop+0x78>)
 801261a:	4211      	tst	r1, r2
 801261c:	d107      	bne.n	801262e <HAL_TIM_PWM_Stop+0x42>
 801261e:	6a19      	ldr	r1, [r3, #32]
 8012620:	4a11      	ldr	r2, [pc, #68]	; (8012668 <HAL_TIM_PWM_Stop+0x7c>)
 8012622:	4211      	tst	r1, r2
 8012624:	d103      	bne.n	801262e <HAL_TIM_PWM_Stop+0x42>
 8012626:	2101      	movs	r1, #1
 8012628:	681a      	ldr	r2, [r3, #0]
 801262a:	438a      	bics	r2, r1
 801262c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 801262e:	2339      	movs	r3, #57	; 0x39
 8012630:	2201      	movs	r2, #1
 8012632:	54c2      	strb	r2, [r0, r3]
}
 8012634:	2000      	movs	r0, #0
 8012636:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8012638:	6a19      	ldr	r1, [r3, #32]
 801263a:	4a0a      	ldr	r2, [pc, #40]	; (8012664 <HAL_TIM_PWM_Stop+0x78>)
 801263c:	4211      	tst	r1, r2
 801263e:	d1ea      	bne.n	8012616 <HAL_TIM_PWM_Stop+0x2a>
 8012640:	6a19      	ldr	r1, [r3, #32]
 8012642:	4a09      	ldr	r2, [pc, #36]	; (8012668 <HAL_TIM_PWM_Stop+0x7c>)
 8012644:	4211      	tst	r1, r2
 8012646:	d1e6      	bne.n	8012616 <HAL_TIM_PWM_Stop+0x2a>
 8012648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801264a:	4908      	ldr	r1, [pc, #32]	; (801266c <HAL_TIM_PWM_Stop+0x80>)
 801264c:	400a      	ands	r2, r1
 801264e:	645a      	str	r2, [r3, #68]	; 0x44
 8012650:	e7e1      	b.n	8012616 <HAL_TIM_PWM_Stop+0x2a>
 8012652:	46c0      	nop			; (mov r8, r8)
 8012654:	40012c00 	.word	0x40012c00
 8012658:	40014000 	.word	0x40014000
 801265c:	40014400 	.word	0x40014400
 8012660:	40014800 	.word	0x40014800
 8012664:	00001111 	.word	0x00001111
 8012668:	00000444 	.word	0x00000444
 801266c:	ffff7fff 	.word	0xffff7fff

08012670 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8012670:	2338      	movs	r3, #56	; 0x38
{
 8012672:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8012674:	5cc2      	ldrb	r2, [r0, r3]
 8012676:	2a01      	cmp	r2, #1
 8012678:	d067      	beq.n	801274a <HAL_TIM_ConfigClockSource+0xda>
 801267a:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 801267c:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 801267e:	54c4      	strb	r4, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8012680:	3301      	adds	r3, #1
 8012682:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8012684:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012686:	4d5a      	ldr	r5, [pc, #360]	; (80127f0 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr = htim->Instance->SMCR;
 8012688:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801268a:	402a      	ands	r2, r5
  htim->Instance->SMCR = tmpsmcr;
 801268c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 801268e:	680a      	ldr	r2, [r1, #0]
 8012690:	2a40      	cmp	r2, #64	; 0x40
 8012692:	d100      	bne.n	8012696 <HAL_TIM_ConfigClockSource+0x26>
 8012694:	e095      	b.n	80127c2 <HAL_TIM_ConfigClockSource+0x152>
 8012696:	d91d      	bls.n	80126d4 <HAL_TIM_ConfigClockSource+0x64>
 8012698:	2a70      	cmp	r2, #112	; 0x70
 801269a:	d100      	bne.n	801269e <HAL_TIM_ConfigClockSource+0x2e>
 801269c:	e081      	b.n	80127a2 <HAL_TIM_ConfigClockSource+0x132>
 801269e:	d92e      	bls.n	80126fe <HAL_TIM_ConfigClockSource+0x8e>
 80126a0:	2480      	movs	r4, #128	; 0x80
 80126a2:	0164      	lsls	r4, r4, #5
 80126a4:	42a2      	cmp	r2, r4
 80126a6:	d100      	bne.n	80126aa <HAL_TIM_ConfigClockSource+0x3a>
 80126a8:	e076      	b.n	8012798 <HAL_TIM_ConfigClockSource+0x128>
 80126aa:	2480      	movs	r4, #128	; 0x80
 80126ac:	01a4      	lsls	r4, r4, #6
 80126ae:	42a2      	cmp	r2, r4
 80126b0:	d11d      	bne.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
  tmpsmcr = TIMx->SMCR;
 80126b2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80126b4:	4c4f      	ldr	r4, [pc, #316]	; (80127f4 <HAL_TIM_ConfigClockSource+0x184>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80126b6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80126b8:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80126ba:	688a      	ldr	r2, [r1, #8]
 80126bc:	68c9      	ldr	r1, [r1, #12]
 80126be:	432a      	orrs	r2, r5
 80126c0:	0209      	lsls	r1, r1, #8
 80126c2:	430a      	orrs	r2, r1
 80126c4:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80126c6:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80126c8:	2280      	movs	r2, #128	; 0x80
 80126ca:	6899      	ldr	r1, [r3, #8]
 80126cc:	01d2      	lsls	r2, r2, #7
 80126ce:	430a      	orrs	r2, r1
 80126d0:	609a      	str	r2, [r3, #8]
    break;
 80126d2:	e00c      	b.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
  switch (sClockSourceConfig->ClockSource)
 80126d4:	2a10      	cmp	r2, #16
 80126d6:	d041      	beq.n	801275c <HAL_TIM_ConfigClockSource+0xec>
 80126d8:	d92e      	bls.n	8012738 <HAL_TIM_ConfigClockSource+0xc8>
 80126da:	2a20      	cmp	r2, #32
 80126dc:	d037      	beq.n	801274e <HAL_TIM_ConfigClockSource+0xde>
 80126de:	2a30      	cmp	r2, #48	; 0x30
 80126e0:	d105      	bne.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
   tmpsmcr &= ~TIM_SMCR_TS;
 80126e2:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80126e4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80126e6:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80126e8:	3939      	subs	r1, #57	; 0x39
 80126ea:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80126ec:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80126ee:	2339      	movs	r3, #57	; 0x39
 80126f0:	2201      	movs	r2, #1
 80126f2:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 80126f4:	2200      	movs	r2, #0
 80126f6:	3b01      	subs	r3, #1
 80126f8:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80126fa:	2000      	movs	r0, #0
}
 80126fc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80126fe:	2a50      	cmp	r2, #80	; 0x50
 8012700:	d033      	beq.n	801276a <HAL_TIM_ConfigClockSource+0xfa>
 8012702:	2a60      	cmp	r2, #96	; 0x60
 8012704:	d1f3      	bne.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012706:	2510      	movs	r5, #16
 8012708:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801270a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801270c:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 801270e:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012710:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012712:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012714:	4e38      	ldr	r6, [pc, #224]	; (80127f8 <HAL_TIM_ConfigClockSource+0x188>)
  tmpccmr1 |= (TIM_ICFilter << 12);
 8012716:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012718:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12);
 801271a:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801271c:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 801271e:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8012720:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012722:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012724:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4);
 8012726:	0112      	lsls	r2, r2, #4
 8012728:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 801272a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 801272c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 801272e:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012730:	3909      	subs	r1, #9
 8012732:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8012734:	609a      	str	r2, [r3, #8]
 8012736:	e7da      	b.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
  switch (sClockSourceConfig->ClockSource)
 8012738:	2a00      	cmp	r2, #0
 801273a:	d1d8      	bne.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
   tmpsmcr &= ~TIM_SMCR_TS;
 801273c:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 801273e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012740:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012742:	3969      	subs	r1, #105	; 0x69
 8012744:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8012746:	609a      	str	r2, [r3, #8]
 8012748:	e7d1      	b.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
  __HAL_LOCK(htim);
 801274a:	2002      	movs	r0, #2
 801274c:	e7d6      	b.n	80126fc <HAL_TIM_ConfigClockSource+0x8c>
   tmpsmcr &= ~TIM_SMCR_TS;
 801274e:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8012750:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012752:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012754:	3949      	subs	r1, #73	; 0x49
 8012756:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8012758:	609a      	str	r2, [r3, #8]
 801275a:	e7c8      	b.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
   tmpsmcr &= ~TIM_SMCR_TS;
 801275c:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 801275e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012760:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012762:	3959      	subs	r1, #89	; 0x59
 8012764:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8012766:	609a      	str	r2, [r3, #8]
 8012768:	e7c1      	b.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801276a:	684d      	ldr	r5, [r1, #4]
 801276c:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 801276e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012770:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8012772:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012774:	43a6      	bics	r6, r4
 8012776:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012778:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 801277a:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801277c:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 801277e:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012780:	240a      	movs	r4, #10
 8012782:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8012784:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8012786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012788:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 801278a:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 801278c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 801278e:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012790:	3919      	subs	r1, #25
 8012792:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8012794:	609a      	str	r2, [r3, #8]
 8012796:	e7aa      	b.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8012798:	2107      	movs	r1, #7
 801279a:	689a      	ldr	r2, [r3, #8]
 801279c:	438a      	bics	r2, r1
 801279e:	609a      	str	r2, [r3, #8]
    break;
 80127a0:	e7a5      	b.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
  tmpsmcr = TIMx->SMCR;
 80127a2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80127a4:	4c13      	ldr	r4, [pc, #76]	; (80127f4 <HAL_TIM_ConfigClockSource+0x184>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80127a6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80127a8:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80127aa:	688a      	ldr	r2, [r1, #8]
 80127ac:	68c9      	ldr	r1, [r1, #12]
 80127ae:	432a      	orrs	r2, r5
 80127b0:	0209      	lsls	r1, r1, #8
 80127b2:	430a      	orrs	r2, r1
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80127b4:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80127b6:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80127b8:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80127ba:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80127bc:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 80127be:	609a      	str	r2, [r3, #8]
    break;
 80127c0:	e795      	b.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80127c2:	684d      	ldr	r5, [r1, #4]
 80127c4:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80127c6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80127c8:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4);
 80127ca:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80127cc:	43a6      	bics	r6, r4
 80127ce:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80127d0:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80127d2:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80127d4:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 80127d6:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80127d8:	240a      	movs	r4, #10
 80127da:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80127dc:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80127de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80127e0:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 80127e2:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80127e4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80127e6:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80127e8:	3929      	subs	r1, #41	; 0x29
 80127ea:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80127ec:	609a      	str	r2, [r3, #8]
 80127ee:	e77e      	b.n	80126ee <HAL_TIM_ConfigClockSource+0x7e>
 80127f0:	ffff0088 	.word	0xffff0088
 80127f4:	ffff00ff 	.word	0xffff00ff
 80127f8:	ffff0fff 	.word	0xffff0fff

080127fc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80127fc:	4a22      	ldr	r2, [pc, #136]	; (8012888 <TIM_Base_SetConfig+0x8c>)
{
 80127fe:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 8012800:	6803      	ldr	r3, [r0, #0]
 8012802:	688d      	ldr	r5, [r1, #8]
 8012804:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012806:	4290      	cmp	r0, r2
 8012808:	d02c      	beq.n	8012864 <TIM_Base_SetConfig+0x68>
 801280a:	2280      	movs	r2, #128	; 0x80
 801280c:	05d2      	lsls	r2, r2, #23
 801280e:	4290      	cmp	r0, r2
 8012810:	d012      	beq.n	8012838 <TIM_Base_SetConfig+0x3c>
 8012812:	4a1e      	ldr	r2, [pc, #120]	; (801288c <TIM_Base_SetConfig+0x90>)
 8012814:	4290      	cmp	r0, r2
 8012816:	d00f      	beq.n	8012838 <TIM_Base_SetConfig+0x3c>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012818:	4a1d      	ldr	r2, [pc, #116]	; (8012890 <TIM_Base_SetConfig+0x94>)
 801281a:	4290      	cmp	r0, r2
 801281c:	d02e      	beq.n	801287c <TIM_Base_SetConfig+0x80>
 801281e:	4a1d      	ldr	r2, [pc, #116]	; (8012894 <TIM_Base_SetConfig+0x98>)
 8012820:	4290      	cmp	r0, r2
 8012822:	d023      	beq.n	801286c <TIM_Base_SetConfig+0x70>
 8012824:	4a1c      	ldr	r2, [pc, #112]	; (8012898 <TIM_Base_SetConfig+0x9c>)
 8012826:	4290      	cmp	r0, r2
 8012828:	d020      	beq.n	801286c <TIM_Base_SetConfig+0x70>
 801282a:	4a1c      	ldr	r2, [pc, #112]	; (801289c <TIM_Base_SetConfig+0xa0>)
 801282c:	4290      	cmp	r0, r2
 801282e:	d01d      	beq.n	801286c <TIM_Base_SetConfig+0x70>
  TIMx->CR1 = tmpcr1;
 8012830:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012832:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012834:	6284      	str	r4, [r0, #40]	; 0x28
 8012836:	e012      	b.n	801285e <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012838:	2270      	movs	r2, #112	; 0x70
 801283a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801283c:	684a      	ldr	r2, [r1, #4]
 801283e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012840:	4a17      	ldr	r2, [pc, #92]	; (80128a0 <TIM_Base_SetConfig+0xa4>)
 8012842:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012844:	68ca      	ldr	r2, [r1, #12]
 8012846:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012848:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801284a:	4b13      	ldr	r3, [pc, #76]	; (8012898 <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 801284c:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801284e:	6284      	str	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012850:	4298      	cmp	r0, r3
 8012852:	d002      	beq.n	801285a <TIM_Base_SetConfig+0x5e>
 8012854:	4b11      	ldr	r3, [pc, #68]	; (801289c <TIM_Base_SetConfig+0xa0>)
 8012856:	4298      	cmp	r0, r3
 8012858:	d101      	bne.n	801285e <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 801285a:	690b      	ldr	r3, [r1, #16]
 801285c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 801285e:	2301      	movs	r3, #1
 8012860:	6143      	str	r3, [r0, #20]
}
 8012862:	bd30      	pop	{r4, r5, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012864:	2270      	movs	r2, #112	; 0x70
 8012866:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012868:	684a      	ldr	r2, [r1, #4]
 801286a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 801286c:	4a0c      	ldr	r2, [pc, #48]	; (80128a0 <TIM_Base_SetConfig+0xa4>)
 801286e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012870:	68ca      	ldr	r2, [r1, #12]
 8012872:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012874:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012876:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012878:	6284      	str	r4, [r0, #40]	; 0x28
 801287a:	e7ee      	b.n	801285a <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 801287c:	4a08      	ldr	r2, [pc, #32]	; (80128a0 <TIM_Base_SetConfig+0xa4>)
 801287e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012880:	68ca      	ldr	r2, [r1, #12]
 8012882:	4313      	orrs	r3, r2
 8012884:	e7d4      	b.n	8012830 <TIM_Base_SetConfig+0x34>
 8012886:	46c0      	nop			; (mov r8, r8)
 8012888:	40012c00 	.word	0x40012c00
 801288c:	40000400 	.word	0x40000400
 8012890:	40002000 	.word	0x40002000
 8012894:	40014000 	.word	0x40014000
 8012898:	40014400 	.word	0x40014400
 801289c:	40014800 	.word	0x40014800
 80128a0:	fffffcff 	.word	0xfffffcff

080128a4 <HAL_TIM_Base_Init>:
{
 80128a4:	b570      	push	{r4, r5, r6, lr}
 80128a6:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80128a8:	d014      	beq.n	80128d4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80128aa:	2339      	movs	r3, #57	; 0x39
 80128ac:	5cc3      	ldrb	r3, [r0, r3]
 80128ae:	b2db      	uxtb	r3, r3
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d00a      	beq.n	80128ca <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 80128b4:	2302      	movs	r3, #2
 80128b6:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80128b8:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80128ba:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80128bc:	1d21      	adds	r1, r4, #4
 80128be:	f7ff ff9d 	bl	80127fc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80128c2:	2301      	movs	r3, #1
  return HAL_OK;
 80128c4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80128c6:	5563      	strb	r3, [r4, r5]
}
 80128c8:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80128ca:	2238      	movs	r2, #56	; 0x38
 80128cc:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 80128ce:	f7ff fe0d 	bl	80124ec <HAL_TIM_Base_MspInit>
 80128d2:	e7ef      	b.n	80128b4 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80128d4:	2001      	movs	r0, #1
 80128d6:	e7f7      	b.n	80128c8 <HAL_TIM_Base_Init+0x24>

080128d8 <HAL_TIM_PWM_Init>:
{
 80128d8:	b570      	push	{r4, r5, r6, lr}
 80128da:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80128dc:	d014      	beq.n	8012908 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80128de:	2339      	movs	r3, #57	; 0x39
 80128e0:	5cc3      	ldrb	r3, [r0, r3]
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d00a      	beq.n	80128fe <HAL_TIM_PWM_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 80128e8:	2302      	movs	r3, #2
 80128ea:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80128ec:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80128ee:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80128f0:	1d21      	adds	r1, r4, #4
 80128f2:	f7ff ff83 	bl	80127fc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80128f6:	2301      	movs	r3, #1
  return HAL_OK;
 80128f8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80128fa:	5563      	strb	r3, [r4, r5]
}
 80128fc:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80128fe:	2238      	movs	r2, #56	; 0x38
 8012900:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 8012902:	f7ff fe4b 	bl	801259c <HAL_TIM_PWM_MspInit>
 8012906:	e7ef      	b.n	80128e8 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8012908:	2001      	movs	r0, #1
 801290a:	e7f7      	b.n	80128fc <HAL_TIM_PWM_Init+0x24>

0801290c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801290c:	2210      	movs	r2, #16
 801290e:	6a03      	ldr	r3, [r0, #32]
{
 8012910:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012912:	4393      	bics	r3, r2
 8012914:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8012916:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012918:	4c16      	ldr	r4, [pc, #88]	; (8012974 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 801291a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 801291c:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801291e:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8012920:	680c      	ldr	r4, [r1, #0]
 8012922:	0224      	lsls	r4, r4, #8
 8012924:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8012926:	2420      	movs	r4, #32
 8012928:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4);
 801292a:	688c      	ldr	r4, [r1, #8]
 801292c:	0124      	lsls	r4, r4, #4
 801292e:	4322      	orrs	r2, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012930:	4c11      	ldr	r4, [pc, #68]	; (8012978 <TIM_OC2_SetConfig+0x6c>)
 8012932:	42a0      	cmp	r0, r4
 8012934:	d015      	beq.n	8012962 <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8012936:	4c11      	ldr	r4, [pc, #68]	; (801297c <TIM_OC2_SetConfig+0x70>)
 8012938:	42a0      	cmp	r0, r4
 801293a:	d005      	beq.n	8012948 <TIM_OC2_SetConfig+0x3c>
 801293c:	4c10      	ldr	r4, [pc, #64]	; (8012980 <TIM_OC2_SetConfig+0x74>)
 801293e:	42a0      	cmp	r0, r4
 8012940:	d002      	beq.n	8012948 <TIM_OC2_SetConfig+0x3c>
 8012942:	4c10      	ldr	r4, [pc, #64]	; (8012984 <TIM_OC2_SetConfig+0x78>)
 8012944:	42a0      	cmp	r0, r4
 8012946:	d106      	bne.n	8012956 <TIM_OC2_SetConfig+0x4a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012948:	4c0f      	ldr	r4, [pc, #60]	; (8012988 <TIM_OC2_SetConfig+0x7c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 801294a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801294c:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 801294e:	698b      	ldr	r3, [r1, #24]
 8012950:	4333      	orrs	r3, r6
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8012956:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8012958:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 801295a:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 801295c:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 801295e:	6202      	str	r2, [r0, #32]
}
 8012960:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8012962:	2480      	movs	r4, #128	; 0x80
 8012964:	43a2      	bics	r2, r4
 8012966:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8012968:	68ca      	ldr	r2, [r1, #12]
 801296a:	0112      	lsls	r2, r2, #4
 801296c:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 801296e:	2440      	movs	r4, #64	; 0x40
 8012970:	43a2      	bics	r2, r4
 8012972:	e7e9      	b.n	8012948 <TIM_OC2_SetConfig+0x3c>
 8012974:	ffff8cff 	.word	0xffff8cff
 8012978:	40012c00 	.word	0x40012c00
 801297c:	40014000 	.word	0x40014000
 8012980:	40014400 	.word	0x40014400
 8012984:	40014800 	.word	0x40014800
 8012988:	fffff3ff 	.word	0xfffff3ff

0801298c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 801298c:	2338      	movs	r3, #56	; 0x38
{
 801298e:	b570      	push	{r4, r5, r6, lr}
 8012990:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8012992:	5cc2      	ldrb	r2, [r0, r3]
{
 8012994:	0004      	movs	r4, r0
 8012996:	000e      	movs	r6, r1
  __HAL_LOCK(htim);
 8012998:	2a01      	cmp	r2, #1
 801299a:	d038      	beq.n	8012a0e <HAL_TIM_PWM_ConfigChannel+0x82>
 801299c:	2201      	movs	r2, #1
 801299e:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80129a0:	3301      	adds	r3, #1
 80129a2:	3201      	adds	r2, #1
 80129a4:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 80129a6:	2d04      	cmp	r5, #4
 80129a8:	d043      	beq.n	8012a32 <HAL_TIM_PWM_ConfigChannel+0xa6>
 80129aa:	d91d      	bls.n	80129e8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80129ac:	2d08      	cmp	r5, #8
 80129ae:	d030      	beq.n	8012a12 <HAL_TIM_PWM_ConfigChannel+0x86>
 80129b0:	2d0c      	cmp	r5, #12
 80129b2:	d111      	bne.n	80129d8 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80129b4:	6800      	ldr	r0, [r0, #0]
 80129b6:	f7ff fd5f 	bl	8012478 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80129ba:	2280      	movs	r2, #128	; 0x80
 80129bc:	6823      	ldr	r3, [r4, #0]
 80129be:	0112      	lsls	r2, r2, #4
 80129c0:	69d9      	ldr	r1, [r3, #28]
 80129c2:	430a      	orrs	r2, r1
 80129c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80129c6:	69da      	ldr	r2, [r3, #28]
 80129c8:	4923      	ldr	r1, [pc, #140]	; (8012a58 <HAL_TIM_PWM_ConfigChannel+0xcc>)
 80129ca:	400a      	ands	r2, r1
 80129cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80129ce:	6932      	ldr	r2, [r6, #16]
 80129d0:	69d9      	ldr	r1, [r3, #28]
 80129d2:	0212      	lsls	r2, r2, #8
 80129d4:	430a      	orrs	r2, r1
 80129d6:	61da      	str	r2, [r3, #28]
  htim->State = HAL_TIM_STATE_READY;
 80129d8:	2339      	movs	r3, #57	; 0x39
 80129da:	2201      	movs	r2, #1
 80129dc:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80129de:	2200      	movs	r2, #0
  return HAL_OK;
 80129e0:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80129e2:	3b01      	subs	r3, #1
 80129e4:	54e2      	strb	r2, [r4, r3]
}
 80129e6:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80129e8:	2d00      	cmp	r5, #0
 80129ea:	d1f5      	bne.n	80129d8 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80129ec:	6800      	ldr	r0, [r0, #0]
 80129ee:	f7ff fcc7 	bl	8012380 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80129f2:	2108      	movs	r1, #8
 80129f4:	6823      	ldr	r3, [r4, #0]
 80129f6:	699a      	ldr	r2, [r3, #24]
 80129f8:	430a      	orrs	r2, r1
 80129fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80129fc:	699a      	ldr	r2, [r3, #24]
 80129fe:	3904      	subs	r1, #4
 8012a00:	438a      	bics	r2, r1
 8012a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012a04:	699a      	ldr	r2, [r3, #24]
 8012a06:	6931      	ldr	r1, [r6, #16]
 8012a08:	430a      	orrs	r2, r1
 8012a0a:	619a      	str	r2, [r3, #24]
    break;
 8012a0c:	e7e4      	b.n	80129d8 <HAL_TIM_PWM_ConfigChannel+0x4c>
  __HAL_LOCK(htim);
 8012a0e:	2002      	movs	r0, #2
 8012a10:	e7e9      	b.n	80129e6 <HAL_TIM_PWM_ConfigChannel+0x5a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012a12:	6800      	ldr	r0, [r0, #0]
 8012a14:	f7ff fcec 	bl	80123f0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012a18:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012a1a:	6823      	ldr	r3, [r4, #0]
 8012a1c:	69da      	ldr	r2, [r3, #28]
 8012a1e:	4315      	orrs	r5, r2
 8012a20:	61dd      	str	r5, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012a22:	69da      	ldr	r2, [r3, #28]
 8012a24:	438a      	bics	r2, r1
 8012a26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012a28:	69da      	ldr	r2, [r3, #28]
 8012a2a:	6931      	ldr	r1, [r6, #16]
 8012a2c:	430a      	orrs	r2, r1
 8012a2e:	61da      	str	r2, [r3, #28]
    break;
 8012a30:	e7d2      	b.n	80129d8 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012a32:	6800      	ldr	r0, [r0, #0]
 8012a34:	f7ff ff6a 	bl	801290c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012a38:	2280      	movs	r2, #128	; 0x80
 8012a3a:	6823      	ldr	r3, [r4, #0]
 8012a3c:	0112      	lsls	r2, r2, #4
 8012a3e:	6999      	ldr	r1, [r3, #24]
 8012a40:	430a      	orrs	r2, r1
 8012a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012a44:	699a      	ldr	r2, [r3, #24]
 8012a46:	4904      	ldr	r1, [pc, #16]	; (8012a58 <HAL_TIM_PWM_ConfigChannel+0xcc>)
 8012a48:	400a      	ands	r2, r1
 8012a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8012a4c:	6932      	ldr	r2, [r6, #16]
 8012a4e:	6999      	ldr	r1, [r3, #24]
 8012a50:	0212      	lsls	r2, r2, #8
 8012a52:	430a      	orrs	r2, r1
 8012a54:	619a      	str	r2, [r3, #24]
    break;
 8012a56:	e7bf      	b.n	80129d8 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8012a58:	fffffbff 	.word	0xfffffbff

08012a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012a5c:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012a5e:	2438      	movs	r4, #56	; 0x38
 8012a60:	5d03      	ldrb	r3, [r0, r4]
 8012a62:	2b01      	cmp	r3, #1
 8012a64:	d019      	beq.n	8012a9a <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8012a66:	2539      	movs	r5, #57	; 0x39
 8012a68:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012a6a:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8012a6c:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012a6e:	6803      	ldr	r3, [r0, #0]
 8012a70:	685a      	ldr	r2, [r3, #4]
 8012a72:	43b2      	bics	r2, r6
 8012a74:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012a76:	685a      	ldr	r2, [r3, #4]
 8012a78:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012a7a:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012a7c:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012a7e:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012a80:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012a82:	689a      	ldr	r2, [r3, #8]
 8012a84:	43b2      	bics	r2, r6
 8012a86:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012a88:	689a      	ldr	r2, [r3, #8]
 8012a8a:	430a      	orrs	r2, r1
 8012a8c:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012a8e:	2301      	movs	r3, #1
 8012a90:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 8012a92:	2300      	movs	r3, #0
 8012a94:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 8012a96:	2000      	movs	r0, #0
}
 8012a98:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8012a9a:	2002      	movs	r0, #2
 8012a9c:	e7fc      	b.n	8012a98 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8012a9e:	46c0      	nop			; (mov r8, r8)

08012aa0 <HAL_UART_MspDeInit>:
 8012aa0:	4770      	bx	lr
 8012aa2:	46c0      	nop			; (mov r8, r8)

08012aa4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8012aa4:	b570      	push	{r4, r5, r6, lr}
 8012aa6:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8012aa8:	2001      	movs	r0, #1
  if(huart == NULL)
 8012aaa:	2c00      	cmp	r4, #0
 8012aac:	d012      	beq.n	8012ad4 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 8012aae:	2669      	movs	r6, #105	; 0x69
 8012ab0:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0;
 8012ab2:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8012ab4:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8012ab6:	6823      	ldr	r3, [r4, #0]
 8012ab8:	681a      	ldr	r2, [r3, #0]
 8012aba:	4382      	bics	r2, r0
 8012abc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
  huart->Instance->CR3 = 0x0;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8012abe:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0;
 8012ac0:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012ac2:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012ac4:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012ac6:	f7ff ffeb 	bl	8012aa0 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8012aca:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 8012acc:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ace:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012ad0:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012ad2:	54e5      	strb	r5, [r4, r3]
}
 8012ad4:	bd70      	pop	{r4, r5, r6, pc}
 8012ad6:	46c0      	nop			; (mov r8, r8)

08012ad8 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012ad8:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012ada:	2069      	movs	r0, #105	; 0x69
{
 8012adc:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012ade:	5c1c      	ldrb	r4, [r3, r0]
 8012ae0:	2c01      	cmp	r4, #1
 8012ae2:	d003      	beq.n	8012aec <HAL_UART_Transmit_IT+0x14>
 8012ae4:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012ae6:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012ae8:	2c22      	cmp	r4, #34	; 0x22
 8012aea:	d122      	bne.n	8012b32 <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 8012aec:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012aee:	2900      	cmp	r1, #0
 8012af0:	d01f      	beq.n	8012b32 <HAL_UART_Transmit_IT+0x5a>
 8012af2:	2a00      	cmp	r2, #0
 8012af4:	d01d      	beq.n	8012b32 <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 8012af6:	2468      	movs	r4, #104	; 0x68
 8012af8:	5d1d      	ldrb	r5, [r3, r4]
 8012afa:	2d01      	cmp	r5, #1
 8012afc:	d01d      	beq.n	8012b3a <HAL_UART_Transmit_IT+0x62>
 8012afe:	5518      	strb	r0, [r3, r4]
    huart->pTxBuffPtr = pData;
 8012b00:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012b02:	2150      	movs	r1, #80	; 0x50
 8012b04:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8012b06:	3102      	adds	r1, #2
 8012b08:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012b0e:	3269      	adds	r2, #105	; 0x69
 8012b10:	5c99      	ldrb	r1, [r3, r2]
 8012b12:	2922      	cmp	r1, #34	; 0x22
 8012b14:	d00e      	beq.n	8012b34 <HAL_UART_Transmit_IT+0x5c>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012b16:	2112      	movs	r1, #18
 8012b18:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012b1a:	2001      	movs	r0, #1
 8012b1c:	681a      	ldr	r2, [r3, #0]
 8012b1e:	6891      	ldr	r1, [r2, #8]
 8012b20:	4301      	orrs	r1, r0
 8012b22:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8012b24:	2000      	movs	r0, #0
 8012b26:	2168      	movs	r1, #104	; 0x68
 8012b28:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012b2a:	6813      	ldr	r3, [r2, #0]
 8012b2c:	3118      	adds	r1, #24
 8012b2e:	430b      	orrs	r3, r1
 8012b30:	6013      	str	r3, [r2, #0]
  }
}
 8012b32:	bd30      	pop	{r4, r5, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012b34:	3110      	adds	r1, #16
 8012b36:	5499      	strb	r1, [r3, r2]
 8012b38:	e7ef      	b.n	8012b1a <HAL_UART_Transmit_IT+0x42>
    return HAL_BUSY;
 8012b3a:	2002      	movs	r0, #2
 8012b3c:	e7f9      	b.n	8012b32 <HAL_UART_Transmit_IT+0x5a>
 8012b3e:	46c0      	nop			; (mov r8, r8)

08012b40 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012b40:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012b42:	2069      	movs	r0, #105	; 0x69
{
 8012b44:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012b46:	5c1c      	ldrb	r4, [r3, r0]
 8012b48:	2c01      	cmp	r4, #1
 8012b4a:	d003      	beq.n	8012b54 <HAL_UART_Receive_IT+0x14>
 8012b4c:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012b4e:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012b50:	2c12      	cmp	r4, #18
 8012b52:	d134      	bne.n	8012bbe <HAL_UART_Receive_IT+0x7e>
      return HAL_ERROR;
 8012b54:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012b56:	2900      	cmp	r1, #0
 8012b58:	d031      	beq.n	8012bbe <HAL_UART_Receive_IT+0x7e>
 8012b5a:	2a00      	cmp	r2, #0
 8012b5c:	d02f      	beq.n	8012bbe <HAL_UART_Receive_IT+0x7e>
    __HAL_LOCK(huart);
 8012b5e:	2468      	movs	r4, #104	; 0x68
 8012b60:	5d1d      	ldrb	r5, [r3, r4]
 8012b62:	2d01      	cmp	r5, #1
 8012b64:	d041      	beq.n	8012bea <HAL_UART_Receive_IT+0xaa>
 8012b66:	5518      	strb	r0, [r3, r4]
    huart->pRxBuffPtr = pData;
 8012b68:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8012b6a:	2158      	movs	r1, #88	; 0x58
 8012b6c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8012b6e:	3102      	adds	r1, #2
 8012b70:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 8012b72:	2180      	movs	r1, #128	; 0x80
 8012b74:	689a      	ldr	r2, [r3, #8]
 8012b76:	0149      	lsls	r1, r1, #5
 8012b78:	428a      	cmp	r2, r1
 8012b7a:	d021      	beq.n	8012bc0 <HAL_UART_Receive_IT+0x80>
 8012b7c:	2a00      	cmp	r2, #0
 8012b7e:	d129      	bne.n	8012bd4 <HAL_UART_Receive_IT+0x94>
 8012b80:	691a      	ldr	r2, [r3, #16]
 8012b82:	2a00      	cmp	r2, #0
 8012b84:	d133      	bne.n	8012bee <HAL_UART_Receive_IT+0xae>
 8012b86:	225c      	movs	r2, #92	; 0x5c
 8012b88:	21ff      	movs	r1, #255	; 0xff
 8012b8a:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012b90:	3269      	adds	r2, #105	; 0x69
 8012b92:	5c99      	ldrb	r1, [r3, r2]
 8012b94:	2912      	cmp	r1, #18
 8012b96:	d01a      	beq.n	8012bce <HAL_UART_Receive_IT+0x8e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012b98:	2122      	movs	r1, #34	; 0x22
 8012b9a:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012b9c:	2180      	movs	r1, #128	; 0x80
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	0049      	lsls	r1, r1, #1
 8012ba2:	6810      	ldr	r0, [r2, #0]
 8012ba4:	4301      	orrs	r1, r0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012ba6:	2001      	movs	r0, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012ba8:	6011      	str	r1, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012baa:	6891      	ldr	r1, [r2, #8]
 8012bac:	4301      	orrs	r1, r0
 8012bae:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8012bb0:	2000      	movs	r0, #0
 8012bb2:	2168      	movs	r1, #104	; 0x68
 8012bb4:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012bb6:	6813      	ldr	r3, [r2, #0]
 8012bb8:	3948      	subs	r1, #72	; 0x48
 8012bba:	430b      	orrs	r3, r1
 8012bbc:	6013      	str	r3, [r2, #0]
  }
}
 8012bbe:	bd30      	pop	{r4, r5, pc}
    UART_MASK_COMPUTATION(huart);
 8012bc0:	691a      	ldr	r2, [r3, #16]
 8012bc2:	2a00      	cmp	r2, #0
 8012bc4:	d1df      	bne.n	8012b86 <HAL_UART_Receive_IT+0x46>
 8012bc6:	490c      	ldr	r1, [pc, #48]	; (8012bf8 <HAL_UART_Receive_IT+0xb8>)
 8012bc8:	325c      	adds	r2, #92	; 0x5c
 8012bca:	5299      	strh	r1, [r3, r2]
 8012bcc:	e7de      	b.n	8012b8c <HAL_UART_Receive_IT+0x4c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012bce:	3120      	adds	r1, #32
 8012bd0:	5499      	strb	r1, [r3, r2]
 8012bd2:	e7e3      	b.n	8012b9c <HAL_UART_Receive_IT+0x5c>
    UART_MASK_COMPUTATION(huart);
 8012bd4:	2180      	movs	r1, #128	; 0x80
 8012bd6:	0549      	lsls	r1, r1, #21
 8012bd8:	428a      	cmp	r2, r1
 8012bda:	d1d7      	bne.n	8012b8c <HAL_UART_Receive_IT+0x4c>
 8012bdc:	691a      	ldr	r2, [r3, #16]
 8012bde:	2a00      	cmp	r2, #0
 8012be0:	d005      	beq.n	8012bee <HAL_UART_Receive_IT+0xae>
 8012be2:	225c      	movs	r2, #92	; 0x5c
 8012be4:	213f      	movs	r1, #63	; 0x3f
 8012be6:	5299      	strh	r1, [r3, r2]
 8012be8:	e7d0      	b.n	8012b8c <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 8012bea:	2002      	movs	r0, #2
 8012bec:	e7e7      	b.n	8012bbe <HAL_UART_Receive_IT+0x7e>
    UART_MASK_COMPUTATION(huart);
 8012bee:	225c      	movs	r2, #92	; 0x5c
 8012bf0:	217f      	movs	r1, #127	; 0x7f
 8012bf2:	5299      	strh	r1, [r3, r2]
 8012bf4:	e7ca      	b.n	8012b8c <HAL_UART_Receive_IT+0x4c>
 8012bf6:	46c0      	nop			; (mov r8, r8)
 8012bf8:	000001ff 	.word	0x000001ff

08012bfc <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012bfc:	b570      	push	{r4, r5, r6, lr}
 8012bfe:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012c00:	2069      	movs	r0, #105	; 0x69
 8012c02:	5c25      	ldrb	r5, [r4, r0]
 8012c04:	2d01      	cmp	r5, #1
 8012c06:	d003      	beq.n	8012c10 <HAL_UART_Receive_DMA+0x14>
 8012c08:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012c0a:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012c0c:	2b12      	cmp	r3, #18
 8012c0e:	d12b      	bne.n	8012c68 <HAL_UART_Receive_DMA+0x6c>
      return HAL_ERROR;
 8012c10:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012c12:	2900      	cmp	r1, #0
 8012c14:	d028      	beq.n	8012c68 <HAL_UART_Receive_DMA+0x6c>
 8012c16:	2a00      	cmp	r2, #0
 8012c18:	d026      	beq.n	8012c68 <HAL_UART_Receive_DMA+0x6c>
    __HAL_LOCK(huart);
 8012c1a:	2368      	movs	r3, #104	; 0x68
 8012c1c:	5ce5      	ldrb	r5, [r4, r3]
 8012c1e:	2d01      	cmp	r5, #1
 8012c20:	d026      	beq.n	8012c70 <HAL_UART_Receive_DMA+0x74>
 8012c22:	54e0      	strb	r0, [r4, r3]
    huart->RxXferSize = Size;
 8012c24:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 8012c26:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8012c28:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012c2e:	3369      	adds	r3, #105	; 0x69
 8012c30:	5ce0      	ldrb	r0, [r4, r3]
 8012c32:	2812      	cmp	r0, #18
 8012c34:	d019      	beq.n	8012c6a <HAL_UART_Receive_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012c36:	2022      	movs	r0, #34	; 0x22
 8012c38:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012c3a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012c3c:	4b0d      	ldr	r3, [pc, #52]	; (8012c74 <HAL_UART_Receive_DMA+0x78>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012c3e:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012c40:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012c42:	4b0d      	ldr	r3, [pc, #52]	; (8012c78 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012c44:	3524      	adds	r5, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012c46:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012c48:	4b0c      	ldr	r3, [pc, #48]	; (8012c7c <HAL_UART_Receive_DMA+0x80>)
 8012c4a:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012c4c:	0013      	movs	r3, r2
 8012c4e:	000a      	movs	r2, r1
 8012c50:	0029      	movs	r1, r5
 8012c52:	f7fd fce9 	bl	8010628 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012c56:	2140      	movs	r1, #64	; 0x40
 8012c58:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8012c5a:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012c5c:	6893      	ldr	r3, [r2, #8]
 8012c5e:	430b      	orrs	r3, r1
 8012c60:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8012c62:	2368      	movs	r3, #104	; 0x68
 8012c64:	2200      	movs	r2, #0
 8012c66:	54e2      	strb	r2, [r4, r3]
  }
}
 8012c68:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012c6a:	3020      	adds	r0, #32
 8012c6c:	54e0      	strb	r0, [r4, r3]
 8012c6e:	e7e4      	b.n	8012c3a <HAL_UART_Receive_DMA+0x3e>
    return HAL_BUSY;
 8012c70:	2002      	movs	r0, #2
 8012c72:	e7f9      	b.n	8012c68 <HAL_UART_Receive_DMA+0x6c>
 8012c74:	08012c81 	.word	0x08012c81
 8012c78:	08012cbd 	.word	0x08012cbd
 8012c7c:	08012cc9 	.word	0x08012cc9

08012c80 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012c80:	6803      	ldr	r3, [r0, #0]
{
 8012c82:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012c84:	6819      	ldr	r1, [r3, #0]
 8012c86:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012c88:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012c8a:	400b      	ands	r3, r1
 8012c8c:	d10c      	bne.n	8012ca8 <UART_DMAReceiveCplt+0x28>
  {
    huart->RxXferCount = 0;
 8012c8e:	215a      	movs	r1, #90	; 0x5a

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012c90:	2040      	movs	r0, #64	; 0x40
    huart->RxXferCount = 0;
 8012c92:	5253      	strh	r3, [r2, r1]
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012c94:	6811      	ldr	r1, [r2, #0]
 8012c96:	688b      	ldr	r3, [r1, #8]
 8012c98:	4383      	bics	r3, r0
 8012c9a:	608b      	str	r3, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012c9c:	2369      	movs	r3, #105	; 0x69
 8012c9e:	5cd1      	ldrb	r1, [r2, r3]
 8012ca0:	2932      	cmp	r1, #50	; 0x32
 8012ca2:	d005      	beq.n	8012cb0 <UART_DMAReceiveCplt+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012ca4:	2101      	movs	r1, #1
 8012ca6:	54d1      	strb	r1, [r2, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012ca8:	0010      	movs	r0, r2
 8012caa:	f7fa fb0d 	bl	800d2c8 <HAL_UART_RxCpltCallback>
}
 8012cae:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012cb0:	3920      	subs	r1, #32
 8012cb2:	54d1      	strb	r1, [r2, r3]
 8012cb4:	e7f8      	b.n	8012ca8 <UART_DMAReceiveCplt+0x28>
 8012cb6:	46c0      	nop			; (mov r8, r8)

08012cb8 <HAL_UART_RxHalfCpltCallback>:
 8012cb8:	4770      	bx	lr
 8012cba:	46c0      	nop			; (mov r8, r8)

08012cbc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012cbc:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8012cbe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012cc0:	f7ff fffa 	bl	8012cb8 <HAL_UART_RxHalfCpltCallback>
}
 8012cc4:	bd10      	pop	{r4, pc}
 8012cc6:	46c0      	nop			; (mov r8, r8)

08012cc8 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012ccc:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8012cce:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 8012cd0:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012cd2:	3a08      	subs	r2, #8
 8012cd4:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012cd6:	3369      	adds	r3, #105	; 0x69
 8012cd8:	3a51      	subs	r2, #81	; 0x51
 8012cda:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012cdc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012cde:	320f      	adds	r2, #15
 8012ce0:	4313      	orrs	r3, r2
 8012ce2:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012ce4:	f7fa facc 	bl	800d280 <HAL_UART_ErrorCallback>
}
 8012ce8:	bd10      	pop	{r4, pc}
 8012cea:	46c0      	nop			; (mov r8, r8)

08012cec <UART_SetConfig>:
{
 8012cec:	b570      	push	{r4, r5, r6, lr}
 8012cee:	0005      	movs	r5, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012cf0:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012cf2:	69c1      	ldr	r1, [r0, #28]
 8012cf4:	6883      	ldr	r3, [r0, #8]
 8012cf6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012cf8:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012cfa:	4303      	orrs	r3, r0
 8012cfc:	6968      	ldr	r0, [r5, #20]
 8012cfe:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012d00:	4861      	ldr	r0, [pc, #388]	; (8012e88 <UART_SetConfig+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012d02:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012d04:	4002      	ands	r2, r0
 8012d06:	4313      	orrs	r3, r2
 8012d08:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012d0a:	6863      	ldr	r3, [r4, #4]
 8012d0c:	4a5f      	ldr	r2, [pc, #380]	; (8012e8c <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012d0e:	6a28      	ldr	r0, [r5, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012d10:	4013      	ands	r3, r2
 8012d12:	68ea      	ldr	r2, [r5, #12]
 8012d14:	4313      	orrs	r3, r2
 8012d16:	6063      	str	r3, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012d18:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012d1a:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012d1c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012d1e:	485c      	ldr	r0, [pc, #368]	; (8012e90 <UART_SetConfig+0x1a4>)
 8012d20:	4002      	ands	r2, r0
 8012d22:	4313      	orrs	r3, r2
 8012d24:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012d26:	4b5b      	ldr	r3, [pc, #364]	; (8012e94 <UART_SetConfig+0x1a8>)
 8012d28:	429c      	cmp	r4, r3
 8012d2a:	d044      	beq.n	8012db6 <UART_SetConfig+0xca>
 8012d2c:	4b5a      	ldr	r3, [pc, #360]	; (8012e98 <UART_SetConfig+0x1ac>)
 8012d2e:	429c      	cmp	r4, r3
 8012d30:	d018      	beq.n	8012d64 <UART_SetConfig+0x78>
 8012d32:	4b5a      	ldr	r3, [pc, #360]	; (8012e9c <UART_SetConfig+0x1b0>)
 8012d34:	429c      	cmp	r4, r3
 8012d36:	d100      	bne.n	8012d3a <UART_SetConfig+0x4e>
 8012d38:	e085      	b.n	8012e46 <UART_SetConfig+0x15a>
 8012d3a:	4b59      	ldr	r3, [pc, #356]	; (8012ea0 <UART_SetConfig+0x1b4>)
 8012d3c:	429c      	cmp	r4, r3
 8012d3e:	d031      	beq.n	8012da4 <UART_SetConfig+0xb8>
 8012d40:	4b58      	ldr	r3, [pc, #352]	; (8012ea4 <UART_SetConfig+0x1b8>)
 8012d42:	429c      	cmp	r4, r3
 8012d44:	d02e      	beq.n	8012da4 <UART_SetConfig+0xb8>
 8012d46:	4b58      	ldr	r3, [pc, #352]	; (8012ea8 <UART_SetConfig+0x1bc>)
 8012d48:	429c      	cmp	r4, r3
 8012d4a:	d02b      	beq.n	8012da4 <UART_SetConfig+0xb8>
 8012d4c:	4b57      	ldr	r3, [pc, #348]	; (8012eac <UART_SetConfig+0x1c0>)
 8012d4e:	429c      	cmp	r4, r3
 8012d50:	d028      	beq.n	8012da4 <UART_SetConfig+0xb8>
 8012d52:	4b57      	ldr	r3, [pc, #348]	; (8012eb0 <UART_SetConfig+0x1c4>)
 8012d54:	429c      	cmp	r4, r3
 8012d56:	d025      	beq.n	8012da4 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012d58:	2380      	movs	r3, #128	; 0x80
 8012d5a:	021b      	lsls	r3, r3, #8
 8012d5c:	4299      	cmp	r1, r3
 8012d5e:	d050      	beq.n	8012e02 <UART_SetConfig+0x116>
        ret = HAL_ERROR;
 8012d60:	2001      	movs	r0, #1
 8012d62:	e01c      	b.n	8012d9e <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012d64:	20c0      	movs	r0, #192	; 0xc0
 8012d66:	2280      	movs	r2, #128	; 0x80
 8012d68:	4b52      	ldr	r3, [pc, #328]	; (8012eb4 <UART_SetConfig+0x1c8>)
 8012d6a:	0280      	lsls	r0, r0, #10
 8012d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d6e:	0252      	lsls	r2, r2, #9
 8012d70:	4003      	ands	r3, r0
 8012d72:	4293      	cmp	r3, r2
 8012d74:	d049      	beq.n	8012e0a <UART_SetConfig+0x11e>
 8012d76:	d913      	bls.n	8012da0 <UART_SetConfig+0xb4>
 8012d78:	2280      	movs	r2, #128	; 0x80
 8012d7a:	0292      	lsls	r2, r2, #10
 8012d7c:	4293      	cmp	r3, r2
 8012d7e:	d100      	bne.n	8012d82 <UART_SetConfig+0x96>
 8012d80:	e070      	b.n	8012e64 <UART_SetConfig+0x178>
 8012d82:	4283      	cmp	r3, r0
 8012d84:	d1e8      	bne.n	8012d58 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012d86:	2380      	movs	r3, #128	; 0x80
 8012d88:	021b      	lsls	r3, r3, #8
 8012d8a:	4299      	cmp	r1, r3
 8012d8c:	d056      	beq.n	8012e3c <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012d8e:	6869      	ldr	r1, [r5, #4]
 8012d90:	4849      	ldr	r0, [pc, #292]	; (8012eb8 <UART_SetConfig+0x1cc>)
 8012d92:	f7ed f9dd 	bl	8000150 <__udivsi3>
 8012d96:	0400      	lsls	r0, r0, #16
 8012d98:	0c00      	lsrs	r0, r0, #16
 8012d9a:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012d9c:	2000      	movs	r0, #0
}
 8012d9e:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1d9      	bne.n	8012d58 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012da4:	2380      	movs	r3, #128	; 0x80
 8012da6:	021b      	lsls	r3, r3, #8
 8012da8:	4299      	cmp	r1, r3
 8012daa:	d060      	beq.n	8012e6e <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012dac:	f7ff f83c 	bl	8011e28 <HAL_RCC_GetPCLK1Freq>
 8012db0:	682c      	ldr	r4, [r5, #0]
 8012db2:	6869      	ldr	r1, [r5, #4]
 8012db4:	e7ed      	b.n	8012d92 <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012db6:	4b3f      	ldr	r3, [pc, #252]	; (8012eb4 <UART_SetConfig+0x1c8>)
 8012db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012dba:	2303      	movs	r3, #3
 8012dbc:	4013      	ands	r3, r2
 8012dbe:	4a3f      	ldr	r2, [pc, #252]	; (8012ebc <UART_SetConfig+0x1d0>)
 8012dc0:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012dc2:	2280      	movs	r2, #128	; 0x80
 8012dc4:	0212      	lsls	r2, r2, #8
 8012dc6:	4291      	cmp	r1, r2
 8012dc8:	d00e      	beq.n	8012de8 <UART_SetConfig+0xfc>
    switch (clocksource)
 8012dca:	2b02      	cmp	r3, #2
 8012dcc:	d0df      	beq.n	8012d8e <UART_SetConfig+0xa2>
 8012dce:	d956      	bls.n	8012e7e <UART_SetConfig+0x192>
 8012dd0:	2b04      	cmp	r3, #4
 8012dd2:	d01e      	beq.n	8012e12 <UART_SetConfig+0x126>
 8012dd4:	2b08      	cmp	r3, #8
 8012dd6:	d1c3      	bne.n	8012d60 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012dd8:	2080      	movs	r0, #128	; 0x80
 8012dda:	6869      	ldr	r1, [r5, #4]
 8012ddc:	0200      	lsls	r0, r0, #8
 8012dde:	f7ed f9b7 	bl	8000150 <__udivsi3>
 8012de2:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012de4:	2000      	movs	r0, #0
        break;
 8012de6:	e7da      	b.n	8012d9e <UART_SetConfig+0xb2>
    switch (clocksource)
 8012de8:	2b02      	cmp	r3, #2
 8012dea:	d027      	beq.n	8012e3c <UART_SetConfig+0x150>
 8012dec:	d907      	bls.n	8012dfe <UART_SetConfig+0x112>
 8012dee:	2b04      	cmp	r3, #4
 8012df0:	d014      	beq.n	8012e1c <UART_SetConfig+0x130>
 8012df2:	2b08      	cmp	r3, #8
 8012df4:	d105      	bne.n	8012e02 <UART_SetConfig+0x116>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012df6:	2080      	movs	r0, #128	; 0x80
 8012df8:	6869      	ldr	r1, [r5, #4]
 8012dfa:	0240      	lsls	r0, r0, #9
 8012dfc:	e020      	b.n	8012e40 <UART_SetConfig+0x154>
    switch (clocksource)
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d035      	beq.n	8012e6e <UART_SetConfig+0x182>
 8012e02:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 8012e04:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8012e06:	60e3      	str	r3, [r4, #12]
 8012e08:	e7c9      	b.n	8012d9e <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012e0a:	2380      	movs	r3, #128	; 0x80
 8012e0c:	021b      	lsls	r3, r3, #8
 8012e0e:	4299      	cmp	r1, r3
 8012e10:	d004      	beq.n	8012e1c <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012e12:	f7fe ffaf 	bl	8011d74 <HAL_RCC_GetSysClockFreq>
 8012e16:	682c      	ldr	r4, [r5, #0]
 8012e18:	6869      	ldr	r1, [r5, #4]
 8012e1a:	e7ba      	b.n	8012d92 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012e1c:	f7fe ffaa 	bl	8011d74 <HAL_RCC_GetSysClockFreq>
 8012e20:	6869      	ldr	r1, [r5, #4]
 8012e22:	0040      	lsls	r0, r0, #1
 8012e24:	f7ed f994 	bl	8000150 <__udivsi3>
 8012e28:	682c      	ldr	r4, [r5, #0]
 8012e2a:	220f      	movs	r2, #15
 8012e2c:	0703      	lsls	r3, r0, #28
 8012e2e:	0f5b      	lsrs	r3, r3, #29
 8012e30:	4390      	bics	r0, r2
 8012e32:	4303      	orrs	r3, r0
 8012e34:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8012e36:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8012e38:	60e3      	str	r3, [r4, #12]
 8012e3a:	e7b0      	b.n	8012d9e <UART_SetConfig+0xb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012e3c:	6869      	ldr	r1, [r5, #4]
 8012e3e:	4820      	ldr	r0, [pc, #128]	; (8012ec0 <UART_SetConfig+0x1d4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012e40:	f7ed f986 	bl	8000150 <__udivsi3>
 8012e44:	e7f1      	b.n	8012e2a <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012e46:	20c0      	movs	r0, #192	; 0xc0
 8012e48:	2280      	movs	r2, #128	; 0x80
 8012e4a:	4b1a      	ldr	r3, [pc, #104]	; (8012eb4 <UART_SetConfig+0x1c8>)
 8012e4c:	0300      	lsls	r0, r0, #12
 8012e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e50:	02d2      	lsls	r2, r2, #11
 8012e52:	4003      	ands	r3, r0
 8012e54:	4293      	cmp	r3, r2
 8012e56:	d0d8      	beq.n	8012e0a <UART_SetConfig+0x11e>
 8012e58:	d9a2      	bls.n	8012da0 <UART_SetConfig+0xb4>
 8012e5a:	2280      	movs	r2, #128	; 0x80
 8012e5c:	0312      	lsls	r2, r2, #12
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	d000      	beq.n	8012e64 <UART_SetConfig+0x178>
 8012e62:	e78e      	b.n	8012d82 <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012e64:	2380      	movs	r3, #128	; 0x80
 8012e66:	021b      	lsls	r3, r3, #8
 8012e68:	4299      	cmp	r1, r3
 8012e6a:	d1b5      	bne.n	8012dd8 <UART_SetConfig+0xec>
 8012e6c:	e7c3      	b.n	8012df6 <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012e6e:	f7fe ffdb 	bl	8011e28 <HAL_RCC_GetPCLK1Freq>
 8012e72:	6869      	ldr	r1, [r5, #4]
 8012e74:	0040      	lsls	r0, r0, #1
 8012e76:	f7ed f96b 	bl	8000150 <__udivsi3>
 8012e7a:	682c      	ldr	r4, [r5, #0]
 8012e7c:	e7d5      	b.n	8012e2a <UART_SetConfig+0x13e>
    switch (clocksource)
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d094      	beq.n	8012dac <UART_SetConfig+0xc0>
        ret = HAL_ERROR;
 8012e82:	2001      	movs	r0, #1
 8012e84:	e78b      	b.n	8012d9e <UART_SetConfig+0xb2>
 8012e86:	46c0      	nop			; (mov r8, r8)
 8012e88:	efff69f3 	.word	0xefff69f3
 8012e8c:	ffffcfff 	.word	0xffffcfff
 8012e90:	fffff4ff 	.word	0xfffff4ff
 8012e94:	40013800 	.word	0x40013800
 8012e98:	40004400 	.word	0x40004400
 8012e9c:	40004800 	.word	0x40004800
 8012ea0:	40004c00 	.word	0x40004c00
 8012ea4:	40005000 	.word	0x40005000
 8012ea8:	40011400 	.word	0x40011400
 8012eac:	40011800 	.word	0x40011800
 8012eb0:	40011c00 	.word	0x40011c00
 8012eb4:	40021000 	.word	0x40021000
 8012eb8:	007a1200 	.word	0x007a1200
 8012ebc:	08018894 	.word	0x08018894
 8012ec0:	00f42400 	.word	0x00f42400

08012ec4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012ec4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8012ec6:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012ec8:	07da      	lsls	r2, r3, #31
 8012eca:	d506      	bpl.n	8012eda <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012ecc:	6801      	ldr	r1, [r0, #0]
 8012ece:	4c28      	ldr	r4, [pc, #160]	; (8012f70 <UART_AdvFeatureConfig+0xac>)
 8012ed0:	684a      	ldr	r2, [r1, #4]
 8012ed2:	4022      	ands	r2, r4
 8012ed4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012ed6:	4322      	orrs	r2, r4
 8012ed8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012eda:	079a      	lsls	r2, r3, #30
 8012edc:	d506      	bpl.n	8012eec <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012ede:	6801      	ldr	r1, [r0, #0]
 8012ee0:	4c24      	ldr	r4, [pc, #144]	; (8012f74 <UART_AdvFeatureConfig+0xb0>)
 8012ee2:	684a      	ldr	r2, [r1, #4]
 8012ee4:	4022      	ands	r2, r4
 8012ee6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8012ee8:	4322      	orrs	r2, r4
 8012eea:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012eec:	075a      	lsls	r2, r3, #29
 8012eee:	d506      	bpl.n	8012efe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012ef0:	6801      	ldr	r1, [r0, #0]
 8012ef2:	4c21      	ldr	r4, [pc, #132]	; (8012f78 <UART_AdvFeatureConfig+0xb4>)
 8012ef4:	684a      	ldr	r2, [r1, #4]
 8012ef6:	4022      	ands	r2, r4
 8012ef8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8012efa:	4322      	orrs	r2, r4
 8012efc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012efe:	071a      	lsls	r2, r3, #28
 8012f00:	d506      	bpl.n	8012f10 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012f02:	6801      	ldr	r1, [r0, #0]
 8012f04:	4c1d      	ldr	r4, [pc, #116]	; (8012f7c <UART_AdvFeatureConfig+0xb8>)
 8012f06:	684a      	ldr	r2, [r1, #4]
 8012f08:	4022      	ands	r2, r4
 8012f0a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012f0c:	4322      	orrs	r2, r4
 8012f0e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012f10:	06da      	lsls	r2, r3, #27
 8012f12:	d506      	bpl.n	8012f22 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012f14:	6801      	ldr	r1, [r0, #0]
 8012f16:	4c1a      	ldr	r4, [pc, #104]	; (8012f80 <UART_AdvFeatureConfig+0xbc>)
 8012f18:	688a      	ldr	r2, [r1, #8]
 8012f1a:	4022      	ands	r2, r4
 8012f1c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8012f1e:	4322      	orrs	r2, r4
 8012f20:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012f22:	069a      	lsls	r2, r3, #26
 8012f24:	d506      	bpl.n	8012f34 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012f26:	6801      	ldr	r1, [r0, #0]
 8012f28:	4c16      	ldr	r4, [pc, #88]	; (8012f84 <UART_AdvFeatureConfig+0xc0>)
 8012f2a:	688a      	ldr	r2, [r1, #8]
 8012f2c:	4022      	ands	r2, r4
 8012f2e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8012f30:	4322      	orrs	r2, r4
 8012f32:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012f34:	065a      	lsls	r2, r3, #25
 8012f36:	d50a      	bpl.n	8012f4e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012f38:	6801      	ldr	r1, [r0, #0]
 8012f3a:	4d13      	ldr	r5, [pc, #76]	; (8012f88 <UART_AdvFeatureConfig+0xc4>)
 8012f3c:	684a      	ldr	r2, [r1, #4]
 8012f3e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8012f40:	402a      	ands	r2, r5
 8012f42:	4322      	orrs	r2, r4
 8012f44:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012f46:	2280      	movs	r2, #128	; 0x80
 8012f48:	0352      	lsls	r2, r2, #13
 8012f4a:	4294      	cmp	r4, r2
 8012f4c:	d009      	beq.n	8012f62 <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012f4e:	061b      	lsls	r3, r3, #24
 8012f50:	d506      	bpl.n	8012f60 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012f52:	6802      	ldr	r2, [r0, #0]
 8012f54:	490d      	ldr	r1, [pc, #52]	; (8012f8c <UART_AdvFeatureConfig+0xc8>)
 8012f56:	6853      	ldr	r3, [r2, #4]
 8012f58:	400b      	ands	r3, r1
 8012f5a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012f5c:	430b      	orrs	r3, r1
 8012f5e:	6053      	str	r3, [r2, #4]
}
 8012f60:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012f62:	684a      	ldr	r2, [r1, #4]
 8012f64:	4c0a      	ldr	r4, [pc, #40]	; (8012f90 <UART_AdvFeatureConfig+0xcc>)
 8012f66:	4022      	ands	r2, r4
 8012f68:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8012f6a:	4322      	orrs	r2, r4
 8012f6c:	604a      	str	r2, [r1, #4]
 8012f6e:	e7ee      	b.n	8012f4e <UART_AdvFeatureConfig+0x8a>
 8012f70:	fffdffff 	.word	0xfffdffff
 8012f74:	fffeffff 	.word	0xfffeffff
 8012f78:	fffbffff 	.word	0xfffbffff
 8012f7c:	ffff7fff 	.word	0xffff7fff
 8012f80:	ffffefff 	.word	0xffffefff
 8012f84:	ffffdfff 	.word	0xffffdfff
 8012f88:	ffefffff 	.word	0xffefffff
 8012f8c:	fff7ffff 	.word	0xfff7ffff
 8012f90:	ff9fffff 	.word	0xff9fffff

08012f94 <UART_WaitOnFlagUntilTimeout>:
{
 8012f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f96:	46c6      	mov	lr, r8
 8012f98:	4690      	mov	r8, r2
 8012f9a:	b500      	push	{lr}
 8012f9c:	001d      	movs	r5, r3
 8012f9e:	0006      	movs	r6, r0
 8012fa0:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 8012fa2:	f7fc fe4f 	bl	800fc44 <HAL_GetTick>
  if(Status == RESET)
 8012fa6:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8012fa8:	0007      	movs	r7, r0
  if(Status == RESET)
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d112      	bne.n	8012fd4 <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012fae:	6832      	ldr	r2, [r6, #0]
 8012fb0:	e001      	b.n	8012fb6 <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 8012fb2:	1c6b      	adds	r3, r5, #1
 8012fb4:	d117      	bne.n	8012fe6 <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012fb6:	69d3      	ldr	r3, [r2, #28]
 8012fb8:	4023      	ands	r3, r4
 8012fba:	42a3      	cmp	r3, r4
 8012fbc:	d1f9      	bne.n	8012fb2 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8012fbe:	2000      	movs	r0, #0
}
 8012fc0:	bc04      	pop	{r2}
 8012fc2:	4690      	mov	r8, r2
 8012fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012fc6:	2d00      	cmp	r5, #0
 8012fc8:	d015      	beq.n	8012ff6 <UART_WaitOnFlagUntilTimeout+0x62>
 8012fca:	f7fc fe3b 	bl	800fc44 <HAL_GetTick>
 8012fce:	1bc0      	subs	r0, r0, r7
 8012fd0:	42a8      	cmp	r0, r5
 8012fd2:	d80f      	bhi.n	8012ff4 <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012fd4:	6832      	ldr	r2, [r6, #0]
 8012fd6:	e001      	b.n	8012fdc <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 8012fd8:	1c6b      	adds	r3, r5, #1
 8012fda:	d1f4      	bne.n	8012fc6 <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012fdc:	69d3      	ldr	r3, [r2, #28]
 8012fde:	4023      	ands	r3, r4
 8012fe0:	42a3      	cmp	r3, r4
 8012fe2:	d0f9      	beq.n	8012fd8 <UART_WaitOnFlagUntilTimeout+0x44>
 8012fe4:	e7eb      	b.n	8012fbe <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012fe6:	2d00      	cmp	r5, #0
 8012fe8:	d005      	beq.n	8012ff6 <UART_WaitOnFlagUntilTimeout+0x62>
 8012fea:	f7fc fe2b 	bl	800fc44 <HAL_GetTick>
 8012fee:	1bc0      	subs	r0, r0, r7
 8012ff0:	42a8      	cmp	r0, r5
 8012ff2:	d9dc      	bls.n	8012fae <UART_WaitOnFlagUntilTimeout+0x1a>
 8012ff4:	6832      	ldr	r2, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012ff6:	2180      	movs	r1, #128	; 0x80
 8012ff8:	6813      	ldr	r3, [r2, #0]
          return HAL_TIMEOUT;
 8012ffa:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012ffc:	438b      	bics	r3, r1
 8012ffe:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013000:	6813      	ldr	r3, [r2, #0]
 8013002:	3960      	subs	r1, #96	; 0x60
 8013004:	438b      	bics	r3, r1
 8013006:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013008:	6813      	ldr	r3, [r2, #0]
 801300a:	4907      	ldr	r1, [pc, #28]	; (8013028 <UART_WaitOnFlagUntilTimeout+0x94>)
 801300c:	400b      	ands	r3, r1
 801300e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013010:	6893      	ldr	r3, [r2, #8]
 8013012:	3103      	adds	r1, #3
 8013014:	31ff      	adds	r1, #255	; 0xff
 8013016:	438b      	bics	r3, r1
 8013018:	6093      	str	r3, [r2, #8]
          huart->State = HAL_UART_STATE_READY;
 801301a:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 801301c:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 801301e:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 8013020:	3b01      	subs	r3, #1
 8013022:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8013024:	e7cc      	b.n	8012fc0 <UART_WaitOnFlagUntilTimeout+0x2c>
 8013026:	46c0      	nop			; (mov r8, r8)
 8013028:	fffffeff 	.word	0xfffffeff

0801302c <HAL_UART_Transmit>:
{
 801302c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801302e:	46c6      	mov	lr, r8
 8013030:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013032:	2369      	movs	r3, #105	; 0x69
{
 8013034:	b500      	push	{lr}
 8013036:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013038:	5cc1      	ldrb	r1, [r0, r3]
{
 801303a:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801303c:	2901      	cmp	r1, #1
 801303e:	d003      	beq.n	8013048 <HAL_UART_Transmit+0x1c>
 8013040:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8013042:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013044:	2b22      	cmp	r3, #34	; 0x22
 8013046:	d147      	bne.n	80130d8 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8013048:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801304a:	2d00      	cmp	r5, #0
 801304c:	d044      	beq.n	80130d8 <HAL_UART_Transmit+0xac>
 801304e:	2a00      	cmp	r2, #0
 8013050:	d042      	beq.n	80130d8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8013052:	2368      	movs	r3, #104	; 0x68
 8013054:	5ce1      	ldrb	r1, [r4, r3]
 8013056:	2901      	cmp	r1, #1
 8013058:	d046      	beq.n	80130e8 <HAL_UART_Transmit+0xbc>
 801305a:	54e0      	strb	r0, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801305c:	2300      	movs	r3, #0
 801305e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013060:	3369      	adds	r3, #105	; 0x69
 8013062:	5ce1      	ldrb	r1, [r4, r3]
 8013064:	2922      	cmp	r1, #34	; 0x22
 8013066:	d03a      	beq.n	80130de <HAL_UART_Transmit+0xb2>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013068:	2112      	movs	r1, #18
 801306a:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 801306c:	2350      	movs	r3, #80	; 0x50
 801306e:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013070:	2380      	movs	r3, #128	; 0x80
 8013072:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 8013074:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013076:	4698      	mov	r8, r3
 8013078:	e005      	b.n	8013086 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 801307a:	782a      	ldrb	r2, [r5, #0]
 801307c:	3501      	adds	r5, #1
 801307e:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8013080:	5ba2      	ldrh	r2, [r4, r6]
 8013082:	2a00      	cmp	r2, #0
 8013084:	d018      	beq.n	80130b8 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 8013086:	3a01      	subs	r2, #1
 8013088:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 801308a:	003b      	movs	r3, r7
 801308c:	2200      	movs	r2, #0
 801308e:	2180      	movs	r1, #128	; 0x80
 8013090:	0020      	movs	r0, r4
 8013092:	f7ff ff7f 	bl	8012f94 <UART_WaitOnFlagUntilTimeout>
 8013096:	2800      	cmp	r0, #0
 8013098:	d124      	bne.n	80130e4 <HAL_UART_Transmit+0xb8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801309a:	68a2      	ldr	r2, [r4, #8]
 801309c:	6823      	ldr	r3, [r4, #0]
 801309e:	4542      	cmp	r2, r8
 80130a0:	d1eb      	bne.n	801307a <HAL_UART_Transmit+0x4e>
 80130a2:	6922      	ldr	r2, [r4, #16]
 80130a4:	2a00      	cmp	r2, #0
 80130a6:	d1e8      	bne.n	801307a <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80130a8:	882a      	ldrh	r2, [r5, #0]
        pData += 2;
 80130aa:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80130ac:	05d2      	lsls	r2, r2, #23
 80130ae:	0dd2      	lsrs	r2, r2, #23
 80130b0:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80130b2:	5ba2      	ldrh	r2, [r4, r6]
 80130b4:	2a00      	cmp	r2, #0
 80130b6:	d1e6      	bne.n	8013086 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80130b8:	003b      	movs	r3, r7
 80130ba:	2140      	movs	r1, #64	; 0x40
 80130bc:	0020      	movs	r0, r4
 80130be:	f7ff ff69 	bl	8012f94 <UART_WaitOnFlagUntilTimeout>
 80130c2:	2800      	cmp	r0, #0
 80130c4:	d10e      	bne.n	80130e4 <HAL_UART_Transmit+0xb8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80130c6:	2369      	movs	r3, #105	; 0x69
 80130c8:	5ce2      	ldrb	r2, [r4, r3]
 80130ca:	2a32      	cmp	r2, #50	; 0x32
 80130cc:	d00e      	beq.n	80130ec <HAL_UART_Transmit+0xc0>
      huart->State = HAL_UART_STATE_READY;
 80130ce:	2201      	movs	r2, #1
 80130d0:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80130d2:	2368      	movs	r3, #104	; 0x68
 80130d4:	2200      	movs	r2, #0
 80130d6:	54e2      	strb	r2, [r4, r3]
}
 80130d8:	bc04      	pop	{r2}
 80130da:	4690      	mov	r8, r2
 80130dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80130de:	3110      	adds	r1, #16
 80130e0:	54e1      	strb	r1, [r4, r3]
 80130e2:	e7c3      	b.n	801306c <HAL_UART_Transmit+0x40>
        return HAL_TIMEOUT;
 80130e4:	2003      	movs	r0, #3
 80130e6:	e7f7      	b.n	80130d8 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 80130e8:	2002      	movs	r0, #2
 80130ea:	e7f5      	b.n	80130d8 <HAL_UART_Transmit+0xac>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80130ec:	3a10      	subs	r2, #16
 80130ee:	54e2      	strb	r2, [r4, r3]
 80130f0:	e7ef      	b.n	80130d2 <HAL_UART_Transmit+0xa6>
 80130f2:	46c0      	nop			; (mov r8, r8)

080130f4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80130f4:	2300      	movs	r3, #0
{
 80130f6:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80130f8:	4a1a      	ldr	r2, [pc, #104]	; (8013164 <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80130fa:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80130fc:	6803      	ldr	r3, [r0, #0]
{
 80130fe:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013100:	4293      	cmp	r3, r2
 8013102:	d00d      	beq.n	8013120 <UART_CheckIdleState+0x2c>
 8013104:	4a18      	ldr	r2, [pc, #96]	; (8013168 <UART_CheckIdleState+0x74>)
 8013106:	4293      	cmp	r3, r2
 8013108:	d00a      	beq.n	8013120 <UART_CheckIdleState+0x2c>
 801310a:	4a18      	ldr	r2, [pc, #96]	; (801316c <UART_CheckIdleState+0x78>)
 801310c:	4293      	cmp	r3, r2
 801310e:	d007      	beq.n	8013120 <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 8013110:	2369      	movs	r3, #105	; 0x69
 8013112:	2201      	movs	r2, #1
 8013114:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8013116:	2200      	movs	r2, #0
  return HAL_OK;
 8013118:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 801311a:	3b01      	subs	r3, #1
 801311c:	54e2      	strb	r2, [r4, r3]
}
 801311e:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	0712      	lsls	r2, r2, #28
 8013124:	d40e      	bmi.n	8013144 <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	075b      	lsls	r3, r3, #29
 801312a:	d5f1      	bpl.n	8013110 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801312c:	23fa      	movs	r3, #250	; 0xfa
 801312e:	2180      	movs	r1, #128	; 0x80
 8013130:	009b      	lsls	r3, r3, #2
 8013132:	2200      	movs	r2, #0
 8013134:	03c9      	lsls	r1, r1, #15
 8013136:	0020      	movs	r0, r4
 8013138:	f7ff ff2c 	bl	8012f94 <UART_WaitOnFlagUntilTimeout>
 801313c:	2800      	cmp	r0, #0
 801313e:	d0e7      	beq.n	8013110 <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 8013140:	2003      	movs	r0, #3
 8013142:	e7ec      	b.n	801311e <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013144:	23fa      	movs	r3, #250	; 0xfa
 8013146:	2180      	movs	r1, #128	; 0x80
 8013148:	009b      	lsls	r3, r3, #2
 801314a:	2200      	movs	r2, #0
 801314c:	0389      	lsls	r1, r1, #14
 801314e:	0020      	movs	r0, r4
 8013150:	f7ff ff20 	bl	8012f94 <UART_WaitOnFlagUntilTimeout>
 8013154:	2800      	cmp	r0, #0
 8013156:	d1f3      	bne.n	8013140 <UART_CheckIdleState+0x4c>
 8013158:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	075b      	lsls	r3, r3, #29
 801315e:	d5d7      	bpl.n	8013110 <UART_CheckIdleState+0x1c>
 8013160:	e7e4      	b.n	801312c <UART_CheckIdleState+0x38>
 8013162:	46c0      	nop			; (mov r8, r8)
 8013164:	40013800 	.word	0x40013800
 8013168:	40004400 	.word	0x40004400
 801316c:	40004800 	.word	0x40004800

08013170 <HAL_UART_Init>:
{
 8013170:	b510      	push	{r4, lr}
 8013172:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013174:	d02a      	beq.n	80131cc <HAL_UART_Init+0x5c>
  if(huart->State == HAL_UART_STATE_RESET)
 8013176:	2369      	movs	r3, #105	; 0x69
 8013178:	5cc3      	ldrb	r3, [r0, r3]
 801317a:	b2db      	uxtb	r3, r3
 801317c:	2b00      	cmp	r3, #0
 801317e:	d020      	beq.n	80131c2 <HAL_UART_Init+0x52>
  huart->State = HAL_UART_STATE_BUSY;
 8013180:	2369      	movs	r3, #105	; 0x69
 8013182:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 8013184:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 8013186:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013188:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801318a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 801318c:	6813      	ldr	r3, [r2, #0]
 801318e:	438b      	bics	r3, r1
 8013190:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013192:	f7ff fdab 	bl	8012cec <UART_SetConfig>
 8013196:	2801      	cmp	r0, #1
 8013198:	d018      	beq.n	80131cc <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801319a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801319c:	2b00      	cmp	r3, #0
 801319e:	d117      	bne.n	80131d0 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80131a0:	6823      	ldr	r3, [r4, #0]
 80131a2:	490d      	ldr	r1, [pc, #52]	; (80131d8 <HAL_UART_Init+0x68>)
 80131a4:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80131a6:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80131a8:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80131aa:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80131ac:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80131ae:	689a      	ldr	r2, [r3, #8]
 80131b0:	438a      	bics	r2, r1
 80131b2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80131b4:	681a      	ldr	r2, [r3, #0]
 80131b6:	3929      	subs	r1, #41	; 0x29
 80131b8:	430a      	orrs	r2, r1
 80131ba:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80131bc:	f7ff ff9a 	bl	80130f4 <UART_CheckIdleState>
}
 80131c0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80131c2:	2268      	movs	r2, #104	; 0x68
 80131c4:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80131c6:	f7fa fc0f 	bl	800d9e8 <HAL_UART_MspInit>
 80131ca:	e7d9      	b.n	8013180 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80131cc:	2001      	movs	r0, #1
 80131ce:	e7f7      	b.n	80131c0 <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 80131d0:	0020      	movs	r0, r4
 80131d2:	f7ff fe77 	bl	8012ec4 <UART_AdvFeatureConfig>
 80131d6:	e7e3      	b.n	80131a0 <HAL_UART_Init+0x30>
 80131d8:	ffffb7ff 	.word	0xffffb7ff

080131dc <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80131dc:	2269      	movs	r2, #105	; 0x69
{
 80131de:	b530      	push	{r4, r5, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80131e0:	5c81      	ldrb	r1, [r0, r2]
{
 80131e2:	0003      	movs	r3, r0
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80131e4:	2912      	cmp	r1, #18
 80131e6:	d003      	beq.n	80131f0 <UART_Transmit_IT+0x14>
 80131e8:	5c82      	ldrb	r2, [r0, r2]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80131ea:	2002      	movs	r0, #2
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80131ec:	2a32      	cmp	r2, #50	; 0x32
 80131ee:	d112      	bne.n	8013216 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 80131f0:	2252      	movs	r2, #82	; 0x52
 80131f2:	5a9a      	ldrh	r2, [r3, r2]
 80131f4:	6819      	ldr	r1, [r3, #0]
 80131f6:	2a00      	cmp	r2, #0
 80131f8:	d00e      	beq.n	8013218 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80131fa:	2480      	movs	r4, #128	; 0x80
 80131fc:	689d      	ldr	r5, [r3, #8]
 80131fe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013200:	0164      	lsls	r4, r4, #5
 8013202:	42a5      	cmp	r5, r4
 8013204:	d012      	beq.n	801322c <UART_Transmit_IT+0x50>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8013206:	1c44      	adds	r4, r0, #1
 8013208:	64dc      	str	r4, [r3, #76]	; 0x4c
 801320a:	7800      	ldrb	r0, [r0, #0]
 801320c:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->TxXferCount--;
 801320e:	2152      	movs	r1, #82	; 0x52
      return HAL_OK;
 8013210:	2000      	movs	r0, #0
      huart->TxXferCount--;
 8013212:	3a01      	subs	r2, #1
 8013214:	525a      	strh	r2, [r3, r1]
  }
}
 8013216:	bd30      	pop	{r4, r5, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013218:	680b      	ldr	r3, [r1, #0]
 801321a:	3280      	adds	r2, #128	; 0x80
 801321c:	4393      	bics	r3, r2
 801321e:	600b      	str	r3, [r1, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013220:	680b      	ldr	r3, [r1, #0]
 8013222:	3a40      	subs	r2, #64	; 0x40
 8013224:	4313      	orrs	r3, r2
 8013226:	600b      	str	r3, [r1, #0]
      return HAL_OK;
 8013228:	2000      	movs	r0, #0
 801322a:	e7f4      	b.n	8013216 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801322c:	691c      	ldr	r4, [r3, #16]
 801322e:	2c00      	cmp	r4, #0
 8013230:	d1e9      	bne.n	8013206 <UART_Transmit_IT+0x2a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013232:	8804      	ldrh	r4, [r0, #0]
        huart->pTxBuffPtr += 2;
 8013234:	3002      	adds	r0, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013236:	05e4      	lsls	r4, r4, #23
 8013238:	0de4      	lsrs	r4, r4, #23
 801323a:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 801323c:	64d8      	str	r0, [r3, #76]	; 0x4c
 801323e:	e7e6      	b.n	801320e <UART_Transmit_IT+0x32>

08013240 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013240:	2140      	movs	r1, #64	; 0x40
 8013242:	6803      	ldr	r3, [r0, #0]
{
 8013244:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013246:	681a      	ldr	r2, [r3, #0]
 8013248:	438a      	bics	r2, r1
 801324a:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801324c:	2269      	movs	r2, #105	; 0x69
 801324e:	5c81      	ldrb	r1, [r0, r2]
 8013250:	2932      	cmp	r1, #50	; 0x32
 8013252:	d008      	beq.n	8013266 <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013254:	2401      	movs	r4, #1
 8013256:	6899      	ldr	r1, [r3, #8]
 8013258:	43a1      	bics	r1, r4
 801325a:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 801325c:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 801325e:	f7f9 fff7 	bl	800d250 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8013262:	2000      	movs	r0, #0
 8013264:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8013266:	2322      	movs	r3, #34	; 0x22
 8013268:	5483      	strb	r3, [r0, r2]
 801326a:	e7f8      	b.n	801325e <UART_EndTransmit_IT+0x1e>

0801326c <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801326c:	2369      	movs	r3, #105	; 0x69
{
 801326e:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013270:	5cc2      	ldrb	r2, [r0, r3]
 8013272:	2a22      	cmp	r2, #34	; 0x22
 8013274:	d003      	beq.n	801327e <UART_Receive_IT+0x12>
 8013276:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013278:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801327a:	2b32      	cmp	r3, #50	; 0x32
 801327c:	d12b      	bne.n	80132d6 <UART_Receive_IT+0x6a>
  uint16_t uhMask = huart->Mask;
 801327e:	235c      	movs	r3, #92	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013280:	2180      	movs	r1, #128	; 0x80
 8013282:	6885      	ldr	r5, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8013284:	5ac3      	ldrh	r3, [r0, r3]
 8013286:	6804      	ldr	r4, [r0, #0]
 8013288:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801328a:	0149      	lsls	r1, r1, #5
 801328c:	428d      	cmp	r5, r1
 801328e:	d024      	beq.n	80132da <UART_Receive_IT+0x6e>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013290:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8013292:	1c54      	adds	r4, r2, #1
 8013294:	400b      	ands	r3, r1
 8013296:	6544      	str	r4, [r0, #84]	; 0x54
 8013298:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 801329a:	225a      	movs	r2, #90	; 0x5a
 801329c:	5a83      	ldrh	r3, [r0, r2]
 801329e:	3b01      	subs	r3, #1
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 80132a4:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d115      	bne.n	80132d6 <UART_Receive_IT+0x6a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80132aa:	2120      	movs	r1, #32
 80132ac:	6803      	ldr	r3, [r0, #0]
 80132ae:	681a      	ldr	r2, [r3, #0]
 80132b0:	438a      	bics	r2, r1
 80132b2:	601a      	str	r2, [r3, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80132b4:	2269      	movs	r2, #105	; 0x69
 80132b6:	5c81      	ldrb	r1, [r0, r2]
 80132b8:	2932      	cmp	r1, #50	; 0x32
 80132ba:	d017      	beq.n	80132ec <UART_Receive_IT+0x80>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80132bc:	6819      	ldr	r1, [r3, #0]
 80132be:	4c0d      	ldr	r4, [pc, #52]	; (80132f4 <UART_Receive_IT+0x88>)
 80132c0:	4021      	ands	r1, r4
 80132c2:	6019      	str	r1, [r3, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80132c4:	6899      	ldr	r1, [r3, #8]
 80132c6:	3403      	adds	r4, #3
 80132c8:	34ff      	adds	r4, #255	; 0xff
 80132ca:	43a1      	bics	r1, r4
 80132cc:	6099      	str	r1, [r3, #8]
        huart->State = HAL_UART_STATE_READY;
 80132ce:	5484      	strb	r4, [r0, r2]
      HAL_UART_RxCpltCallback(huart);
 80132d0:	f7f9 fffa 	bl	800d2c8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80132d4:	2200      	movs	r2, #0
  }
}
 80132d6:	0010      	movs	r0, r2
 80132d8:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80132da:	6901      	ldr	r1, [r0, #16]
 80132dc:	2900      	cmp	r1, #0
 80132de:	d1d7      	bne.n	8013290 <UART_Receive_IT+0x24>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80132e0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80132e2:	400b      	ands	r3, r1
 80132e4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 80132e6:	3202      	adds	r2, #2
 80132e8:	6542      	str	r2, [r0, #84]	; 0x54
 80132ea:	e7d6      	b.n	801329a <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 80132ec:	2312      	movs	r3, #18
 80132ee:	5483      	strb	r3, [r0, r2]
 80132f0:	e7ee      	b.n	80132d0 <UART_Receive_IT+0x64>
 80132f2:	46c0      	nop			; (mov r8, r8)
 80132f4:	fffffeff 	.word	0xfffffeff

080132f8 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 80132f8:	4770      	bx	lr
 80132fa:	46c0      	nop			; (mov r8, r8)

080132fc <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80132fc:	2201      	movs	r2, #1
 80132fe:	6803      	ldr	r3, [r0, #0]
{
 8013300:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8013302:	69d9      	ldr	r1, [r3, #28]
{
 8013304:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8013306:	420a      	tst	r2, r1
 8013308:	d002      	beq.n	8013310 <HAL_UART_IRQHandler+0x14>
 801330a:	6819      	ldr	r1, [r3, #0]
 801330c:	05c9      	lsls	r1, r1, #23
 801330e:	d456      	bmi.n	80133be <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013310:	2202      	movs	r2, #2
 8013312:	69d9      	ldr	r1, [r3, #28]
 8013314:	420a      	tst	r2, r1
 8013316:	d003      	beq.n	8013320 <HAL_UART_IRQHandler+0x24>
 8013318:	2101      	movs	r1, #1
 801331a:	6898      	ldr	r0, [r3, #8]
 801331c:	4201      	tst	r1, r0
 801331e:	d146      	bne.n	80133ae <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013320:	2204      	movs	r2, #4
 8013322:	69d9      	ldr	r1, [r3, #28]
 8013324:	420a      	tst	r2, r1
 8013326:	d003      	beq.n	8013330 <HAL_UART_IRQHandler+0x34>
 8013328:	2101      	movs	r1, #1
 801332a:	6898      	ldr	r0, [r3, #8]
 801332c:	4201      	tst	r1, r0
 801332e:	d136      	bne.n	801339e <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013330:	2208      	movs	r2, #8
 8013332:	69d9      	ldr	r1, [r3, #28]
 8013334:	420a      	tst	r2, r1
 8013336:	d003      	beq.n	8013340 <HAL_UART_IRQHandler+0x44>
 8013338:	2101      	movs	r1, #1
 801333a:	6898      	ldr	r0, [r3, #8]
 801333c:	4201      	tst	r1, r0
 801333e:	d120      	bne.n	8013382 <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013340:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8013342:	2a00      	cmp	r2, #0
 8013344:	d126      	bne.n	8013394 <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8013346:	2280      	movs	r2, #128	; 0x80
 8013348:	69d9      	ldr	r1, [r3, #28]
 801334a:	0352      	lsls	r2, r2, #13
 801334c:	4211      	tst	r1, r2
 801334e:	d002      	beq.n	8013356 <HAL_UART_IRQHandler+0x5a>
 8013350:	6899      	ldr	r1, [r3, #8]
 8013352:	0249      	lsls	r1, r1, #9
 8013354:	d43e      	bmi.n	80133d4 <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013356:	2220      	movs	r2, #32
 8013358:	69d9      	ldr	r1, [r3, #28]
 801335a:	420a      	tst	r2, r1
 801335c:	d002      	beq.n	8013364 <HAL_UART_IRQHandler+0x68>
 801335e:	6819      	ldr	r1, [r3, #0]
 8013360:	420a      	tst	r2, r1
 8013362:	d140      	bne.n	80133e6 <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013364:	2280      	movs	r2, #128	; 0x80
 8013366:	69d9      	ldr	r1, [r3, #28]
 8013368:	420a      	tst	r2, r1
 801336a:	d002      	beq.n	8013372 <HAL_UART_IRQHandler+0x76>
 801336c:	6819      	ldr	r1, [r3, #0]
 801336e:	420a      	tst	r2, r1
 8013370:	d142      	bne.n	80133f8 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013372:	2240      	movs	r2, #64	; 0x40
 8013374:	69d9      	ldr	r1, [r3, #28]
 8013376:	420a      	tst	r2, r1
 8013378:	d002      	beq.n	8013380 <HAL_UART_IRQHandler+0x84>
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	421a      	tst	r2, r3
 801337e:	d125      	bne.n	80133cc <HAL_UART_IRQHandler+0xd0>
}
 8013380:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013382:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013384:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013386:	4302      	orrs	r2, r0
 8013388:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801338a:	2269      	movs	r2, #105	; 0x69
 801338c:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 801338e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8013390:	2a00      	cmp	r2, #0
 8013392:	d0d8      	beq.n	8013346 <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 8013394:	0020      	movs	r0, r4
 8013396:	f7f9 ff73 	bl	800d280 <HAL_UART_ErrorCallback>
 801339a:	6823      	ldr	r3, [r4, #0]
 801339c:	e7d3      	b.n	8013346 <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 801339e:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80133a0:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80133a2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80133a4:	4302      	orrs	r2, r0
 80133a6:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80133a8:	2269      	movs	r2, #105	; 0x69
 80133aa:	54a1      	strb	r1, [r4, r2]
 80133ac:	e7c0      	b.n	8013330 <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80133ae:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80133b0:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80133b2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80133b4:	4302      	orrs	r2, r0
 80133b6:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80133b8:	2269      	movs	r2, #105	; 0x69
 80133ba:	54a1      	strb	r1, [r4, r2]
 80133bc:	e7b0      	b.n	8013320 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80133be:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80133c0:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80133c2:	4311      	orrs	r1, r2
 80133c4:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80133c6:	2169      	movs	r1, #105	; 0x69
 80133c8:	5442      	strb	r2, [r0, r1]
 80133ca:	e7a1      	b.n	8013310 <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 80133cc:	0020      	movs	r0, r4
 80133ce:	f7ff ff37 	bl	8013240 <UART_EndTransmit_IT>
}
 80133d2:	e7d5      	b.n	8013380 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80133d4:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 80133d6:	2369      	movs	r3, #105	; 0x69
 80133d8:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 80133da:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 80133dc:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 80133de:	f7ff ff8b 	bl	80132f8 <HAL_UARTEx_WakeupCallback>
 80133e2:	6823      	ldr	r3, [r4, #0]
 80133e4:	e7b7      	b.n	8013356 <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 80133e6:	0020      	movs	r0, r4
 80133e8:	f7ff ff40 	bl	801326c <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80133ec:	2108      	movs	r1, #8
 80133ee:	6823      	ldr	r3, [r4, #0]
 80133f0:	699a      	ldr	r2, [r3, #24]
 80133f2:	430a      	orrs	r2, r1
 80133f4:	619a      	str	r2, [r3, #24]
 80133f6:	e7b5      	b.n	8013364 <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 80133f8:	0020      	movs	r0, r4
 80133fa:	f7ff feef 	bl	80131dc <UART_Transmit_IT>
 80133fe:	6823      	ldr	r3, [r4, #0]
 8013400:	e7b7      	b.n	8013372 <HAL_UART_IRQHandler+0x76>
 8013402:	46c0      	nop			; (mov r8, r8)

08013404 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8013404:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8013406:	f7f0 fbaf 	bl	8003b68 <Module_Init>
 801340a:	e7fe      	b.n	801340a <main+0x6>

0801340c <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 801340c:	e7fe      	b.n	801340c <UserTask>
 801340e:	46c0      	nop			; (mov r8, r8)

08013410 <atof>:
 8013410:	b510      	push	{r4, lr}
 8013412:	2100      	movs	r1, #0
 8013414:	f001 fb74 	bl	8014b00 <strtod>
 8013418:	bd10      	pop	{r4, pc}

0801341a <atoi>:
 801341a:	b510      	push	{r4, lr}
 801341c:	220a      	movs	r2, #10
 801341e:	2100      	movs	r1, #0
 8013420:	f001 fc3a 	bl	8014c98 <strtol>
 8013424:	bd10      	pop	{r4, pc}

08013426 <atol>:
 8013426:	b510      	push	{r4, lr}
 8013428:	220a      	movs	r2, #10
 801342a:	2100      	movs	r1, #0
 801342c:	f001 fc34 	bl	8014c98 <strtol>
 8013430:	bd10      	pop	{r4, pc}
	...

08013434 <calloc>:
 8013434:	b510      	push	{r4, lr}
 8013436:	4b03      	ldr	r3, [pc, #12]	; (8013444 <calloc+0x10>)
 8013438:	000a      	movs	r2, r1
 801343a:	0001      	movs	r1, r0
 801343c:	6818      	ldr	r0, [r3, #0]
 801343e:	f000 f803 	bl	8013448 <_calloc_r>
 8013442:	bd10      	pop	{r4, pc}
 8013444:	200000dc 	.word	0x200000dc

08013448 <_calloc_r>:
 8013448:	b510      	push	{r4, lr}
 801344a:	4351      	muls	r1, r2
 801344c:	f000 f872 	bl	8013534 <_malloc_r>
 8013450:	1e04      	subs	r4, r0, #0
 8013452:	d01a      	beq.n	801348a <_calloc_r+0x42>
 8013454:	0003      	movs	r3, r0
 8013456:	3b08      	subs	r3, #8
 8013458:	685a      	ldr	r2, [r3, #4]
 801345a:	2303      	movs	r3, #3
 801345c:	439a      	bics	r2, r3
 801345e:	3a04      	subs	r2, #4
 8013460:	2a24      	cmp	r2, #36	; 0x24
 8013462:	d819      	bhi.n	8013498 <_calloc_r+0x50>
 8013464:	0003      	movs	r3, r0
 8013466:	2a13      	cmp	r2, #19
 8013468:	d90b      	bls.n	8013482 <_calloc_r+0x3a>
 801346a:	2100      	movs	r1, #0
 801346c:	3308      	adds	r3, #8
 801346e:	6001      	str	r1, [r0, #0]
 8013470:	6041      	str	r1, [r0, #4]
 8013472:	2a1b      	cmp	r2, #27
 8013474:	d905      	bls.n	8013482 <_calloc_r+0x3a>
 8013476:	6081      	str	r1, [r0, #8]
 8013478:	60c1      	str	r1, [r0, #12]
 801347a:	2a24      	cmp	r2, #36	; 0x24
 801347c:	d007      	beq.n	801348e <_calloc_r+0x46>
 801347e:	0003      	movs	r3, r0
 8013480:	3310      	adds	r3, #16
 8013482:	2200      	movs	r2, #0
 8013484:	601a      	str	r2, [r3, #0]
 8013486:	605a      	str	r2, [r3, #4]
 8013488:	609a      	str	r2, [r3, #8]
 801348a:	0020      	movs	r0, r4
 801348c:	bd10      	pop	{r4, pc}
 801348e:	0003      	movs	r3, r0
 8013490:	6101      	str	r1, [r0, #16]
 8013492:	3318      	adds	r3, #24
 8013494:	6141      	str	r1, [r0, #20]
 8013496:	e7f4      	b.n	8013482 <_calloc_r+0x3a>
 8013498:	2100      	movs	r1, #0
 801349a:	f000 fa8d 	bl	80139b8 <memset>
 801349e:	e7f4      	b.n	801348a <_calloc_r+0x42>

080134a0 <__libc_init_array>:
 80134a0:	b570      	push	{r4, r5, r6, lr}
 80134a2:	2600      	movs	r6, #0
 80134a4:	4d0c      	ldr	r5, [pc, #48]	; (80134d8 <__libc_init_array+0x38>)
 80134a6:	4c0d      	ldr	r4, [pc, #52]	; (80134dc <__libc_init_array+0x3c>)
 80134a8:	1b64      	subs	r4, r4, r5
 80134aa:	10a4      	asrs	r4, r4, #2
 80134ac:	42a6      	cmp	r6, r4
 80134ae:	d109      	bne.n	80134c4 <__libc_init_array+0x24>
 80134b0:	2600      	movs	r6, #0
 80134b2:	f004 fe41 	bl	8018138 <_init>
 80134b6:	4d0a      	ldr	r5, [pc, #40]	; (80134e0 <__libc_init_array+0x40>)
 80134b8:	4c0a      	ldr	r4, [pc, #40]	; (80134e4 <__libc_init_array+0x44>)
 80134ba:	1b64      	subs	r4, r4, r5
 80134bc:	10a4      	asrs	r4, r4, #2
 80134be:	42a6      	cmp	r6, r4
 80134c0:	d105      	bne.n	80134ce <__libc_init_array+0x2e>
 80134c2:	bd70      	pop	{r4, r5, r6, pc}
 80134c4:	00b3      	lsls	r3, r6, #2
 80134c6:	58eb      	ldr	r3, [r5, r3]
 80134c8:	4798      	blx	r3
 80134ca:	3601      	adds	r6, #1
 80134cc:	e7ee      	b.n	80134ac <__libc_init_array+0xc>
 80134ce:	00b3      	lsls	r3, r6, #2
 80134d0:	58eb      	ldr	r3, [r5, r3]
 80134d2:	4798      	blx	r3
 80134d4:	3601      	adds	r6, #1
 80134d6:	e7f2      	b.n	80134be <__libc_init_array+0x1e>
 80134d8:	0801bb6c 	.word	0x0801bb6c
 80134dc:	0801bb6c 	.word	0x0801bb6c
 80134e0:	0801bb6c 	.word	0x0801bb6c
 80134e4:	0801bb74 	.word	0x0801bb74

080134e8 <__locale_ctype_ptr_l>:
 80134e8:	30ec      	adds	r0, #236	; 0xec
 80134ea:	6800      	ldr	r0, [r0, #0]
 80134ec:	4770      	bx	lr
	...

080134f0 <__locale_ctype_ptr>:
 80134f0:	4b04      	ldr	r3, [pc, #16]	; (8013504 <__locale_ctype_ptr+0x14>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d100      	bne.n	80134fc <__locale_ctype_ptr+0xc>
 80134fa:	4b03      	ldr	r3, [pc, #12]	; (8013508 <__locale_ctype_ptr+0x18>)
 80134fc:	33ec      	adds	r3, #236	; 0xec
 80134fe:	6818      	ldr	r0, [r3, #0]
 8013500:	4770      	bx	lr
 8013502:	46c0      	nop			; (mov r8, r8)
 8013504:	200000dc 	.word	0x200000dc
 8013508:	20000508 	.word	0x20000508

0801350c <malloc>:
 801350c:	b510      	push	{r4, lr}
 801350e:	4b03      	ldr	r3, [pc, #12]	; (801351c <malloc+0x10>)
 8013510:	0001      	movs	r1, r0
 8013512:	6818      	ldr	r0, [r3, #0]
 8013514:	f000 f80e 	bl	8013534 <_malloc_r>
 8013518:	bd10      	pop	{r4, pc}
 801351a:	46c0      	nop			; (mov r8, r8)
 801351c:	200000dc 	.word	0x200000dc

08013520 <free>:
 8013520:	b510      	push	{r4, lr}
 8013522:	4b03      	ldr	r3, [pc, #12]	; (8013530 <free+0x10>)
 8013524:	0001      	movs	r1, r0
 8013526:	6818      	ldr	r0, [r3, #0]
 8013528:	f003 fd10 	bl	8016f4c <_free_r>
 801352c:	bd10      	pop	{r4, pc}
 801352e:	46c0      	nop			; (mov r8, r8)
 8013530:	200000dc 	.word	0x200000dc

08013534 <_malloc_r>:
 8013534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013536:	000d      	movs	r5, r1
 8013538:	b085      	sub	sp, #20
 801353a:	350b      	adds	r5, #11
 801353c:	9001      	str	r0, [sp, #4]
 801353e:	2d16      	cmp	r5, #22
 8013540:	d908      	bls.n	8013554 <_malloc_r+0x20>
 8013542:	2307      	movs	r3, #7
 8013544:	439d      	bics	r5, r3
 8013546:	d506      	bpl.n	8013556 <_malloc_r+0x22>
 8013548:	230c      	movs	r3, #12
 801354a:	9a01      	ldr	r2, [sp, #4]
 801354c:	6013      	str	r3, [r2, #0]
 801354e:	2000      	movs	r0, #0
 8013550:	b005      	add	sp, #20
 8013552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013554:	2510      	movs	r5, #16
 8013556:	428d      	cmp	r5, r1
 8013558:	d3f6      	bcc.n	8013548 <_malloc_r+0x14>
 801355a:	9801      	ldr	r0, [sp, #4]
 801355c:	f000 fa34 	bl	80139c8 <__malloc_lock>
 8013560:	23f8      	movs	r3, #248	; 0xf8
 8013562:	33ff      	adds	r3, #255	; 0xff
 8013564:	4ac4      	ldr	r2, [pc, #784]	; (8013878 <_malloc_r+0x344>)
 8013566:	429d      	cmp	r5, r3
 8013568:	d820      	bhi.n	80135ac <_malloc_r+0x78>
 801356a:	0029      	movs	r1, r5
 801356c:	3108      	adds	r1, #8
 801356e:	1851      	adds	r1, r2, r1
 8013570:	0008      	movs	r0, r1
 8013572:	684c      	ldr	r4, [r1, #4]
 8013574:	3808      	subs	r0, #8
 8013576:	08eb      	lsrs	r3, r5, #3
 8013578:	4284      	cmp	r4, r0
 801357a:	d104      	bne.n	8013586 <_malloc_r+0x52>
 801357c:	68cc      	ldr	r4, [r1, #12]
 801357e:	3302      	adds	r3, #2
 8013580:	469c      	mov	ip, r3
 8013582:	42a1      	cmp	r1, r4
 8013584:	d02a      	beq.n	80135dc <_malloc_r+0xa8>
 8013586:	2303      	movs	r3, #3
 8013588:	6862      	ldr	r2, [r4, #4]
 801358a:	68a1      	ldr	r1, [r4, #8]
 801358c:	439a      	bics	r2, r3
 801358e:	0013      	movs	r3, r2
 8013590:	68e2      	ldr	r2, [r4, #12]
 8013592:	18e3      	adds	r3, r4, r3
 8013594:	60ca      	str	r2, [r1, #12]
 8013596:	6091      	str	r1, [r2, #8]
 8013598:	2201      	movs	r2, #1
 801359a:	6859      	ldr	r1, [r3, #4]
 801359c:	430a      	orrs	r2, r1
 801359e:	605a      	str	r2, [r3, #4]
 80135a0:	9801      	ldr	r0, [sp, #4]
 80135a2:	f000 fa19 	bl	80139d8 <__malloc_unlock>
 80135a6:	0020      	movs	r0, r4
 80135a8:	3008      	adds	r0, #8
 80135aa:	e7d1      	b.n	8013550 <_malloc_r+0x1c>
 80135ac:	0a69      	lsrs	r1, r5, #9
 80135ae:	233f      	movs	r3, #63	; 0x3f
 80135b0:	2900      	cmp	r1, #0
 80135b2:	d003      	beq.n	80135bc <_malloc_r+0x88>
 80135b4:	2904      	cmp	r1, #4
 80135b6:	d828      	bhi.n	801360a <_malloc_r+0xd6>
 80135b8:	09ab      	lsrs	r3, r5, #6
 80135ba:	3338      	adds	r3, #56	; 0x38
 80135bc:	2103      	movs	r1, #3
 80135be:	468c      	mov	ip, r1
 80135c0:	00d8      	lsls	r0, r3, #3
 80135c2:	1880      	adds	r0, r0, r2
 80135c4:	68c4      	ldr	r4, [r0, #12]
 80135c6:	4284      	cmp	r4, r0
 80135c8:	d006      	beq.n	80135d8 <_malloc_r+0xa4>
 80135ca:	4666      	mov	r6, ip
 80135cc:	6861      	ldr	r1, [r4, #4]
 80135ce:	43b1      	bics	r1, r6
 80135d0:	1b4f      	subs	r7, r1, r5
 80135d2:	2f0f      	cmp	r7, #15
 80135d4:	dd31      	ble.n	801363a <_malloc_r+0x106>
 80135d6:	3b01      	subs	r3, #1
 80135d8:	3301      	adds	r3, #1
 80135da:	469c      	mov	ip, r3
 80135dc:	6914      	ldr	r4, [r2, #16]
 80135de:	49a7      	ldr	r1, [pc, #668]	; (801387c <_malloc_r+0x348>)
 80135e0:	428c      	cmp	r4, r1
 80135e2:	d055      	beq.n	8013690 <_malloc_r+0x15c>
 80135e4:	2303      	movs	r3, #3
 80135e6:	6860      	ldr	r0, [r4, #4]
 80135e8:	4398      	bics	r0, r3
 80135ea:	0003      	movs	r3, r0
 80135ec:	1b46      	subs	r6, r0, r5
 80135ee:	2e0f      	cmp	r6, #15
 80135f0:	dd31      	ble.n	8013656 <_malloc_r+0x122>
 80135f2:	2701      	movs	r7, #1
 80135f4:	1960      	adds	r0, r4, r5
 80135f6:	433d      	orrs	r5, r7
 80135f8:	4337      	orrs	r7, r6
 80135fa:	6065      	str	r5, [r4, #4]
 80135fc:	6150      	str	r0, [r2, #20]
 80135fe:	6110      	str	r0, [r2, #16]
 8013600:	60c1      	str	r1, [r0, #12]
 8013602:	6081      	str	r1, [r0, #8]
 8013604:	6047      	str	r7, [r0, #4]
 8013606:	50e6      	str	r6, [r4, r3]
 8013608:	e7ca      	b.n	80135a0 <_malloc_r+0x6c>
 801360a:	2914      	cmp	r1, #20
 801360c:	d802      	bhi.n	8013614 <_malloc_r+0xe0>
 801360e:	000b      	movs	r3, r1
 8013610:	335b      	adds	r3, #91	; 0x5b
 8013612:	e7d3      	b.n	80135bc <_malloc_r+0x88>
 8013614:	2954      	cmp	r1, #84	; 0x54
 8013616:	d802      	bhi.n	801361e <_malloc_r+0xea>
 8013618:	0b2b      	lsrs	r3, r5, #12
 801361a:	336e      	adds	r3, #110	; 0x6e
 801361c:	e7ce      	b.n	80135bc <_malloc_r+0x88>
 801361e:	23aa      	movs	r3, #170	; 0xaa
 8013620:	005b      	lsls	r3, r3, #1
 8013622:	4299      	cmp	r1, r3
 8013624:	d802      	bhi.n	801362c <_malloc_r+0xf8>
 8013626:	0beb      	lsrs	r3, r5, #15
 8013628:	3377      	adds	r3, #119	; 0x77
 801362a:	e7c7      	b.n	80135bc <_malloc_r+0x88>
 801362c:	4894      	ldr	r0, [pc, #592]	; (8013880 <_malloc_r+0x34c>)
 801362e:	237e      	movs	r3, #126	; 0x7e
 8013630:	4281      	cmp	r1, r0
 8013632:	d8c3      	bhi.n	80135bc <_malloc_r+0x88>
 8013634:	0cab      	lsrs	r3, r5, #18
 8013636:	337c      	adds	r3, #124	; 0x7c
 8013638:	e7c0      	b.n	80135bc <_malloc_r+0x88>
 801363a:	68e6      	ldr	r6, [r4, #12]
 801363c:	2f00      	cmp	r7, #0
 801363e:	db08      	blt.n	8013652 <_malloc_r+0x11e>
 8013640:	68a3      	ldr	r3, [r4, #8]
 8013642:	1861      	adds	r1, r4, r1
 8013644:	60de      	str	r6, [r3, #12]
 8013646:	60b3      	str	r3, [r6, #8]
 8013648:	2301      	movs	r3, #1
 801364a:	684a      	ldr	r2, [r1, #4]
 801364c:	4313      	orrs	r3, r2
 801364e:	604b      	str	r3, [r1, #4]
 8013650:	e7a6      	b.n	80135a0 <_malloc_r+0x6c>
 8013652:	0034      	movs	r4, r6
 8013654:	e7b7      	b.n	80135c6 <_malloc_r+0x92>
 8013656:	6151      	str	r1, [r2, #20]
 8013658:	6111      	str	r1, [r2, #16]
 801365a:	2e00      	cmp	r6, #0
 801365c:	db05      	blt.n	801366a <_malloc_r+0x136>
 801365e:	2101      	movs	r1, #1
 8013660:	1823      	adds	r3, r4, r0
 8013662:	685a      	ldr	r2, [r3, #4]
 8013664:	4311      	orrs	r1, r2
 8013666:	6059      	str	r1, [r3, #4]
 8013668:	e79a      	b.n	80135a0 <_malloc_r+0x6c>
 801366a:	4986      	ldr	r1, [pc, #536]	; (8013884 <_malloc_r+0x350>)
 801366c:	6857      	ldr	r7, [r2, #4]
 801366e:	4288      	cmp	r0, r1
 8013670:	d900      	bls.n	8013674 <_malloc_r+0x140>
 8013672:	e090      	b.n	8013796 <_malloc_r+0x262>
 8013674:	08c3      	lsrs	r3, r0, #3
 8013676:	39ff      	subs	r1, #255	; 0xff
 8013678:	1098      	asrs	r0, r3, #2
 801367a:	39ff      	subs	r1, #255	; 0xff
 801367c:	4081      	lsls	r1, r0
 801367e:	00db      	lsls	r3, r3, #3
 8013680:	4339      	orrs	r1, r7
 8013682:	6051      	str	r1, [r2, #4]
 8013684:	189a      	adds	r2, r3, r2
 8013686:	6893      	ldr	r3, [r2, #8]
 8013688:	60e2      	str	r2, [r4, #12]
 801368a:	60a3      	str	r3, [r4, #8]
 801368c:	6094      	str	r4, [r2, #8]
 801368e:	60dc      	str	r4, [r3, #12]
 8013690:	4663      	mov	r3, ip
 8013692:	2201      	movs	r2, #1
 8013694:	4978      	ldr	r1, [pc, #480]	; (8013878 <_malloc_r+0x344>)
 8013696:	109b      	asrs	r3, r3, #2
 8013698:	6848      	ldr	r0, [r1, #4]
 801369a:	409a      	lsls	r2, r3
 801369c:	4290      	cmp	r0, r2
 801369e:	d32d      	bcc.n	80136fc <_malloc_r+0x1c8>
 80136a0:	4202      	tst	r2, r0
 80136a2:	d109      	bne.n	80136b8 <_malloc_r+0x184>
 80136a4:	2303      	movs	r3, #3
 80136a6:	4664      	mov	r4, ip
 80136a8:	439c      	bics	r4, r3
 80136aa:	0023      	movs	r3, r4
 80136ac:	3304      	adds	r3, #4
 80136ae:	469c      	mov	ip, r3
 80136b0:	0052      	lsls	r2, r2, #1
 80136b2:	4202      	tst	r2, r0
 80136b4:	d100      	bne.n	80136b8 <_malloc_r+0x184>
 80136b6:	e0a4      	b.n	8013802 <_malloc_r+0x2ce>
 80136b8:	4663      	mov	r3, ip
 80136ba:	00db      	lsls	r3, r3, #3
 80136bc:	18cb      	adds	r3, r1, r3
 80136be:	9303      	str	r3, [sp, #12]
 80136c0:	001f      	movs	r7, r3
 80136c2:	4663      	mov	r3, ip
 80136c4:	9302      	str	r3, [sp, #8]
 80136c6:	68fc      	ldr	r4, [r7, #12]
 80136c8:	42bc      	cmp	r4, r7
 80136ca:	d000      	beq.n	80136ce <_malloc_r+0x19a>
 80136cc:	e09c      	b.n	8013808 <_malloc_r+0x2d4>
 80136ce:	2003      	movs	r0, #3
 80136d0:	9b02      	ldr	r3, [sp, #8]
 80136d2:	3708      	adds	r7, #8
 80136d4:	3301      	adds	r3, #1
 80136d6:	9302      	str	r3, [sp, #8]
 80136d8:	4203      	tst	r3, r0
 80136da:	d1f4      	bne.n	80136c6 <_malloc_r+0x192>
 80136dc:	4663      	mov	r3, ip
 80136de:	2003      	movs	r0, #3
 80136e0:	4203      	tst	r3, r0
 80136e2:	d000      	beq.n	80136e6 <_malloc_r+0x1b2>
 80136e4:	e0b3      	b.n	801384e <_malloc_r+0x31a>
 80136e6:	684b      	ldr	r3, [r1, #4]
 80136e8:	4393      	bics	r3, r2
 80136ea:	604b      	str	r3, [r1, #4]
 80136ec:	4b62      	ldr	r3, [pc, #392]	; (8013878 <_malloc_r+0x344>)
 80136ee:	0052      	lsls	r2, r2, #1
 80136f0:	685b      	ldr	r3, [r3, #4]
 80136f2:	4293      	cmp	r3, r2
 80136f4:	d302      	bcc.n	80136fc <_malloc_r+0x1c8>
 80136f6:	2a00      	cmp	r2, #0
 80136f8:	d000      	beq.n	80136fc <_malloc_r+0x1c8>
 80136fa:	e0b9      	b.n	8013870 <_malloc_r+0x33c>
 80136fc:	2303      	movs	r3, #3
 80136fe:	688f      	ldr	r7, [r1, #8]
 8013700:	687a      	ldr	r2, [r7, #4]
 8013702:	439a      	bics	r2, r3
 8013704:	9202      	str	r2, [sp, #8]
 8013706:	42aa      	cmp	r2, r5
 8013708:	d303      	bcc.n	8013712 <_malloc_r+0x1de>
 801370a:	1b52      	subs	r2, r2, r5
 801370c:	2a0f      	cmp	r2, #15
 801370e:	dd00      	ble.n	8013712 <_malloc_r+0x1de>
 8013710:	e116      	b.n	8013940 <_malloc_r+0x40c>
 8013712:	4b5d      	ldr	r3, [pc, #372]	; (8013888 <_malloc_r+0x354>)
 8013714:	2008      	movs	r0, #8
 8013716:	681e      	ldr	r6, [r3, #0]
 8013718:	f002 fd26 	bl	8016168 <sysconf>
 801371c:	4b5b      	ldr	r3, [pc, #364]	; (801388c <_malloc_r+0x358>)
 801371e:	3610      	adds	r6, #16
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	1976      	adds	r6, r6, r5
 8013724:	9003      	str	r0, [sp, #12]
 8013726:	3301      	adds	r3, #1
 8013728:	d003      	beq.n	8013732 <_malloc_r+0x1fe>
 801372a:	3e01      	subs	r6, #1
 801372c:	1836      	adds	r6, r6, r0
 801372e:	4243      	negs	r3, r0
 8013730:	401e      	ands	r6, r3
 8013732:	0031      	movs	r1, r6
 8013734:	9801      	ldr	r0, [sp, #4]
 8013736:	f000 fb27 	bl	8013d88 <_sbrk_r>
 801373a:	0004      	movs	r4, r0
 801373c:	1c43      	adds	r3, r0, #1
 801373e:	d100      	bne.n	8013742 <_malloc_r+0x20e>
 8013740:	e0d6      	b.n	80138f0 <_malloc_r+0x3bc>
 8013742:	9b02      	ldr	r3, [sp, #8]
 8013744:	18fb      	adds	r3, r7, r3
 8013746:	4283      	cmp	r3, r0
 8013748:	d903      	bls.n	8013752 <_malloc_r+0x21e>
 801374a:	4a4b      	ldr	r2, [pc, #300]	; (8013878 <_malloc_r+0x344>)
 801374c:	4297      	cmp	r7, r2
 801374e:	d000      	beq.n	8013752 <_malloc_r+0x21e>
 8013750:	e0ce      	b.n	80138f0 <_malloc_r+0x3bc>
 8013752:	494f      	ldr	r1, [pc, #316]	; (8013890 <_malloc_r+0x35c>)
 8013754:	680a      	ldr	r2, [r1, #0]
 8013756:	18b2      	adds	r2, r6, r2
 8013758:	600a      	str	r2, [r1, #0]
 801375a:	9903      	ldr	r1, [sp, #12]
 801375c:	4694      	mov	ip, r2
 801375e:	1e48      	subs	r0, r1, #1
 8013760:	42a3      	cmp	r3, r4
 8013762:	d000      	beq.n	8013766 <_malloc_r+0x232>
 8013764:	e09a      	b.n	801389c <_malloc_r+0x368>
 8013766:	4203      	tst	r3, r0
 8013768:	d000      	beq.n	801376c <_malloc_r+0x238>
 801376a:	e097      	b.n	801389c <_malloc_r+0x368>
 801376c:	9a02      	ldr	r2, [sp, #8]
 801376e:	4b42      	ldr	r3, [pc, #264]	; (8013878 <_malloc_r+0x344>)
 8013770:	1992      	adds	r2, r2, r6
 8013772:	2601      	movs	r6, #1
 8013774:	689b      	ldr	r3, [r3, #8]
 8013776:	4316      	orrs	r6, r2
 8013778:	605e      	str	r6, [r3, #4]
 801377a:	4b45      	ldr	r3, [pc, #276]	; (8013890 <_malloc_r+0x35c>)
 801377c:	4a45      	ldr	r2, [pc, #276]	; (8013894 <_malloc_r+0x360>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	6811      	ldr	r1, [r2, #0]
 8013782:	428b      	cmp	r3, r1
 8013784:	d900      	bls.n	8013788 <_malloc_r+0x254>
 8013786:	6013      	str	r3, [r2, #0]
 8013788:	4a43      	ldr	r2, [pc, #268]	; (8013898 <_malloc_r+0x364>)
 801378a:	6811      	ldr	r1, [r2, #0]
 801378c:	428b      	cmp	r3, r1
 801378e:	d800      	bhi.n	8013792 <_malloc_r+0x25e>
 8013790:	e0ae      	b.n	80138f0 <_malloc_r+0x3bc>
 8013792:	6013      	str	r3, [r2, #0]
 8013794:	e0ac      	b.n	80138f0 <_malloc_r+0x3bc>
 8013796:	0a40      	lsrs	r0, r0, #9
 8013798:	2804      	cmp	r0, #4
 801379a:	d810      	bhi.n	80137be <_malloc_r+0x28a>
 801379c:	0999      	lsrs	r1, r3, #6
 801379e:	3138      	adds	r1, #56	; 0x38
 80137a0:	00ce      	lsls	r6, r1, #3
 80137a2:	18b6      	adds	r6, r6, r2
 80137a4:	68b0      	ldr	r0, [r6, #8]
 80137a6:	4286      	cmp	r6, r0
 80137a8:	d124      	bne.n	80137f4 <_malloc_r+0x2c0>
 80137aa:	2301      	movs	r3, #1
 80137ac:	1089      	asrs	r1, r1, #2
 80137ae:	408b      	lsls	r3, r1
 80137b0:	433b      	orrs	r3, r7
 80137b2:	6053      	str	r3, [r2, #4]
 80137b4:	60e6      	str	r6, [r4, #12]
 80137b6:	60a0      	str	r0, [r4, #8]
 80137b8:	60b4      	str	r4, [r6, #8]
 80137ba:	60c4      	str	r4, [r0, #12]
 80137bc:	e768      	b.n	8013690 <_malloc_r+0x15c>
 80137be:	2814      	cmp	r0, #20
 80137c0:	d802      	bhi.n	80137c8 <_malloc_r+0x294>
 80137c2:	0001      	movs	r1, r0
 80137c4:	315b      	adds	r1, #91	; 0x5b
 80137c6:	e7eb      	b.n	80137a0 <_malloc_r+0x26c>
 80137c8:	2854      	cmp	r0, #84	; 0x54
 80137ca:	d802      	bhi.n	80137d2 <_malloc_r+0x29e>
 80137cc:	0b19      	lsrs	r1, r3, #12
 80137ce:	316e      	adds	r1, #110	; 0x6e
 80137d0:	e7e6      	b.n	80137a0 <_malloc_r+0x26c>
 80137d2:	21aa      	movs	r1, #170	; 0xaa
 80137d4:	0049      	lsls	r1, r1, #1
 80137d6:	4288      	cmp	r0, r1
 80137d8:	d802      	bhi.n	80137e0 <_malloc_r+0x2ac>
 80137da:	0bd9      	lsrs	r1, r3, #15
 80137dc:	3177      	adds	r1, #119	; 0x77
 80137de:	e7df      	b.n	80137a0 <_malloc_r+0x26c>
 80137e0:	4e27      	ldr	r6, [pc, #156]	; (8013880 <_malloc_r+0x34c>)
 80137e2:	217e      	movs	r1, #126	; 0x7e
 80137e4:	42b0      	cmp	r0, r6
 80137e6:	d8db      	bhi.n	80137a0 <_malloc_r+0x26c>
 80137e8:	0c99      	lsrs	r1, r3, #18
 80137ea:	317c      	adds	r1, #124	; 0x7c
 80137ec:	e7d8      	b.n	80137a0 <_malloc_r+0x26c>
 80137ee:	6880      	ldr	r0, [r0, #8]
 80137f0:	4286      	cmp	r6, r0
 80137f2:	d004      	beq.n	80137fe <_malloc_r+0x2ca>
 80137f4:	2103      	movs	r1, #3
 80137f6:	6842      	ldr	r2, [r0, #4]
 80137f8:	438a      	bics	r2, r1
 80137fa:	429a      	cmp	r2, r3
 80137fc:	d8f7      	bhi.n	80137ee <_malloc_r+0x2ba>
 80137fe:	68c6      	ldr	r6, [r0, #12]
 8013800:	e7d8      	b.n	80137b4 <_malloc_r+0x280>
 8013802:	2304      	movs	r3, #4
 8013804:	449c      	add	ip, r3
 8013806:	e753      	b.n	80136b0 <_malloc_r+0x17c>
 8013808:	2003      	movs	r0, #3
 801380a:	6863      	ldr	r3, [r4, #4]
 801380c:	4383      	bics	r3, r0
 801380e:	1b5e      	subs	r6, r3, r5
 8013810:	68e0      	ldr	r0, [r4, #12]
 8013812:	2e0f      	cmp	r6, #15
 8013814:	dd0e      	ble.n	8013834 <_malloc_r+0x300>
 8013816:	2701      	movs	r7, #1
 8013818:	1962      	adds	r2, r4, r5
 801381a:	433d      	orrs	r5, r7
 801381c:	6065      	str	r5, [r4, #4]
 801381e:	68a5      	ldr	r5, [r4, #8]
 8013820:	4337      	orrs	r7, r6
 8013822:	60e8      	str	r0, [r5, #12]
 8013824:	6085      	str	r5, [r0, #8]
 8013826:	614a      	str	r2, [r1, #20]
 8013828:	610a      	str	r2, [r1, #16]
 801382a:	4914      	ldr	r1, [pc, #80]	; (801387c <_malloc_r+0x348>)
 801382c:	6057      	str	r7, [r2, #4]
 801382e:	60d1      	str	r1, [r2, #12]
 8013830:	6091      	str	r1, [r2, #8]
 8013832:	e6e8      	b.n	8013606 <_malloc_r+0xd2>
 8013834:	2e00      	cmp	r6, #0
 8013836:	db08      	blt.n	801384a <_malloc_r+0x316>
 8013838:	2201      	movs	r2, #1
 801383a:	18e3      	adds	r3, r4, r3
 801383c:	6859      	ldr	r1, [r3, #4]
 801383e:	430a      	orrs	r2, r1
 8013840:	605a      	str	r2, [r3, #4]
 8013842:	68a3      	ldr	r3, [r4, #8]
 8013844:	60d8      	str	r0, [r3, #12]
 8013846:	6083      	str	r3, [r0, #8]
 8013848:	e6aa      	b.n	80135a0 <_malloc_r+0x6c>
 801384a:	0004      	movs	r4, r0
 801384c:	e73c      	b.n	80136c8 <_malloc_r+0x194>
 801384e:	2301      	movs	r3, #1
 8013850:	425b      	negs	r3, r3
 8013852:	449c      	add	ip, r3
 8013854:	9b03      	ldr	r3, [sp, #12]
 8013856:	6818      	ldr	r0, [r3, #0]
 8013858:	3b08      	subs	r3, #8
 801385a:	9003      	str	r0, [sp, #12]
 801385c:	4298      	cmp	r0, r3
 801385e:	d100      	bne.n	8013862 <_malloc_r+0x32e>
 8013860:	e73c      	b.n	80136dc <_malloc_r+0x1a8>
 8013862:	e743      	b.n	80136ec <_malloc_r+0x1b8>
 8013864:	2004      	movs	r0, #4
 8013866:	0052      	lsls	r2, r2, #1
 8013868:	4484      	add	ip, r0
 801386a:	421a      	tst	r2, r3
 801386c:	d0fa      	beq.n	8013864 <_malloc_r+0x330>
 801386e:	e723      	b.n	80136b8 <_malloc_r+0x184>
 8013870:	9802      	ldr	r0, [sp, #8]
 8013872:	4684      	mov	ip, r0
 8013874:	e7f9      	b.n	801386a <_malloc_r+0x336>
 8013876:	46c0      	nop			; (mov r8, r8)
 8013878:	20000674 	.word	0x20000674
 801387c:	2000067c 	.word	0x2000067c
 8013880:	00000554 	.word	0x00000554
 8013884:	000001ff 	.word	0x000001ff
 8013888:	200067f0 	.word	0x200067f0
 801388c:	20000a7c 	.word	0x20000a7c
 8013890:	200067c0 	.word	0x200067c0
 8013894:	200067e8 	.word	0x200067e8
 8013898:	200067ec 	.word	0x200067ec
 801389c:	492e      	ldr	r1, [pc, #184]	; (8013958 <_malloc_r+0x424>)
 801389e:	680a      	ldr	r2, [r1, #0]
 80138a0:	3201      	adds	r2, #1
 80138a2:	d133      	bne.n	801390c <_malloc_r+0x3d8>
 80138a4:	600c      	str	r4, [r1, #0]
 80138a6:	2307      	movs	r3, #7
 80138a8:	4023      	ands	r3, r4
 80138aa:	d002      	beq.n	80138b2 <_malloc_r+0x37e>
 80138ac:	2208      	movs	r2, #8
 80138ae:	1ad3      	subs	r3, r2, r3
 80138b0:	18e4      	adds	r4, r4, r3
 80138b2:	9a03      	ldr	r2, [sp, #12]
 80138b4:	19a6      	adds	r6, r4, r6
 80138b6:	18d3      	adds	r3, r2, r3
 80138b8:	4006      	ands	r6, r0
 80138ba:	1b9e      	subs	r6, r3, r6
 80138bc:	0031      	movs	r1, r6
 80138be:	9801      	ldr	r0, [sp, #4]
 80138c0:	f000 fa62 	bl	8013d88 <_sbrk_r>
 80138c4:	1c43      	adds	r3, r0, #1
 80138c6:	d101      	bne.n	80138cc <_malloc_r+0x398>
 80138c8:	0020      	movs	r0, r4
 80138ca:	2600      	movs	r6, #0
 80138cc:	4a23      	ldr	r2, [pc, #140]	; (801395c <_malloc_r+0x428>)
 80138ce:	1b00      	subs	r0, r0, r4
 80138d0:	6813      	ldr	r3, [r2, #0]
 80138d2:	199b      	adds	r3, r3, r6
 80138d4:	6013      	str	r3, [r2, #0]
 80138d6:	2301      	movs	r3, #1
 80138d8:	4a21      	ldr	r2, [pc, #132]	; (8013960 <_malloc_r+0x42c>)
 80138da:	1986      	adds	r6, r0, r6
 80138dc:	431e      	orrs	r6, r3
 80138de:	6094      	str	r4, [r2, #8]
 80138e0:	6066      	str	r6, [r4, #4]
 80138e2:	4297      	cmp	r7, r2
 80138e4:	d100      	bne.n	80138e8 <_malloc_r+0x3b4>
 80138e6:	e748      	b.n	801377a <_malloc_r+0x246>
 80138e8:	9a02      	ldr	r2, [sp, #8]
 80138ea:	2a0f      	cmp	r2, #15
 80138ec:	d813      	bhi.n	8013916 <_malloc_r+0x3e2>
 80138ee:	6063      	str	r3, [r4, #4]
 80138f0:	2203      	movs	r2, #3
 80138f2:	4b1b      	ldr	r3, [pc, #108]	; (8013960 <_malloc_r+0x42c>)
 80138f4:	689b      	ldr	r3, [r3, #8]
 80138f6:	685b      	ldr	r3, [r3, #4]
 80138f8:	4393      	bics	r3, r2
 80138fa:	1b5a      	subs	r2, r3, r5
 80138fc:	42ab      	cmp	r3, r5
 80138fe:	d301      	bcc.n	8013904 <_malloc_r+0x3d0>
 8013900:	2a0f      	cmp	r2, #15
 8013902:	dc1d      	bgt.n	8013940 <_malloc_r+0x40c>
 8013904:	9801      	ldr	r0, [sp, #4]
 8013906:	f000 f867 	bl	80139d8 <__malloc_unlock>
 801390a:	e620      	b.n	801354e <_malloc_r+0x1a>
 801390c:	1ae3      	subs	r3, r4, r3
 801390e:	4a13      	ldr	r2, [pc, #76]	; (801395c <_malloc_r+0x428>)
 8013910:	4463      	add	r3, ip
 8013912:	6013      	str	r3, [r2, #0]
 8013914:	e7c7      	b.n	80138a6 <_malloc_r+0x372>
 8013916:	2207      	movs	r2, #7
 8013918:	9e02      	ldr	r6, [sp, #8]
 801391a:	3e0c      	subs	r6, #12
 801391c:	4396      	bics	r6, r2
 801391e:	687a      	ldr	r2, [r7, #4]
 8013920:	4013      	ands	r3, r2
 8013922:	2205      	movs	r2, #5
 8013924:	4333      	orrs	r3, r6
 8013926:	607b      	str	r3, [r7, #4]
 8013928:	19bb      	adds	r3, r7, r6
 801392a:	605a      	str	r2, [r3, #4]
 801392c:	609a      	str	r2, [r3, #8]
 801392e:	2e0f      	cmp	r6, #15
 8013930:	d800      	bhi.n	8013934 <_malloc_r+0x400>
 8013932:	e722      	b.n	801377a <_malloc_r+0x246>
 8013934:	0039      	movs	r1, r7
 8013936:	9801      	ldr	r0, [sp, #4]
 8013938:	3108      	adds	r1, #8
 801393a:	f003 fb07 	bl	8016f4c <_free_r>
 801393e:	e71c      	b.n	801377a <_malloc_r+0x246>
 8013940:	2301      	movs	r3, #1
 8013942:	0018      	movs	r0, r3
 8013944:	4906      	ldr	r1, [pc, #24]	; (8013960 <_malloc_r+0x42c>)
 8013946:	4328      	orrs	r0, r5
 8013948:	688c      	ldr	r4, [r1, #8]
 801394a:	4313      	orrs	r3, r2
 801394c:	1965      	adds	r5, r4, r5
 801394e:	6060      	str	r0, [r4, #4]
 8013950:	608d      	str	r5, [r1, #8]
 8013952:	606b      	str	r3, [r5, #4]
 8013954:	e624      	b.n	80135a0 <_malloc_r+0x6c>
 8013956:	46c0      	nop			; (mov r8, r8)
 8013958:	20000a7c 	.word	0x20000a7c
 801395c:	200067c0 	.word	0x200067c0
 8013960:	20000674 	.word	0x20000674

08013964 <__ascii_mbtowc>:
 8013964:	b082      	sub	sp, #8
 8013966:	2900      	cmp	r1, #0
 8013968:	d100      	bne.n	801396c <__ascii_mbtowc+0x8>
 801396a:	a901      	add	r1, sp, #4
 801396c:	1e10      	subs	r0, r2, #0
 801396e:	d006      	beq.n	801397e <__ascii_mbtowc+0x1a>
 8013970:	2b00      	cmp	r3, #0
 8013972:	d006      	beq.n	8013982 <__ascii_mbtowc+0x1e>
 8013974:	7813      	ldrb	r3, [r2, #0]
 8013976:	600b      	str	r3, [r1, #0]
 8013978:	7810      	ldrb	r0, [r2, #0]
 801397a:	1e43      	subs	r3, r0, #1
 801397c:	4198      	sbcs	r0, r3
 801397e:	b002      	add	sp, #8
 8013980:	4770      	bx	lr
 8013982:	2002      	movs	r0, #2
 8013984:	4240      	negs	r0, r0
 8013986:	e7fa      	b.n	801397e <__ascii_mbtowc+0x1a>

08013988 <memcmp>:
 8013988:	b530      	push	{r4, r5, lr}
 801398a:	2400      	movs	r4, #0
 801398c:	42a2      	cmp	r2, r4
 801398e:	d101      	bne.n	8013994 <memcmp+0xc>
 8013990:	2000      	movs	r0, #0
 8013992:	e005      	b.n	80139a0 <memcmp+0x18>
 8013994:	5d03      	ldrb	r3, [r0, r4]
 8013996:	1c65      	adds	r5, r4, #1
 8013998:	5d0c      	ldrb	r4, [r1, r4]
 801399a:	42a3      	cmp	r3, r4
 801399c:	d001      	beq.n	80139a2 <memcmp+0x1a>
 801399e:	1b18      	subs	r0, r3, r4
 80139a0:	bd30      	pop	{r4, r5, pc}
 80139a2:	002c      	movs	r4, r5
 80139a4:	e7f2      	b.n	801398c <memcmp+0x4>

080139a6 <memcpy>:
 80139a6:	2300      	movs	r3, #0
 80139a8:	b510      	push	{r4, lr}
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d100      	bne.n	80139b0 <memcpy+0xa>
 80139ae:	bd10      	pop	{r4, pc}
 80139b0:	5ccc      	ldrb	r4, [r1, r3]
 80139b2:	54c4      	strb	r4, [r0, r3]
 80139b4:	3301      	adds	r3, #1
 80139b6:	e7f8      	b.n	80139aa <memcpy+0x4>

080139b8 <memset>:
 80139b8:	0003      	movs	r3, r0
 80139ba:	1812      	adds	r2, r2, r0
 80139bc:	4293      	cmp	r3, r2
 80139be:	d100      	bne.n	80139c2 <memset+0xa>
 80139c0:	4770      	bx	lr
 80139c2:	7019      	strb	r1, [r3, #0]
 80139c4:	3301      	adds	r3, #1
 80139c6:	e7f9      	b.n	80139bc <memset+0x4>

080139c8 <__malloc_lock>:
 80139c8:	b510      	push	{r4, lr}
 80139ca:	4802      	ldr	r0, [pc, #8]	; (80139d4 <__malloc_lock+0xc>)
 80139cc:	f003 feb2 	bl	8017734 <__retarget_lock_acquire_recursive>
 80139d0:	bd10      	pop	{r4, pc}
 80139d2:	46c0      	nop			; (mov r8, r8)
 80139d4:	20006dd4 	.word	0x20006dd4

080139d8 <__malloc_unlock>:
 80139d8:	b510      	push	{r4, lr}
 80139da:	4802      	ldr	r0, [pc, #8]	; (80139e4 <__malloc_unlock+0xc>)
 80139dc:	f003 feab 	bl	8017736 <__retarget_lock_release_recursive>
 80139e0:	bd10      	pop	{r4, pc}
 80139e2:	46c0      	nop			; (mov r8, r8)
 80139e4:	20006dd4 	.word	0x20006dd4

080139e8 <rand>:
 80139e8:	4b09      	ldr	r3, [pc, #36]	; (8013a10 <rand+0x28>)
 80139ea:	b510      	push	{r4, lr}
 80139ec:	681c      	ldr	r4, [r3, #0]
 80139ee:	4a09      	ldr	r2, [pc, #36]	; (8013a14 <rand+0x2c>)
 80139f0:	34a8      	adds	r4, #168	; 0xa8
 80139f2:	6820      	ldr	r0, [r4, #0]
 80139f4:	6861      	ldr	r1, [r4, #4]
 80139f6:	4b08      	ldr	r3, [pc, #32]	; (8013a18 <rand+0x30>)
 80139f8:	f7ec fdb8 	bl	800056c <__aeabi_lmul>
 80139fc:	2201      	movs	r2, #1
 80139fe:	2300      	movs	r3, #0
 8013a00:	1880      	adds	r0, r0, r2
 8013a02:	4159      	adcs	r1, r3
 8013a04:	6020      	str	r0, [r4, #0]
 8013a06:	6061      	str	r1, [r4, #4]
 8013a08:	0048      	lsls	r0, r1, #1
 8013a0a:	0840      	lsrs	r0, r0, #1
 8013a0c:	bd10      	pop	{r4, pc}
 8013a0e:	46c0      	nop			; (mov r8, r8)
 8013a10:	200000dc 	.word	0x200000dc
 8013a14:	4c957f2d 	.word	0x4c957f2d
 8013a18:	5851f42d 	.word	0x5851f42d

08013a1c <realloc>:
 8013a1c:	b510      	push	{r4, lr}
 8013a1e:	4b03      	ldr	r3, [pc, #12]	; (8013a2c <realloc+0x10>)
 8013a20:	000a      	movs	r2, r1
 8013a22:	0001      	movs	r1, r0
 8013a24:	6818      	ldr	r0, [r3, #0]
 8013a26:	f000 f803 	bl	8013a30 <_realloc_r>
 8013a2a:	bd10      	pop	{r4, pc}
 8013a2c:	200000dc 	.word	0x200000dc

08013a30 <_realloc_r>:
 8013a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a32:	b087      	sub	sp, #28
 8013a34:	9003      	str	r0, [sp, #12]
 8013a36:	1e0c      	subs	r4, r1, #0
 8013a38:	9205      	str	r2, [sp, #20]
 8013a3a:	d106      	bne.n	8013a4a <_realloc_r+0x1a>
 8013a3c:	0011      	movs	r1, r2
 8013a3e:	f7ff fd79 	bl	8013534 <_malloc_r>
 8013a42:	0007      	movs	r7, r0
 8013a44:	0038      	movs	r0, r7
 8013a46:	b007      	add	sp, #28
 8013a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a4a:	9803      	ldr	r0, [sp, #12]
 8013a4c:	f7ff ffbc 	bl	80139c8 <__malloc_lock>
 8013a50:	0023      	movs	r3, r4
 8013a52:	3b08      	subs	r3, #8
 8013a54:	685f      	ldr	r7, [r3, #4]
 8013a56:	9302      	str	r3, [sp, #8]
 8013a58:	003a      	movs	r2, r7
 8013a5a:	2303      	movs	r3, #3
 8013a5c:	9e05      	ldr	r6, [sp, #20]
 8013a5e:	439a      	bics	r2, r3
 8013a60:	360b      	adds	r6, #11
 8013a62:	9204      	str	r2, [sp, #16]
 8013a64:	2e16      	cmp	r6, #22
 8013a66:	d908      	bls.n	8013a7a <_realloc_r+0x4a>
 8013a68:	3304      	adds	r3, #4
 8013a6a:	439e      	bics	r6, r3
 8013a6c:	9601      	str	r6, [sp, #4]
 8013a6e:	d506      	bpl.n	8013a7e <_realloc_r+0x4e>
 8013a70:	230c      	movs	r3, #12
 8013a72:	9a03      	ldr	r2, [sp, #12]
 8013a74:	2700      	movs	r7, #0
 8013a76:	6013      	str	r3, [r2, #0]
 8013a78:	e7e4      	b.n	8013a44 <_realloc_r+0x14>
 8013a7a:	2310      	movs	r3, #16
 8013a7c:	9301      	str	r3, [sp, #4]
 8013a7e:	9b01      	ldr	r3, [sp, #4]
 8013a80:	9a05      	ldr	r2, [sp, #20]
 8013a82:	4293      	cmp	r3, r2
 8013a84:	d3f4      	bcc.n	8013a70 <_realloc_r+0x40>
 8013a86:	9b01      	ldr	r3, [sp, #4]
 8013a88:	9a04      	ldr	r2, [sp, #16]
 8013a8a:	4293      	cmp	r3, r2
 8013a8c:	dc00      	bgt.n	8013a90 <_realloc_r+0x60>
 8013a8e:	e16f      	b.n	8013d70 <_realloc_r+0x340>
 8013a90:	9b02      	ldr	r3, [sp, #8]
 8013a92:	48bc      	ldr	r0, [pc, #752]	; (8013d84 <_realloc_r+0x354>)
 8013a94:	189b      	adds	r3, r3, r2
 8013a96:	6882      	ldr	r2, [r0, #8]
 8013a98:	4694      	mov	ip, r2
 8013a9a:	685a      	ldr	r2, [r3, #4]
 8013a9c:	459c      	cmp	ip, r3
 8013a9e:	d006      	beq.n	8013aae <_realloc_r+0x7e>
 8013aa0:	2501      	movs	r5, #1
 8013aa2:	0011      	movs	r1, r2
 8013aa4:	43a9      	bics	r1, r5
 8013aa6:	1859      	adds	r1, r3, r1
 8013aa8:	6849      	ldr	r1, [r1, #4]
 8013aaa:	4229      	tst	r1, r5
 8013aac:	d146      	bne.n	8013b3c <_realloc_r+0x10c>
 8013aae:	2103      	movs	r1, #3
 8013ab0:	438a      	bics	r2, r1
 8013ab2:	9904      	ldr	r1, [sp, #16]
 8013ab4:	188e      	adds	r6, r1, r2
 8013ab6:	9901      	ldr	r1, [sp, #4]
 8013ab8:	459c      	cmp	ip, r3
 8013aba:	d117      	bne.n	8013aec <_realloc_r+0xbc>
 8013abc:	3110      	adds	r1, #16
 8013abe:	42b1      	cmp	r1, r6
 8013ac0:	dc3e      	bgt.n	8013b40 <_realloc_r+0x110>
 8013ac2:	9901      	ldr	r1, [sp, #4]
 8013ac4:	9b02      	ldr	r3, [sp, #8]
 8013ac6:	468c      	mov	ip, r1
 8013ac8:	4463      	add	r3, ip
 8013aca:	6083      	str	r3, [r0, #8]
 8013acc:	001a      	movs	r2, r3
 8013ace:	1a73      	subs	r3, r6, r1
 8013ad0:	2601      	movs	r6, #1
 8013ad2:	4333      	orrs	r3, r6
 8013ad4:	6053      	str	r3, [r2, #4]
 8013ad6:	0023      	movs	r3, r4
 8013ad8:	3b08      	subs	r3, #8
 8013ada:	685a      	ldr	r2, [r3, #4]
 8013adc:	9803      	ldr	r0, [sp, #12]
 8013ade:	4016      	ands	r6, r2
 8013ae0:	430e      	orrs	r6, r1
 8013ae2:	605e      	str	r6, [r3, #4]
 8013ae4:	f7ff ff78 	bl	80139d8 <__malloc_unlock>
 8013ae8:	0027      	movs	r7, r4
 8013aea:	e7ab      	b.n	8013a44 <_realloc_r+0x14>
 8013aec:	42b1      	cmp	r1, r6
 8013aee:	dc27      	bgt.n	8013b40 <_realloc_r+0x110>
 8013af0:	68da      	ldr	r2, [r3, #12]
 8013af2:	689b      	ldr	r3, [r3, #8]
 8013af4:	60da      	str	r2, [r3, #12]
 8013af6:	6093      	str	r3, [r2, #8]
 8013af8:	9b01      	ldr	r3, [sp, #4]
 8013afa:	9a02      	ldr	r2, [sp, #8]
 8013afc:	1af4      	subs	r4, r6, r3
 8013afe:	9b02      	ldr	r3, [sp, #8]
 8013b00:	1992      	adds	r2, r2, r6
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	9304      	str	r3, [sp, #16]
 8013b06:	2301      	movs	r3, #1
 8013b08:	9804      	ldr	r0, [sp, #16]
 8013b0a:	4018      	ands	r0, r3
 8013b0c:	2c0f      	cmp	r4, #15
 8013b0e:	d800      	bhi.n	8013b12 <_realloc_r+0xe2>
 8013b10:	e130      	b.n	8013d74 <_realloc_r+0x344>
 8013b12:	9d01      	ldr	r5, [sp, #4]
 8013b14:	9902      	ldr	r1, [sp, #8]
 8013b16:	4328      	orrs	r0, r5
 8013b18:	1949      	adds	r1, r1, r5
 8013b1a:	9d02      	ldr	r5, [sp, #8]
 8013b1c:	431c      	orrs	r4, r3
 8013b1e:	6068      	str	r0, [r5, #4]
 8013b20:	604c      	str	r4, [r1, #4]
 8013b22:	6850      	ldr	r0, [r2, #4]
 8013b24:	3108      	adds	r1, #8
 8013b26:	4303      	orrs	r3, r0
 8013b28:	6053      	str	r3, [r2, #4]
 8013b2a:	9803      	ldr	r0, [sp, #12]
 8013b2c:	f003 fa0e 	bl	8016f4c <_free_r>
 8013b30:	9803      	ldr	r0, [sp, #12]
 8013b32:	f7ff ff51 	bl	80139d8 <__malloc_unlock>
 8013b36:	9f02      	ldr	r7, [sp, #8]
 8013b38:	3708      	adds	r7, #8
 8013b3a:	e783      	b.n	8013a44 <_realloc_r+0x14>
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	0013      	movs	r3, r2
 8013b40:	07f9      	lsls	r1, r7, #31
 8013b42:	d500      	bpl.n	8013b46 <_realloc_r+0x116>
 8013b44:	e0c6      	b.n	8013cd4 <_realloc_r+0x2a4>
 8013b46:	0021      	movs	r1, r4
 8013b48:	3908      	subs	r1, #8
 8013b4a:	680d      	ldr	r5, [r1, #0]
 8013b4c:	9902      	ldr	r1, [sp, #8]
 8013b4e:	1b4d      	subs	r5, r1, r5
 8013b50:	2103      	movs	r1, #3
 8013b52:	686f      	ldr	r7, [r5, #4]
 8013b54:	438f      	bics	r7, r1
 8013b56:	9904      	ldr	r1, [sp, #16]
 8013b58:	187f      	adds	r7, r7, r1
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d100      	bne.n	8013b60 <_realloc_r+0x130>
 8013b5e:	e084      	b.n	8013c6a <_realloc_r+0x23a>
 8013b60:	19d6      	adds	r6, r2, r7
 8013b62:	459c      	cmp	ip, r3
 8013b64:	d148      	bne.n	8013bf8 <_realloc_r+0x1c8>
 8013b66:	9b01      	ldr	r3, [sp, #4]
 8013b68:	3310      	adds	r3, #16
 8013b6a:	42b3      	cmp	r3, r6
 8013b6c:	dc7d      	bgt.n	8013c6a <_realloc_r+0x23a>
 8013b6e:	68aa      	ldr	r2, [r5, #8]
 8013b70:	68eb      	ldr	r3, [r5, #12]
 8013b72:	002f      	movs	r7, r5
 8013b74:	60d3      	str	r3, [r2, #12]
 8013b76:	609a      	str	r2, [r3, #8]
 8013b78:	000a      	movs	r2, r1
 8013b7a:	3a04      	subs	r2, #4
 8013b7c:	3708      	adds	r7, #8
 8013b7e:	2a24      	cmp	r2, #36	; 0x24
 8013b80:	d835      	bhi.n	8013bee <_realloc_r+0x1be>
 8013b82:	003b      	movs	r3, r7
 8013b84:	2a13      	cmp	r2, #19
 8013b86:	d908      	bls.n	8013b9a <_realloc_r+0x16a>
 8013b88:	6823      	ldr	r3, [r4, #0]
 8013b8a:	60ab      	str	r3, [r5, #8]
 8013b8c:	6863      	ldr	r3, [r4, #4]
 8013b8e:	60eb      	str	r3, [r5, #12]
 8013b90:	2a1b      	cmp	r2, #27
 8013b92:	d81a      	bhi.n	8013bca <_realloc_r+0x19a>
 8013b94:	002b      	movs	r3, r5
 8013b96:	3408      	adds	r4, #8
 8013b98:	3310      	adds	r3, #16
 8013b9a:	6822      	ldr	r2, [r4, #0]
 8013b9c:	601a      	str	r2, [r3, #0]
 8013b9e:	6862      	ldr	r2, [r4, #4]
 8013ba0:	605a      	str	r2, [r3, #4]
 8013ba2:	68a2      	ldr	r2, [r4, #8]
 8013ba4:	609a      	str	r2, [r3, #8]
 8013ba6:	9b01      	ldr	r3, [sp, #4]
 8013ba8:	18ea      	adds	r2, r5, r3
 8013baa:	4b76      	ldr	r3, [pc, #472]	; (8013d84 <_realloc_r+0x354>)
 8013bac:	609a      	str	r2, [r3, #8]
 8013bae:	9b01      	ldr	r3, [sp, #4]
 8013bb0:	1af3      	subs	r3, r6, r3
 8013bb2:	2601      	movs	r6, #1
 8013bb4:	4333      	orrs	r3, r6
 8013bb6:	6053      	str	r3, [r2, #4]
 8013bb8:	686b      	ldr	r3, [r5, #4]
 8013bba:	401e      	ands	r6, r3
 8013bbc:	9b01      	ldr	r3, [sp, #4]
 8013bbe:	431e      	orrs	r6, r3
 8013bc0:	606e      	str	r6, [r5, #4]
 8013bc2:	9803      	ldr	r0, [sp, #12]
 8013bc4:	f7ff ff08 	bl	80139d8 <__malloc_unlock>
 8013bc8:	e73c      	b.n	8013a44 <_realloc_r+0x14>
 8013bca:	68a3      	ldr	r3, [r4, #8]
 8013bcc:	612b      	str	r3, [r5, #16]
 8013bce:	68e3      	ldr	r3, [r4, #12]
 8013bd0:	616b      	str	r3, [r5, #20]
 8013bd2:	2a24      	cmp	r2, #36	; 0x24
 8013bd4:	d003      	beq.n	8013bde <_realloc_r+0x1ae>
 8013bd6:	002b      	movs	r3, r5
 8013bd8:	3410      	adds	r4, #16
 8013bda:	3318      	adds	r3, #24
 8013bdc:	e7dd      	b.n	8013b9a <_realloc_r+0x16a>
 8013bde:	6923      	ldr	r3, [r4, #16]
 8013be0:	61ab      	str	r3, [r5, #24]
 8013be2:	002b      	movs	r3, r5
 8013be4:	6962      	ldr	r2, [r4, #20]
 8013be6:	3320      	adds	r3, #32
 8013be8:	61ea      	str	r2, [r5, #28]
 8013bea:	3418      	adds	r4, #24
 8013bec:	e7d5      	b.n	8013b9a <_realloc_r+0x16a>
 8013bee:	0021      	movs	r1, r4
 8013bf0:	0038      	movs	r0, r7
 8013bf2:	f003 fdac 	bl	801774e <memmove>
 8013bf6:	e7d6      	b.n	8013ba6 <_realloc_r+0x176>
 8013bf8:	9a01      	ldr	r2, [sp, #4]
 8013bfa:	42b2      	cmp	r2, r6
 8013bfc:	dc35      	bgt.n	8013c6a <_realloc_r+0x23a>
 8013bfe:	0028      	movs	r0, r5
 8013c00:	68da      	ldr	r2, [r3, #12]
 8013c02:	689b      	ldr	r3, [r3, #8]
 8013c04:	3008      	adds	r0, #8
 8013c06:	60da      	str	r2, [r3, #12]
 8013c08:	6093      	str	r3, [r2, #8]
 8013c0a:	68aa      	ldr	r2, [r5, #8]
 8013c0c:	68eb      	ldr	r3, [r5, #12]
 8013c0e:	60d3      	str	r3, [r2, #12]
 8013c10:	609a      	str	r2, [r3, #8]
 8013c12:	9a04      	ldr	r2, [sp, #16]
 8013c14:	3a04      	subs	r2, #4
 8013c16:	2a24      	cmp	r2, #36	; 0x24
 8013c18:	d823      	bhi.n	8013c62 <_realloc_r+0x232>
 8013c1a:	2a13      	cmp	r2, #19
 8013c1c:	d907      	bls.n	8013c2e <_realloc_r+0x1fe>
 8013c1e:	6823      	ldr	r3, [r4, #0]
 8013c20:	60ab      	str	r3, [r5, #8]
 8013c22:	6863      	ldr	r3, [r4, #4]
 8013c24:	60eb      	str	r3, [r5, #12]
 8013c26:	2a1b      	cmp	r2, #27
 8013c28:	d809      	bhi.n	8013c3e <_realloc_r+0x20e>
 8013c2a:	3408      	adds	r4, #8
 8013c2c:	3008      	adds	r0, #8
 8013c2e:	6823      	ldr	r3, [r4, #0]
 8013c30:	6003      	str	r3, [r0, #0]
 8013c32:	6863      	ldr	r3, [r4, #4]
 8013c34:	6043      	str	r3, [r0, #4]
 8013c36:	68a3      	ldr	r3, [r4, #8]
 8013c38:	6083      	str	r3, [r0, #8]
 8013c3a:	9502      	str	r5, [sp, #8]
 8013c3c:	e75c      	b.n	8013af8 <_realloc_r+0xc8>
 8013c3e:	68a3      	ldr	r3, [r4, #8]
 8013c40:	612b      	str	r3, [r5, #16]
 8013c42:	68e3      	ldr	r3, [r4, #12]
 8013c44:	616b      	str	r3, [r5, #20]
 8013c46:	2a24      	cmp	r2, #36	; 0x24
 8013c48:	d003      	beq.n	8013c52 <_realloc_r+0x222>
 8013c4a:	0028      	movs	r0, r5
 8013c4c:	3410      	adds	r4, #16
 8013c4e:	3018      	adds	r0, #24
 8013c50:	e7ed      	b.n	8013c2e <_realloc_r+0x1fe>
 8013c52:	0028      	movs	r0, r5
 8013c54:	6923      	ldr	r3, [r4, #16]
 8013c56:	3020      	adds	r0, #32
 8013c58:	61ab      	str	r3, [r5, #24]
 8013c5a:	6963      	ldr	r3, [r4, #20]
 8013c5c:	3418      	adds	r4, #24
 8013c5e:	61eb      	str	r3, [r5, #28]
 8013c60:	e7e5      	b.n	8013c2e <_realloc_r+0x1fe>
 8013c62:	0021      	movs	r1, r4
 8013c64:	f003 fd73 	bl	801774e <memmove>
 8013c68:	e7e7      	b.n	8013c3a <_realloc_r+0x20a>
 8013c6a:	9b01      	ldr	r3, [sp, #4]
 8013c6c:	42bb      	cmp	r3, r7
 8013c6e:	dc31      	bgt.n	8013cd4 <_realloc_r+0x2a4>
 8013c70:	0028      	movs	r0, r5
 8013c72:	68aa      	ldr	r2, [r5, #8]
 8013c74:	68eb      	ldr	r3, [r5, #12]
 8013c76:	3008      	adds	r0, #8
 8013c78:	60d3      	str	r3, [r2, #12]
 8013c7a:	609a      	str	r2, [r3, #8]
 8013c7c:	9a04      	ldr	r2, [sp, #16]
 8013c7e:	3a04      	subs	r2, #4
 8013c80:	2a24      	cmp	r2, #36	; 0x24
 8013c82:	d823      	bhi.n	8013ccc <_realloc_r+0x29c>
 8013c84:	2a13      	cmp	r2, #19
 8013c86:	d907      	bls.n	8013c98 <_realloc_r+0x268>
 8013c88:	6823      	ldr	r3, [r4, #0]
 8013c8a:	60ab      	str	r3, [r5, #8]
 8013c8c:	6863      	ldr	r3, [r4, #4]
 8013c8e:	60eb      	str	r3, [r5, #12]
 8013c90:	2a1b      	cmp	r2, #27
 8013c92:	d809      	bhi.n	8013ca8 <_realloc_r+0x278>
 8013c94:	3408      	adds	r4, #8
 8013c96:	3008      	adds	r0, #8
 8013c98:	6823      	ldr	r3, [r4, #0]
 8013c9a:	6003      	str	r3, [r0, #0]
 8013c9c:	6863      	ldr	r3, [r4, #4]
 8013c9e:	6043      	str	r3, [r0, #4]
 8013ca0:	68a3      	ldr	r3, [r4, #8]
 8013ca2:	6083      	str	r3, [r0, #8]
 8013ca4:	003e      	movs	r6, r7
 8013ca6:	e7c8      	b.n	8013c3a <_realloc_r+0x20a>
 8013ca8:	68a3      	ldr	r3, [r4, #8]
 8013caa:	612b      	str	r3, [r5, #16]
 8013cac:	68e3      	ldr	r3, [r4, #12]
 8013cae:	616b      	str	r3, [r5, #20]
 8013cb0:	2a24      	cmp	r2, #36	; 0x24
 8013cb2:	d003      	beq.n	8013cbc <_realloc_r+0x28c>
 8013cb4:	0028      	movs	r0, r5
 8013cb6:	3410      	adds	r4, #16
 8013cb8:	3018      	adds	r0, #24
 8013cba:	e7ed      	b.n	8013c98 <_realloc_r+0x268>
 8013cbc:	0028      	movs	r0, r5
 8013cbe:	6923      	ldr	r3, [r4, #16]
 8013cc0:	3020      	adds	r0, #32
 8013cc2:	61ab      	str	r3, [r5, #24]
 8013cc4:	6963      	ldr	r3, [r4, #20]
 8013cc6:	3418      	adds	r4, #24
 8013cc8:	61eb      	str	r3, [r5, #28]
 8013cca:	e7e5      	b.n	8013c98 <_realloc_r+0x268>
 8013ccc:	0021      	movs	r1, r4
 8013cce:	f003 fd3e 	bl	801774e <memmove>
 8013cd2:	e7e7      	b.n	8013ca4 <_realloc_r+0x274>
 8013cd4:	9905      	ldr	r1, [sp, #20]
 8013cd6:	9803      	ldr	r0, [sp, #12]
 8013cd8:	f7ff fc2c 	bl	8013534 <_malloc_r>
 8013cdc:	1e07      	subs	r7, r0, #0
 8013cde:	d100      	bne.n	8013ce2 <_realloc_r+0x2b2>
 8013ce0:	e76f      	b.n	8013bc2 <_realloc_r+0x192>
 8013ce2:	0023      	movs	r3, r4
 8013ce4:	2201      	movs	r2, #1
 8013ce6:	3b08      	subs	r3, #8
 8013ce8:	685b      	ldr	r3, [r3, #4]
 8013cea:	4393      	bics	r3, r2
 8013cec:	9a02      	ldr	r2, [sp, #8]
 8013cee:	18d3      	adds	r3, r2, r3
 8013cf0:	0002      	movs	r2, r0
 8013cf2:	3a08      	subs	r2, #8
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	d105      	bne.n	8013d04 <_realloc_r+0x2d4>
 8013cf8:	685e      	ldr	r6, [r3, #4]
 8013cfa:	2303      	movs	r3, #3
 8013cfc:	439e      	bics	r6, r3
 8013cfe:	9b04      	ldr	r3, [sp, #16]
 8013d00:	18f6      	adds	r6, r6, r3
 8013d02:	e6f9      	b.n	8013af8 <_realloc_r+0xc8>
 8013d04:	9a04      	ldr	r2, [sp, #16]
 8013d06:	3a04      	subs	r2, #4
 8013d08:	2a24      	cmp	r2, #36	; 0x24
 8013d0a:	d82d      	bhi.n	8013d68 <_realloc_r+0x338>
 8013d0c:	2a13      	cmp	r2, #19
 8013d0e:	d928      	bls.n	8013d62 <_realloc_r+0x332>
 8013d10:	6823      	ldr	r3, [r4, #0]
 8013d12:	6003      	str	r3, [r0, #0]
 8013d14:	6863      	ldr	r3, [r4, #4]
 8013d16:	6043      	str	r3, [r0, #4]
 8013d18:	2a1b      	cmp	r2, #27
 8013d1a:	d80e      	bhi.n	8013d3a <_realloc_r+0x30a>
 8013d1c:	0022      	movs	r2, r4
 8013d1e:	0003      	movs	r3, r0
 8013d20:	3208      	adds	r2, #8
 8013d22:	3308      	adds	r3, #8
 8013d24:	6811      	ldr	r1, [r2, #0]
 8013d26:	6019      	str	r1, [r3, #0]
 8013d28:	6851      	ldr	r1, [r2, #4]
 8013d2a:	6059      	str	r1, [r3, #4]
 8013d2c:	6892      	ldr	r2, [r2, #8]
 8013d2e:	609a      	str	r2, [r3, #8]
 8013d30:	0021      	movs	r1, r4
 8013d32:	9803      	ldr	r0, [sp, #12]
 8013d34:	f003 f90a 	bl	8016f4c <_free_r>
 8013d38:	e743      	b.n	8013bc2 <_realloc_r+0x192>
 8013d3a:	68a3      	ldr	r3, [r4, #8]
 8013d3c:	6083      	str	r3, [r0, #8]
 8013d3e:	68e3      	ldr	r3, [r4, #12]
 8013d40:	60c3      	str	r3, [r0, #12]
 8013d42:	2a24      	cmp	r2, #36	; 0x24
 8013d44:	d004      	beq.n	8013d50 <_realloc_r+0x320>
 8013d46:	0022      	movs	r2, r4
 8013d48:	0003      	movs	r3, r0
 8013d4a:	3210      	adds	r2, #16
 8013d4c:	3310      	adds	r3, #16
 8013d4e:	e7e9      	b.n	8013d24 <_realloc_r+0x2f4>
 8013d50:	6923      	ldr	r3, [r4, #16]
 8013d52:	0022      	movs	r2, r4
 8013d54:	6103      	str	r3, [r0, #16]
 8013d56:	0003      	movs	r3, r0
 8013d58:	6961      	ldr	r1, [r4, #20]
 8013d5a:	3218      	adds	r2, #24
 8013d5c:	3318      	adds	r3, #24
 8013d5e:	6141      	str	r1, [r0, #20]
 8013d60:	e7e0      	b.n	8013d24 <_realloc_r+0x2f4>
 8013d62:	0003      	movs	r3, r0
 8013d64:	0022      	movs	r2, r4
 8013d66:	e7dd      	b.n	8013d24 <_realloc_r+0x2f4>
 8013d68:	0021      	movs	r1, r4
 8013d6a:	f003 fcf0 	bl	801774e <memmove>
 8013d6e:	e7df      	b.n	8013d30 <_realloc_r+0x300>
 8013d70:	9e04      	ldr	r6, [sp, #16]
 8013d72:	e6c1      	b.n	8013af8 <_realloc_r+0xc8>
 8013d74:	9902      	ldr	r1, [sp, #8]
 8013d76:	4306      	orrs	r6, r0
 8013d78:	604e      	str	r6, [r1, #4]
 8013d7a:	6851      	ldr	r1, [r2, #4]
 8013d7c:	430b      	orrs	r3, r1
 8013d7e:	6053      	str	r3, [r2, #4]
 8013d80:	e6d6      	b.n	8013b30 <_realloc_r+0x100>
 8013d82:	46c0      	nop			; (mov r8, r8)
 8013d84:	20000674 	.word	0x20000674

08013d88 <_sbrk_r>:
 8013d88:	2300      	movs	r3, #0
 8013d8a:	b570      	push	{r4, r5, r6, lr}
 8013d8c:	4c06      	ldr	r4, [pc, #24]	; (8013da8 <_sbrk_r+0x20>)
 8013d8e:	0005      	movs	r5, r0
 8013d90:	0008      	movs	r0, r1
 8013d92:	6023      	str	r3, [r4, #0]
 8013d94:	f004 f9c0 	bl	8018118 <_sbrk>
 8013d98:	1c43      	adds	r3, r0, #1
 8013d9a:	d103      	bne.n	8013da4 <_sbrk_r+0x1c>
 8013d9c:	6823      	ldr	r3, [r4, #0]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d000      	beq.n	8013da4 <_sbrk_r+0x1c>
 8013da2:	602b      	str	r3, [r5, #0]
 8013da4:	bd70      	pop	{r4, r5, r6, pc}
 8013da6:	46c0      	nop			; (mov r8, r8)
 8013da8:	20006ddc 	.word	0x20006ddc

08013dac <sprintf>:
 8013dac:	b40e      	push	{r1, r2, r3}
 8013dae:	b500      	push	{lr}
 8013db0:	490b      	ldr	r1, [pc, #44]	; (8013de0 <sprintf+0x34>)
 8013db2:	b09c      	sub	sp, #112	; 0x70
 8013db4:	ab1d      	add	r3, sp, #116	; 0x74
 8013db6:	9002      	str	r0, [sp, #8]
 8013db8:	9006      	str	r0, [sp, #24]
 8013dba:	9107      	str	r1, [sp, #28]
 8013dbc:	9104      	str	r1, [sp, #16]
 8013dbe:	4809      	ldr	r0, [pc, #36]	; (8013de4 <sprintf+0x38>)
 8013dc0:	4909      	ldr	r1, [pc, #36]	; (8013de8 <sprintf+0x3c>)
 8013dc2:	cb04      	ldmia	r3!, {r2}
 8013dc4:	9105      	str	r1, [sp, #20]
 8013dc6:	6800      	ldr	r0, [r0, #0]
 8013dc8:	a902      	add	r1, sp, #8
 8013dca:	9301      	str	r3, [sp, #4]
 8013dcc:	f000 ff78 	bl	8014cc0 <_svfprintf_r>
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	9a02      	ldr	r2, [sp, #8]
 8013dd4:	7013      	strb	r3, [r2, #0]
 8013dd6:	b01c      	add	sp, #112	; 0x70
 8013dd8:	bc08      	pop	{r3}
 8013dda:	b003      	add	sp, #12
 8013ddc:	4718      	bx	r3
 8013dde:	46c0      	nop			; (mov r8, r8)
 8013de0:	7fffffff 	.word	0x7fffffff
 8013de4:	200000dc 	.word	0x200000dc
 8013de8:	ffff0208 	.word	0xffff0208

08013dec <strcat>:
 8013dec:	0002      	movs	r2, r0
 8013dee:	b510      	push	{r4, lr}
 8013df0:	7813      	ldrb	r3, [r2, #0]
 8013df2:	1c54      	adds	r4, r2, #1
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d105      	bne.n	8013e04 <strcat+0x18>
 8013df8:	5ccc      	ldrb	r4, [r1, r3]
 8013dfa:	54d4      	strb	r4, [r2, r3]
 8013dfc:	3301      	adds	r3, #1
 8013dfe:	2c00      	cmp	r4, #0
 8013e00:	d1fa      	bne.n	8013df8 <strcat+0xc>
 8013e02:	bd10      	pop	{r4, pc}
 8013e04:	0022      	movs	r2, r4
 8013e06:	e7f3      	b.n	8013df0 <strcat+0x4>

08013e08 <strchr>:
 8013e08:	b2c9      	uxtb	r1, r1
 8013e0a:	7803      	ldrb	r3, [r0, #0]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d004      	beq.n	8013e1a <strchr+0x12>
 8013e10:	428b      	cmp	r3, r1
 8013e12:	d100      	bne.n	8013e16 <strchr+0xe>
 8013e14:	4770      	bx	lr
 8013e16:	3001      	adds	r0, #1
 8013e18:	e7f7      	b.n	8013e0a <strchr+0x2>
 8013e1a:	424b      	negs	r3, r1
 8013e1c:	4159      	adcs	r1, r3
 8013e1e:	4249      	negs	r1, r1
 8013e20:	4008      	ands	r0, r1
 8013e22:	e7f7      	b.n	8013e14 <strchr+0xc>

08013e24 <strcpy>:
 8013e24:	0003      	movs	r3, r0
 8013e26:	780a      	ldrb	r2, [r1, #0]
 8013e28:	3101      	adds	r1, #1
 8013e2a:	701a      	strb	r2, [r3, #0]
 8013e2c:	3301      	adds	r3, #1
 8013e2e:	2a00      	cmp	r2, #0
 8013e30:	d1f9      	bne.n	8013e26 <strcpy+0x2>
 8013e32:	4770      	bx	lr

08013e34 <strncmp>:
 8013e34:	2300      	movs	r3, #0
 8013e36:	b530      	push	{r4, r5, lr}
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	d00a      	beq.n	8013e52 <strncmp+0x1e>
 8013e3c:	3a01      	subs	r2, #1
 8013e3e:	5cc4      	ldrb	r4, [r0, r3]
 8013e40:	5ccd      	ldrb	r5, [r1, r3]
 8013e42:	42ac      	cmp	r4, r5
 8013e44:	d104      	bne.n	8013e50 <strncmp+0x1c>
 8013e46:	4293      	cmp	r3, r2
 8013e48:	d002      	beq.n	8013e50 <strncmp+0x1c>
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	2c00      	cmp	r4, #0
 8013e4e:	d1f6      	bne.n	8013e3e <strncmp+0xa>
 8013e50:	1b63      	subs	r3, r4, r5
 8013e52:	0018      	movs	r0, r3
 8013e54:	bd30      	pop	{r4, r5, pc}

08013e56 <strncpy>:
 8013e56:	b530      	push	{r4, r5, lr}
 8013e58:	0005      	movs	r5, r0
 8013e5a:	2a00      	cmp	r2, #0
 8013e5c:	d100      	bne.n	8013e60 <strncpy+0xa>
 8013e5e:	bd30      	pop	{r4, r5, pc}
 8013e60:	780c      	ldrb	r4, [r1, #0]
 8013e62:	3a01      	subs	r2, #1
 8013e64:	1c6b      	adds	r3, r5, #1
 8013e66:	702c      	strb	r4, [r5, #0]
 8013e68:	3101      	adds	r1, #1
 8013e6a:	2c00      	cmp	r4, #0
 8013e6c:	d105      	bne.n	8013e7a <strncpy+0x24>
 8013e6e:	189a      	adds	r2, r3, r2
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d0f4      	beq.n	8013e5e <strncpy+0x8>
 8013e74:	701c      	strb	r4, [r3, #0]
 8013e76:	3301      	adds	r3, #1
 8013e78:	e7fa      	b.n	8013e70 <strncpy+0x1a>
 8013e7a:	001d      	movs	r5, r3
 8013e7c:	e7ed      	b.n	8013e5a <strncpy+0x4>
	...

08013e80 <sulp>:
 8013e80:	b570      	push	{r4, r5, r6, lr}
 8013e82:	0016      	movs	r6, r2
 8013e84:	000d      	movs	r5, r1
 8013e86:	f003 ff17 	bl	8017cb8 <__ulp>
 8013e8a:	2e00      	cmp	r6, #0
 8013e8c:	d00d      	beq.n	8013eaa <sulp+0x2a>
 8013e8e:	236b      	movs	r3, #107	; 0x6b
 8013e90:	006a      	lsls	r2, r5, #1
 8013e92:	0d52      	lsrs	r2, r2, #21
 8013e94:	1a9b      	subs	r3, r3, r2
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	dd07      	ble.n	8013eaa <sulp+0x2a>
 8013e9a:	2400      	movs	r4, #0
 8013e9c:	4a03      	ldr	r2, [pc, #12]	; (8013eac <sulp+0x2c>)
 8013e9e:	051b      	lsls	r3, r3, #20
 8013ea0:	189d      	adds	r5, r3, r2
 8013ea2:	002b      	movs	r3, r5
 8013ea4:	0022      	movs	r2, r4
 8013ea6:	f7ee f8d7 	bl	8002058 <__aeabi_dmul>
 8013eaa:	bd70      	pop	{r4, r5, r6, pc}
 8013eac:	3ff00000 	.word	0x3ff00000

08013eb0 <_strtod_l>:
 8013eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013eb2:	b0a7      	sub	sp, #156	; 0x9c
 8013eb4:	9307      	str	r3, [sp, #28]
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	9004      	str	r0, [sp, #16]
 8013eba:	9807      	ldr	r0, [sp, #28]
 8013ebc:	9322      	str	r3, [sp, #136]	; 0x88
 8013ebe:	9106      	str	r1, [sp, #24]
 8013ec0:	921d      	str	r2, [sp, #116]	; 0x74
 8013ec2:	f003 fc28 	bl	8017716 <__localeconv_l>
 8013ec6:	0005      	movs	r5, r0
 8013ec8:	6800      	ldr	r0, [r0, #0]
 8013eca:	f7ec f925 	bl	8000118 <strlen>
 8013ece:	2600      	movs	r6, #0
 8013ed0:	2700      	movs	r7, #0
 8013ed2:	9b06      	ldr	r3, [sp, #24]
 8013ed4:	9005      	str	r0, [sp, #20]
 8013ed6:	9321      	str	r3, [sp, #132]	; 0x84
 8013ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013eda:	781a      	ldrb	r2, [r3, #0]
 8013edc:	2a0d      	cmp	r2, #13
 8013ede:	d839      	bhi.n	8013f54 <_strtod_l+0xa4>
 8013ee0:	2a09      	cmp	r2, #9
 8013ee2:	d23d      	bcs.n	8013f60 <_strtod_l+0xb0>
 8013ee4:	2a00      	cmp	r2, #0
 8013ee6:	d044      	beq.n	8013f72 <_strtod_l+0xc2>
 8013ee8:	2300      	movs	r3, #0
 8013eea:	9313      	str	r3, [sp, #76]	; 0x4c
 8013eec:	2200      	movs	r2, #0
 8013eee:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8013ef0:	920c      	str	r2, [sp, #48]	; 0x30
 8013ef2:	7823      	ldrb	r3, [r4, #0]
 8013ef4:	2b30      	cmp	r3, #48	; 0x30
 8013ef6:	d000      	beq.n	8013efa <_strtod_l+0x4a>
 8013ef8:	e07e      	b.n	8013ff8 <_strtod_l+0x148>
 8013efa:	7863      	ldrb	r3, [r4, #1]
 8013efc:	2b58      	cmp	r3, #88	; 0x58
 8013efe:	d002      	beq.n	8013f06 <_strtod_l+0x56>
 8013f00:	2b78      	cmp	r3, #120	; 0x78
 8013f02:	d000      	beq.n	8013f06 <_strtod_l+0x56>
 8013f04:	e06e      	b.n	8013fe4 <_strtod_l+0x134>
 8013f06:	9b07      	ldr	r3, [sp, #28]
 8013f08:	4a96      	ldr	r2, [pc, #600]	; (8014164 <_strtod_l+0x2b4>)
 8013f0a:	9302      	str	r3, [sp, #8]
 8013f0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013f0e:	a921      	add	r1, sp, #132	; 0x84
 8013f10:	9301      	str	r3, [sp, #4]
 8013f12:	ab22      	add	r3, sp, #136	; 0x88
 8013f14:	9300      	str	r3, [sp, #0]
 8013f16:	9804      	ldr	r0, [sp, #16]
 8013f18:	ab23      	add	r3, sp, #140	; 0x8c
 8013f1a:	f003 f914 	bl	8017146 <__gethex>
 8013f1e:	2507      	movs	r5, #7
 8013f20:	9005      	str	r0, [sp, #20]
 8013f22:	4005      	ands	r5, r0
 8013f24:	d005      	beq.n	8013f32 <_strtod_l+0x82>
 8013f26:	2d06      	cmp	r5, #6
 8013f28:	d12f      	bne.n	8013f8a <_strtod_l+0xda>
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	3401      	adds	r4, #1
 8013f2e:	9421      	str	r4, [sp, #132]	; 0x84
 8013f30:	9313      	str	r3, [sp, #76]	; 0x4c
 8013f32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d002      	beq.n	8013f3e <_strtod_l+0x8e>
 8013f38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013f3c:	601a      	str	r2, [r3, #0]
 8013f3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d01d      	beq.n	8013f80 <_strtod_l+0xd0>
 8013f44:	2380      	movs	r3, #128	; 0x80
 8013f46:	0032      	movs	r2, r6
 8013f48:	061b      	lsls	r3, r3, #24
 8013f4a:	18fb      	adds	r3, r7, r3
 8013f4c:	0010      	movs	r0, r2
 8013f4e:	0019      	movs	r1, r3
 8013f50:	b027      	add	sp, #156	; 0x9c
 8013f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f54:	2a2b      	cmp	r2, #43	; 0x2b
 8013f56:	d016      	beq.n	8013f86 <_strtod_l+0xd6>
 8013f58:	2a2d      	cmp	r2, #45	; 0x2d
 8013f5a:	d003      	beq.n	8013f64 <_strtod_l+0xb4>
 8013f5c:	2a20      	cmp	r2, #32
 8013f5e:	d1c3      	bne.n	8013ee8 <_strtod_l+0x38>
 8013f60:	3301      	adds	r3, #1
 8013f62:	e7b8      	b.n	8013ed6 <_strtod_l+0x26>
 8013f64:	2201      	movs	r2, #1
 8013f66:	9213      	str	r2, [sp, #76]	; 0x4c
 8013f68:	1c5a      	adds	r2, r3, #1
 8013f6a:	9221      	str	r2, [sp, #132]	; 0x84
 8013f6c:	785b      	ldrb	r3, [r3, #1]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d1bc      	bne.n	8013eec <_strtod_l+0x3c>
 8013f72:	9b06      	ldr	r3, [sp, #24]
 8013f74:	9321      	str	r3, [sp, #132]	; 0x84
 8013f76:	2300      	movs	r3, #0
 8013f78:	9313      	str	r3, [sp, #76]	; 0x4c
 8013f7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d1db      	bne.n	8013f38 <_strtod_l+0x88>
 8013f80:	0032      	movs	r2, r6
 8013f82:	003b      	movs	r3, r7
 8013f84:	e7e2      	b.n	8013f4c <_strtod_l+0x9c>
 8013f86:	2200      	movs	r2, #0
 8013f88:	e7ed      	b.n	8013f66 <_strtod_l+0xb6>
 8013f8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013f8c:	2a00      	cmp	r2, #0
 8013f8e:	d007      	beq.n	8013fa0 <_strtod_l+0xf0>
 8013f90:	2135      	movs	r1, #53	; 0x35
 8013f92:	a824      	add	r0, sp, #144	; 0x90
 8013f94:	f003 ff7d 	bl	8017e92 <__copybits>
 8013f98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013f9a:	9804      	ldr	r0, [sp, #16]
 8013f9c:	f003 fc12 	bl	80177c4 <_Bfree>
 8013fa0:	1e68      	subs	r0, r5, #1
 8013fa2:	2804      	cmp	r0, #4
 8013fa4:	d806      	bhi.n	8013fb4 <_strtod_l+0x104>
 8013fa6:	f7ec f8bf 	bl	8000128 <__gnu_thumb1_case_uqi>
 8013faa:	030c      	.short	0x030c
 8013fac:	1917      	.short	0x1917
 8013fae:	0c          	.byte	0x0c
 8013faf:	00          	.byte	0x00
 8013fb0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013fb2:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8013fb4:	9b05      	ldr	r3, [sp, #20]
 8013fb6:	071b      	lsls	r3, r3, #28
 8013fb8:	d5bb      	bpl.n	8013f32 <_strtod_l+0x82>
 8013fba:	2380      	movs	r3, #128	; 0x80
 8013fbc:	061b      	lsls	r3, r3, #24
 8013fbe:	431f      	orrs	r7, r3
 8013fc0:	e7b7      	b.n	8013f32 <_strtod_l+0x82>
 8013fc2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013fc4:	4a68      	ldr	r2, [pc, #416]	; (8014168 <_strtod_l+0x2b8>)
 8013fc6:	4969      	ldr	r1, [pc, #420]	; (801416c <_strtod_l+0x2bc>)
 8013fc8:	401a      	ands	r2, r3
 8013fca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013fcc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013fce:	185b      	adds	r3, r3, r1
 8013fd0:	051b      	lsls	r3, r3, #20
 8013fd2:	431a      	orrs	r2, r3
 8013fd4:	0017      	movs	r7, r2
 8013fd6:	e7ed      	b.n	8013fb4 <_strtod_l+0x104>
 8013fd8:	4f65      	ldr	r7, [pc, #404]	; (8014170 <_strtod_l+0x2c0>)
 8013fda:	e7eb      	b.n	8013fb4 <_strtod_l+0x104>
 8013fdc:	2601      	movs	r6, #1
 8013fde:	4f65      	ldr	r7, [pc, #404]	; (8014174 <_strtod_l+0x2c4>)
 8013fe0:	4276      	negs	r6, r6
 8013fe2:	e7e7      	b.n	8013fb4 <_strtod_l+0x104>
 8013fe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013fe6:	1c5a      	adds	r2, r3, #1
 8013fe8:	9221      	str	r2, [sp, #132]	; 0x84
 8013fea:	785b      	ldrb	r3, [r3, #1]
 8013fec:	2b30      	cmp	r3, #48	; 0x30
 8013fee:	d0f9      	beq.n	8013fe4 <_strtod_l+0x134>
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d09e      	beq.n	8013f32 <_strtod_l+0x82>
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8013ff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ffa:	220a      	movs	r2, #10
 8013ffc:	9312      	str	r3, [sp, #72]	; 0x48
 8013ffe:	2300      	movs	r3, #0
 8014000:	930b      	str	r3, [sp, #44]	; 0x2c
 8014002:	9308      	str	r3, [sp, #32]
 8014004:	930a      	str	r3, [sp, #40]	; 0x28
 8014006:	9821      	ldr	r0, [sp, #132]	; 0x84
 8014008:	7804      	ldrb	r4, [r0, #0]
 801400a:	0023      	movs	r3, r4
 801400c:	3b30      	subs	r3, #48	; 0x30
 801400e:	b2d9      	uxtb	r1, r3
 8014010:	2909      	cmp	r1, #9
 8014012:	d934      	bls.n	801407e <_strtod_l+0x1ce>
 8014014:	9a05      	ldr	r2, [sp, #20]
 8014016:	6829      	ldr	r1, [r5, #0]
 8014018:	f7ff ff0c 	bl	8013e34 <strncmp>
 801401c:	2800      	cmp	r0, #0
 801401e:	d040      	beq.n	80140a2 <_strtod_l+0x1f2>
 8014020:	2000      	movs	r0, #0
 8014022:	0023      	movs	r3, r4
 8014024:	4684      	mov	ip, r0
 8014026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014028:	9007      	str	r0, [sp, #28]
 801402a:	9205      	str	r2, [sp, #20]
 801402c:	2220      	movs	r2, #32
 801402e:	0019      	movs	r1, r3
 8014030:	4391      	bics	r1, r2
 8014032:	000a      	movs	r2, r1
 8014034:	2100      	movs	r1, #0
 8014036:	2a45      	cmp	r2, #69	; 0x45
 8014038:	d000      	beq.n	801403c <_strtod_l+0x18c>
 801403a:	e0bf      	b.n	80141bc <_strtod_l+0x30c>
 801403c:	9b05      	ldr	r3, [sp, #20]
 801403e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014040:	4303      	orrs	r3, r0
 8014042:	4313      	orrs	r3, r2
 8014044:	428b      	cmp	r3, r1
 8014046:	d094      	beq.n	8013f72 <_strtod_l+0xc2>
 8014048:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801404a:	9306      	str	r3, [sp, #24]
 801404c:	3301      	adds	r3, #1
 801404e:	9321      	str	r3, [sp, #132]	; 0x84
 8014050:	9b06      	ldr	r3, [sp, #24]
 8014052:	785b      	ldrb	r3, [r3, #1]
 8014054:	2b2b      	cmp	r3, #43	; 0x2b
 8014056:	d100      	bne.n	801405a <_strtod_l+0x1aa>
 8014058:	e082      	b.n	8014160 <_strtod_l+0x2b0>
 801405a:	000c      	movs	r4, r1
 801405c:	2b2d      	cmp	r3, #45	; 0x2d
 801405e:	d105      	bne.n	801406c <_strtod_l+0x1bc>
 8014060:	2401      	movs	r4, #1
 8014062:	9b06      	ldr	r3, [sp, #24]
 8014064:	3302      	adds	r3, #2
 8014066:	9321      	str	r3, [sp, #132]	; 0x84
 8014068:	9b06      	ldr	r3, [sp, #24]
 801406a:	789b      	ldrb	r3, [r3, #2]
 801406c:	001a      	movs	r2, r3
 801406e:	3a30      	subs	r2, #48	; 0x30
 8014070:	2a09      	cmp	r2, #9
 8014072:	d800      	bhi.n	8014076 <_strtod_l+0x1c6>
 8014074:	e084      	b.n	8014180 <_strtod_l+0x2d0>
 8014076:	9a06      	ldr	r2, [sp, #24]
 8014078:	2100      	movs	r1, #0
 801407a:	9221      	str	r2, [sp, #132]	; 0x84
 801407c:	e09e      	b.n	80141bc <_strtod_l+0x30c>
 801407e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014080:	2908      	cmp	r1, #8
 8014082:	dc09      	bgt.n	8014098 <_strtod_l+0x1e8>
 8014084:	9908      	ldr	r1, [sp, #32]
 8014086:	4351      	muls	r1, r2
 8014088:	18cb      	adds	r3, r1, r3
 801408a:	9308      	str	r3, [sp, #32]
 801408c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801408e:	3001      	adds	r0, #1
 8014090:	3301      	adds	r3, #1
 8014092:	930a      	str	r3, [sp, #40]	; 0x28
 8014094:	9021      	str	r0, [sp, #132]	; 0x84
 8014096:	e7b6      	b.n	8014006 <_strtod_l+0x156>
 8014098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801409a:	4351      	muls	r1, r2
 801409c:	18cb      	adds	r3, r1, r3
 801409e:	930b      	str	r3, [sp, #44]	; 0x2c
 80140a0:	e7f4      	b.n	801408c <_strtod_l+0x1dc>
 80140a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80140a4:	9b05      	ldr	r3, [sp, #20]
 80140a6:	4694      	mov	ip, r2
 80140a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80140aa:	4463      	add	r3, ip
 80140ac:	9321      	str	r3, [sp, #132]	; 0x84
 80140ae:	781b      	ldrb	r3, [r3, #0]
 80140b0:	2a00      	cmp	r2, #0
 80140b2:	d036      	beq.n	8014122 <_strtod_l+0x272>
 80140b4:	4684      	mov	ip, r0
 80140b6:	9205      	str	r2, [sp, #20]
 80140b8:	001a      	movs	r2, r3
 80140ba:	3a30      	subs	r2, #48	; 0x30
 80140bc:	2a09      	cmp	r2, #9
 80140be:	d912      	bls.n	80140e6 <_strtod_l+0x236>
 80140c0:	2201      	movs	r2, #1
 80140c2:	9207      	str	r2, [sp, #28]
 80140c4:	e7b2      	b.n	801402c <_strtod_l+0x17c>
 80140c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80140c8:	3001      	adds	r0, #1
 80140ca:	1c5a      	adds	r2, r3, #1
 80140cc:	9221      	str	r2, [sp, #132]	; 0x84
 80140ce:	785b      	ldrb	r3, [r3, #1]
 80140d0:	2b30      	cmp	r3, #48	; 0x30
 80140d2:	d0f8      	beq.n	80140c6 <_strtod_l+0x216>
 80140d4:	001a      	movs	r2, r3
 80140d6:	3a31      	subs	r2, #49	; 0x31
 80140d8:	2a08      	cmp	r2, #8
 80140da:	d83c      	bhi.n	8014156 <_strtod_l+0x2a6>
 80140dc:	4684      	mov	ip, r0
 80140de:	2000      	movs	r0, #0
 80140e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80140e2:	9005      	str	r0, [sp, #20]
 80140e4:	9212      	str	r2, [sp, #72]	; 0x48
 80140e6:	3b30      	subs	r3, #48	; 0x30
 80140e8:	1c42      	adds	r2, r0, #1
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d013      	beq.n	8014116 <_strtod_l+0x266>
 80140ee:	210a      	movs	r1, #10
 80140f0:	4494      	add	ip, r2
 80140f2:	9a05      	ldr	r2, [sp, #20]
 80140f4:	1885      	adds	r5, r0, r2
 80140f6:	42aa      	cmp	r2, r5
 80140f8:	d115      	bne.n	8014126 <_strtod_l+0x276>
 80140fa:	9905      	ldr	r1, [sp, #20]
 80140fc:	9a05      	ldr	r2, [sp, #20]
 80140fe:	3101      	adds	r1, #1
 8014100:	1809      	adds	r1, r1, r0
 8014102:	1812      	adds	r2, r2, r0
 8014104:	9105      	str	r1, [sp, #20]
 8014106:	2a08      	cmp	r2, #8
 8014108:	dc1b      	bgt.n	8014142 <_strtod_l+0x292>
 801410a:	220a      	movs	r2, #10
 801410c:	9908      	ldr	r1, [sp, #32]
 801410e:	434a      	muls	r2, r1
 8014110:	189b      	adds	r3, r3, r2
 8014112:	2200      	movs	r2, #0
 8014114:	9308      	str	r3, [sp, #32]
 8014116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014118:	0010      	movs	r0, r2
 801411a:	1c59      	adds	r1, r3, #1
 801411c:	9121      	str	r1, [sp, #132]	; 0x84
 801411e:	785b      	ldrb	r3, [r3, #1]
 8014120:	e7ca      	b.n	80140b8 <_strtod_l+0x208>
 8014122:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014124:	e7d4      	b.n	80140d0 <_strtod_l+0x220>
 8014126:	1c54      	adds	r4, r2, #1
 8014128:	2a08      	cmp	r2, #8
 801412a:	dc04      	bgt.n	8014136 <_strtod_l+0x286>
 801412c:	9a08      	ldr	r2, [sp, #32]
 801412e:	434a      	muls	r2, r1
 8014130:	9208      	str	r2, [sp, #32]
 8014132:	0022      	movs	r2, r4
 8014134:	e7df      	b.n	80140f6 <_strtod_l+0x246>
 8014136:	2c10      	cmp	r4, #16
 8014138:	dcfb      	bgt.n	8014132 <_strtod_l+0x282>
 801413a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801413c:	434a      	muls	r2, r1
 801413e:	920b      	str	r2, [sp, #44]	; 0x2c
 8014140:	e7f7      	b.n	8014132 <_strtod_l+0x282>
 8014142:	9905      	ldr	r1, [sp, #20]
 8014144:	2200      	movs	r2, #0
 8014146:	2910      	cmp	r1, #16
 8014148:	dce5      	bgt.n	8014116 <_strtod_l+0x266>
 801414a:	210a      	movs	r1, #10
 801414c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801414e:	4341      	muls	r1, r0
 8014150:	185b      	adds	r3, r3, r1
 8014152:	930b      	str	r3, [sp, #44]	; 0x2c
 8014154:	e7df      	b.n	8014116 <_strtod_l+0x266>
 8014156:	2200      	movs	r2, #0
 8014158:	4694      	mov	ip, r2
 801415a:	9205      	str	r2, [sp, #20]
 801415c:	3201      	adds	r2, #1
 801415e:	e7b0      	b.n	80140c2 <_strtod_l+0x212>
 8014160:	000c      	movs	r4, r1
 8014162:	e77e      	b.n	8014062 <_strtod_l+0x1b2>
 8014164:	0801b8b0 	.word	0x0801b8b0
 8014168:	ffefffff 	.word	0xffefffff
 801416c:	00000433 	.word	0x00000433
 8014170:	7ff00000 	.word	0x7ff00000
 8014174:	7fffffff 	.word	0x7fffffff
 8014178:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801417a:	1c5a      	adds	r2, r3, #1
 801417c:	9221      	str	r2, [sp, #132]	; 0x84
 801417e:	785b      	ldrb	r3, [r3, #1]
 8014180:	2b30      	cmp	r3, #48	; 0x30
 8014182:	d0f9      	beq.n	8014178 <_strtod_l+0x2c8>
 8014184:	001a      	movs	r2, r3
 8014186:	3a31      	subs	r2, #49	; 0x31
 8014188:	2100      	movs	r1, #0
 801418a:	2a08      	cmp	r2, #8
 801418c:	d816      	bhi.n	80141bc <_strtod_l+0x30c>
 801418e:	3b30      	subs	r3, #48	; 0x30
 8014190:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8014192:	930e      	str	r3, [sp, #56]	; 0x38
 8014194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014196:	1c59      	adds	r1, r3, #1
 8014198:	9121      	str	r1, [sp, #132]	; 0x84
 801419a:	785b      	ldrb	r3, [r3, #1]
 801419c:	001a      	movs	r2, r3
 801419e:	3a30      	subs	r2, #48	; 0x30
 80141a0:	2a09      	cmp	r2, #9
 80141a2:	d932      	bls.n	801420a <_strtod_l+0x35a>
 80141a4:	1b4a      	subs	r2, r1, r5
 80141a6:	4dad      	ldr	r5, [pc, #692]	; (801445c <_strtod_l+0x5ac>)
 80141a8:	0029      	movs	r1, r5
 80141aa:	2a08      	cmp	r2, #8
 80141ac:	dc03      	bgt.n	80141b6 <_strtod_l+0x306>
 80141ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80141b0:	42a9      	cmp	r1, r5
 80141b2:	dd00      	ble.n	80141b6 <_strtod_l+0x306>
 80141b4:	0029      	movs	r1, r5
 80141b6:	2c00      	cmp	r4, #0
 80141b8:	d000      	beq.n	80141bc <_strtod_l+0x30c>
 80141ba:	4249      	negs	r1, r1
 80141bc:	9a05      	ldr	r2, [sp, #20]
 80141be:	2a00      	cmp	r2, #0
 80141c0:	d149      	bne.n	8014256 <_strtod_l+0x3a6>
 80141c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141c4:	4310      	orrs	r0, r2
 80141c6:	d000      	beq.n	80141ca <_strtod_l+0x31a>
 80141c8:	e6b3      	b.n	8013f32 <_strtod_l+0x82>
 80141ca:	9a07      	ldr	r2, [sp, #28]
 80141cc:	2a00      	cmp	r2, #0
 80141ce:	d000      	beq.n	80141d2 <_strtod_l+0x322>
 80141d0:	e6cf      	b.n	8013f72 <_strtod_l+0xc2>
 80141d2:	2b4e      	cmp	r3, #78	; 0x4e
 80141d4:	d025      	beq.n	8014222 <_strtod_l+0x372>
 80141d6:	dc1f      	bgt.n	8014218 <_strtod_l+0x368>
 80141d8:	2b49      	cmp	r3, #73	; 0x49
 80141da:	d000      	beq.n	80141de <_strtod_l+0x32e>
 80141dc:	e6c9      	b.n	8013f72 <_strtod_l+0xc2>
 80141de:	49a0      	ldr	r1, [pc, #640]	; (8014460 <_strtod_l+0x5b0>)
 80141e0:	a821      	add	r0, sp, #132	; 0x84
 80141e2:	f003 f9ed 	bl	80175c0 <__match>
 80141e6:	2800      	cmp	r0, #0
 80141e8:	d100      	bne.n	80141ec <_strtod_l+0x33c>
 80141ea:	e6c2      	b.n	8013f72 <_strtod_l+0xc2>
 80141ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141ee:	499d      	ldr	r1, [pc, #628]	; (8014464 <_strtod_l+0x5b4>)
 80141f0:	3b01      	subs	r3, #1
 80141f2:	a821      	add	r0, sp, #132	; 0x84
 80141f4:	9321      	str	r3, [sp, #132]	; 0x84
 80141f6:	f003 f9e3 	bl	80175c0 <__match>
 80141fa:	2800      	cmp	r0, #0
 80141fc:	d102      	bne.n	8014204 <_strtod_l+0x354>
 80141fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014200:	3301      	adds	r3, #1
 8014202:	9321      	str	r3, [sp, #132]	; 0x84
 8014204:	4f98      	ldr	r7, [pc, #608]	; (8014468 <_strtod_l+0x5b8>)
 8014206:	2600      	movs	r6, #0
 8014208:	e693      	b.n	8013f32 <_strtod_l+0x82>
 801420a:	220a      	movs	r2, #10
 801420c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801420e:	434a      	muls	r2, r1
 8014210:	18d2      	adds	r2, r2, r3
 8014212:	3a30      	subs	r2, #48	; 0x30
 8014214:	920e      	str	r2, [sp, #56]	; 0x38
 8014216:	e7bd      	b.n	8014194 <_strtod_l+0x2e4>
 8014218:	2b69      	cmp	r3, #105	; 0x69
 801421a:	d0e0      	beq.n	80141de <_strtod_l+0x32e>
 801421c:	2b6e      	cmp	r3, #110	; 0x6e
 801421e:	d000      	beq.n	8014222 <_strtod_l+0x372>
 8014220:	e6a7      	b.n	8013f72 <_strtod_l+0xc2>
 8014222:	4992      	ldr	r1, [pc, #584]	; (801446c <_strtod_l+0x5bc>)
 8014224:	a821      	add	r0, sp, #132	; 0x84
 8014226:	f003 f9cb 	bl	80175c0 <__match>
 801422a:	2800      	cmp	r0, #0
 801422c:	d100      	bne.n	8014230 <_strtod_l+0x380>
 801422e:	e6a0      	b.n	8013f72 <_strtod_l+0xc2>
 8014230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	2b28      	cmp	r3, #40	; 0x28
 8014236:	d10c      	bne.n	8014252 <_strtod_l+0x3a2>
 8014238:	aa24      	add	r2, sp, #144	; 0x90
 801423a:	498d      	ldr	r1, [pc, #564]	; (8014470 <_strtod_l+0x5c0>)
 801423c:	a821      	add	r0, sp, #132	; 0x84
 801423e:	f003 f9d3 	bl	80175e8 <__hexnan>
 8014242:	2805      	cmp	r0, #5
 8014244:	d105      	bne.n	8014252 <_strtod_l+0x3a2>
 8014246:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014248:	4a87      	ldr	r2, [pc, #540]	; (8014468 <_strtod_l+0x5b8>)
 801424a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801424c:	431a      	orrs	r2, r3
 801424e:	0017      	movs	r7, r2
 8014250:	e66f      	b.n	8013f32 <_strtod_l+0x82>
 8014252:	4f88      	ldr	r7, [pc, #544]	; (8014474 <_strtod_l+0x5c4>)
 8014254:	e7d7      	b.n	8014206 <_strtod_l+0x356>
 8014256:	4663      	mov	r3, ip
 8014258:	1acb      	subs	r3, r1, r3
 801425a:	9307      	str	r3, [sp, #28]
 801425c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801425e:	2b00      	cmp	r3, #0
 8014260:	d101      	bne.n	8014266 <_strtod_l+0x3b6>
 8014262:	9b05      	ldr	r3, [sp, #20]
 8014264:	930a      	str	r3, [sp, #40]	; 0x28
 8014266:	9c05      	ldr	r4, [sp, #20]
 8014268:	2c10      	cmp	r4, #16
 801426a:	dd00      	ble.n	801426e <_strtod_l+0x3be>
 801426c:	2410      	movs	r4, #16
 801426e:	9808      	ldr	r0, [sp, #32]
 8014270:	f7ee fd38 	bl	8002ce4 <__aeabi_ui2d>
 8014274:	9b05      	ldr	r3, [sp, #20]
 8014276:	0006      	movs	r6, r0
 8014278:	000f      	movs	r7, r1
 801427a:	2b09      	cmp	r3, #9
 801427c:	dc15      	bgt.n	80142aa <_strtod_l+0x3fa>
 801427e:	9b07      	ldr	r3, [sp, #28]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d100      	bne.n	8014286 <_strtod_l+0x3d6>
 8014284:	e655      	b.n	8013f32 <_strtod_l+0x82>
 8014286:	9b07      	ldr	r3, [sp, #28]
 8014288:	2b00      	cmp	r3, #0
 801428a:	dc00      	bgt.n	801428e <_strtod_l+0x3de>
 801428c:	e07d      	b.n	801438a <_strtod_l+0x4da>
 801428e:	2b16      	cmp	r3, #22
 8014290:	dc62      	bgt.n	8014358 <_strtod_l+0x4a8>
 8014292:	00dc      	lsls	r4, r3, #3
 8014294:	4b78      	ldr	r3, [pc, #480]	; (8014478 <_strtod_l+0x5c8>)
 8014296:	0032      	movs	r2, r6
 8014298:	1919      	adds	r1, r3, r4
 801429a:	003b      	movs	r3, r7
 801429c:	6808      	ldr	r0, [r1, #0]
 801429e:	6849      	ldr	r1, [r1, #4]
 80142a0:	f7ed feda 	bl	8002058 <__aeabi_dmul>
 80142a4:	0006      	movs	r6, r0
 80142a6:	000f      	movs	r7, r1
 80142a8:	e643      	b.n	8013f32 <_strtod_l+0x82>
 80142aa:	0022      	movs	r2, r4
 80142ac:	4b72      	ldr	r3, [pc, #456]	; (8014478 <_strtod_l+0x5c8>)
 80142ae:	3a09      	subs	r2, #9
 80142b0:	00d2      	lsls	r2, r2, #3
 80142b2:	189b      	adds	r3, r3, r2
 80142b4:	681a      	ldr	r2, [r3, #0]
 80142b6:	685b      	ldr	r3, [r3, #4]
 80142b8:	f7ed fece 	bl	8002058 <__aeabi_dmul>
 80142bc:	0006      	movs	r6, r0
 80142be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80142c0:	000f      	movs	r7, r1
 80142c2:	f7ee fd0f 	bl	8002ce4 <__aeabi_ui2d>
 80142c6:	000b      	movs	r3, r1
 80142c8:	0002      	movs	r2, r0
 80142ca:	0039      	movs	r1, r7
 80142cc:	0030      	movs	r0, r6
 80142ce:	f7ec ff9d 	bl	800120c <__aeabi_dadd>
 80142d2:	9b05      	ldr	r3, [sp, #20]
 80142d4:	0006      	movs	r6, r0
 80142d6:	000f      	movs	r7, r1
 80142d8:	2b0f      	cmp	r3, #15
 80142da:	ddd0      	ble.n	801427e <_strtod_l+0x3ce>
 80142dc:	9b05      	ldr	r3, [sp, #20]
 80142de:	1b1c      	subs	r4, r3, r4
 80142e0:	9b07      	ldr	r3, [sp, #28]
 80142e2:	18e4      	adds	r4, r4, r3
 80142e4:	2c00      	cmp	r4, #0
 80142e6:	dc00      	bgt.n	80142ea <_strtod_l+0x43a>
 80142e8:	e094      	b.n	8014414 <_strtod_l+0x564>
 80142ea:	230f      	movs	r3, #15
 80142ec:	4023      	ands	r3, r4
 80142ee:	d00a      	beq.n	8014306 <_strtod_l+0x456>
 80142f0:	4961      	ldr	r1, [pc, #388]	; (8014478 <_strtod_l+0x5c8>)
 80142f2:	00db      	lsls	r3, r3, #3
 80142f4:	18c9      	adds	r1, r1, r3
 80142f6:	0032      	movs	r2, r6
 80142f8:	6808      	ldr	r0, [r1, #0]
 80142fa:	6849      	ldr	r1, [r1, #4]
 80142fc:	003b      	movs	r3, r7
 80142fe:	f7ed feab 	bl	8002058 <__aeabi_dmul>
 8014302:	0006      	movs	r6, r0
 8014304:	000f      	movs	r7, r1
 8014306:	230f      	movs	r3, #15
 8014308:	439c      	bics	r4, r3
 801430a:	d06e      	beq.n	80143ea <_strtod_l+0x53a>
 801430c:	3326      	adds	r3, #38	; 0x26
 801430e:	33ff      	adds	r3, #255	; 0xff
 8014310:	429c      	cmp	r4, r3
 8014312:	dd48      	ble.n	80143a6 <_strtod_l+0x4f6>
 8014314:	2400      	movs	r4, #0
 8014316:	9405      	str	r4, [sp, #20]
 8014318:	940b      	str	r4, [sp, #44]	; 0x2c
 801431a:	940a      	str	r4, [sp, #40]	; 0x28
 801431c:	2322      	movs	r3, #34	; 0x22
 801431e:	2600      	movs	r6, #0
 8014320:	9a04      	ldr	r2, [sp, #16]
 8014322:	4f51      	ldr	r7, [pc, #324]	; (8014468 <_strtod_l+0x5b8>)
 8014324:	6013      	str	r3, [r2, #0]
 8014326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014328:	42b3      	cmp	r3, r6
 801432a:	d100      	bne.n	801432e <_strtod_l+0x47e>
 801432c:	e601      	b.n	8013f32 <_strtod_l+0x82>
 801432e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014330:	9804      	ldr	r0, [sp, #16]
 8014332:	f003 fa47 	bl	80177c4 <_Bfree>
 8014336:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014338:	9804      	ldr	r0, [sp, #16]
 801433a:	f003 fa43 	bl	80177c4 <_Bfree>
 801433e:	9905      	ldr	r1, [sp, #20]
 8014340:	9804      	ldr	r0, [sp, #16]
 8014342:	f003 fa3f 	bl	80177c4 <_Bfree>
 8014346:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014348:	9804      	ldr	r0, [sp, #16]
 801434a:	f003 fa3b 	bl	80177c4 <_Bfree>
 801434e:	0021      	movs	r1, r4
 8014350:	9804      	ldr	r0, [sp, #16]
 8014352:	f003 fa37 	bl	80177c4 <_Bfree>
 8014356:	e5ec      	b.n	8013f32 <_strtod_l+0x82>
 8014358:	2325      	movs	r3, #37	; 0x25
 801435a:	9a05      	ldr	r2, [sp, #20]
 801435c:	1a9b      	subs	r3, r3, r2
 801435e:	9a07      	ldr	r2, [sp, #28]
 8014360:	4293      	cmp	r3, r2
 8014362:	dbbb      	blt.n	80142dc <_strtod_l+0x42c>
 8014364:	230f      	movs	r3, #15
 8014366:	9a05      	ldr	r2, [sp, #20]
 8014368:	4c43      	ldr	r4, [pc, #268]	; (8014478 <_strtod_l+0x5c8>)
 801436a:	1a9d      	subs	r5, r3, r2
 801436c:	00e9      	lsls	r1, r5, #3
 801436e:	1861      	adds	r1, r4, r1
 8014370:	0032      	movs	r2, r6
 8014372:	6808      	ldr	r0, [r1, #0]
 8014374:	6849      	ldr	r1, [r1, #4]
 8014376:	003b      	movs	r3, r7
 8014378:	f7ed fe6e 	bl	8002058 <__aeabi_dmul>
 801437c:	9b07      	ldr	r3, [sp, #28]
 801437e:	1b5e      	subs	r6, r3, r5
 8014380:	00f6      	lsls	r6, r6, #3
 8014382:	19a6      	adds	r6, r4, r6
 8014384:	6832      	ldr	r2, [r6, #0]
 8014386:	6873      	ldr	r3, [r6, #4]
 8014388:	e78a      	b.n	80142a0 <_strtod_l+0x3f0>
 801438a:	9b07      	ldr	r3, [sp, #28]
 801438c:	3316      	adds	r3, #22
 801438e:	dba5      	blt.n	80142dc <_strtod_l+0x42c>
 8014390:	9b07      	ldr	r3, [sp, #28]
 8014392:	0030      	movs	r0, r6
 8014394:	00da      	lsls	r2, r3, #3
 8014396:	4b38      	ldr	r3, [pc, #224]	; (8014478 <_strtod_l+0x5c8>)
 8014398:	0039      	movs	r1, r7
 801439a:	1a9b      	subs	r3, r3, r2
 801439c:	681a      	ldr	r2, [r3, #0]
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	f7ed fa50 	bl	8001844 <__aeabi_ddiv>
 80143a4:	e77e      	b.n	80142a4 <_strtod_l+0x3f4>
 80143a6:	2300      	movs	r3, #0
 80143a8:	0030      	movs	r0, r6
 80143aa:	0039      	movs	r1, r7
 80143ac:	001d      	movs	r5, r3
 80143ae:	1124      	asrs	r4, r4, #4
 80143b0:	2c01      	cmp	r4, #1
 80143b2:	dc1d      	bgt.n	80143f0 <_strtod_l+0x540>
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d001      	beq.n	80143bc <_strtod_l+0x50c>
 80143b8:	0006      	movs	r6, r0
 80143ba:	000f      	movs	r7, r1
 80143bc:	4b2f      	ldr	r3, [pc, #188]	; (801447c <_strtod_l+0x5cc>)
 80143be:	00ed      	lsls	r5, r5, #3
 80143c0:	18ff      	adds	r7, r7, r3
 80143c2:	4b2f      	ldr	r3, [pc, #188]	; (8014480 <_strtod_l+0x5d0>)
 80143c4:	0032      	movs	r2, r6
 80143c6:	195d      	adds	r5, r3, r5
 80143c8:	6828      	ldr	r0, [r5, #0]
 80143ca:	6869      	ldr	r1, [r5, #4]
 80143cc:	003b      	movs	r3, r7
 80143ce:	f7ed fe43 	bl	8002058 <__aeabi_dmul>
 80143d2:	4b25      	ldr	r3, [pc, #148]	; (8014468 <_strtod_l+0x5b8>)
 80143d4:	4a2b      	ldr	r2, [pc, #172]	; (8014484 <_strtod_l+0x5d4>)
 80143d6:	0006      	movs	r6, r0
 80143d8:	400b      	ands	r3, r1
 80143da:	4293      	cmp	r3, r2
 80143dc:	d89a      	bhi.n	8014314 <_strtod_l+0x464>
 80143de:	4a2a      	ldr	r2, [pc, #168]	; (8014488 <_strtod_l+0x5d8>)
 80143e0:	4293      	cmp	r3, r2
 80143e2:	d913      	bls.n	801440c <_strtod_l+0x55c>
 80143e4:	2601      	movs	r6, #1
 80143e6:	4f29      	ldr	r7, [pc, #164]	; (801448c <_strtod_l+0x5dc>)
 80143e8:	4276      	negs	r6, r6
 80143ea:	2300      	movs	r3, #0
 80143ec:	9306      	str	r3, [sp, #24]
 80143ee:	e07b      	b.n	80144e8 <_strtod_l+0x638>
 80143f0:	2201      	movs	r2, #1
 80143f2:	4214      	tst	r4, r2
 80143f4:	d007      	beq.n	8014406 <_strtod_l+0x556>
 80143f6:	4a22      	ldr	r2, [pc, #136]	; (8014480 <_strtod_l+0x5d0>)
 80143f8:	00eb      	lsls	r3, r5, #3
 80143fa:	189b      	adds	r3, r3, r2
 80143fc:	681a      	ldr	r2, [r3, #0]
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	f7ed fe2a 	bl	8002058 <__aeabi_dmul>
 8014404:	2301      	movs	r3, #1
 8014406:	3501      	adds	r5, #1
 8014408:	1064      	asrs	r4, r4, #1
 801440a:	e7d1      	b.n	80143b0 <_strtod_l+0x500>
 801440c:	23d4      	movs	r3, #212	; 0xd4
 801440e:	049b      	lsls	r3, r3, #18
 8014410:	18cf      	adds	r7, r1, r3
 8014412:	e7ea      	b.n	80143ea <_strtod_l+0x53a>
 8014414:	2c00      	cmp	r4, #0
 8014416:	d0e8      	beq.n	80143ea <_strtod_l+0x53a>
 8014418:	230f      	movs	r3, #15
 801441a:	4264      	negs	r4, r4
 801441c:	4023      	ands	r3, r4
 801441e:	d00a      	beq.n	8014436 <_strtod_l+0x586>
 8014420:	4a15      	ldr	r2, [pc, #84]	; (8014478 <_strtod_l+0x5c8>)
 8014422:	00db      	lsls	r3, r3, #3
 8014424:	18d3      	adds	r3, r2, r3
 8014426:	0030      	movs	r0, r6
 8014428:	681a      	ldr	r2, [r3, #0]
 801442a:	685b      	ldr	r3, [r3, #4]
 801442c:	0039      	movs	r1, r7
 801442e:	f7ed fa09 	bl	8001844 <__aeabi_ddiv>
 8014432:	0006      	movs	r6, r0
 8014434:	000f      	movs	r7, r1
 8014436:	1124      	asrs	r4, r4, #4
 8014438:	d0d7      	beq.n	80143ea <_strtod_l+0x53a>
 801443a:	2c1f      	cmp	r4, #31
 801443c:	dd28      	ble.n	8014490 <_strtod_l+0x5e0>
 801443e:	2400      	movs	r4, #0
 8014440:	9405      	str	r4, [sp, #20]
 8014442:	940b      	str	r4, [sp, #44]	; 0x2c
 8014444:	940a      	str	r4, [sp, #40]	; 0x28
 8014446:	2322      	movs	r3, #34	; 0x22
 8014448:	9a04      	ldr	r2, [sp, #16]
 801444a:	2600      	movs	r6, #0
 801444c:	6013      	str	r3, [r2, #0]
 801444e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014450:	2700      	movs	r7, #0
 8014452:	2b00      	cmp	r3, #0
 8014454:	d000      	beq.n	8014458 <_strtod_l+0x5a8>
 8014456:	e76a      	b.n	801432e <_strtod_l+0x47e>
 8014458:	e56b      	b.n	8013f32 <_strtod_l+0x82>
 801445a:	46c0      	nop			; (mov r8, r8)
 801445c:	00004e1f 	.word	0x00004e1f
 8014460:	0801b905 	.word	0x0801b905
 8014464:	0801ba58 	.word	0x0801ba58
 8014468:	7ff00000 	.word	0x7ff00000
 801446c:	0801b90d 	.word	0x0801b90d
 8014470:	0801b8c4 	.word	0x0801b8c4
 8014474:	fff80000 	.word	0xfff80000
 8014478:	0801ba90 	.word	0x0801ba90
 801447c:	fcb00000 	.word	0xfcb00000
 8014480:	0801ba68 	.word	0x0801ba68
 8014484:	7ca00000 	.word	0x7ca00000
 8014488:	7c900000 	.word	0x7c900000
 801448c:	7fefffff 	.word	0x7fefffff
 8014490:	2310      	movs	r3, #16
 8014492:	4023      	ands	r3, r4
 8014494:	9306      	str	r3, [sp, #24]
 8014496:	d001      	beq.n	801449c <_strtod_l+0x5ec>
 8014498:	236a      	movs	r3, #106	; 0x6a
 801449a:	9306      	str	r3, [sp, #24]
 801449c:	2300      	movs	r3, #0
 801449e:	0030      	movs	r0, r6
 80144a0:	0039      	movs	r1, r7
 80144a2:	001d      	movs	r5, r3
 80144a4:	2c00      	cmp	r4, #0
 80144a6:	dd00      	ble.n	80144aa <_strtod_l+0x5fa>
 80144a8:	e10e      	b.n	80146c8 <_strtod_l+0x818>
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d001      	beq.n	80144b2 <_strtod_l+0x602>
 80144ae:	0006      	movs	r6, r0
 80144b0:	000f      	movs	r7, r1
 80144b2:	9b06      	ldr	r3, [sp, #24]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d00f      	beq.n	80144d8 <_strtod_l+0x628>
 80144b8:	236b      	movs	r3, #107	; 0x6b
 80144ba:	0079      	lsls	r1, r7, #1
 80144bc:	0d49      	lsrs	r1, r1, #21
 80144be:	003a      	movs	r2, r7
 80144c0:	1a5b      	subs	r3, r3, r1
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	dd08      	ble.n	80144d8 <_strtod_l+0x628>
 80144c6:	2b1f      	cmp	r3, #31
 80144c8:	dc00      	bgt.n	80144cc <_strtod_l+0x61c>
 80144ca:	e112      	b.n	80146f2 <_strtod_l+0x842>
 80144cc:	2600      	movs	r6, #0
 80144ce:	2b34      	cmp	r3, #52	; 0x34
 80144d0:	dc00      	bgt.n	80144d4 <_strtod_l+0x624>
 80144d2:	e107      	b.n	80146e4 <_strtod_l+0x834>
 80144d4:	27dc      	movs	r7, #220	; 0xdc
 80144d6:	04bf      	lsls	r7, r7, #18
 80144d8:	2200      	movs	r2, #0
 80144da:	2300      	movs	r3, #0
 80144dc:	0030      	movs	r0, r6
 80144de:	0039      	movs	r1, r7
 80144e0:	f7eb ffbc 	bl	800045c <__aeabi_dcmpeq>
 80144e4:	2800      	cmp	r0, #0
 80144e6:	d1aa      	bne.n	801443e <_strtod_l+0x58e>
 80144e8:	9b08      	ldr	r3, [sp, #32]
 80144ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144ec:	9300      	str	r3, [sp, #0]
 80144ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 80144f0:	9b05      	ldr	r3, [sp, #20]
 80144f2:	9804      	ldr	r0, [sp, #16]
 80144f4:	f003 f9ae 	bl	8017854 <__s2b>
 80144f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80144fa:	2800      	cmp	r0, #0
 80144fc:	d100      	bne.n	8014500 <_strtod_l+0x650>
 80144fe:	e709      	b.n	8014314 <_strtod_l+0x464>
 8014500:	9b07      	ldr	r3, [sp, #28]
 8014502:	9a07      	ldr	r2, [sp, #28]
 8014504:	17db      	asrs	r3, r3, #31
 8014506:	4252      	negs	r2, r2
 8014508:	4013      	ands	r3, r2
 801450a:	9315      	str	r3, [sp, #84]	; 0x54
 801450c:	9b07      	ldr	r3, [sp, #28]
 801450e:	2400      	movs	r4, #0
 8014510:	43db      	mvns	r3, r3
 8014512:	9a07      	ldr	r2, [sp, #28]
 8014514:	17db      	asrs	r3, r3, #31
 8014516:	401a      	ands	r2, r3
 8014518:	921c      	str	r2, [sp, #112]	; 0x70
 801451a:	9405      	str	r4, [sp, #20]
 801451c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801451e:	9804      	ldr	r0, [sp, #16]
 8014520:	6859      	ldr	r1, [r3, #4]
 8014522:	f003 f927 	bl	8017774 <_Balloc>
 8014526:	900a      	str	r0, [sp, #40]	; 0x28
 8014528:	2800      	cmp	r0, #0
 801452a:	d100      	bne.n	801452e <_strtod_l+0x67e>
 801452c:	e6f6      	b.n	801431c <_strtod_l+0x46c>
 801452e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014532:	691b      	ldr	r3, [r3, #16]
 8014534:	310c      	adds	r1, #12
 8014536:	1c9a      	adds	r2, r3, #2
 8014538:	0092      	lsls	r2, r2, #2
 801453a:	300c      	adds	r0, #12
 801453c:	9308      	str	r3, [sp, #32]
 801453e:	f7ff fa32 	bl	80139a6 <memcpy>
 8014542:	ab24      	add	r3, sp, #144	; 0x90
 8014544:	9301      	str	r3, [sp, #4]
 8014546:	ab23      	add	r3, sp, #140	; 0x8c
 8014548:	9300      	str	r3, [sp, #0]
 801454a:	0032      	movs	r2, r6
 801454c:	003b      	movs	r3, r7
 801454e:	9804      	ldr	r0, [sp, #16]
 8014550:	960e      	str	r6, [sp, #56]	; 0x38
 8014552:	970f      	str	r7, [sp, #60]	; 0x3c
 8014554:	f003 fc22 	bl	8017d9c <__d2b>
 8014558:	9022      	str	r0, [sp, #136]	; 0x88
 801455a:	2800      	cmp	r0, #0
 801455c:	d100      	bne.n	8014560 <_strtod_l+0x6b0>
 801455e:	e6dd      	b.n	801431c <_strtod_l+0x46c>
 8014560:	2101      	movs	r1, #1
 8014562:	9804      	ldr	r0, [sp, #16]
 8014564:	f003 f9fd 	bl	8017962 <__i2b>
 8014568:	9005      	str	r0, [sp, #20]
 801456a:	2800      	cmp	r0, #0
 801456c:	d100      	bne.n	8014570 <_strtod_l+0x6c0>
 801456e:	e6d5      	b.n	801431c <_strtod_l+0x46c>
 8014570:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014572:	2b00      	cmp	r3, #0
 8014574:	da00      	bge.n	8014578 <_strtod_l+0x6c8>
 8014576:	e0c1      	b.n	80146fc <_strtod_l+0x84c>
 8014578:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801457a:	189d      	adds	r5, r3, r2
 801457c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801457e:	4694      	mov	ip, r2
 8014580:	9906      	ldr	r1, [sp, #24]
 8014582:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014584:	1a5b      	subs	r3, r3, r1
 8014586:	2136      	movs	r1, #54	; 0x36
 8014588:	189b      	adds	r3, r3, r2
 801458a:	1a8a      	subs	r2, r1, r2
 801458c:	49b2      	ldr	r1, [pc, #712]	; (8014858 <_strtod_l+0x9a8>)
 801458e:	3b01      	subs	r3, #1
 8014590:	2001      	movs	r0, #1
 8014592:	428b      	cmp	r3, r1
 8014594:	db00      	blt.n	8014598 <_strtod_l+0x6e8>
 8014596:	e0bd      	b.n	8014714 <_strtod_l+0x864>
 8014598:	1ac9      	subs	r1, r1, r3
 801459a:	1a52      	subs	r2, r2, r1
 801459c:	291f      	cmp	r1, #31
 801459e:	dd00      	ble.n	80145a2 <_strtod_l+0x6f2>
 80145a0:	e0b1      	b.n	8014706 <_strtod_l+0x856>
 80145a2:	4088      	lsls	r0, r1
 80145a4:	2300      	movs	r3, #0
 80145a6:	9014      	str	r0, [sp, #80]	; 0x50
 80145a8:	9310      	str	r3, [sp, #64]	; 0x40
 80145aa:	18ab      	adds	r3, r5, r2
 80145ac:	9308      	str	r3, [sp, #32]
 80145ae:	0013      	movs	r3, r2
 80145b0:	9a06      	ldr	r2, [sp, #24]
 80145b2:	4463      	add	r3, ip
 80145b4:	18d3      	adds	r3, r2, r3
 80145b6:	9a08      	ldr	r2, [sp, #32]
 80145b8:	930c      	str	r3, [sp, #48]	; 0x30
 80145ba:	002b      	movs	r3, r5
 80145bc:	4295      	cmp	r5, r2
 80145be:	dd00      	ble.n	80145c2 <_strtod_l+0x712>
 80145c0:	0013      	movs	r3, r2
 80145c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145c4:	4293      	cmp	r3, r2
 80145c6:	dd00      	ble.n	80145ca <_strtod_l+0x71a>
 80145c8:	0013      	movs	r3, r2
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	dd06      	ble.n	80145dc <_strtod_l+0x72c>
 80145ce:	9a08      	ldr	r2, [sp, #32]
 80145d0:	1aed      	subs	r5, r5, r3
 80145d2:	1ad2      	subs	r2, r2, r3
 80145d4:	9208      	str	r2, [sp, #32]
 80145d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145d8:	1ad2      	subs	r2, r2, r3
 80145da:	920c      	str	r2, [sp, #48]	; 0x30
 80145dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d017      	beq.n	8014612 <_strtod_l+0x762>
 80145e2:	001a      	movs	r2, r3
 80145e4:	9905      	ldr	r1, [sp, #20]
 80145e6:	9804      	ldr	r0, [sp, #16]
 80145e8:	f003 fa54 	bl	8017a94 <__pow5mult>
 80145ec:	9005      	str	r0, [sp, #20]
 80145ee:	2800      	cmp	r0, #0
 80145f0:	d100      	bne.n	80145f4 <_strtod_l+0x744>
 80145f2:	e693      	b.n	801431c <_strtod_l+0x46c>
 80145f4:	0001      	movs	r1, r0
 80145f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80145f8:	9804      	ldr	r0, [sp, #16]
 80145fa:	f003 f9bb 	bl	8017974 <__multiply>
 80145fe:	9012      	str	r0, [sp, #72]	; 0x48
 8014600:	2800      	cmp	r0, #0
 8014602:	d100      	bne.n	8014606 <_strtod_l+0x756>
 8014604:	e68a      	b.n	801431c <_strtod_l+0x46c>
 8014606:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014608:	9804      	ldr	r0, [sp, #16]
 801460a:	f003 f8db 	bl	80177c4 <_Bfree>
 801460e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014610:	9322      	str	r3, [sp, #136]	; 0x88
 8014612:	9b08      	ldr	r3, [sp, #32]
 8014614:	2b00      	cmp	r3, #0
 8014616:	dd00      	ble.n	801461a <_strtod_l+0x76a>
 8014618:	e07f      	b.n	801471a <_strtod_l+0x86a>
 801461a:	9b07      	ldr	r3, [sp, #28]
 801461c:	2b00      	cmp	r3, #0
 801461e:	dd08      	ble.n	8014632 <_strtod_l+0x782>
 8014620:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014622:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014624:	9804      	ldr	r0, [sp, #16]
 8014626:	f003 fa35 	bl	8017a94 <__pow5mult>
 801462a:	900a      	str	r0, [sp, #40]	; 0x28
 801462c:	2800      	cmp	r0, #0
 801462e:	d100      	bne.n	8014632 <_strtod_l+0x782>
 8014630:	e674      	b.n	801431c <_strtod_l+0x46c>
 8014632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014634:	2b00      	cmp	r3, #0
 8014636:	dd08      	ble.n	801464a <_strtod_l+0x79a>
 8014638:	001a      	movs	r2, r3
 801463a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801463c:	9804      	ldr	r0, [sp, #16]
 801463e:	f003 fa6b 	bl	8017b18 <__lshift>
 8014642:	900a      	str	r0, [sp, #40]	; 0x28
 8014644:	2800      	cmp	r0, #0
 8014646:	d100      	bne.n	801464a <_strtod_l+0x79a>
 8014648:	e668      	b.n	801431c <_strtod_l+0x46c>
 801464a:	2d00      	cmp	r5, #0
 801464c:	dd08      	ble.n	8014660 <_strtod_l+0x7b0>
 801464e:	002a      	movs	r2, r5
 8014650:	9905      	ldr	r1, [sp, #20]
 8014652:	9804      	ldr	r0, [sp, #16]
 8014654:	f003 fa60 	bl	8017b18 <__lshift>
 8014658:	9005      	str	r0, [sp, #20]
 801465a:	2800      	cmp	r0, #0
 801465c:	d100      	bne.n	8014660 <_strtod_l+0x7b0>
 801465e:	e65d      	b.n	801431c <_strtod_l+0x46c>
 8014660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014662:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014664:	9804      	ldr	r0, [sp, #16]
 8014666:	f003 fac3 	bl	8017bf0 <__mdiff>
 801466a:	1e04      	subs	r4, r0, #0
 801466c:	d100      	bne.n	8014670 <_strtod_l+0x7c0>
 801466e:	e655      	b.n	801431c <_strtod_l+0x46c>
 8014670:	2500      	movs	r5, #0
 8014672:	68c3      	ldr	r3, [r0, #12]
 8014674:	9905      	ldr	r1, [sp, #20]
 8014676:	60c5      	str	r5, [r0, #12]
 8014678:	9312      	str	r3, [sp, #72]	; 0x48
 801467a:	f003 fa9f 	bl	8017bbc <__mcmp>
 801467e:	42a8      	cmp	r0, r5
 8014680:	da55      	bge.n	801472e <_strtod_l+0x87e>
 8014682:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014684:	42ab      	cmp	r3, r5
 8014686:	d11b      	bne.n	80146c0 <_strtod_l+0x810>
 8014688:	42ae      	cmp	r6, r5
 801468a:	d119      	bne.n	80146c0 <_strtod_l+0x810>
 801468c:	033b      	lsls	r3, r7, #12
 801468e:	42ab      	cmp	r3, r5
 8014690:	d116      	bne.n	80146c0 <_strtod_l+0x810>
 8014692:	22d6      	movs	r2, #214	; 0xd6
 8014694:	4b71      	ldr	r3, [pc, #452]	; (801485c <_strtod_l+0x9ac>)
 8014696:	04d2      	lsls	r2, r2, #19
 8014698:	403b      	ands	r3, r7
 801469a:	4293      	cmp	r3, r2
 801469c:	d910      	bls.n	80146c0 <_strtod_l+0x810>
 801469e:	6963      	ldr	r3, [r4, #20]
 80146a0:	42ab      	cmp	r3, r5
 80146a2:	d102      	bne.n	80146aa <_strtod_l+0x7fa>
 80146a4:	6923      	ldr	r3, [r4, #16]
 80146a6:	2b01      	cmp	r3, #1
 80146a8:	dd0a      	ble.n	80146c0 <_strtod_l+0x810>
 80146aa:	0021      	movs	r1, r4
 80146ac:	2201      	movs	r2, #1
 80146ae:	9804      	ldr	r0, [sp, #16]
 80146b0:	f003 fa32 	bl	8017b18 <__lshift>
 80146b4:	9905      	ldr	r1, [sp, #20]
 80146b6:	0004      	movs	r4, r0
 80146b8:	f003 fa80 	bl	8017bbc <__mcmp>
 80146bc:	2800      	cmp	r0, #0
 80146be:	dc6b      	bgt.n	8014798 <_strtod_l+0x8e8>
 80146c0:	9b06      	ldr	r3, [sp, #24]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d178      	bne.n	80147b8 <_strtod_l+0x908>
 80146c6:	e632      	b.n	801432e <_strtod_l+0x47e>
 80146c8:	2201      	movs	r2, #1
 80146ca:	4214      	tst	r4, r2
 80146cc:	d007      	beq.n	80146de <_strtod_l+0x82e>
 80146ce:	4a64      	ldr	r2, [pc, #400]	; (8014860 <_strtod_l+0x9b0>)
 80146d0:	00eb      	lsls	r3, r5, #3
 80146d2:	18d3      	adds	r3, r2, r3
 80146d4:	681a      	ldr	r2, [r3, #0]
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	f7ed fcbe 	bl	8002058 <__aeabi_dmul>
 80146dc:	2301      	movs	r3, #1
 80146de:	3501      	adds	r5, #1
 80146e0:	1064      	asrs	r4, r4, #1
 80146e2:	e6df      	b.n	80144a4 <_strtod_l+0x5f4>
 80146e4:	2101      	movs	r1, #1
 80146e6:	3b20      	subs	r3, #32
 80146e8:	4249      	negs	r1, r1
 80146ea:	4099      	lsls	r1, r3
 80146ec:	400a      	ands	r2, r1
 80146ee:	0017      	movs	r7, r2
 80146f0:	e6f2      	b.n	80144d8 <_strtod_l+0x628>
 80146f2:	2201      	movs	r2, #1
 80146f4:	4252      	negs	r2, r2
 80146f6:	409a      	lsls	r2, r3
 80146f8:	4016      	ands	r6, r2
 80146fa:	e6ed      	b.n	80144d8 <_strtod_l+0x628>
 80146fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80146fe:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014700:	1ad2      	subs	r2, r2, r3
 8014702:	4694      	mov	ip, r2
 8014704:	e73c      	b.n	8014580 <_strtod_l+0x6d0>
 8014706:	4957      	ldr	r1, [pc, #348]	; (8014864 <_strtod_l+0x9b4>)
 8014708:	1acb      	subs	r3, r1, r3
 801470a:	0001      	movs	r1, r0
 801470c:	4099      	lsls	r1, r3
 801470e:	9110      	str	r1, [sp, #64]	; 0x40
 8014710:	9014      	str	r0, [sp, #80]	; 0x50
 8014712:	e74a      	b.n	80145aa <_strtod_l+0x6fa>
 8014714:	2300      	movs	r3, #0
 8014716:	9310      	str	r3, [sp, #64]	; 0x40
 8014718:	e7fa      	b.n	8014710 <_strtod_l+0x860>
 801471a:	9a08      	ldr	r2, [sp, #32]
 801471c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801471e:	9804      	ldr	r0, [sp, #16]
 8014720:	f003 f9fa 	bl	8017b18 <__lshift>
 8014724:	9022      	str	r0, [sp, #136]	; 0x88
 8014726:	2800      	cmp	r0, #0
 8014728:	d000      	beq.n	801472c <_strtod_l+0x87c>
 801472a:	e776      	b.n	801461a <_strtod_l+0x76a>
 801472c:	e5f6      	b.n	801431c <_strtod_l+0x46c>
 801472e:	970c      	str	r7, [sp, #48]	; 0x30
 8014730:	2800      	cmp	r0, #0
 8014732:	d000      	beq.n	8014736 <_strtod_l+0x886>
 8014734:	e0a0      	b.n	8014878 <_strtod_l+0x9c8>
 8014736:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014738:	033b      	lsls	r3, r7, #12
 801473a:	0b1b      	lsrs	r3, r3, #12
 801473c:	2a00      	cmp	r2, #0
 801473e:	d027      	beq.n	8014790 <_strtod_l+0x8e0>
 8014740:	4a49      	ldr	r2, [pc, #292]	; (8014868 <_strtod_l+0x9b8>)
 8014742:	4293      	cmp	r3, r2
 8014744:	d157      	bne.n	80147f6 <_strtod_l+0x946>
 8014746:	2201      	movs	r2, #1
 8014748:	9b06      	ldr	r3, [sp, #24]
 801474a:	4252      	negs	r2, r2
 801474c:	0031      	movs	r1, r6
 801474e:	0010      	movs	r0, r2
 8014750:	2b00      	cmp	r3, #0
 8014752:	d00b      	beq.n	801476c <_strtod_l+0x8bc>
 8014754:	25d4      	movs	r5, #212	; 0xd4
 8014756:	4b41      	ldr	r3, [pc, #260]	; (801485c <_strtod_l+0x9ac>)
 8014758:	04ed      	lsls	r5, r5, #19
 801475a:	403b      	ands	r3, r7
 801475c:	0010      	movs	r0, r2
 801475e:	42ab      	cmp	r3, r5
 8014760:	d804      	bhi.n	801476c <_strtod_l+0x8bc>
 8014762:	306c      	adds	r0, #108	; 0x6c
 8014764:	0d1b      	lsrs	r3, r3, #20
 8014766:	1ac3      	subs	r3, r0, r3
 8014768:	409a      	lsls	r2, r3
 801476a:	0010      	movs	r0, r2
 801476c:	4281      	cmp	r1, r0
 801476e:	d142      	bne.n	80147f6 <_strtod_l+0x946>
 8014770:	4b3e      	ldr	r3, [pc, #248]	; (801486c <_strtod_l+0x9bc>)
 8014772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014774:	429a      	cmp	r2, r3
 8014776:	d102      	bne.n	801477e <_strtod_l+0x8ce>
 8014778:	1c4b      	adds	r3, r1, #1
 801477a:	d100      	bne.n	801477e <_strtod_l+0x8ce>
 801477c:	e5ce      	b.n	801431c <_strtod_l+0x46c>
 801477e:	4b37      	ldr	r3, [pc, #220]	; (801485c <_strtod_l+0x9ac>)
 8014780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014782:	2600      	movs	r6, #0
 8014784:	401a      	ands	r2, r3
 8014786:	0013      	movs	r3, r2
 8014788:	2280      	movs	r2, #128	; 0x80
 801478a:	0352      	lsls	r2, r2, #13
 801478c:	189f      	adds	r7, r3, r2
 801478e:	e797      	b.n	80146c0 <_strtod_l+0x810>
 8014790:	2b00      	cmp	r3, #0
 8014792:	d130      	bne.n	80147f6 <_strtod_l+0x946>
 8014794:	2e00      	cmp	r6, #0
 8014796:	d12e      	bne.n	80147f6 <_strtod_l+0x946>
 8014798:	9906      	ldr	r1, [sp, #24]
 801479a:	003b      	movs	r3, r7
 801479c:	4a2f      	ldr	r2, [pc, #188]	; (801485c <_strtod_l+0x9ac>)
 801479e:	2900      	cmp	r1, #0
 80147a0:	d020      	beq.n	80147e4 <_strtod_l+0x934>
 80147a2:	0011      	movs	r1, r2
 80147a4:	20d6      	movs	r0, #214	; 0xd6
 80147a6:	4039      	ands	r1, r7
 80147a8:	04c0      	lsls	r0, r0, #19
 80147aa:	4281      	cmp	r1, r0
 80147ac:	dc1a      	bgt.n	80147e4 <_strtod_l+0x934>
 80147ae:	23dc      	movs	r3, #220	; 0xdc
 80147b0:	049b      	lsls	r3, r3, #18
 80147b2:	4299      	cmp	r1, r3
 80147b4:	dc00      	bgt.n	80147b8 <_strtod_l+0x908>
 80147b6:	e646      	b.n	8014446 <_strtod_l+0x596>
 80147b8:	4b2d      	ldr	r3, [pc, #180]	; (8014870 <_strtod_l+0x9c0>)
 80147ba:	0030      	movs	r0, r6
 80147bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80147be:	2300      	movs	r3, #0
 80147c0:	931a      	str	r3, [sp, #104]	; 0x68
 80147c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80147c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80147c6:	0039      	movs	r1, r7
 80147c8:	f7ed fc46 	bl	8002058 <__aeabi_dmul>
 80147cc:	0006      	movs	r6, r0
 80147ce:	000f      	movs	r7, r1
 80147d0:	1e0b      	subs	r3, r1, #0
 80147d2:	d000      	beq.n	80147d6 <_strtod_l+0x926>
 80147d4:	e5ab      	b.n	801432e <_strtod_l+0x47e>
 80147d6:	2800      	cmp	r0, #0
 80147d8:	d000      	beq.n	80147dc <_strtod_l+0x92c>
 80147da:	e5a8      	b.n	801432e <_strtod_l+0x47e>
 80147dc:	9a04      	ldr	r2, [sp, #16]
 80147de:	3322      	adds	r3, #34	; 0x22
 80147e0:	6013      	str	r3, [r2, #0]
 80147e2:	e5a4      	b.n	801432e <_strtod_l+0x47e>
 80147e4:	2601      	movs	r6, #1
 80147e6:	4013      	ands	r3, r2
 80147e8:	4a22      	ldr	r2, [pc, #136]	; (8014874 <_strtod_l+0x9c4>)
 80147ea:	4276      	negs	r6, r6
 80147ec:	189b      	adds	r3, r3, r2
 80147ee:	4a1e      	ldr	r2, [pc, #120]	; (8014868 <_strtod_l+0x9b8>)
 80147f0:	431a      	orrs	r2, r3
 80147f2:	0017      	movs	r7, r2
 80147f4:	e764      	b.n	80146c0 <_strtod_l+0x810>
 80147f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d015      	beq.n	8014828 <_strtod_l+0x978>
 80147fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014800:	4213      	tst	r3, r2
 8014802:	d100      	bne.n	8014806 <_strtod_l+0x956>
 8014804:	e75c      	b.n	80146c0 <_strtod_l+0x810>
 8014806:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014808:	9a06      	ldr	r2, [sp, #24]
 801480a:	0030      	movs	r0, r6
 801480c:	0039      	movs	r1, r7
 801480e:	2b00      	cmp	r3, #0
 8014810:	d00f      	beq.n	8014832 <_strtod_l+0x982>
 8014812:	f7ff fb35 	bl	8013e80 <sulp>
 8014816:	0002      	movs	r2, r0
 8014818:	000b      	movs	r3, r1
 801481a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801481c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801481e:	f7ec fcf5 	bl	800120c <__aeabi_dadd>
 8014822:	0006      	movs	r6, r0
 8014824:	000f      	movs	r7, r1
 8014826:	e74b      	b.n	80146c0 <_strtod_l+0x810>
 8014828:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801482a:	4233      	tst	r3, r6
 801482c:	d100      	bne.n	8014830 <_strtod_l+0x980>
 801482e:	e747      	b.n	80146c0 <_strtod_l+0x810>
 8014830:	e7e9      	b.n	8014806 <_strtod_l+0x956>
 8014832:	f7ff fb25 	bl	8013e80 <sulp>
 8014836:	0002      	movs	r2, r0
 8014838:	000b      	movs	r3, r1
 801483a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801483c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801483e:	f7ed fe7d 	bl	800253c <__aeabi_dsub>
 8014842:	2200      	movs	r2, #0
 8014844:	2300      	movs	r3, #0
 8014846:	0006      	movs	r6, r0
 8014848:	000f      	movs	r7, r1
 801484a:	f7eb fe07 	bl	800045c <__aeabi_dcmpeq>
 801484e:	2800      	cmp	r0, #0
 8014850:	d000      	beq.n	8014854 <_strtod_l+0x9a4>
 8014852:	e5f8      	b.n	8014446 <_strtod_l+0x596>
 8014854:	e734      	b.n	80146c0 <_strtod_l+0x810>
 8014856:	46c0      	nop			; (mov r8, r8)
 8014858:	fffffc02 	.word	0xfffffc02
 801485c:	7ff00000 	.word	0x7ff00000
 8014860:	0801b8d8 	.word	0x0801b8d8
 8014864:	fffffbe2 	.word	0xfffffbe2
 8014868:	000fffff 	.word	0x000fffff
 801486c:	7fefffff 	.word	0x7fefffff
 8014870:	39500000 	.word	0x39500000
 8014874:	fff00000 	.word	0xfff00000
 8014878:	9905      	ldr	r1, [sp, #20]
 801487a:	0020      	movs	r0, r4
 801487c:	f003 fae2 	bl	8017e44 <__ratio>
 8014880:	2380      	movs	r3, #128	; 0x80
 8014882:	2200      	movs	r2, #0
 8014884:	05db      	lsls	r3, r3, #23
 8014886:	9008      	str	r0, [sp, #32]
 8014888:	9109      	str	r1, [sp, #36]	; 0x24
 801488a:	f7eb fdf7 	bl	800047c <__aeabi_dcmple>
 801488e:	2800      	cmp	r0, #0
 8014890:	d100      	bne.n	8014894 <_strtod_l+0x9e4>
 8014892:	e07f      	b.n	8014994 <_strtod_l+0xae4>
 8014894:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014896:	2b00      	cmp	r3, #0
 8014898:	d04b      	beq.n	8014932 <_strtod_l+0xa82>
 801489a:	2200      	movs	r2, #0
 801489c:	4b8a      	ldr	r3, [pc, #552]	; (8014ac8 <_strtod_l+0xc18>)
 801489e:	9210      	str	r2, [sp, #64]	; 0x40
 80148a0:	9311      	str	r3, [sp, #68]	; 0x44
 80148a2:	4b89      	ldr	r3, [pc, #548]	; (8014ac8 <_strtod_l+0xc18>)
 80148a4:	9308      	str	r3, [sp, #32]
 80148a6:	4a89      	ldr	r2, [pc, #548]	; (8014acc <_strtod_l+0xc1c>)
 80148a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148aa:	4013      	ands	r3, r2
 80148ac:	9314      	str	r3, [sp, #80]	; 0x50
 80148ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80148b0:	4b87      	ldr	r3, [pc, #540]	; (8014ad0 <_strtod_l+0xc20>)
 80148b2:	429a      	cmp	r2, r3
 80148b4:	d000      	beq.n	80148b8 <_strtod_l+0xa08>
 80148b6:	e0ba      	b.n	8014a2e <_strtod_l+0xb7e>
 80148b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80148ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148bc:	921a      	str	r2, [sp, #104]	; 0x68
 80148be:	931b      	str	r3, [sp, #108]	; 0x6c
 80148c0:	4a84      	ldr	r2, [pc, #528]	; (8014ad4 <_strtod_l+0xc24>)
 80148c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148c4:	4694      	mov	ip, r2
 80148c6:	4463      	add	r3, ip
 80148c8:	001f      	movs	r7, r3
 80148ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80148cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80148ce:	0030      	movs	r0, r6
 80148d0:	0039      	movs	r1, r7
 80148d2:	920c      	str	r2, [sp, #48]	; 0x30
 80148d4:	930d      	str	r3, [sp, #52]	; 0x34
 80148d6:	f003 f9ef 	bl	8017cb8 <__ulp>
 80148da:	0002      	movs	r2, r0
 80148dc:	000b      	movs	r3, r1
 80148de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80148e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80148e2:	f7ed fbb9 	bl	8002058 <__aeabi_dmul>
 80148e6:	0032      	movs	r2, r6
 80148e8:	003b      	movs	r3, r7
 80148ea:	f7ec fc8f 	bl	800120c <__aeabi_dadd>
 80148ee:	4a77      	ldr	r2, [pc, #476]	; (8014acc <_strtod_l+0xc1c>)
 80148f0:	4b79      	ldr	r3, [pc, #484]	; (8014ad8 <_strtod_l+0xc28>)
 80148f2:	0006      	movs	r6, r0
 80148f4:	400a      	ands	r2, r1
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d964      	bls.n	80149c4 <_strtod_l+0xb14>
 80148fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148fc:	4a77      	ldr	r2, [pc, #476]	; (8014adc <_strtod_l+0xc2c>)
 80148fe:	4293      	cmp	r3, r2
 8014900:	d103      	bne.n	801490a <_strtod_l+0xa5a>
 8014902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014904:	3301      	adds	r3, #1
 8014906:	d100      	bne.n	801490a <_strtod_l+0xa5a>
 8014908:	e508      	b.n	801431c <_strtod_l+0x46c>
 801490a:	2601      	movs	r6, #1
 801490c:	4f73      	ldr	r7, [pc, #460]	; (8014adc <_strtod_l+0xc2c>)
 801490e:	4276      	negs	r6, r6
 8014910:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014912:	9804      	ldr	r0, [sp, #16]
 8014914:	f002 ff56 	bl	80177c4 <_Bfree>
 8014918:	990a      	ldr	r1, [sp, #40]	; 0x28
 801491a:	9804      	ldr	r0, [sp, #16]
 801491c:	f002 ff52 	bl	80177c4 <_Bfree>
 8014920:	9905      	ldr	r1, [sp, #20]
 8014922:	9804      	ldr	r0, [sp, #16]
 8014924:	f002 ff4e 	bl	80177c4 <_Bfree>
 8014928:	0021      	movs	r1, r4
 801492a:	9804      	ldr	r0, [sp, #16]
 801492c:	f002 ff4a 	bl	80177c4 <_Bfree>
 8014930:	e5f4      	b.n	801451c <_strtod_l+0x66c>
 8014932:	2e00      	cmp	r6, #0
 8014934:	d11e      	bne.n	8014974 <_strtod_l+0xac4>
 8014936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014938:	031b      	lsls	r3, r3, #12
 801493a:	d121      	bne.n	8014980 <_strtod_l+0xad0>
 801493c:	9808      	ldr	r0, [sp, #32]
 801493e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014940:	2200      	movs	r2, #0
 8014942:	4b61      	ldr	r3, [pc, #388]	; (8014ac8 <_strtod_l+0xc18>)
 8014944:	f7eb fd90 	bl	8000468 <__aeabi_dcmplt>
 8014948:	2800      	cmp	r0, #0
 801494a:	d11f      	bne.n	801498c <_strtod_l+0xadc>
 801494c:	9808      	ldr	r0, [sp, #32]
 801494e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014950:	2200      	movs	r2, #0
 8014952:	4b63      	ldr	r3, [pc, #396]	; (8014ae0 <_strtod_l+0xc30>)
 8014954:	f7ed fb80 	bl	8002058 <__aeabi_dmul>
 8014958:	0005      	movs	r5, r0
 801495a:	9108      	str	r1, [sp, #32]
 801495c:	2280      	movs	r2, #128	; 0x80
 801495e:	0612      	lsls	r2, r2, #24
 8014960:	4694      	mov	ip, r2
 8014962:	9b08      	ldr	r3, [sp, #32]
 8014964:	951e      	str	r5, [sp, #120]	; 0x78
 8014966:	4463      	add	r3, ip
 8014968:	931f      	str	r3, [sp, #124]	; 0x7c
 801496a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801496c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801496e:	9210      	str	r2, [sp, #64]	; 0x40
 8014970:	9311      	str	r3, [sp, #68]	; 0x44
 8014972:	e798      	b.n	80148a6 <_strtod_l+0x9f6>
 8014974:	2e01      	cmp	r6, #1
 8014976:	d103      	bne.n	8014980 <_strtod_l+0xad0>
 8014978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801497a:	2b00      	cmp	r3, #0
 801497c:	d100      	bne.n	8014980 <_strtod_l+0xad0>
 801497e:	e562      	b.n	8014446 <_strtod_l+0x596>
 8014980:	2200      	movs	r2, #0
 8014982:	4b58      	ldr	r3, [pc, #352]	; (8014ae4 <_strtod_l+0xc34>)
 8014984:	2500      	movs	r5, #0
 8014986:	9210      	str	r2, [sp, #64]	; 0x40
 8014988:	9311      	str	r3, [sp, #68]	; 0x44
 801498a:	e78a      	b.n	80148a2 <_strtod_l+0x9f2>
 801498c:	4b54      	ldr	r3, [pc, #336]	; (8014ae0 <_strtod_l+0xc30>)
 801498e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014990:	9308      	str	r3, [sp, #32]
 8014992:	e7e3      	b.n	801495c <_strtod_l+0xaac>
 8014994:	4b52      	ldr	r3, [pc, #328]	; (8014ae0 <_strtod_l+0xc30>)
 8014996:	9808      	ldr	r0, [sp, #32]
 8014998:	9909      	ldr	r1, [sp, #36]	; 0x24
 801499a:	2200      	movs	r2, #0
 801499c:	f7ed fb5c 	bl	8002058 <__aeabi_dmul>
 80149a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80149a2:	0005      	movs	r5, r0
 80149a4:	9108      	str	r1, [sp, #32]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d107      	bne.n	80149ba <_strtod_l+0xb0a>
 80149aa:	2380      	movs	r3, #128	; 0x80
 80149ac:	061b      	lsls	r3, r3, #24
 80149ae:	18cb      	adds	r3, r1, r3
 80149b0:	9016      	str	r0, [sp, #88]	; 0x58
 80149b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80149b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80149b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80149b8:	e7d9      	b.n	801496e <_strtod_l+0xabe>
 80149ba:	0002      	movs	r2, r0
 80149bc:	9b08      	ldr	r3, [sp, #32]
 80149be:	9216      	str	r2, [sp, #88]	; 0x58
 80149c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80149c2:	e7f7      	b.n	80149b4 <_strtod_l+0xb04>
 80149c4:	23d4      	movs	r3, #212	; 0xd4
 80149c6:	049b      	lsls	r3, r3, #18
 80149c8:	18cf      	adds	r7, r1, r3
 80149ca:	9b06      	ldr	r3, [sp, #24]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d19f      	bne.n	8014910 <_strtod_l+0xa60>
 80149d0:	4b3e      	ldr	r3, [pc, #248]	; (8014acc <_strtod_l+0xc1c>)
 80149d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80149d4:	970c      	str	r7, [sp, #48]	; 0x30
 80149d6:	403b      	ands	r3, r7
 80149d8:	429a      	cmp	r2, r3
 80149da:	d199      	bne.n	8014910 <_strtod_l+0xa60>
 80149dc:	9908      	ldr	r1, [sp, #32]
 80149de:	0028      	movs	r0, r5
 80149e0:	f7ee f910 	bl	8002c04 <__aeabi_d2iz>
 80149e4:	f7ee f944 	bl	8002c70 <__aeabi_i2d>
 80149e8:	000b      	movs	r3, r1
 80149ea:	0002      	movs	r2, r0
 80149ec:	9908      	ldr	r1, [sp, #32]
 80149ee:	0028      	movs	r0, r5
 80149f0:	f7ed fda4 	bl	800253c <__aeabi_dsub>
 80149f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80149f6:	9008      	str	r0, [sp, #32]
 80149f8:	9109      	str	r1, [sp, #36]	; 0x24
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d104      	bne.n	8014a08 <_strtod_l+0xb58>
 80149fe:	2e00      	cmp	r6, #0
 8014a00:	d102      	bne.n	8014a08 <_strtod_l+0xb58>
 8014a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a04:	031b      	lsls	r3, r3, #12
 8014a06:	d058      	beq.n	8014aba <_strtod_l+0xc0a>
 8014a08:	9808      	ldr	r0, [sp, #32]
 8014a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014a0c:	4a36      	ldr	r2, [pc, #216]	; (8014ae8 <_strtod_l+0xc38>)
 8014a0e:	4b37      	ldr	r3, [pc, #220]	; (8014aec <_strtod_l+0xc3c>)
 8014a10:	f7eb fd2a 	bl	8000468 <__aeabi_dcmplt>
 8014a14:	2800      	cmp	r0, #0
 8014a16:	d000      	beq.n	8014a1a <_strtod_l+0xb6a>
 8014a18:	e489      	b.n	801432e <_strtod_l+0x47e>
 8014a1a:	9808      	ldr	r0, [sp, #32]
 8014a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014a1e:	4a34      	ldr	r2, [pc, #208]	; (8014af0 <_strtod_l+0xc40>)
 8014a20:	4b2f      	ldr	r3, [pc, #188]	; (8014ae0 <_strtod_l+0xc30>)
 8014a22:	f7eb fd35 	bl	8000490 <__aeabi_dcmpgt>
 8014a26:	2800      	cmp	r0, #0
 8014a28:	d100      	bne.n	8014a2c <_strtod_l+0xb7c>
 8014a2a:	e771      	b.n	8014910 <_strtod_l+0xa60>
 8014a2c:	e47f      	b.n	801432e <_strtod_l+0x47e>
 8014a2e:	9b06      	ldr	r3, [sp, #24]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d02a      	beq.n	8014a8a <_strtod_l+0xbda>
 8014a34:	23d4      	movs	r3, #212	; 0xd4
 8014a36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a38:	04db      	lsls	r3, r3, #19
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d825      	bhi.n	8014a8a <_strtod_l+0xbda>
 8014a3e:	4a2d      	ldr	r2, [pc, #180]	; (8014af4 <_strtod_l+0xc44>)
 8014a40:	4b2d      	ldr	r3, [pc, #180]	; (8014af8 <_strtod_l+0xc48>)
 8014a42:	0028      	movs	r0, r5
 8014a44:	9908      	ldr	r1, [sp, #32]
 8014a46:	f7eb fd19 	bl	800047c <__aeabi_dcmple>
 8014a4a:	2800      	cmp	r0, #0
 8014a4c:	d016      	beq.n	8014a7c <_strtod_l+0xbcc>
 8014a4e:	0028      	movs	r0, r5
 8014a50:	9908      	ldr	r1, [sp, #32]
 8014a52:	f7eb fdcd 	bl	80005f0 <__aeabi_d2uiz>
 8014a56:	2800      	cmp	r0, #0
 8014a58:	d100      	bne.n	8014a5c <_strtod_l+0xbac>
 8014a5a:	3001      	adds	r0, #1
 8014a5c:	f7ee f942 	bl	8002ce4 <__aeabi_ui2d>
 8014a60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014a62:	0005      	movs	r5, r0
 8014a64:	9108      	str	r1, [sp, #32]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d122      	bne.n	8014ab0 <_strtod_l+0xc00>
 8014a6a:	2380      	movs	r3, #128	; 0x80
 8014a6c:	061b      	lsls	r3, r3, #24
 8014a6e:	18cb      	adds	r3, r1, r3
 8014a70:	9018      	str	r0, [sp, #96]	; 0x60
 8014a72:	9319      	str	r3, [sp, #100]	; 0x64
 8014a74:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014a76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a78:	9210      	str	r2, [sp, #64]	; 0x40
 8014a7a:	9311      	str	r3, [sp, #68]	; 0x44
 8014a7c:	22d6      	movs	r2, #214	; 0xd6
 8014a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014a80:	04d2      	lsls	r2, r2, #19
 8014a82:	189b      	adds	r3, r3, r2
 8014a84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a86:	1a9b      	subs	r3, r3, r2
 8014a88:	9311      	str	r3, [sp, #68]	; 0x44
 8014a8a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014a8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014a8e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014a90:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014a92:	f003 f911 	bl	8017cb8 <__ulp>
 8014a96:	0002      	movs	r2, r0
 8014a98:	000b      	movs	r3, r1
 8014a9a:	0030      	movs	r0, r6
 8014a9c:	0039      	movs	r1, r7
 8014a9e:	f7ed fadb 	bl	8002058 <__aeabi_dmul>
 8014aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014aa6:	f7ec fbb1 	bl	800120c <__aeabi_dadd>
 8014aaa:	0006      	movs	r6, r0
 8014aac:	000f      	movs	r7, r1
 8014aae:	e78c      	b.n	80149ca <_strtod_l+0xb1a>
 8014ab0:	0002      	movs	r2, r0
 8014ab2:	9b08      	ldr	r3, [sp, #32]
 8014ab4:	9218      	str	r2, [sp, #96]	; 0x60
 8014ab6:	9319      	str	r3, [sp, #100]	; 0x64
 8014ab8:	e7dc      	b.n	8014a74 <_strtod_l+0xbc4>
 8014aba:	4a0b      	ldr	r2, [pc, #44]	; (8014ae8 <_strtod_l+0xc38>)
 8014abc:	4b0f      	ldr	r3, [pc, #60]	; (8014afc <_strtod_l+0xc4c>)
 8014abe:	9808      	ldr	r0, [sp, #32]
 8014ac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ac2:	f7eb fcd1 	bl	8000468 <__aeabi_dcmplt>
 8014ac6:	e7ae      	b.n	8014a26 <_strtod_l+0xb76>
 8014ac8:	3ff00000 	.word	0x3ff00000
 8014acc:	7ff00000 	.word	0x7ff00000
 8014ad0:	7fe00000 	.word	0x7fe00000
 8014ad4:	fcb00000 	.word	0xfcb00000
 8014ad8:	7c9fffff 	.word	0x7c9fffff
 8014adc:	7fefffff 	.word	0x7fefffff
 8014ae0:	3fe00000 	.word	0x3fe00000
 8014ae4:	bff00000 	.word	0xbff00000
 8014ae8:	94a03595 	.word	0x94a03595
 8014aec:	3fdfffff 	.word	0x3fdfffff
 8014af0:	35afe535 	.word	0x35afe535
 8014af4:	ffc00000 	.word	0xffc00000
 8014af8:	41dfffff 	.word	0x41dfffff
 8014afc:	3fcfffff 	.word	0x3fcfffff

08014b00 <strtod>:
 8014b00:	4b06      	ldr	r3, [pc, #24]	; (8014b1c <strtod+0x1c>)
 8014b02:	b510      	push	{r4, lr}
 8014b04:	0004      	movs	r4, r0
 8014b06:	6818      	ldr	r0, [r3, #0]
 8014b08:	000a      	movs	r2, r1
 8014b0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d100      	bne.n	8014b12 <strtod+0x12>
 8014b10:	4b03      	ldr	r3, [pc, #12]	; (8014b20 <strtod+0x20>)
 8014b12:	0021      	movs	r1, r4
 8014b14:	f7ff f9cc 	bl	8013eb0 <_strtod_l>
 8014b18:	bd10      	pop	{r4, pc}
 8014b1a:	46c0      	nop			; (mov r8, r8)
 8014b1c:	200000dc 	.word	0x200000dc
 8014b20:	20000508 	.word	0x20000508

08014b24 <strtok>:
 8014b24:	4b03      	ldr	r3, [pc, #12]	; (8014b34 <strtok+0x10>)
 8014b26:	b510      	push	{r4, lr}
 8014b28:	681a      	ldr	r2, [r3, #0]
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	325c      	adds	r2, #92	; 0x5c
 8014b2e:	f000 f803 	bl	8014b38 <__strtok_r>
 8014b32:	bd10      	pop	{r4, pc}
 8014b34:	200000dc 	.word	0x200000dc

08014b38 <__strtok_r>:
 8014b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b3a:	2800      	cmp	r0, #0
 8014b3c:	d104      	bne.n	8014b48 <__strtok_r+0x10>
 8014b3e:	6810      	ldr	r0, [r2, #0]
 8014b40:	2800      	cmp	r0, #0
 8014b42:	d101      	bne.n	8014b48 <__strtok_r+0x10>
 8014b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b46:	0020      	movs	r0, r4
 8014b48:	000e      	movs	r6, r1
 8014b4a:	7805      	ldrb	r5, [r0, #0]
 8014b4c:	1c44      	adds	r4, r0, #1
 8014b4e:	7837      	ldrb	r7, [r6, #0]
 8014b50:	2f00      	cmp	r7, #0
 8014b52:	d104      	bne.n	8014b5e <__strtok_r+0x26>
 8014b54:	2d00      	cmp	r5, #0
 8014b56:	d110      	bne.n	8014b7a <__strtok_r+0x42>
 8014b58:	6015      	str	r5, [r2, #0]
 8014b5a:	0028      	movs	r0, r5
 8014b5c:	e7f2      	b.n	8014b44 <__strtok_r+0xc>
 8014b5e:	3601      	adds	r6, #1
 8014b60:	42bd      	cmp	r5, r7
 8014b62:	d1f4      	bne.n	8014b4e <__strtok_r+0x16>
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d1ee      	bne.n	8014b46 <__strtok_r+0xe>
 8014b68:	6014      	str	r4, [r2, #0]
 8014b6a:	7003      	strb	r3, [r0, #0]
 8014b6c:	e7ea      	b.n	8014b44 <__strtok_r+0xc>
 8014b6e:	0033      	movs	r3, r6
 8014b70:	e00d      	b.n	8014b8e <__strtok_r+0x56>
 8014b72:	3501      	adds	r5, #1
 8014b74:	2f00      	cmp	r7, #0
 8014b76:	d103      	bne.n	8014b80 <__strtok_r+0x48>
 8014b78:	001c      	movs	r4, r3
 8014b7a:	000d      	movs	r5, r1
 8014b7c:	7826      	ldrb	r6, [r4, #0]
 8014b7e:	1c63      	adds	r3, r4, #1
 8014b80:	782f      	ldrb	r7, [r5, #0]
 8014b82:	42be      	cmp	r6, r7
 8014b84:	d1f5      	bne.n	8014b72 <__strtok_r+0x3a>
 8014b86:	2e00      	cmp	r6, #0
 8014b88:	d0f1      	beq.n	8014b6e <__strtok_r+0x36>
 8014b8a:	2100      	movs	r1, #0
 8014b8c:	7021      	strb	r1, [r4, #0]
 8014b8e:	6013      	str	r3, [r2, #0]
 8014b90:	e7d8      	b.n	8014b44 <__strtok_r+0xc>
	...

08014b94 <_strtol_l.isra.0>:
 8014b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b96:	001f      	movs	r7, r3
 8014b98:	000e      	movs	r6, r1
 8014b9a:	b087      	sub	sp, #28
 8014b9c:	9005      	str	r0, [sp, #20]
 8014b9e:	9101      	str	r1, [sp, #4]
 8014ba0:	9202      	str	r2, [sp, #8]
 8014ba2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014ba4:	7834      	ldrb	r4, [r6, #0]
 8014ba6:	f7fe fc9f 	bl	80134e8 <__locale_ctype_ptr_l>
 8014baa:	2208      	movs	r2, #8
 8014bac:	1900      	adds	r0, r0, r4
 8014bae:	7843      	ldrb	r3, [r0, #1]
 8014bb0:	1c75      	adds	r5, r6, #1
 8014bb2:	4013      	ands	r3, r2
 8014bb4:	d136      	bne.n	8014c24 <_strtol_l.isra.0+0x90>
 8014bb6:	2c2d      	cmp	r4, #45	; 0x2d
 8014bb8:	d136      	bne.n	8014c28 <_strtol_l.isra.0+0x94>
 8014bba:	1cb5      	adds	r5, r6, #2
 8014bbc:	7874      	ldrb	r4, [r6, #1]
 8014bbe:	2601      	movs	r6, #1
 8014bc0:	2f00      	cmp	r7, #0
 8014bc2:	d062      	beq.n	8014c8a <_strtol_l.isra.0+0xf6>
 8014bc4:	2f10      	cmp	r7, #16
 8014bc6:	d109      	bne.n	8014bdc <_strtol_l.isra.0+0x48>
 8014bc8:	2c30      	cmp	r4, #48	; 0x30
 8014bca:	d107      	bne.n	8014bdc <_strtol_l.isra.0+0x48>
 8014bcc:	2220      	movs	r2, #32
 8014bce:	782b      	ldrb	r3, [r5, #0]
 8014bd0:	4393      	bics	r3, r2
 8014bd2:	2b58      	cmp	r3, #88	; 0x58
 8014bd4:	d154      	bne.n	8014c80 <_strtol_l.isra.0+0xec>
 8014bd6:	2710      	movs	r7, #16
 8014bd8:	786c      	ldrb	r4, [r5, #1]
 8014bda:	3502      	adds	r5, #2
 8014bdc:	4b2d      	ldr	r3, [pc, #180]	; (8014c94 <_strtol_l.isra.0+0x100>)
 8014bde:	0039      	movs	r1, r7
 8014be0:	18f3      	adds	r3, r6, r3
 8014be2:	0018      	movs	r0, r3
 8014be4:	9303      	str	r3, [sp, #12]
 8014be6:	f7eb fb39 	bl	800025c <__aeabi_uidivmod>
 8014bea:	9104      	str	r1, [sp, #16]
 8014bec:	2101      	movs	r1, #1
 8014bee:	2300      	movs	r3, #0
 8014bf0:	4249      	negs	r1, r1
 8014bf2:	0002      	movs	r2, r0
 8014bf4:	468c      	mov	ip, r1
 8014bf6:	0018      	movs	r0, r3
 8014bf8:	0021      	movs	r1, r4
 8014bfa:	3930      	subs	r1, #48	; 0x30
 8014bfc:	2909      	cmp	r1, #9
 8014bfe:	d81a      	bhi.n	8014c36 <_strtol_l.isra.0+0xa2>
 8014c00:	000c      	movs	r4, r1
 8014c02:	42a7      	cmp	r7, r4
 8014c04:	dd23      	ble.n	8014c4e <_strtol_l.isra.0+0xba>
 8014c06:	1c59      	adds	r1, r3, #1
 8014c08:	d009      	beq.n	8014c1e <_strtol_l.isra.0+0x8a>
 8014c0a:	4663      	mov	r3, ip
 8014c0c:	4282      	cmp	r2, r0
 8014c0e:	d306      	bcc.n	8014c1e <_strtol_l.isra.0+0x8a>
 8014c10:	d102      	bne.n	8014c18 <_strtol_l.isra.0+0x84>
 8014c12:	9904      	ldr	r1, [sp, #16]
 8014c14:	42a1      	cmp	r1, r4
 8014c16:	db02      	blt.n	8014c1e <_strtol_l.isra.0+0x8a>
 8014c18:	2301      	movs	r3, #1
 8014c1a:	4378      	muls	r0, r7
 8014c1c:	1820      	adds	r0, r4, r0
 8014c1e:	782c      	ldrb	r4, [r5, #0]
 8014c20:	3501      	adds	r5, #1
 8014c22:	e7e9      	b.n	8014bf8 <_strtol_l.isra.0+0x64>
 8014c24:	002e      	movs	r6, r5
 8014c26:	e7bc      	b.n	8014ba2 <_strtol_l.isra.0+0xe>
 8014c28:	2c2b      	cmp	r4, #43	; 0x2b
 8014c2a:	d001      	beq.n	8014c30 <_strtol_l.isra.0+0x9c>
 8014c2c:	001e      	movs	r6, r3
 8014c2e:	e7c7      	b.n	8014bc0 <_strtol_l.isra.0+0x2c>
 8014c30:	1cb5      	adds	r5, r6, #2
 8014c32:	7874      	ldrb	r4, [r6, #1]
 8014c34:	e7fa      	b.n	8014c2c <_strtol_l.isra.0+0x98>
 8014c36:	0021      	movs	r1, r4
 8014c38:	3941      	subs	r1, #65	; 0x41
 8014c3a:	2919      	cmp	r1, #25
 8014c3c:	d801      	bhi.n	8014c42 <_strtol_l.isra.0+0xae>
 8014c3e:	3c37      	subs	r4, #55	; 0x37
 8014c40:	e7df      	b.n	8014c02 <_strtol_l.isra.0+0x6e>
 8014c42:	0021      	movs	r1, r4
 8014c44:	3961      	subs	r1, #97	; 0x61
 8014c46:	2919      	cmp	r1, #25
 8014c48:	d801      	bhi.n	8014c4e <_strtol_l.isra.0+0xba>
 8014c4a:	3c57      	subs	r4, #87	; 0x57
 8014c4c:	e7d9      	b.n	8014c02 <_strtol_l.isra.0+0x6e>
 8014c4e:	1c5a      	adds	r2, r3, #1
 8014c50:	d108      	bne.n	8014c64 <_strtol_l.isra.0+0xd0>
 8014c52:	9a05      	ldr	r2, [sp, #20]
 8014c54:	3323      	adds	r3, #35	; 0x23
 8014c56:	6013      	str	r3, [r2, #0]
 8014c58:	9b02      	ldr	r3, [sp, #8]
 8014c5a:	9803      	ldr	r0, [sp, #12]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d109      	bne.n	8014c74 <_strtol_l.isra.0+0xe0>
 8014c60:	b007      	add	sp, #28
 8014c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c64:	2e00      	cmp	r6, #0
 8014c66:	d000      	beq.n	8014c6a <_strtol_l.isra.0+0xd6>
 8014c68:	4240      	negs	r0, r0
 8014c6a:	9a02      	ldr	r2, [sp, #8]
 8014c6c:	2a00      	cmp	r2, #0
 8014c6e:	d0f7      	beq.n	8014c60 <_strtol_l.isra.0+0xcc>
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d001      	beq.n	8014c78 <_strtol_l.isra.0+0xe4>
 8014c74:	1e6b      	subs	r3, r5, #1
 8014c76:	9301      	str	r3, [sp, #4]
 8014c78:	9b02      	ldr	r3, [sp, #8]
 8014c7a:	9a01      	ldr	r2, [sp, #4]
 8014c7c:	601a      	str	r2, [r3, #0]
 8014c7e:	e7ef      	b.n	8014c60 <_strtol_l.isra.0+0xcc>
 8014c80:	2430      	movs	r4, #48	; 0x30
 8014c82:	2f00      	cmp	r7, #0
 8014c84:	d1aa      	bne.n	8014bdc <_strtol_l.isra.0+0x48>
 8014c86:	2708      	movs	r7, #8
 8014c88:	e7a8      	b.n	8014bdc <_strtol_l.isra.0+0x48>
 8014c8a:	2c30      	cmp	r4, #48	; 0x30
 8014c8c:	d09e      	beq.n	8014bcc <_strtol_l.isra.0+0x38>
 8014c8e:	270a      	movs	r7, #10
 8014c90:	e7a4      	b.n	8014bdc <_strtol_l.isra.0+0x48>
 8014c92:	46c0      	nop			; (mov r8, r8)
 8014c94:	7fffffff 	.word	0x7fffffff

08014c98 <strtol>:
 8014c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c9a:	0013      	movs	r3, r2
 8014c9c:	4a06      	ldr	r2, [pc, #24]	; (8014cb8 <strtol+0x20>)
 8014c9e:	0005      	movs	r5, r0
 8014ca0:	6810      	ldr	r0, [r2, #0]
 8014ca2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8014ca4:	2c00      	cmp	r4, #0
 8014ca6:	d100      	bne.n	8014caa <strtol+0x12>
 8014ca8:	4c04      	ldr	r4, [pc, #16]	; (8014cbc <strtol+0x24>)
 8014caa:	000a      	movs	r2, r1
 8014cac:	9400      	str	r4, [sp, #0]
 8014cae:	0029      	movs	r1, r5
 8014cb0:	f7ff ff70 	bl	8014b94 <_strtol_l.isra.0>
 8014cb4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8014cb6:	46c0      	nop			; (mov r8, r8)
 8014cb8:	200000dc 	.word	0x200000dc
 8014cbc:	20000508 	.word	0x20000508

08014cc0 <_svfprintf_r>:
 8014cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cc2:	b0d9      	sub	sp, #356	; 0x164
 8014cc4:	910b      	str	r1, [sp, #44]	; 0x2c
 8014cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8014cc8:	001c      	movs	r4, r3
 8014cca:	900a      	str	r0, [sp, #40]	; 0x28
 8014ccc:	f002 fd26 	bl	801771c <_localeconv_r>
 8014cd0:	6803      	ldr	r3, [r0, #0]
 8014cd2:	0018      	movs	r0, r3
 8014cd4:	931c      	str	r3, [sp, #112]	; 0x70
 8014cd6:	f7eb fa1f 	bl	8000118 <strlen>
 8014cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cdc:	9014      	str	r0, [sp, #80]	; 0x50
 8014cde:	899b      	ldrh	r3, [r3, #12]
 8014ce0:	061b      	lsls	r3, r3, #24
 8014ce2:	d518      	bpl.n	8014d16 <_svfprintf_r+0x56>
 8014ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ce6:	691b      	ldr	r3, [r3, #16]
 8014ce8:	9308      	str	r3, [sp, #32]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d113      	bne.n	8014d16 <_svfprintf_r+0x56>
 8014cee:	2140      	movs	r1, #64	; 0x40
 8014cf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014cf2:	f7fe fc1f 	bl	8013534 <_malloc_r>
 8014cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cf8:	6018      	str	r0, [r3, #0]
 8014cfa:	6118      	str	r0, [r3, #16]
 8014cfc:	2800      	cmp	r0, #0
 8014cfe:	d107      	bne.n	8014d10 <_svfprintf_r+0x50>
 8014d00:	230c      	movs	r3, #12
 8014d02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d04:	6013      	str	r3, [r2, #0]
 8014d06:	3b0d      	subs	r3, #13
 8014d08:	9315      	str	r3, [sp, #84]	; 0x54
 8014d0a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014d0c:	b059      	add	sp, #356	; 0x164
 8014d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d10:	2340      	movs	r3, #64	; 0x40
 8014d12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014d14:	6153      	str	r3, [r2, #20]
 8014d16:	2600      	movs	r6, #0
 8014d18:	af2f      	add	r7, sp, #188	; 0xbc
 8014d1a:	972c      	str	r7, [sp, #176]	; 0xb0
 8014d1c:	962e      	str	r6, [sp, #184]	; 0xb8
 8014d1e:	962d      	str	r6, [sp, #180]	; 0xb4
 8014d20:	960d      	str	r6, [sp, #52]	; 0x34
 8014d22:	961a      	str	r6, [sp, #104]	; 0x68
 8014d24:	9619      	str	r6, [sp, #100]	; 0x64
 8014d26:	961e      	str	r6, [sp, #120]	; 0x78
 8014d28:	961d      	str	r6, [sp, #116]	; 0x74
 8014d2a:	9613      	str	r6, [sp, #76]	; 0x4c
 8014d2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8014d2e:	961f      	str	r6, [sp, #124]	; 0x7c
 8014d30:	9615      	str	r6, [sp, #84]	; 0x54
 8014d32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014d34:	782b      	ldrb	r3, [r5, #0]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d002      	beq.n	8014d40 <_svfprintf_r+0x80>
 8014d3a:	2b25      	cmp	r3, #37	; 0x25
 8014d3c:	d000      	beq.n	8014d40 <_svfprintf_r+0x80>
 8014d3e:	e095      	b.n	8014e6c <_svfprintf_r+0x1ac>
 8014d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d42:	1aee      	subs	r6, r5, r3
 8014d44:	d017      	beq.n	8014d76 <_svfprintf_r+0xb6>
 8014d46:	603b      	str	r3, [r7, #0]
 8014d48:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014d4a:	607e      	str	r6, [r7, #4]
 8014d4c:	199b      	adds	r3, r3, r6
 8014d4e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014d50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014d52:	3708      	adds	r7, #8
 8014d54:	9308      	str	r3, [sp, #32]
 8014d56:	3301      	adds	r3, #1
 8014d58:	932d      	str	r3, [sp, #180]	; 0xb4
 8014d5a:	2b07      	cmp	r3, #7
 8014d5c:	dd08      	ble.n	8014d70 <_svfprintf_r+0xb0>
 8014d5e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014d60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d64:	f003 f900 	bl	8017f68 <__ssprint_r>
 8014d68:	2800      	cmp	r0, #0
 8014d6a:	d000      	beq.n	8014d6e <_svfprintf_r+0xae>
 8014d6c:	e2d9      	b.n	8015322 <_svfprintf_r+0x662>
 8014d6e:	af2f      	add	r7, sp, #188	; 0xbc
 8014d70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d72:	199b      	adds	r3, r3, r6
 8014d74:	9315      	str	r3, [sp, #84]	; 0x54
 8014d76:	782b      	ldrb	r3, [r5, #0]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d101      	bne.n	8014d80 <_svfprintf_r+0xc0>
 8014d7c:	f001 f9e5 	bl	801614a <_svfprintf_r+0x148a>
 8014d80:	1c6b      	adds	r3, r5, #1
 8014d82:	221b      	movs	r2, #27
 8014d84:	9311      	str	r3, [sp, #68]	; 0x44
 8014d86:	2300      	movs	r3, #0
 8014d88:	a91e      	add	r1, sp, #120	; 0x78
 8014d8a:	1852      	adds	r2, r2, r1
 8014d8c:	7013      	strb	r3, [r2, #0]
 8014d8e:	2201      	movs	r2, #1
 8014d90:	001e      	movs	r6, r3
 8014d92:	2520      	movs	r5, #32
 8014d94:	4252      	negs	r2, r2
 8014d96:	9208      	str	r2, [sp, #32]
 8014d98:	9316      	str	r3, [sp, #88]	; 0x58
 8014d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	930e      	str	r3, [sp, #56]	; 0x38
 8014da0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014da2:	3301      	adds	r3, #1
 8014da4:	9311      	str	r3, [sp, #68]	; 0x44
 8014da6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014da8:	3820      	subs	r0, #32
 8014daa:	285a      	cmp	r0, #90	; 0x5a
 8014dac:	d901      	bls.n	8014db2 <_svfprintf_r+0xf2>
 8014dae:	f000 fe3d 	bl	8015a2c <_svfprintf_r+0xd6c>
 8014db2:	f7eb f9c3 	bl	800013c <__gnu_thumb1_case_shi>
 8014db6:	009e      	.short	0x009e
 8014db8:	063b063b 	.word	0x063b063b
 8014dbc:	063b00a7 	.word	0x063b00a7
 8014dc0:	063b063b 	.word	0x063b063b
 8014dc4:	063b0080 	.word	0x063b0080
 8014dc8:	00a9063b 	.word	0x00a9063b
 8014dcc:	063b00b3 	.word	0x063b00b3
 8014dd0:	00b900b1 	.word	0x00b900b1
 8014dd4:	00dd063b 	.word	0x00dd063b
 8014dd8:	00df00df 	.word	0x00df00df
 8014ddc:	00df00df 	.word	0x00df00df
 8014de0:	00df00df 	.word	0x00df00df
 8014de4:	00df00df 	.word	0x00df00df
 8014de8:	063b00df 	.word	0x063b00df
 8014dec:	063b063b 	.word	0x063b063b
 8014df0:	063b063b 	.word	0x063b063b
 8014df4:	063b063b 	.word	0x063b063b
 8014df8:	063b0240 	.word	0x063b0240
 8014dfc:	01fd010a 	.word	0x01fd010a
 8014e00:	02400240 	.word	0x02400240
 8014e04:	063b0240 	.word	0x063b0240
 8014e08:	063b063b 	.word	0x063b063b
 8014e0c:	00f1063b 	.word	0x00f1063b
 8014e10:	063b063b 	.word	0x063b063b
 8014e14:	063b04e2 	.word	0x063b04e2
 8014e18:	063b063b 	.word	0x063b063b
 8014e1c:	063b0537 	.word	0x063b0537
 8014e20:	063b0557 	.word	0x063b0557
 8014e24:	005d063b 	.word	0x005d063b
 8014e28:	063b063b 	.word	0x063b063b
 8014e2c:	063b063b 	.word	0x063b063b
 8014e30:	063b063b 	.word	0x063b063b
 8014e34:	063b063b 	.word	0x063b063b
 8014e38:	063b0240 	.word	0x063b0240
 8014e3c:	01ff010a 	.word	0x01ff010a
 8014e40:	02400240 	.word	0x02400240
 8014e44:	00f30240 	.word	0x00f30240
 8014e48:	010601ff 	.word	0x010601ff
 8014e4c:	00ff063b 	.word	0x00ff063b
 8014e50:	04c5063b 	.word	0x04c5063b
 8014e54:	052704e4 	.word	0x052704e4
 8014e58:	063b0106 	.word	0x063b0106
 8014e5c:	fff20537 	.word	0xfff20537
 8014e60:	063b0559 	.word	0x063b0559
 8014e64:	0582063b 	.word	0x0582063b
 8014e68:	fff2063b 	.word	0xfff2063b
 8014e6c:	3501      	adds	r5, #1
 8014e6e:	e761      	b.n	8014d34 <_svfprintf_r+0x74>
 8014e70:	4bcb      	ldr	r3, [pc, #812]	; (80151a0 <_svfprintf_r+0x4e0>)
 8014e72:	2220      	movs	r2, #32
 8014e74:	931e      	str	r3, [sp, #120]	; 0x78
 8014e76:	4032      	ands	r2, r6
 8014e78:	d101      	bne.n	8014e7e <_svfprintf_r+0x1be>
 8014e7a:	f000 fd21 	bl	80158c0 <_svfprintf_r+0xc00>
 8014e7e:	2307      	movs	r3, #7
 8014e80:	3407      	adds	r4, #7
 8014e82:	439c      	bics	r4, r3
 8014e84:	0023      	movs	r3, r4
 8014e86:	3308      	adds	r3, #8
 8014e88:	9312      	str	r3, [sp, #72]	; 0x48
 8014e8a:	6823      	ldr	r3, [r4, #0]
 8014e8c:	6864      	ldr	r4, [r4, #4]
 8014e8e:	9306      	str	r3, [sp, #24]
 8014e90:	9407      	str	r4, [sp, #28]
 8014e92:	07f3      	lsls	r3, r6, #31
 8014e94:	d50a      	bpl.n	8014eac <_svfprintf_r+0x1ec>
 8014e96:	9b06      	ldr	r3, [sp, #24]
 8014e98:	9a07      	ldr	r2, [sp, #28]
 8014e9a:	4313      	orrs	r3, r2
 8014e9c:	d006      	beq.n	8014eac <_svfprintf_r+0x1ec>
 8014e9e:	2230      	movs	r2, #48	; 0x30
 8014ea0:	ab25      	add	r3, sp, #148	; 0x94
 8014ea2:	701a      	strb	r2, [r3, #0]
 8014ea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ea6:	705a      	strb	r2, [r3, #1]
 8014ea8:	2302      	movs	r3, #2
 8014eaa:	431e      	orrs	r6, r3
 8014eac:	4bbd      	ldr	r3, [pc, #756]	; (80151a4 <_svfprintf_r+0x4e4>)
 8014eae:	401e      	ands	r6, r3
 8014eb0:	2302      	movs	r3, #2
 8014eb2:	f000 fc74 	bl	801579e <_svfprintf_r+0xade>
 8014eb6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014eb8:	f002 fc30 	bl	801771c <_localeconv_r>
 8014ebc:	6843      	ldr	r3, [r0, #4]
 8014ebe:	0018      	movs	r0, r3
 8014ec0:	931f      	str	r3, [sp, #124]	; 0x7c
 8014ec2:	f7eb f929 	bl	8000118 <strlen>
 8014ec6:	901b      	str	r0, [sp, #108]	; 0x6c
 8014ec8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014eca:	f002 fc27 	bl	801771c <_localeconv_r>
 8014ece:	6883      	ldr	r3, [r0, #8]
 8014ed0:	9313      	str	r3, [sp, #76]	; 0x4c
 8014ed2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d100      	bne.n	8014eda <_svfprintf_r+0x21a>
 8014ed8:	e75f      	b.n	8014d9a <_svfprintf_r+0xda>
 8014eda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d100      	bne.n	8014ee2 <_svfprintf_r+0x222>
 8014ee0:	e75b      	b.n	8014d9a <_svfprintf_r+0xda>
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d100      	bne.n	8014eea <_svfprintf_r+0x22a>
 8014ee8:	e757      	b.n	8014d9a <_svfprintf_r+0xda>
 8014eea:	2380      	movs	r3, #128	; 0x80
 8014eec:	00db      	lsls	r3, r3, #3
 8014eee:	431e      	orrs	r6, r3
 8014ef0:	e753      	b.n	8014d9a <_svfprintf_r+0xda>
 8014ef2:	231b      	movs	r3, #27
 8014ef4:	aa1e      	add	r2, sp, #120	; 0x78
 8014ef6:	189b      	adds	r3, r3, r2
 8014ef8:	781a      	ldrb	r2, [r3, #0]
 8014efa:	2a00      	cmp	r2, #0
 8014efc:	d000      	beq.n	8014f00 <_svfprintf_r+0x240>
 8014efe:	e74c      	b.n	8014d9a <_svfprintf_r+0xda>
 8014f00:	701d      	strb	r5, [r3, #0]
 8014f02:	e74a      	b.n	8014d9a <_svfprintf_r+0xda>
 8014f04:	2301      	movs	r3, #1
 8014f06:	e7f2      	b.n	8014eee <_svfprintf_r+0x22e>
 8014f08:	6823      	ldr	r3, [r4, #0]
 8014f0a:	3404      	adds	r4, #4
 8014f0c:	9316      	str	r3, [sp, #88]	; 0x58
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	db00      	blt.n	8014f14 <_svfprintf_r+0x254>
 8014f12:	e742      	b.n	8014d9a <_svfprintf_r+0xda>
 8014f14:	425b      	negs	r3, r3
 8014f16:	9316      	str	r3, [sp, #88]	; 0x58
 8014f18:	2304      	movs	r3, #4
 8014f1a:	e7e8      	b.n	8014eee <_svfprintf_r+0x22e>
 8014f1c:	231b      	movs	r3, #27
 8014f1e:	aa1e      	add	r2, sp, #120	; 0x78
 8014f20:	189b      	adds	r3, r3, r2
 8014f22:	222b      	movs	r2, #43	; 0x2b
 8014f24:	701a      	strb	r2, [r3, #0]
 8014f26:	e738      	b.n	8014d9a <_svfprintf_r+0xda>
 8014f28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014f2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f2c:	7812      	ldrb	r2, [r2, #0]
 8014f2e:	3301      	adds	r3, #1
 8014f30:	920e      	str	r2, [sp, #56]	; 0x38
 8014f32:	2a2a      	cmp	r2, #42	; 0x2a
 8014f34:	d008      	beq.n	8014f48 <_svfprintf_r+0x288>
 8014f36:	2200      	movs	r2, #0
 8014f38:	9208      	str	r2, [sp, #32]
 8014f3a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014f3c:	001a      	movs	r2, r3
 8014f3e:	3930      	subs	r1, #48	; 0x30
 8014f40:	2909      	cmp	r1, #9
 8014f42:	d90c      	bls.n	8014f5e <_svfprintf_r+0x29e>
 8014f44:	9211      	str	r2, [sp, #68]	; 0x44
 8014f46:	e72e      	b.n	8014da6 <_svfprintf_r+0xe6>
 8014f48:	6821      	ldr	r1, [r4, #0]
 8014f4a:	1d22      	adds	r2, r4, #4
 8014f4c:	9108      	str	r1, [sp, #32]
 8014f4e:	2900      	cmp	r1, #0
 8014f50:	da02      	bge.n	8014f58 <_svfprintf_r+0x298>
 8014f52:	2101      	movs	r1, #1
 8014f54:	4249      	negs	r1, r1
 8014f56:	9108      	str	r1, [sp, #32]
 8014f58:	0014      	movs	r4, r2
 8014f5a:	9311      	str	r3, [sp, #68]	; 0x44
 8014f5c:	e71d      	b.n	8014d9a <_svfprintf_r+0xda>
 8014f5e:	200a      	movs	r0, #10
 8014f60:	9a08      	ldr	r2, [sp, #32]
 8014f62:	4342      	muls	r2, r0
 8014f64:	1852      	adds	r2, r2, r1
 8014f66:	9208      	str	r2, [sp, #32]
 8014f68:	781a      	ldrb	r2, [r3, #0]
 8014f6a:	3301      	adds	r3, #1
 8014f6c:	920e      	str	r2, [sp, #56]	; 0x38
 8014f6e:	e7e4      	b.n	8014f3a <_svfprintf_r+0x27a>
 8014f70:	2380      	movs	r3, #128	; 0x80
 8014f72:	e7bc      	b.n	8014eee <_svfprintf_r+0x22e>
 8014f74:	2300      	movs	r3, #0
 8014f76:	9316      	str	r3, [sp, #88]	; 0x58
 8014f78:	220a      	movs	r2, #10
 8014f7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014f7c:	4353      	muls	r3, r2
 8014f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f80:	3a30      	subs	r2, #48	; 0x30
 8014f82:	18d3      	adds	r3, r2, r3
 8014f84:	9316      	str	r3, [sp, #88]	; 0x58
 8014f86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f88:	1c5a      	adds	r2, r3, #1
 8014f8a:	781b      	ldrb	r3, [r3, #0]
 8014f8c:	9211      	str	r2, [sp, #68]	; 0x44
 8014f8e:	930e      	str	r3, [sp, #56]	; 0x38
 8014f90:	3b30      	subs	r3, #48	; 0x30
 8014f92:	2b09      	cmp	r3, #9
 8014f94:	d9f0      	bls.n	8014f78 <_svfprintf_r+0x2b8>
 8014f96:	e7d5      	b.n	8014f44 <_svfprintf_r+0x284>
 8014f98:	2308      	movs	r3, #8
 8014f9a:	e7a8      	b.n	8014eee <_svfprintf_r+0x22e>
 8014f9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f9e:	781b      	ldrb	r3, [r3, #0]
 8014fa0:	2b68      	cmp	r3, #104	; 0x68
 8014fa2:	d105      	bne.n	8014fb0 <_svfprintf_r+0x2f0>
 8014fa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014fa6:	3301      	adds	r3, #1
 8014fa8:	9311      	str	r3, [sp, #68]	; 0x44
 8014faa:	2380      	movs	r3, #128	; 0x80
 8014fac:	009b      	lsls	r3, r3, #2
 8014fae:	e79e      	b.n	8014eee <_svfprintf_r+0x22e>
 8014fb0:	2340      	movs	r3, #64	; 0x40
 8014fb2:	e79c      	b.n	8014eee <_svfprintf_r+0x22e>
 8014fb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014fb6:	781b      	ldrb	r3, [r3, #0]
 8014fb8:	2b6c      	cmp	r3, #108	; 0x6c
 8014fba:	d104      	bne.n	8014fc6 <_svfprintf_r+0x306>
 8014fbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014fbe:	3301      	adds	r3, #1
 8014fc0:	9311      	str	r3, [sp, #68]	; 0x44
 8014fc2:	432e      	orrs	r6, r5
 8014fc4:	e6e9      	b.n	8014d9a <_svfprintf_r+0xda>
 8014fc6:	2310      	movs	r3, #16
 8014fc8:	e791      	b.n	8014eee <_svfprintf_r+0x22e>
 8014fca:	1d23      	adds	r3, r4, #4
 8014fcc:	6822      	ldr	r2, [r4, #0]
 8014fce:	9312      	str	r3, [sp, #72]	; 0x48
 8014fd0:	ab3f      	add	r3, sp, #252	; 0xfc
 8014fd2:	701a      	strb	r2, [r3, #0]
 8014fd4:	221b      	movs	r2, #27
 8014fd6:	2000      	movs	r0, #0
 8014fd8:	a91e      	add	r1, sp, #120	; 0x78
 8014fda:	1852      	adds	r2, r2, r1
 8014fdc:	7010      	strb	r0, [r2, #0]
 8014fde:	2201      	movs	r2, #1
 8014fe0:	0005      	movs	r5, r0
 8014fe2:	900c      	str	r0, [sp, #48]	; 0x30
 8014fe4:	9208      	str	r2, [sp, #32]
 8014fe6:	9017      	str	r0, [sp, #92]	; 0x5c
 8014fe8:	9010      	str	r0, [sp, #64]	; 0x40
 8014fea:	900f      	str	r0, [sp, #60]	; 0x3c
 8014fec:	9309      	str	r3, [sp, #36]	; 0x24
 8014fee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ff0:	9a08      	ldr	r2, [sp, #32]
 8014ff2:	9318      	str	r3, [sp, #96]	; 0x60
 8014ff4:	4293      	cmp	r3, r2
 8014ff6:	da00      	bge.n	8014ffa <_svfprintf_r+0x33a>
 8014ff8:	9218      	str	r2, [sp, #96]	; 0x60
 8014ffa:	231b      	movs	r3, #27
 8014ffc:	aa1e      	add	r2, sp, #120	; 0x78
 8014ffe:	189b      	adds	r3, r3, r2
 8015000:	781b      	ldrb	r3, [r3, #0]
 8015002:	1e5a      	subs	r2, r3, #1
 8015004:	4193      	sbcs	r3, r2
 8015006:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015008:	18d3      	adds	r3, r2, r3
 801500a:	9318      	str	r3, [sp, #96]	; 0x60
 801500c:	2302      	movs	r3, #2
 801500e:	4033      	ands	r3, r6
 8015010:	9320      	str	r3, [sp, #128]	; 0x80
 8015012:	d002      	beq.n	801501a <_svfprintf_r+0x35a>
 8015014:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015016:	3302      	adds	r3, #2
 8015018:	9318      	str	r3, [sp, #96]	; 0x60
 801501a:	2384      	movs	r3, #132	; 0x84
 801501c:	4033      	ands	r3, r6
 801501e:	9321      	str	r3, [sp, #132]	; 0x84
 8015020:	d121      	bne.n	8015066 <_svfprintf_r+0x3a6>
 8015022:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015024:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015026:	1a9c      	subs	r4, r3, r2
 8015028:	2c00      	cmp	r4, #0
 801502a:	dd1c      	ble.n	8015066 <_svfprintf_r+0x3a6>
 801502c:	0039      	movs	r1, r7
 801502e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015030:	485d      	ldr	r0, [pc, #372]	; (80151a8 <_svfprintf_r+0x4e8>)
 8015032:	9322      	str	r3, [sp, #136]	; 0x88
 8015034:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015036:	3301      	adds	r3, #1
 8015038:	3108      	adds	r1, #8
 801503a:	6038      	str	r0, [r7, #0]
 801503c:	2c10      	cmp	r4, #16
 801503e:	dd01      	ble.n	8015044 <_svfprintf_r+0x384>
 8015040:	f000 fd08 	bl	8015a54 <_svfprintf_r+0xd94>
 8015044:	607c      	str	r4, [r7, #4]
 8015046:	18a4      	adds	r4, r4, r2
 8015048:	942e      	str	r4, [sp, #184]	; 0xb8
 801504a:	932d      	str	r3, [sp, #180]	; 0xb4
 801504c:	000f      	movs	r7, r1
 801504e:	2b07      	cmp	r3, #7
 8015050:	dd09      	ble.n	8015066 <_svfprintf_r+0x3a6>
 8015052:	aa2c      	add	r2, sp, #176	; 0xb0
 8015054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015056:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015058:	f002 ff86 	bl	8017f68 <__ssprint_r>
 801505c:	2800      	cmp	r0, #0
 801505e:	d001      	beq.n	8015064 <_svfprintf_r+0x3a4>
 8015060:	f001 f852 	bl	8016108 <_svfprintf_r+0x1448>
 8015064:	af2f      	add	r7, sp, #188	; 0xbc
 8015066:	231b      	movs	r3, #27
 8015068:	aa1e      	add	r2, sp, #120	; 0x78
 801506a:	189b      	adds	r3, r3, r2
 801506c:	781a      	ldrb	r2, [r3, #0]
 801506e:	2a00      	cmp	r2, #0
 8015070:	d017      	beq.n	80150a2 <_svfprintf_r+0x3e2>
 8015072:	603b      	str	r3, [r7, #0]
 8015074:	2301      	movs	r3, #1
 8015076:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015078:	607b      	str	r3, [r7, #4]
 801507a:	0013      	movs	r3, r2
 801507c:	3301      	adds	r3, #1
 801507e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015080:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015082:	3708      	adds	r7, #8
 8015084:	9322      	str	r3, [sp, #136]	; 0x88
 8015086:	3301      	adds	r3, #1
 8015088:	932d      	str	r3, [sp, #180]	; 0xb4
 801508a:	2b07      	cmp	r3, #7
 801508c:	dd09      	ble.n	80150a2 <_svfprintf_r+0x3e2>
 801508e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015092:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015094:	f002 ff68 	bl	8017f68 <__ssprint_r>
 8015098:	2800      	cmp	r0, #0
 801509a:	d001      	beq.n	80150a0 <_svfprintf_r+0x3e0>
 801509c:	f001 f834 	bl	8016108 <_svfprintf_r+0x1448>
 80150a0:	af2f      	add	r7, sp, #188	; 0xbc
 80150a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d019      	beq.n	80150dc <_svfprintf_r+0x41c>
 80150a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80150aa:	9320      	str	r3, [sp, #128]	; 0x80
 80150ac:	ab25      	add	r3, sp, #148	; 0x94
 80150ae:	603b      	str	r3, [r7, #0]
 80150b0:	2302      	movs	r3, #2
 80150b2:	607b      	str	r3, [r7, #4]
 80150b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80150b6:	3708      	adds	r7, #8
 80150b8:	3302      	adds	r3, #2
 80150ba:	932e      	str	r3, [sp, #184]	; 0xb8
 80150bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150be:	9320      	str	r3, [sp, #128]	; 0x80
 80150c0:	3301      	adds	r3, #1
 80150c2:	932d      	str	r3, [sp, #180]	; 0xb4
 80150c4:	2b07      	cmp	r3, #7
 80150c6:	dd09      	ble.n	80150dc <_svfprintf_r+0x41c>
 80150c8:	aa2c      	add	r2, sp, #176	; 0xb0
 80150ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150ce:	f002 ff4b 	bl	8017f68 <__ssprint_r>
 80150d2:	2800      	cmp	r0, #0
 80150d4:	d001      	beq.n	80150da <_svfprintf_r+0x41a>
 80150d6:	f001 f817 	bl	8016108 <_svfprintf_r+0x1448>
 80150da:	af2f      	add	r7, sp, #188	; 0xbc
 80150dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150de:	2b80      	cmp	r3, #128	; 0x80
 80150e0:	d121      	bne.n	8015126 <_svfprintf_r+0x466>
 80150e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80150e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80150e6:	1a9c      	subs	r4, r3, r2
 80150e8:	2c00      	cmp	r4, #0
 80150ea:	dd1c      	ble.n	8015126 <_svfprintf_r+0x466>
 80150ec:	0039      	movs	r1, r7
 80150ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150f0:	482e      	ldr	r0, [pc, #184]	; (80151ac <_svfprintf_r+0x4ec>)
 80150f2:	9320      	str	r3, [sp, #128]	; 0x80
 80150f4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80150f6:	3301      	adds	r3, #1
 80150f8:	3108      	adds	r1, #8
 80150fa:	6038      	str	r0, [r7, #0]
 80150fc:	2c10      	cmp	r4, #16
 80150fe:	dd01      	ble.n	8015104 <_svfprintf_r+0x444>
 8015100:	f000 fcbc 	bl	8015a7c <_svfprintf_r+0xdbc>
 8015104:	607c      	str	r4, [r7, #4]
 8015106:	18a4      	adds	r4, r4, r2
 8015108:	942e      	str	r4, [sp, #184]	; 0xb8
 801510a:	932d      	str	r3, [sp, #180]	; 0xb4
 801510c:	000f      	movs	r7, r1
 801510e:	2b07      	cmp	r3, #7
 8015110:	dd09      	ble.n	8015126 <_svfprintf_r+0x466>
 8015112:	aa2c      	add	r2, sp, #176	; 0xb0
 8015114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015116:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015118:	f002 ff26 	bl	8017f68 <__ssprint_r>
 801511c:	2800      	cmp	r0, #0
 801511e:	d001      	beq.n	8015124 <_svfprintf_r+0x464>
 8015120:	f000 fff2 	bl	8016108 <_svfprintf_r+0x1448>
 8015124:	af2f      	add	r7, sp, #188	; 0xbc
 8015126:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015128:	9a08      	ldr	r2, [sp, #32]
 801512a:	1a9c      	subs	r4, r3, r2
 801512c:	2c00      	cmp	r4, #0
 801512e:	dd1c      	ble.n	801516a <_svfprintf_r+0x4aa>
 8015130:	0039      	movs	r1, r7
 8015132:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015134:	481d      	ldr	r0, [pc, #116]	; (80151ac <_svfprintf_r+0x4ec>)
 8015136:	9317      	str	r3, [sp, #92]	; 0x5c
 8015138:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801513a:	3301      	adds	r3, #1
 801513c:	3108      	adds	r1, #8
 801513e:	6038      	str	r0, [r7, #0]
 8015140:	2c10      	cmp	r4, #16
 8015142:	dd01      	ble.n	8015148 <_svfprintf_r+0x488>
 8015144:	f000 fcb4 	bl	8015ab0 <_svfprintf_r+0xdf0>
 8015148:	18a2      	adds	r2, r4, r2
 801514a:	607c      	str	r4, [r7, #4]
 801514c:	922e      	str	r2, [sp, #184]	; 0xb8
 801514e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015150:	000f      	movs	r7, r1
 8015152:	2b07      	cmp	r3, #7
 8015154:	dd09      	ble.n	801516a <_svfprintf_r+0x4aa>
 8015156:	aa2c      	add	r2, sp, #176	; 0xb0
 8015158:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801515a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801515c:	f002 ff04 	bl	8017f68 <__ssprint_r>
 8015160:	2800      	cmp	r0, #0
 8015162:	d001      	beq.n	8015168 <_svfprintf_r+0x4a8>
 8015164:	f000 ffd0 	bl	8016108 <_svfprintf_r+0x1448>
 8015168:	af2f      	add	r7, sp, #188	; 0xbc
 801516a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801516c:	9317      	str	r3, [sp, #92]	; 0x5c
 801516e:	05f3      	lsls	r3, r6, #23
 8015170:	d501      	bpl.n	8015176 <_svfprintf_r+0x4b6>
 8015172:	f000 fcb1 	bl	8015ad8 <_svfprintf_r+0xe18>
 8015176:	9a08      	ldr	r2, [sp, #32]
 8015178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801517a:	4694      	mov	ip, r2
 801517c:	603b      	str	r3, [r7, #0]
 801517e:	9b08      	ldr	r3, [sp, #32]
 8015180:	607b      	str	r3, [r7, #4]
 8015182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015184:	4463      	add	r3, ip
 8015186:	932e      	str	r3, [sp, #184]	; 0xb8
 8015188:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801518a:	9308      	str	r3, [sp, #32]
 801518c:	3301      	adds	r3, #1
 801518e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015190:	2b07      	cmp	r3, #7
 8015192:	dd01      	ble.n	8015198 <_svfprintf_r+0x4d8>
 8015194:	f000 fd94 	bl	8015cc0 <_svfprintf_r+0x1000>
 8015198:	3708      	adds	r7, #8
 801519a:	f000 fce4 	bl	8015b66 <_svfprintf_r+0xea6>
 801519e:	46c0      	nop			; (mov r8, r8)
 80151a0:	0801b921 	.word	0x0801b921
 80151a4:	fffffbff 	.word	0xfffffbff
 80151a8:	0801b934 	.word	0x0801b934
 80151ac:	0801b944 	.word	0x0801b944
 80151b0:	2310      	movs	r3, #16
 80151b2:	431e      	orrs	r6, r3
 80151b4:	06b3      	lsls	r3, r6, #26
 80151b6:	d52c      	bpl.n	8015212 <_svfprintf_r+0x552>
 80151b8:	2307      	movs	r3, #7
 80151ba:	3407      	adds	r4, #7
 80151bc:	439c      	bics	r4, r3
 80151be:	0023      	movs	r3, r4
 80151c0:	3308      	adds	r3, #8
 80151c2:	9312      	str	r3, [sp, #72]	; 0x48
 80151c4:	6823      	ldr	r3, [r4, #0]
 80151c6:	6864      	ldr	r4, [r4, #4]
 80151c8:	9306      	str	r3, [sp, #24]
 80151ca:	9407      	str	r4, [sp, #28]
 80151cc:	9b07      	ldr	r3, [sp, #28]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	da0b      	bge.n	80151ea <_svfprintf_r+0x52a>
 80151d2:	9906      	ldr	r1, [sp, #24]
 80151d4:	9a07      	ldr	r2, [sp, #28]
 80151d6:	2400      	movs	r4, #0
 80151d8:	424b      	negs	r3, r1
 80151da:	4194      	sbcs	r4, r2
 80151dc:	9306      	str	r3, [sp, #24]
 80151de:	9407      	str	r4, [sp, #28]
 80151e0:	231b      	movs	r3, #27
 80151e2:	aa1e      	add	r2, sp, #120	; 0x78
 80151e4:	189b      	adds	r3, r3, r2
 80151e6:	222d      	movs	r2, #45	; 0x2d
 80151e8:	701a      	strb	r2, [r3, #0]
 80151ea:	9b08      	ldr	r3, [sp, #32]
 80151ec:	3301      	adds	r3, #1
 80151ee:	d000      	beq.n	80151f2 <_svfprintf_r+0x532>
 80151f0:	e382      	b.n	80158f8 <_svfprintf_r+0xc38>
 80151f2:	9b07      	ldr	r3, [sp, #28]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d000      	beq.n	80151fa <_svfprintf_r+0x53a>
 80151f8:	e3b0      	b.n	801595c <_svfprintf_r+0xc9c>
 80151fa:	9b06      	ldr	r3, [sp, #24]
 80151fc:	2b09      	cmp	r3, #9
 80151fe:	d900      	bls.n	8015202 <_svfprintf_r+0x542>
 8015200:	e3ac      	b.n	801595c <_svfprintf_r+0xc9c>
 8015202:	23e7      	movs	r3, #231	; 0xe7
 8015204:	aa1e      	add	r2, sp, #120	; 0x78
 8015206:	189b      	adds	r3, r3, r2
 8015208:	9a06      	ldr	r2, [sp, #24]
 801520a:	3230      	adds	r2, #48	; 0x30
 801520c:	701a      	strb	r2, [r3, #0]
 801520e:	9309      	str	r3, [sp, #36]	; 0x24
 8015210:	e395      	b.n	801593e <_svfprintf_r+0xc7e>
 8015212:	1d23      	adds	r3, r4, #4
 8015214:	9312      	str	r3, [sp, #72]	; 0x48
 8015216:	06f3      	lsls	r3, r6, #27
 8015218:	d504      	bpl.n	8015224 <_svfprintf_r+0x564>
 801521a:	6823      	ldr	r3, [r4, #0]
 801521c:	9306      	str	r3, [sp, #24]
 801521e:	17db      	asrs	r3, r3, #31
 8015220:	9307      	str	r3, [sp, #28]
 8015222:	e7d3      	b.n	80151cc <_svfprintf_r+0x50c>
 8015224:	6823      	ldr	r3, [r4, #0]
 8015226:	0672      	lsls	r2, r6, #25
 8015228:	d501      	bpl.n	801522e <_svfprintf_r+0x56e>
 801522a:	b21b      	sxth	r3, r3
 801522c:	e7f6      	b.n	801521c <_svfprintf_r+0x55c>
 801522e:	05b2      	lsls	r2, r6, #22
 8015230:	d5f4      	bpl.n	801521c <_svfprintf_r+0x55c>
 8015232:	b25b      	sxtb	r3, r3
 8015234:	e7f2      	b.n	801521c <_svfprintf_r+0x55c>
 8015236:	2307      	movs	r3, #7
 8015238:	3407      	adds	r4, #7
 801523a:	439c      	bics	r4, r3
 801523c:	0023      	movs	r3, r4
 801523e:	2201      	movs	r2, #1
 8015240:	3308      	adds	r3, #8
 8015242:	9312      	str	r3, [sp, #72]	; 0x48
 8015244:	6823      	ldr	r3, [r4, #0]
 8015246:	4252      	negs	r2, r2
 8015248:	931a      	str	r3, [sp, #104]	; 0x68
 801524a:	6863      	ldr	r3, [r4, #4]
 801524c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801524e:	005c      	lsls	r4, r3, #1
 8015250:	0864      	lsrs	r4, r4, #1
 8015252:	9319      	str	r3, [sp, #100]	; 0x64
 8015254:	0028      	movs	r0, r5
 8015256:	4bcf      	ldr	r3, [pc, #828]	; (8015594 <_svfprintf_r+0x8d4>)
 8015258:	0021      	movs	r1, r4
 801525a:	f7ed fcb7 	bl	8002bcc <__aeabi_dcmpun>
 801525e:	2800      	cmp	r0, #0
 8015260:	d125      	bne.n	80152ae <_svfprintf_r+0x5ee>
 8015262:	2201      	movs	r2, #1
 8015264:	4bcb      	ldr	r3, [pc, #812]	; (8015594 <_svfprintf_r+0x8d4>)
 8015266:	4252      	negs	r2, r2
 8015268:	0028      	movs	r0, r5
 801526a:	0021      	movs	r1, r4
 801526c:	f7eb f906 	bl	800047c <__aeabi_dcmple>
 8015270:	2800      	cmp	r0, #0
 8015272:	d11c      	bne.n	80152ae <_svfprintf_r+0x5ee>
 8015274:	2200      	movs	r2, #0
 8015276:	2300      	movs	r3, #0
 8015278:	981a      	ldr	r0, [sp, #104]	; 0x68
 801527a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801527c:	f7eb f8f4 	bl	8000468 <__aeabi_dcmplt>
 8015280:	2800      	cmp	r0, #0
 8015282:	d004      	beq.n	801528e <_svfprintf_r+0x5ce>
 8015284:	231b      	movs	r3, #27
 8015286:	aa1e      	add	r2, sp, #120	; 0x78
 8015288:	189b      	adds	r3, r3, r2
 801528a:	222d      	movs	r2, #45	; 0x2d
 801528c:	701a      	strb	r2, [r3, #0]
 801528e:	4bc2      	ldr	r3, [pc, #776]	; (8015598 <_svfprintf_r+0x8d8>)
 8015290:	9309      	str	r3, [sp, #36]	; 0x24
 8015292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015294:	2b47      	cmp	r3, #71	; 0x47
 8015296:	dc01      	bgt.n	801529c <_svfprintf_r+0x5dc>
 8015298:	4bc0      	ldr	r3, [pc, #768]	; (801559c <_svfprintf_r+0x8dc>)
 801529a:	9309      	str	r3, [sp, #36]	; 0x24
 801529c:	2380      	movs	r3, #128	; 0x80
 801529e:	439e      	bics	r6, r3
 80152a0:	2300      	movs	r3, #0
 80152a2:	930c      	str	r3, [sp, #48]	; 0x30
 80152a4:	3303      	adds	r3, #3
 80152a6:	9308      	str	r3, [sp, #32]
 80152a8:	2300      	movs	r3, #0
 80152aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80152ac:	e34f      	b.n	801594e <_svfprintf_r+0xc8e>
 80152ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80152b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80152b2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80152b4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80152b6:	f7ed fc89 	bl	8002bcc <__aeabi_dcmpun>
 80152ba:	2800      	cmp	r0, #0
 80152bc:	d00e      	beq.n	80152dc <_svfprintf_r+0x61c>
 80152be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	da04      	bge.n	80152ce <_svfprintf_r+0x60e>
 80152c4:	231b      	movs	r3, #27
 80152c6:	aa1e      	add	r2, sp, #120	; 0x78
 80152c8:	189b      	adds	r3, r3, r2
 80152ca:	222d      	movs	r2, #45	; 0x2d
 80152cc:	701a      	strb	r2, [r3, #0]
 80152ce:	4bb4      	ldr	r3, [pc, #720]	; (80155a0 <_svfprintf_r+0x8e0>)
 80152d0:	9309      	str	r3, [sp, #36]	; 0x24
 80152d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152d4:	2b47      	cmp	r3, #71	; 0x47
 80152d6:	dce1      	bgt.n	801529c <_svfprintf_r+0x5dc>
 80152d8:	4bb2      	ldr	r3, [pc, #712]	; (80155a4 <_svfprintf_r+0x8e4>)
 80152da:	e7de      	b.n	801529a <_svfprintf_r+0x5da>
 80152dc:	2320      	movs	r3, #32
 80152de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152e0:	439a      	bics	r2, r3
 80152e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80152e4:	2a41      	cmp	r2, #65	; 0x41
 80152e6:	d124      	bne.n	8015332 <_svfprintf_r+0x672>
 80152e8:	2230      	movs	r2, #48	; 0x30
 80152ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80152ec:	ab25      	add	r3, sp, #148	; 0x94
 80152ee:	701a      	strb	r2, [r3, #0]
 80152f0:	3228      	adds	r2, #40	; 0x28
 80152f2:	2961      	cmp	r1, #97	; 0x61
 80152f4:	d100      	bne.n	80152f8 <_svfprintf_r+0x638>
 80152f6:	3220      	adds	r2, #32
 80152f8:	705a      	strb	r2, [r3, #1]
 80152fa:	2302      	movs	r3, #2
 80152fc:	431e      	orrs	r6, r3
 80152fe:	9b08      	ldr	r3, [sp, #32]
 8015300:	2b63      	cmp	r3, #99	; 0x63
 8015302:	dc00      	bgt.n	8015306 <_svfprintf_r+0x646>
 8015304:	e09e      	b.n	8015444 <_svfprintf_r+0x784>
 8015306:	1c59      	adds	r1, r3, #1
 8015308:	980a      	ldr	r0, [sp, #40]	; 0x28
 801530a:	f7fe f913 	bl	8013534 <_malloc_r>
 801530e:	9009      	str	r0, [sp, #36]	; 0x24
 8015310:	2800      	cmp	r0, #0
 8015312:	d000      	beq.n	8015316 <_svfprintf_r+0x656>
 8015314:	e09b      	b.n	801544e <_svfprintf_r+0x78e>
 8015316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015318:	899a      	ldrh	r2, [r3, #12]
 801531a:	2340      	movs	r3, #64	; 0x40
 801531c:	4313      	orrs	r3, r2
 801531e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015320:	8193      	strh	r3, [r2, #12]
 8015322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015324:	899b      	ldrh	r3, [r3, #12]
 8015326:	065b      	lsls	r3, r3, #25
 8015328:	d400      	bmi.n	801532c <_svfprintf_r+0x66c>
 801532a:	e4ee      	b.n	8014d0a <_svfprintf_r+0x4a>
 801532c:	2301      	movs	r3, #1
 801532e:	425b      	negs	r3, r3
 8015330:	e4ea      	b.n	8014d08 <_svfprintf_r+0x48>
 8015332:	9b08      	ldr	r3, [sp, #32]
 8015334:	900c      	str	r0, [sp, #48]	; 0x30
 8015336:	3301      	adds	r3, #1
 8015338:	d100      	bne.n	801533c <_svfprintf_r+0x67c>
 801533a:	e08b      	b.n	8015454 <_svfprintf_r+0x794>
 801533c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801533e:	2b47      	cmp	r3, #71	; 0x47
 8015340:	d103      	bne.n	801534a <_svfprintf_r+0x68a>
 8015342:	9b08      	ldr	r3, [sp, #32]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d100      	bne.n	801534a <_svfprintf_r+0x68a>
 8015348:	e087      	b.n	801545a <_svfprintf_r+0x79a>
 801534a:	2380      	movs	r3, #128	; 0x80
 801534c:	005b      	lsls	r3, r3, #1
 801534e:	4333      	orrs	r3, r6
 8015350:	9320      	str	r3, [sp, #128]	; 0x80
 8015352:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015354:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8015356:	2b00      	cmp	r3, #0
 8015358:	db00      	blt.n	801535c <_svfprintf_r+0x69c>
 801535a:	e082      	b.n	8015462 <_svfprintf_r+0x7a2>
 801535c:	2280      	movs	r2, #128	; 0x80
 801535e:	0612      	lsls	r2, r2, #24
 8015360:	4694      	mov	ip, r2
 8015362:	4463      	add	r3, ip
 8015364:	930d      	str	r3, [sp, #52]	; 0x34
 8015366:	232d      	movs	r3, #45	; 0x2d
 8015368:	9322      	str	r3, [sp, #136]	; 0x88
 801536a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801536c:	2b41      	cmp	r3, #65	; 0x41
 801536e:	d000      	beq.n	8015372 <_svfprintf_r+0x6b2>
 8015370:	e105      	b.n	801557e <_svfprintf_r+0x8be>
 8015372:	aa26      	add	r2, sp, #152	; 0x98
 8015374:	0020      	movs	r0, r4
 8015376:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015378:	f002 fdc4 	bl	8017f04 <frexp>
 801537c:	23ff      	movs	r3, #255	; 0xff
 801537e:	2200      	movs	r2, #0
 8015380:	059b      	lsls	r3, r3, #22
 8015382:	f7ec fe69 	bl	8002058 <__aeabi_dmul>
 8015386:	2200      	movs	r2, #0
 8015388:	2300      	movs	r3, #0
 801538a:	0004      	movs	r4, r0
 801538c:	000d      	movs	r5, r1
 801538e:	f7eb f865 	bl	800045c <__aeabi_dcmpeq>
 8015392:	2800      	cmp	r0, #0
 8015394:	d001      	beq.n	801539a <_svfprintf_r+0x6da>
 8015396:	2301      	movs	r3, #1
 8015398:	9326      	str	r3, [sp, #152]	; 0x98
 801539a:	4b83      	ldr	r3, [pc, #524]	; (80155a8 <_svfprintf_r+0x8e8>)
 801539c:	9317      	str	r3, [sp, #92]	; 0x5c
 801539e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153a0:	2b61      	cmp	r3, #97	; 0x61
 80153a2:	d101      	bne.n	80153a8 <_svfprintf_r+0x6e8>
 80153a4:	4b81      	ldr	r3, [pc, #516]	; (80155ac <_svfprintf_r+0x8ec>)
 80153a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80153a8:	9b08      	ldr	r3, [sp, #32]
 80153aa:	3b01      	subs	r3, #1
 80153ac:	9310      	str	r3, [sp, #64]	; 0x40
 80153ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153b0:	9318      	str	r3, [sp, #96]	; 0x60
 80153b2:	2200      	movs	r2, #0
 80153b4:	4b7e      	ldr	r3, [pc, #504]	; (80155b0 <_svfprintf_r+0x8f0>)
 80153b6:	0020      	movs	r0, r4
 80153b8:	0029      	movs	r1, r5
 80153ba:	f7ec fe4d 	bl	8002058 <__aeabi_dmul>
 80153be:	000d      	movs	r5, r1
 80153c0:	0004      	movs	r4, r0
 80153c2:	f7ed fc1f 	bl	8002c04 <__aeabi_d2iz>
 80153c6:	9021      	str	r0, [sp, #132]	; 0x84
 80153c8:	f7ed fc52 	bl	8002c70 <__aeabi_i2d>
 80153cc:	0002      	movs	r2, r0
 80153ce:	000b      	movs	r3, r1
 80153d0:	0020      	movs	r0, r4
 80153d2:	0029      	movs	r1, r5
 80153d4:	f7ed f8b2 	bl	800253c <__aeabi_dsub>
 80153d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80153da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80153dc:	3301      	adds	r3, #1
 80153de:	930d      	str	r3, [sp, #52]	; 0x34
 80153e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80153e2:	0004      	movs	r4, r0
 80153e4:	5c9b      	ldrb	r3, [r3, r2]
 80153e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80153e8:	000d      	movs	r5, r1
 80153ea:	7013      	strb	r3, [r2, #0]
 80153ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80153ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80153f0:	3301      	adds	r3, #1
 80153f2:	d00a      	beq.n	801540a <_svfprintf_r+0x74a>
 80153f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80153f6:	2200      	movs	r2, #0
 80153f8:	3b01      	subs	r3, #1
 80153fa:	9310      	str	r3, [sp, #64]	; 0x40
 80153fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153fe:	9318      	str	r3, [sp, #96]	; 0x60
 8015400:	2300      	movs	r3, #0
 8015402:	f7eb f82b 	bl	800045c <__aeabi_dcmpeq>
 8015406:	2800      	cmp	r0, #0
 8015408:	d0d3      	beq.n	80153b2 <_svfprintf_r+0x6f2>
 801540a:	2200      	movs	r2, #0
 801540c:	4b69      	ldr	r3, [pc, #420]	; (80155b4 <_svfprintf_r+0x8f4>)
 801540e:	0020      	movs	r0, r4
 8015410:	0029      	movs	r1, r5
 8015412:	f7eb f83d 	bl	8000490 <__aeabi_dcmpgt>
 8015416:	2800      	cmp	r0, #0
 8015418:	d126      	bne.n	8015468 <_svfprintf_r+0x7a8>
 801541a:	2200      	movs	r2, #0
 801541c:	4b65      	ldr	r3, [pc, #404]	; (80155b4 <_svfprintf_r+0x8f4>)
 801541e:	0020      	movs	r0, r4
 8015420:	0029      	movs	r1, r5
 8015422:	f7eb f81b 	bl	800045c <__aeabi_dcmpeq>
 8015426:	2800      	cmp	r0, #0
 8015428:	d002      	beq.n	8015430 <_svfprintf_r+0x770>
 801542a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801542c:	07db      	lsls	r3, r3, #31
 801542e:	d41b      	bmi.n	8015468 <_svfprintf_r+0x7a8>
 8015430:	2130      	movs	r1, #48	; 0x30
 8015432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015434:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8015436:	1898      	adds	r0, r3, r2
 8015438:	930d      	str	r3, [sp, #52]	; 0x34
 801543a:	1ac2      	subs	r2, r0, r3
 801543c:	d426      	bmi.n	801548c <_svfprintf_r+0x7cc>
 801543e:	7019      	strb	r1, [r3, #0]
 8015440:	3301      	adds	r3, #1
 8015442:	e7f9      	b.n	8015438 <_svfprintf_r+0x778>
 8015444:	2300      	movs	r3, #0
 8015446:	930c      	str	r3, [sp, #48]	; 0x30
 8015448:	ab3f      	add	r3, sp, #252	; 0xfc
 801544a:	9309      	str	r3, [sp, #36]	; 0x24
 801544c:	e77d      	b.n	801534a <_svfprintf_r+0x68a>
 801544e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015450:	930c      	str	r3, [sp, #48]	; 0x30
 8015452:	e77a      	b.n	801534a <_svfprintf_r+0x68a>
 8015454:	2306      	movs	r3, #6
 8015456:	9308      	str	r3, [sp, #32]
 8015458:	e777      	b.n	801534a <_svfprintf_r+0x68a>
 801545a:	9b08      	ldr	r3, [sp, #32]
 801545c:	930c      	str	r3, [sp, #48]	; 0x30
 801545e:	2301      	movs	r3, #1
 8015460:	e7f9      	b.n	8015456 <_svfprintf_r+0x796>
 8015462:	930d      	str	r3, [sp, #52]	; 0x34
 8015464:	2300      	movs	r3, #0
 8015466:	e77f      	b.n	8015368 <_svfprintf_r+0x6a8>
 8015468:	2030      	movs	r0, #48	; 0x30
 801546a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801546c:	932a      	str	r3, [sp, #168]	; 0xa8
 801546e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015470:	7bda      	ldrb	r2, [r3, #15]
 8015472:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015474:	3b01      	subs	r3, #1
 8015476:	932a      	str	r3, [sp, #168]	; 0xa8
 8015478:	7819      	ldrb	r1, [r3, #0]
 801547a:	4291      	cmp	r1, r2
 801547c:	d07d      	beq.n	801557a <_svfprintf_r+0x8ba>
 801547e:	1c4a      	adds	r2, r1, #1
 8015480:	b2d2      	uxtb	r2, r2
 8015482:	2939      	cmp	r1, #57	; 0x39
 8015484:	d101      	bne.n	801548a <_svfprintf_r+0x7ca>
 8015486:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015488:	7a92      	ldrb	r2, [r2, #10]
 801548a:	701a      	strb	r2, [r3, #0]
 801548c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801548e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015490:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8015492:	1a9b      	subs	r3, r3, r2
 8015494:	930d      	str	r3, [sp, #52]	; 0x34
 8015496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015498:	2b47      	cmp	r3, #71	; 0x47
 801549a:	d000      	beq.n	801549e <_svfprintf_r+0x7de>
 801549c:	e0d2      	b.n	8015644 <_svfprintf_r+0x984>
 801549e:	1ceb      	adds	r3, r5, #3
 80154a0:	db03      	blt.n	80154aa <_svfprintf_r+0x7ea>
 80154a2:	9b08      	ldr	r3, [sp, #32]
 80154a4:	42ab      	cmp	r3, r5
 80154a6:	db00      	blt.n	80154aa <_svfprintf_r+0x7ea>
 80154a8:	e0fd      	b.n	80156a6 <_svfprintf_r+0x9e6>
 80154aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154ac:	3b02      	subs	r3, #2
 80154ae:	930e      	str	r3, [sp, #56]	; 0x38
 80154b0:	2238      	movs	r2, #56	; 0x38
 80154b2:	466b      	mov	r3, sp
 80154b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80154b6:	189b      	adds	r3, r3, r2
 80154b8:	3a18      	subs	r2, #24
 80154ba:	4391      	bics	r1, r2
 80154bc:	1e6c      	subs	r4, r5, #1
 80154be:	000a      	movs	r2, r1
 80154c0:	9426      	str	r4, [sp, #152]	; 0x98
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	2100      	movs	r1, #0
 80154c6:	2a41      	cmp	r2, #65	; 0x41
 80154c8:	d102      	bne.n	80154d0 <_svfprintf_r+0x810>
 80154ca:	330f      	adds	r3, #15
 80154cc:	b2db      	uxtb	r3, r3
 80154ce:	3101      	adds	r1, #1
 80154d0:	aa28      	add	r2, sp, #160	; 0xa0
 80154d2:	7013      	strb	r3, [r2, #0]
 80154d4:	232b      	movs	r3, #43	; 0x2b
 80154d6:	2c00      	cmp	r4, #0
 80154d8:	da02      	bge.n	80154e0 <_svfprintf_r+0x820>
 80154da:	2401      	movs	r4, #1
 80154dc:	232d      	movs	r3, #45	; 0x2d
 80154de:	1b64      	subs	r4, r4, r5
 80154e0:	7053      	strb	r3, [r2, #1]
 80154e2:	2c09      	cmp	r4, #9
 80154e4:	dc00      	bgt.n	80154e8 <_svfprintf_r+0x828>
 80154e6:	e0c7      	b.n	8015678 <_svfprintf_r+0x9b8>
 80154e8:	2537      	movs	r5, #55	; 0x37
 80154ea:	ab1e      	add	r3, sp, #120	; 0x78
 80154ec:	18ed      	adds	r5, r5, r3
 80154ee:	1e6b      	subs	r3, r5, #1
 80154f0:	0020      	movs	r0, r4
 80154f2:	210a      	movs	r1, #10
 80154f4:	9308      	str	r3, [sp, #32]
 80154f6:	f7ea ff9b 	bl	8000430 <__aeabi_idivmod>
 80154fa:	1e6b      	subs	r3, r5, #1
 80154fc:	3130      	adds	r1, #48	; 0x30
 80154fe:	7019      	strb	r1, [r3, #0]
 8015500:	0020      	movs	r0, r4
 8015502:	210a      	movs	r1, #10
 8015504:	f7ea feae 	bl	8000264 <__divsi3>
 8015508:	0004      	movs	r4, r0
 801550a:	2809      	cmp	r0, #9
 801550c:	dd00      	ble.n	8015510 <_svfprintf_r+0x850>
 801550e:	e0ac      	b.n	801566a <_svfprintf_r+0x9aa>
 8015510:	232a      	movs	r3, #42	; 0x2a
 8015512:	2137      	movs	r1, #55	; 0x37
 8015514:	aa1e      	add	r2, sp, #120	; 0x78
 8015516:	3d02      	subs	r5, #2
 8015518:	3430      	adds	r4, #48	; 0x30
 801551a:	702c      	strb	r4, [r5, #0]
 801551c:	189b      	adds	r3, r3, r2
 801551e:	1889      	adds	r1, r1, r2
 8015520:	001a      	movs	r2, r3
 8015522:	428d      	cmp	r5, r1
 8015524:	d200      	bcs.n	8015528 <_svfprintf_r+0x868>
 8015526:	e0a2      	b.n	801566e <_svfprintf_r+0x9ae>
 8015528:	ab28      	add	r3, sp, #160	; 0xa0
 801552a:	1ad3      	subs	r3, r2, r3
 801552c:	931d      	str	r3, [sp, #116]	; 0x74
 801552e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015530:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015532:	4694      	mov	ip, r2
 8015534:	4463      	add	r3, ip
 8015536:	9308      	str	r3, [sp, #32]
 8015538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801553a:	2b01      	cmp	r3, #1
 801553c:	dc01      	bgt.n	8015542 <_svfprintf_r+0x882>
 801553e:	07f3      	lsls	r3, r6, #31
 8015540:	d504      	bpl.n	801554c <_svfprintf_r+0x88c>
 8015542:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015544:	9b08      	ldr	r3, [sp, #32]
 8015546:	4694      	mov	ip, r2
 8015548:	4463      	add	r3, ip
 801554a:	9308      	str	r3, [sp, #32]
 801554c:	2280      	movs	r2, #128	; 0x80
 801554e:	4b1a      	ldr	r3, [pc, #104]	; (80155b8 <_svfprintf_r+0x8f8>)
 8015550:	0052      	lsls	r2, r2, #1
 8015552:	4033      	ands	r3, r6
 8015554:	431a      	orrs	r2, r3
 8015556:	2300      	movs	r3, #0
 8015558:	001d      	movs	r5, r3
 801555a:	9220      	str	r2, [sp, #128]	; 0x80
 801555c:	9310      	str	r3, [sp, #64]	; 0x40
 801555e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015560:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015562:	2b00      	cmp	r3, #0
 8015564:	d100      	bne.n	8015568 <_svfprintf_r+0x8a8>
 8015566:	e270      	b.n	8015a4a <_svfprintf_r+0xd8a>
 8015568:	231b      	movs	r3, #27
 801556a:	aa1e      	add	r2, sp, #120	; 0x78
 801556c:	189b      	adds	r3, r3, r2
 801556e:	222d      	movs	r2, #45	; 0x2d
 8015570:	701a      	strb	r2, [r3, #0]
 8015572:	2300      	movs	r3, #0
 8015574:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015576:	9317      	str	r3, [sp, #92]	; 0x5c
 8015578:	e539      	b.n	8014fee <_svfprintf_r+0x32e>
 801557a:	7018      	strb	r0, [r3, #0]
 801557c:	e779      	b.n	8015472 <_svfprintf_r+0x7b2>
 801557e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015580:	2b46      	cmp	r3, #70	; 0x46
 8015582:	d01b      	beq.n	80155bc <_svfprintf_r+0x8fc>
 8015584:	9d08      	ldr	r5, [sp, #32]
 8015586:	2b45      	cmp	r3, #69	; 0x45
 8015588:	d101      	bne.n	801558e <_svfprintf_r+0x8ce>
 801558a:	9b08      	ldr	r3, [sp, #32]
 801558c:	1c5d      	adds	r5, r3, #1
 801558e:	2302      	movs	r3, #2
 8015590:	e016      	b.n	80155c0 <_svfprintf_r+0x900>
 8015592:	46c0      	nop			; (mov r8, r8)
 8015594:	7fefffff 	.word	0x7fefffff
 8015598:	0801b904 	.word	0x0801b904
 801559c:	0801b900 	.word	0x0801b900
 80155a0:	0801b90c 	.word	0x0801b90c
 80155a4:	0801b908 	.word	0x0801b908
 80155a8:	0801b921 	.word	0x0801b921
 80155ac:	0801b910 	.word	0x0801b910
 80155b0:	40300000 	.word	0x40300000
 80155b4:	3fe00000 	.word	0x3fe00000
 80155b8:	fffffbff 	.word	0xfffffbff
 80155bc:	2303      	movs	r3, #3
 80155be:	9d08      	ldr	r5, [sp, #32]
 80155c0:	aa2a      	add	r2, sp, #168	; 0xa8
 80155c2:	9204      	str	r2, [sp, #16]
 80155c4:	aa27      	add	r2, sp, #156	; 0x9c
 80155c6:	9203      	str	r2, [sp, #12]
 80155c8:	aa26      	add	r2, sp, #152	; 0x98
 80155ca:	9202      	str	r2, [sp, #8]
 80155cc:	9300      	str	r3, [sp, #0]
 80155ce:	9501      	str	r5, [sp, #4]
 80155d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155d2:	0022      	movs	r2, r4
 80155d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155d6:	f000 fe79 	bl	80162cc <_dtoa_r>
 80155da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155dc:	9009      	str	r0, [sp, #36]	; 0x24
 80155de:	2b47      	cmp	r3, #71	; 0x47
 80155e0:	d101      	bne.n	80155e6 <_svfprintf_r+0x926>
 80155e2:	07f3      	lsls	r3, r6, #31
 80155e4:	d524      	bpl.n	8015630 <_svfprintf_r+0x970>
 80155e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155e8:	195b      	adds	r3, r3, r5
 80155ea:	9310      	str	r3, [sp, #64]	; 0x40
 80155ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155ee:	2b46      	cmp	r3, #70	; 0x46
 80155f0:	d113      	bne.n	801561a <_svfprintf_r+0x95a>
 80155f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155f4:	781b      	ldrb	r3, [r3, #0]
 80155f6:	2b30      	cmp	r3, #48	; 0x30
 80155f8:	d10a      	bne.n	8015610 <_svfprintf_r+0x950>
 80155fa:	2200      	movs	r2, #0
 80155fc:	2300      	movs	r3, #0
 80155fe:	0020      	movs	r0, r4
 8015600:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015602:	f7ea ff2b 	bl	800045c <__aeabi_dcmpeq>
 8015606:	2800      	cmp	r0, #0
 8015608:	d102      	bne.n	8015610 <_svfprintf_r+0x950>
 801560a:	2301      	movs	r3, #1
 801560c:	1b5d      	subs	r5, r3, r5
 801560e:	9526      	str	r5, [sp, #152]	; 0x98
 8015610:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015612:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015614:	4694      	mov	ip, r2
 8015616:	4463      	add	r3, ip
 8015618:	9310      	str	r3, [sp, #64]	; 0x40
 801561a:	2200      	movs	r2, #0
 801561c:	2300      	movs	r3, #0
 801561e:	0020      	movs	r0, r4
 8015620:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015622:	f7ea ff1b 	bl	800045c <__aeabi_dcmpeq>
 8015626:	2230      	movs	r2, #48	; 0x30
 8015628:	2800      	cmp	r0, #0
 801562a:	d006      	beq.n	801563a <_svfprintf_r+0x97a>
 801562c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801562e:	932a      	str	r3, [sp, #168]	; 0xa8
 8015630:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015632:	e72c      	b.n	801548e <_svfprintf_r+0x7ce>
 8015634:	1c59      	adds	r1, r3, #1
 8015636:	912a      	str	r1, [sp, #168]	; 0xa8
 8015638:	701a      	strb	r2, [r3, #0]
 801563a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801563c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801563e:	4299      	cmp	r1, r3
 8015640:	d8f8      	bhi.n	8015634 <_svfprintf_r+0x974>
 8015642:	e7f5      	b.n	8015630 <_svfprintf_r+0x970>
 8015644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015646:	2b46      	cmp	r3, #70	; 0x46
 8015648:	d000      	beq.n	801564c <_svfprintf_r+0x98c>
 801564a:	e731      	b.n	80154b0 <_svfprintf_r+0x7f0>
 801564c:	9b08      	ldr	r3, [sp, #32]
 801564e:	2d00      	cmp	r5, #0
 8015650:	dd21      	ble.n	8015696 <_svfprintf_r+0x9d6>
 8015652:	2b00      	cmp	r3, #0
 8015654:	d101      	bne.n	801565a <_svfprintf_r+0x99a>
 8015656:	07f3      	lsls	r3, r6, #31
 8015658:	d54a      	bpl.n	80156f0 <_svfprintf_r+0xa30>
 801565a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801565c:	18eb      	adds	r3, r5, r3
 801565e:	9a08      	ldr	r2, [sp, #32]
 8015660:	18d3      	adds	r3, r2, r3
 8015662:	9308      	str	r3, [sp, #32]
 8015664:	2366      	movs	r3, #102	; 0x66
 8015666:	930e      	str	r3, [sp, #56]	; 0x38
 8015668:	e034      	b.n	80156d4 <_svfprintf_r+0xa14>
 801566a:	9d08      	ldr	r5, [sp, #32]
 801566c:	e73f      	b.n	80154ee <_svfprintf_r+0x82e>
 801566e:	782a      	ldrb	r2, [r5, #0]
 8015670:	3501      	adds	r5, #1
 8015672:	701a      	strb	r2, [r3, #0]
 8015674:	3301      	adds	r3, #1
 8015676:	e753      	b.n	8015520 <_svfprintf_r+0x860>
 8015678:	232a      	movs	r3, #42	; 0x2a
 801567a:	aa1e      	add	r2, sp, #120	; 0x78
 801567c:	189b      	adds	r3, r3, r2
 801567e:	2900      	cmp	r1, #0
 8015680:	d105      	bne.n	801568e <_svfprintf_r+0x9ce>
 8015682:	2230      	movs	r2, #48	; 0x30
 8015684:	ab28      	add	r3, sp, #160	; 0xa0
 8015686:	709a      	strb	r2, [r3, #2]
 8015688:	232b      	movs	r3, #43	; 0x2b
 801568a:	aa1e      	add	r2, sp, #120	; 0x78
 801568c:	189b      	adds	r3, r3, r2
 801568e:	3430      	adds	r4, #48	; 0x30
 8015690:	1c5a      	adds	r2, r3, #1
 8015692:	701c      	strb	r4, [r3, #0]
 8015694:	e748      	b.n	8015528 <_svfprintf_r+0x868>
 8015696:	2b00      	cmp	r3, #0
 8015698:	d102      	bne.n	80156a0 <_svfprintf_r+0x9e0>
 801569a:	3301      	adds	r3, #1
 801569c:	421e      	tst	r6, r3
 801569e:	d029      	beq.n	80156f4 <_svfprintf_r+0xa34>
 80156a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80156a2:	3301      	adds	r3, #1
 80156a4:	e7db      	b.n	801565e <_svfprintf_r+0x99e>
 80156a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156a8:	42ab      	cmp	r3, r5
 80156aa:	dc06      	bgt.n	80156ba <_svfprintf_r+0x9fa>
 80156ac:	07f3      	lsls	r3, r6, #31
 80156ae:	d524      	bpl.n	80156fa <_svfprintf_r+0xa3a>
 80156b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80156b2:	18eb      	adds	r3, r5, r3
 80156b4:	9308      	str	r3, [sp, #32]
 80156b6:	2367      	movs	r3, #103	; 0x67
 80156b8:	e7d5      	b.n	8015666 <_svfprintf_r+0x9a6>
 80156ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80156bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156be:	4694      	mov	ip, r2
 80156c0:	4463      	add	r3, ip
 80156c2:	9308      	str	r3, [sp, #32]
 80156c4:	2367      	movs	r3, #103	; 0x67
 80156c6:	930e      	str	r3, [sp, #56]	; 0x38
 80156c8:	2d00      	cmp	r5, #0
 80156ca:	dc03      	bgt.n	80156d4 <_svfprintf_r+0xa14>
 80156cc:	9b08      	ldr	r3, [sp, #32]
 80156ce:	1b5b      	subs	r3, r3, r5
 80156d0:	3301      	adds	r3, #1
 80156d2:	9308      	str	r3, [sp, #32]
 80156d4:	2380      	movs	r3, #128	; 0x80
 80156d6:	00db      	lsls	r3, r3, #3
 80156d8:	401e      	ands	r6, r3
 80156da:	2300      	movs	r3, #0
 80156dc:	960f      	str	r6, [sp, #60]	; 0x3c
 80156de:	9310      	str	r3, [sp, #64]	; 0x40
 80156e0:	2e00      	cmp	r6, #0
 80156e2:	d100      	bne.n	80156e6 <_svfprintf_r+0xa26>
 80156e4:	e73c      	b.n	8015560 <_svfprintf_r+0x8a0>
 80156e6:	2d00      	cmp	r5, #0
 80156e8:	dc27      	bgt.n	801573a <_svfprintf_r+0xa7a>
 80156ea:	2300      	movs	r3, #0
 80156ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80156ee:	e737      	b.n	8015560 <_svfprintf_r+0x8a0>
 80156f0:	9508      	str	r5, [sp, #32]
 80156f2:	e7b7      	b.n	8015664 <_svfprintf_r+0x9a4>
 80156f4:	2266      	movs	r2, #102	; 0x66
 80156f6:	920e      	str	r2, [sp, #56]	; 0x38
 80156f8:	e7eb      	b.n	80156d2 <_svfprintf_r+0xa12>
 80156fa:	9508      	str	r5, [sp, #32]
 80156fc:	e7db      	b.n	80156b6 <_svfprintf_r+0x9f6>
 80156fe:	42ab      	cmp	r3, r5
 8015700:	da0e      	bge.n	8015720 <_svfprintf_r+0xa60>
 8015702:	1aed      	subs	r5, r5, r3
 8015704:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015706:	785b      	ldrb	r3, [r3, #1]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d012      	beq.n	8015732 <_svfprintf_r+0xa72>
 801570c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801570e:	3301      	adds	r3, #1
 8015710:	930f      	str	r3, [sp, #60]	; 0x3c
 8015712:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015714:	3301      	adds	r3, #1
 8015716:	9313      	str	r3, [sp, #76]	; 0x4c
 8015718:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801571a:	781b      	ldrb	r3, [r3, #0]
 801571c:	2bff      	cmp	r3, #255	; 0xff
 801571e:	d1ee      	bne.n	80156fe <_svfprintf_r+0xa3e>
 8015720:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015724:	189b      	adds	r3, r3, r2
 8015726:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015728:	4353      	muls	r3, r2
 801572a:	9a08      	ldr	r2, [sp, #32]
 801572c:	189b      	adds	r3, r3, r2
 801572e:	9308      	str	r3, [sp, #32]
 8015730:	e716      	b.n	8015560 <_svfprintf_r+0x8a0>
 8015732:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015734:	3301      	adds	r3, #1
 8015736:	9310      	str	r3, [sp, #64]	; 0x40
 8015738:	e7ee      	b.n	8015718 <_svfprintf_r+0xa58>
 801573a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801573c:	930f      	str	r3, [sp, #60]	; 0x3c
 801573e:	e7eb      	b.n	8015718 <_svfprintf_r+0xa58>
 8015740:	0022      	movs	r2, r4
 8015742:	ca08      	ldmia	r2!, {r3}
 8015744:	9212      	str	r2, [sp, #72]	; 0x48
 8015746:	06b2      	lsls	r2, r6, #26
 8015748:	d508      	bpl.n	801575c <_svfprintf_r+0xa9c>
 801574a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801574c:	601a      	str	r2, [r3, #0]
 801574e:	17d2      	asrs	r2, r2, #31
 8015750:	605a      	str	r2, [r3, #4]
 8015752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015754:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015756:	9309      	str	r3, [sp, #36]	; 0x24
 8015758:	f7ff faeb 	bl	8014d32 <_svfprintf_r+0x72>
 801575c:	06f2      	lsls	r2, r6, #27
 801575e:	d502      	bpl.n	8015766 <_svfprintf_r+0xaa6>
 8015760:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015762:	601a      	str	r2, [r3, #0]
 8015764:	e7f5      	b.n	8015752 <_svfprintf_r+0xa92>
 8015766:	0672      	lsls	r2, r6, #25
 8015768:	d502      	bpl.n	8015770 <_svfprintf_r+0xab0>
 801576a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801576c:	801a      	strh	r2, [r3, #0]
 801576e:	e7f0      	b.n	8015752 <_svfprintf_r+0xa92>
 8015770:	05b2      	lsls	r2, r6, #22
 8015772:	d5f5      	bpl.n	8015760 <_svfprintf_r+0xaa0>
 8015774:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015776:	701a      	strb	r2, [r3, #0]
 8015778:	e7eb      	b.n	8015752 <_svfprintf_r+0xa92>
 801577a:	2310      	movs	r3, #16
 801577c:	431e      	orrs	r6, r3
 801577e:	2220      	movs	r2, #32
 8015780:	4032      	ands	r2, r6
 8015782:	d025      	beq.n	80157d0 <_svfprintf_r+0xb10>
 8015784:	2307      	movs	r3, #7
 8015786:	3407      	adds	r4, #7
 8015788:	439c      	bics	r4, r3
 801578a:	0023      	movs	r3, r4
 801578c:	3308      	adds	r3, #8
 801578e:	9312      	str	r3, [sp, #72]	; 0x48
 8015790:	6823      	ldr	r3, [r4, #0]
 8015792:	6864      	ldr	r4, [r4, #4]
 8015794:	9306      	str	r3, [sp, #24]
 8015796:	9407      	str	r4, [sp, #28]
 8015798:	4bc2      	ldr	r3, [pc, #776]	; (8015aa4 <_svfprintf_r+0xde4>)
 801579a:	401e      	ands	r6, r3
 801579c:	2300      	movs	r3, #0
 801579e:	221b      	movs	r2, #27
 80157a0:	a91e      	add	r1, sp, #120	; 0x78
 80157a2:	1852      	adds	r2, r2, r1
 80157a4:	2100      	movs	r1, #0
 80157a6:	7011      	strb	r1, [r2, #0]
 80157a8:	9a08      	ldr	r2, [sp, #32]
 80157aa:	3201      	adds	r2, #1
 80157ac:	d100      	bne.n	80157b0 <_svfprintf_r+0xaf0>
 80157ae:	e0a6      	b.n	80158fe <_svfprintf_r+0xc3e>
 80157b0:	0032      	movs	r2, r6
 80157b2:	2180      	movs	r1, #128	; 0x80
 80157b4:	9807      	ldr	r0, [sp, #28]
 80157b6:	438e      	bics	r6, r1
 80157b8:	9906      	ldr	r1, [sp, #24]
 80157ba:	4301      	orrs	r1, r0
 80157bc:	d000      	beq.n	80157c0 <_svfprintf_r+0xb00>
 80157be:	e09e      	b.n	80158fe <_svfprintf_r+0xc3e>
 80157c0:	9908      	ldr	r1, [sp, #32]
 80157c2:	2900      	cmp	r1, #0
 80157c4:	d100      	bne.n	80157c8 <_svfprintf_r+0xb08>
 80157c6:	e125      	b.n	8015a14 <_svfprintf_r+0xd54>
 80157c8:	2b01      	cmp	r3, #1
 80157ca:	d000      	beq.n	80157ce <_svfprintf_r+0xb0e>
 80157cc:	e09a      	b.n	8015904 <_svfprintf_r+0xc44>
 80157ce:	e518      	b.n	8015202 <_svfprintf_r+0x542>
 80157d0:	1d23      	adds	r3, r4, #4
 80157d2:	9312      	str	r3, [sp, #72]	; 0x48
 80157d4:	2310      	movs	r3, #16
 80157d6:	4033      	ands	r3, r6
 80157d8:	d003      	beq.n	80157e2 <_svfprintf_r+0xb22>
 80157da:	6823      	ldr	r3, [r4, #0]
 80157dc:	9306      	str	r3, [sp, #24]
 80157de:	9207      	str	r2, [sp, #28]
 80157e0:	e7da      	b.n	8015798 <_svfprintf_r+0xad8>
 80157e2:	2240      	movs	r2, #64	; 0x40
 80157e4:	4032      	ands	r2, r6
 80157e6:	d004      	beq.n	80157f2 <_svfprintf_r+0xb32>
 80157e8:	6822      	ldr	r2, [r4, #0]
 80157ea:	b292      	uxth	r2, r2
 80157ec:	9206      	str	r2, [sp, #24]
 80157ee:	9307      	str	r3, [sp, #28]
 80157f0:	e7d2      	b.n	8015798 <_svfprintf_r+0xad8>
 80157f2:	2380      	movs	r3, #128	; 0x80
 80157f4:	009b      	lsls	r3, r3, #2
 80157f6:	4033      	ands	r3, r6
 80157f8:	d002      	beq.n	8015800 <_svfprintf_r+0xb40>
 80157fa:	6823      	ldr	r3, [r4, #0]
 80157fc:	b2db      	uxtb	r3, r3
 80157fe:	e7ed      	b.n	80157dc <_svfprintf_r+0xb1c>
 8015800:	6822      	ldr	r2, [r4, #0]
 8015802:	e7f3      	b.n	80157ec <_svfprintf_r+0xb2c>
 8015804:	1d23      	adds	r3, r4, #4
 8015806:	49a8      	ldr	r1, [pc, #672]	; (8015aa8 <_svfprintf_r+0xde8>)
 8015808:	aa25      	add	r2, sp, #148	; 0x94
 801580a:	9312      	str	r3, [sp, #72]	; 0x48
 801580c:	6823      	ldr	r3, [r4, #0]
 801580e:	8011      	strh	r1, [r2, #0]
 8015810:	4aa6      	ldr	r2, [pc, #664]	; (8015aac <_svfprintf_r+0xdec>)
 8015812:	9306      	str	r3, [sp, #24]
 8015814:	2300      	movs	r3, #0
 8015816:	921e      	str	r2, [sp, #120]	; 0x78
 8015818:	2278      	movs	r2, #120	; 0x78
 801581a:	9307      	str	r3, [sp, #28]
 801581c:	3302      	adds	r3, #2
 801581e:	431e      	orrs	r6, r3
 8015820:	920e      	str	r2, [sp, #56]	; 0x38
 8015822:	e7bc      	b.n	801579e <_svfprintf_r+0xade>
 8015824:	1d23      	adds	r3, r4, #4
 8015826:	9312      	str	r3, [sp, #72]	; 0x48
 8015828:	6823      	ldr	r3, [r4, #0]
 801582a:	2400      	movs	r4, #0
 801582c:	9309      	str	r3, [sp, #36]	; 0x24
 801582e:	231b      	movs	r3, #27
 8015830:	aa1e      	add	r2, sp, #120	; 0x78
 8015832:	189b      	adds	r3, r3, r2
 8015834:	701c      	strb	r4, [r3, #0]
 8015836:	9b08      	ldr	r3, [sp, #32]
 8015838:	3301      	adds	r3, #1
 801583a:	d00e      	beq.n	801585a <_svfprintf_r+0xb9a>
 801583c:	9a08      	ldr	r2, [sp, #32]
 801583e:	0021      	movs	r1, r4
 8015840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015842:	f001 ff79 	bl	8017738 <memchr>
 8015846:	900c      	str	r0, [sp, #48]	; 0x30
 8015848:	42a0      	cmp	r0, r4
 801584a:	d100      	bne.n	801584e <_svfprintf_r+0xb8e>
 801584c:	e100      	b.n	8015a50 <_svfprintf_r+0xd90>
 801584e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015850:	1a83      	subs	r3, r0, r2
 8015852:	9308      	str	r3, [sp, #32]
 8015854:	940c      	str	r4, [sp, #48]	; 0x30
 8015856:	0023      	movs	r3, r4
 8015858:	e527      	b.n	80152aa <_svfprintf_r+0x5ea>
 801585a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801585c:	f7ea fc5c 	bl	8000118 <strlen>
 8015860:	9008      	str	r0, [sp, #32]
 8015862:	e7f7      	b.n	8015854 <_svfprintf_r+0xb94>
 8015864:	2310      	movs	r3, #16
 8015866:	431e      	orrs	r6, r3
 8015868:	2220      	movs	r2, #32
 801586a:	4032      	ands	r2, r6
 801586c:	d00b      	beq.n	8015886 <_svfprintf_r+0xbc6>
 801586e:	2307      	movs	r3, #7
 8015870:	3407      	adds	r4, #7
 8015872:	439c      	bics	r4, r3
 8015874:	0023      	movs	r3, r4
 8015876:	3308      	adds	r3, #8
 8015878:	9312      	str	r3, [sp, #72]	; 0x48
 801587a:	6823      	ldr	r3, [r4, #0]
 801587c:	6864      	ldr	r4, [r4, #4]
 801587e:	9306      	str	r3, [sp, #24]
 8015880:	9407      	str	r4, [sp, #28]
 8015882:	2301      	movs	r3, #1
 8015884:	e78b      	b.n	801579e <_svfprintf_r+0xade>
 8015886:	1d23      	adds	r3, r4, #4
 8015888:	9312      	str	r3, [sp, #72]	; 0x48
 801588a:	2310      	movs	r3, #16
 801588c:	4033      	ands	r3, r6
 801588e:	d003      	beq.n	8015898 <_svfprintf_r+0xbd8>
 8015890:	6823      	ldr	r3, [r4, #0]
 8015892:	9306      	str	r3, [sp, #24]
 8015894:	9207      	str	r2, [sp, #28]
 8015896:	e7f4      	b.n	8015882 <_svfprintf_r+0xbc2>
 8015898:	2240      	movs	r2, #64	; 0x40
 801589a:	4032      	ands	r2, r6
 801589c:	d004      	beq.n	80158a8 <_svfprintf_r+0xbe8>
 801589e:	6822      	ldr	r2, [r4, #0]
 80158a0:	b292      	uxth	r2, r2
 80158a2:	9206      	str	r2, [sp, #24]
 80158a4:	9307      	str	r3, [sp, #28]
 80158a6:	e7ec      	b.n	8015882 <_svfprintf_r+0xbc2>
 80158a8:	2380      	movs	r3, #128	; 0x80
 80158aa:	009b      	lsls	r3, r3, #2
 80158ac:	4033      	ands	r3, r6
 80158ae:	d002      	beq.n	80158b6 <_svfprintf_r+0xbf6>
 80158b0:	6823      	ldr	r3, [r4, #0]
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	e7ed      	b.n	8015892 <_svfprintf_r+0xbd2>
 80158b6:	6822      	ldr	r2, [r4, #0]
 80158b8:	e7f3      	b.n	80158a2 <_svfprintf_r+0xbe2>
 80158ba:	4b7c      	ldr	r3, [pc, #496]	; (8015aac <_svfprintf_r+0xdec>)
 80158bc:	f7ff fad9 	bl	8014e72 <_svfprintf_r+0x1b2>
 80158c0:	1d23      	adds	r3, r4, #4
 80158c2:	9312      	str	r3, [sp, #72]	; 0x48
 80158c4:	2310      	movs	r3, #16
 80158c6:	4033      	ands	r3, r6
 80158c8:	d004      	beq.n	80158d4 <_svfprintf_r+0xc14>
 80158ca:	6823      	ldr	r3, [r4, #0]
 80158cc:	9306      	str	r3, [sp, #24]
 80158ce:	9207      	str	r2, [sp, #28]
 80158d0:	f7ff fadf 	bl	8014e92 <_svfprintf_r+0x1d2>
 80158d4:	2240      	movs	r2, #64	; 0x40
 80158d6:	4032      	ands	r2, r6
 80158d8:	d005      	beq.n	80158e6 <_svfprintf_r+0xc26>
 80158da:	6822      	ldr	r2, [r4, #0]
 80158dc:	b292      	uxth	r2, r2
 80158de:	9206      	str	r2, [sp, #24]
 80158e0:	9307      	str	r3, [sp, #28]
 80158e2:	f7ff fad6 	bl	8014e92 <_svfprintf_r+0x1d2>
 80158e6:	2380      	movs	r3, #128	; 0x80
 80158e8:	009b      	lsls	r3, r3, #2
 80158ea:	4033      	ands	r3, r6
 80158ec:	d002      	beq.n	80158f4 <_svfprintf_r+0xc34>
 80158ee:	6823      	ldr	r3, [r4, #0]
 80158f0:	b2db      	uxtb	r3, r3
 80158f2:	e7eb      	b.n	80158cc <_svfprintf_r+0xc0c>
 80158f4:	6822      	ldr	r2, [r4, #0]
 80158f6:	e7f2      	b.n	80158de <_svfprintf_r+0xc1e>
 80158f8:	0032      	movs	r2, r6
 80158fa:	2301      	movs	r3, #1
 80158fc:	e759      	b.n	80157b2 <_svfprintf_r+0xaf2>
 80158fe:	2b01      	cmp	r3, #1
 8015900:	d100      	bne.n	8015904 <_svfprintf_r+0xc44>
 8015902:	e476      	b.n	80151f2 <_svfprintf_r+0x532>
 8015904:	2b02      	cmp	r3, #2
 8015906:	d06b      	beq.n	80159e0 <_svfprintf_r+0xd20>
 8015908:	2507      	movs	r5, #7
 801590a:	ab58      	add	r3, sp, #352	; 0x160
 801590c:	1e5a      	subs	r2, r3, #1
 801590e:	9209      	str	r2, [sp, #36]	; 0x24
 8015910:	9a06      	ldr	r2, [sp, #24]
 8015912:	1e59      	subs	r1, r3, #1
 8015914:	402a      	ands	r2, r5
 8015916:	3230      	adds	r2, #48	; 0x30
 8015918:	700a      	strb	r2, [r1, #0]
 801591a:	9907      	ldr	r1, [sp, #28]
 801591c:	074c      	lsls	r4, r1, #29
 801591e:	9906      	ldr	r1, [sp, #24]
 8015920:	08c8      	lsrs	r0, r1, #3
 8015922:	9907      	ldr	r1, [sp, #28]
 8015924:	4304      	orrs	r4, r0
 8015926:	08c9      	lsrs	r1, r1, #3
 8015928:	9107      	str	r1, [sp, #28]
 801592a:	0021      	movs	r1, r4
 801592c:	9807      	ldr	r0, [sp, #28]
 801592e:	9406      	str	r4, [sp, #24]
 8015930:	4301      	orrs	r1, r0
 8015932:	d111      	bne.n	8015958 <_svfprintf_r+0xc98>
 8015934:	07f1      	lsls	r1, r6, #31
 8015936:	d502      	bpl.n	801593e <_svfprintf_r+0xc7e>
 8015938:	3b02      	subs	r3, #2
 801593a:	2a30      	cmp	r2, #48	; 0x30
 801593c:	d173      	bne.n	8015a26 <_svfprintf_r+0xd66>
 801593e:	9b08      	ldr	r3, [sp, #32]
 8015940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015942:	9317      	str	r3, [sp, #92]	; 0x5c
 8015944:	ab58      	add	r3, sp, #352	; 0x160
 8015946:	1a9b      	subs	r3, r3, r2
 8015948:	9308      	str	r3, [sp, #32]
 801594a:	2300      	movs	r3, #0
 801594c:	930c      	str	r3, [sp, #48]	; 0x30
 801594e:	9310      	str	r3, [sp, #64]	; 0x40
 8015950:	930f      	str	r3, [sp, #60]	; 0x3c
 8015952:	001d      	movs	r5, r3
 8015954:	f7ff fb4b 	bl	8014fee <_svfprintf_r+0x32e>
 8015958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801595a:	e7d7      	b.n	801590c <_svfprintf_r+0xc4c>
 801595c:	2480      	movs	r4, #128	; 0x80
 801595e:	2300      	movs	r3, #0
 8015960:	00e4      	lsls	r4, r4, #3
 8015962:	930d      	str	r3, [sp, #52]	; 0x34
 8015964:	4034      	ands	r4, r6
 8015966:	ab58      	add	r3, sp, #352	; 0x160
 8015968:	3b01      	subs	r3, #1
 801596a:	9309      	str	r3, [sp, #36]	; 0x24
 801596c:	220a      	movs	r2, #10
 801596e:	9806      	ldr	r0, [sp, #24]
 8015970:	9907      	ldr	r1, [sp, #28]
 8015972:	2300      	movs	r3, #0
 8015974:	f7ea fdda 	bl	800052c <__aeabi_uldivmod>
 8015978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801597a:	3230      	adds	r2, #48	; 0x30
 801597c:	701a      	strb	r2, [r3, #0]
 801597e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015980:	3301      	adds	r3, #1
 8015982:	930d      	str	r3, [sp, #52]	; 0x34
 8015984:	2c00      	cmp	r4, #0
 8015986:	d01d      	beq.n	80159c4 <_svfprintf_r+0xd04>
 8015988:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801598a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801598c:	781b      	ldrb	r3, [r3, #0]
 801598e:	429a      	cmp	r2, r3
 8015990:	d118      	bne.n	80159c4 <_svfprintf_r+0xd04>
 8015992:	2aff      	cmp	r2, #255	; 0xff
 8015994:	d016      	beq.n	80159c4 <_svfprintf_r+0xd04>
 8015996:	9b07      	ldr	r3, [sp, #28]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d102      	bne.n	80159a2 <_svfprintf_r+0xce2>
 801599c:	9b06      	ldr	r3, [sp, #24]
 801599e:	2b09      	cmp	r3, #9
 80159a0:	d910      	bls.n	80159c4 <_svfprintf_r+0xd04>
 80159a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80159a6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80159a8:	1a9b      	subs	r3, r3, r2
 80159aa:	0018      	movs	r0, r3
 80159ac:	9309      	str	r3, [sp, #36]	; 0x24
 80159ae:	f7fe fa52 	bl	8013e56 <strncpy>
 80159b2:	2200      	movs	r2, #0
 80159b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80159b6:	920d      	str	r2, [sp, #52]	; 0x34
 80159b8:	785b      	ldrb	r3, [r3, #1]
 80159ba:	1e5a      	subs	r2, r3, #1
 80159bc:	4193      	sbcs	r3, r2
 80159be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80159c0:	18d3      	adds	r3, r2, r3
 80159c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80159c4:	220a      	movs	r2, #10
 80159c6:	9806      	ldr	r0, [sp, #24]
 80159c8:	9907      	ldr	r1, [sp, #28]
 80159ca:	2300      	movs	r3, #0
 80159cc:	f7ea fdae 	bl	800052c <__aeabi_uldivmod>
 80159d0:	9006      	str	r0, [sp, #24]
 80159d2:	9107      	str	r1, [sp, #28]
 80159d4:	9b06      	ldr	r3, [sp, #24]
 80159d6:	9a07      	ldr	r2, [sp, #28]
 80159d8:	4313      	orrs	r3, r2
 80159da:	d0b0      	beq.n	801593e <_svfprintf_r+0xc7e>
 80159dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159de:	e7c3      	b.n	8015968 <_svfprintf_r+0xca8>
 80159e0:	200f      	movs	r0, #15
 80159e2:	ab58      	add	r3, sp, #352	; 0x160
 80159e4:	9309      	str	r3, [sp, #36]	; 0x24
 80159e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80159ea:	3b01      	subs	r3, #1
 80159ec:	9309      	str	r3, [sp, #36]	; 0x24
 80159ee:	9b06      	ldr	r3, [sp, #24]
 80159f0:	4003      	ands	r3, r0
 80159f2:	5cd3      	ldrb	r3, [r2, r3]
 80159f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159f6:	7013      	strb	r3, [r2, #0]
 80159f8:	9b07      	ldr	r3, [sp, #28]
 80159fa:	0719      	lsls	r1, r3, #28
 80159fc:	9b06      	ldr	r3, [sp, #24]
 80159fe:	091a      	lsrs	r2, r3, #4
 8015a00:	9b07      	ldr	r3, [sp, #28]
 8015a02:	4311      	orrs	r1, r2
 8015a04:	091b      	lsrs	r3, r3, #4
 8015a06:	9307      	str	r3, [sp, #28]
 8015a08:	000b      	movs	r3, r1
 8015a0a:	9a07      	ldr	r2, [sp, #28]
 8015a0c:	9106      	str	r1, [sp, #24]
 8015a0e:	4313      	orrs	r3, r2
 8015a10:	d1e9      	bne.n	80159e6 <_svfprintf_r+0xd26>
 8015a12:	e794      	b.n	801593e <_svfprintf_r+0xc7e>
 8015a14:	a958      	add	r1, sp, #352	; 0x160
 8015a16:	9109      	str	r1, [sp, #36]	; 0x24
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d190      	bne.n	801593e <_svfprintf_r+0xc7e>
 8015a1c:	07d3      	lsls	r3, r2, #31
 8015a1e:	d58e      	bpl.n	801593e <_svfprintf_r+0xc7e>
 8015a20:	23e7      	movs	r3, #231	; 0xe7
 8015a22:	aa1e      	add	r2, sp, #120	; 0x78
 8015a24:	189b      	adds	r3, r3, r2
 8015a26:	2230      	movs	r2, #48	; 0x30
 8015a28:	f7ff fbf0 	bl	801520c <_svfprintf_r+0x54c>
 8015a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d100      	bne.n	8015a34 <_svfprintf_r+0xd74>
 8015a32:	e38a      	b.n	801614a <_svfprintf_r+0x148a>
 8015a34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a36:	ab3f      	add	r3, sp, #252	; 0xfc
 8015a38:	701a      	strb	r2, [r3, #0]
 8015a3a:	221b      	movs	r2, #27
 8015a3c:	2000      	movs	r0, #0
 8015a3e:	a91e      	add	r1, sp, #120	; 0x78
 8015a40:	1852      	adds	r2, r2, r1
 8015a42:	7010      	strb	r0, [r2, #0]
 8015a44:	9412      	str	r4, [sp, #72]	; 0x48
 8015a46:	f7ff faca 	bl	8014fde <_svfprintf_r+0x31e>
 8015a4a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015a4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015a4e:	e592      	b.n	8015576 <_svfprintf_r+0x8b6>
 8015a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a52:	e42a      	b.n	80152aa <_svfprintf_r+0x5ea>
 8015a54:	2010      	movs	r0, #16
 8015a56:	1812      	adds	r2, r2, r0
 8015a58:	6078      	str	r0, [r7, #4]
 8015a5a:	922e      	str	r2, [sp, #184]	; 0xb8
 8015a5c:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a5e:	2b07      	cmp	r3, #7
 8015a60:	dd08      	ble.n	8015a74 <_svfprintf_r+0xdb4>
 8015a62:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a66:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a68:	f002 fa7e 	bl	8017f68 <__ssprint_r>
 8015a6c:	2800      	cmp	r0, #0
 8015a6e:	d000      	beq.n	8015a72 <_svfprintf_r+0xdb2>
 8015a70:	e34a      	b.n	8016108 <_svfprintf_r+0x1448>
 8015a72:	a92f      	add	r1, sp, #188	; 0xbc
 8015a74:	3c10      	subs	r4, #16
 8015a76:	000f      	movs	r7, r1
 8015a78:	f7ff fad8 	bl	801502c <_svfprintf_r+0x36c>
 8015a7c:	2010      	movs	r0, #16
 8015a7e:	1812      	adds	r2, r2, r0
 8015a80:	6078      	str	r0, [r7, #4]
 8015a82:	922e      	str	r2, [sp, #184]	; 0xb8
 8015a84:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a86:	2b07      	cmp	r3, #7
 8015a88:	dd08      	ble.n	8015a9c <_svfprintf_r+0xddc>
 8015a8a:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a90:	f002 fa6a 	bl	8017f68 <__ssprint_r>
 8015a94:	2800      	cmp	r0, #0
 8015a96:	d000      	beq.n	8015a9a <_svfprintf_r+0xdda>
 8015a98:	e336      	b.n	8016108 <_svfprintf_r+0x1448>
 8015a9a:	a92f      	add	r1, sp, #188	; 0xbc
 8015a9c:	3c10      	subs	r4, #16
 8015a9e:	000f      	movs	r7, r1
 8015aa0:	f7ff fb24 	bl	80150ec <_svfprintf_r+0x42c>
 8015aa4:	fffffbff 	.word	0xfffffbff
 8015aa8:	00007830 	.word	0x00007830
 8015aac:	0801b910 	.word	0x0801b910
 8015ab0:	2010      	movs	r0, #16
 8015ab2:	1812      	adds	r2, r2, r0
 8015ab4:	6078      	str	r0, [r7, #4]
 8015ab6:	922e      	str	r2, [sp, #184]	; 0xb8
 8015ab8:	932d      	str	r3, [sp, #180]	; 0xb4
 8015aba:	2b07      	cmp	r3, #7
 8015abc:	dd08      	ble.n	8015ad0 <_svfprintf_r+0xe10>
 8015abe:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ac2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ac4:	f002 fa50 	bl	8017f68 <__ssprint_r>
 8015ac8:	2800      	cmp	r0, #0
 8015aca:	d000      	beq.n	8015ace <_svfprintf_r+0xe0e>
 8015acc:	e31c      	b.n	8016108 <_svfprintf_r+0x1448>
 8015ace:	a92f      	add	r1, sp, #188	; 0xbc
 8015ad0:	3c10      	subs	r4, #16
 8015ad2:	000f      	movs	r7, r1
 8015ad4:	f7ff fb2c 	bl	8015130 <_svfprintf_r+0x470>
 8015ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ada:	2b65      	cmp	r3, #101	; 0x65
 8015adc:	dc00      	bgt.n	8015ae0 <_svfprintf_r+0xe20>
 8015ade:	e259      	b.n	8015f94 <_svfprintf_r+0x12d4>
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015ae6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015ae8:	f7ea fcb8 	bl	800045c <__aeabi_dcmpeq>
 8015aec:	2800      	cmp	r0, #0
 8015aee:	d07c      	beq.n	8015bea <_svfprintf_r+0xf2a>
 8015af0:	4b81      	ldr	r3, [pc, #516]	; (8015cf8 <_svfprintf_r+0x1038>)
 8015af2:	603b      	str	r3, [r7, #0]
 8015af4:	2301      	movs	r3, #1
 8015af6:	607b      	str	r3, [r7, #4]
 8015af8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015afa:	3708      	adds	r7, #8
 8015afc:	3301      	adds	r3, #1
 8015afe:	932e      	str	r3, [sp, #184]	; 0xb8
 8015b00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015b02:	9308      	str	r3, [sp, #32]
 8015b04:	3301      	adds	r3, #1
 8015b06:	932d      	str	r3, [sp, #180]	; 0xb4
 8015b08:	2b07      	cmp	r3, #7
 8015b0a:	dd08      	ble.n	8015b1e <_svfprintf_r+0xe5e>
 8015b0c:	aa2c      	add	r2, sp, #176	; 0xb0
 8015b0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b12:	f002 fa29 	bl	8017f68 <__ssprint_r>
 8015b16:	2800      	cmp	r0, #0
 8015b18:	d000      	beq.n	8015b1c <_svfprintf_r+0xe5c>
 8015b1a:	e2f5      	b.n	8016108 <_svfprintf_r+0x1448>
 8015b1c:	af2f      	add	r7, sp, #188	; 0xbc
 8015b1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015b20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015b22:	4293      	cmp	r3, r2
 8015b24:	db01      	blt.n	8015b2a <_svfprintf_r+0xe6a>
 8015b26:	07f3      	lsls	r3, r6, #31
 8015b28:	d51d      	bpl.n	8015b66 <_svfprintf_r+0xea6>
 8015b2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015b2e:	4694      	mov	ip, r2
 8015b30:	603b      	str	r3, [r7, #0]
 8015b32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015b34:	607b      	str	r3, [r7, #4]
 8015b36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015b38:	3708      	adds	r7, #8
 8015b3a:	4463      	add	r3, ip
 8015b3c:	932e      	str	r3, [sp, #184]	; 0xb8
 8015b3e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015b40:	9308      	str	r3, [sp, #32]
 8015b42:	3301      	adds	r3, #1
 8015b44:	932d      	str	r3, [sp, #180]	; 0xb4
 8015b46:	2b07      	cmp	r3, #7
 8015b48:	dd08      	ble.n	8015b5c <_svfprintf_r+0xe9c>
 8015b4a:	aa2c      	add	r2, sp, #176	; 0xb0
 8015b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b50:	f002 fa0a 	bl	8017f68 <__ssprint_r>
 8015b54:	2800      	cmp	r0, #0
 8015b56:	d000      	beq.n	8015b5a <_svfprintf_r+0xe9a>
 8015b58:	e2d6      	b.n	8016108 <_svfprintf_r+0x1448>
 8015b5a:	af2f      	add	r7, sp, #188	; 0xbc
 8015b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b5e:	2510      	movs	r5, #16
 8015b60:	1e5c      	subs	r4, r3, #1
 8015b62:	2c00      	cmp	r4, #0
 8015b64:	dc2f      	bgt.n	8015bc6 <_svfprintf_r+0xf06>
 8015b66:	0773      	lsls	r3, r6, #29
 8015b68:	d500      	bpl.n	8015b6c <_svfprintf_r+0xeac>
 8015b6a:	e2af      	b.n	80160cc <_svfprintf_r+0x140c>
 8015b6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015b6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015b70:	4293      	cmp	r3, r2
 8015b72:	da00      	bge.n	8015b76 <_svfprintf_r+0xeb6>
 8015b74:	0013      	movs	r3, r2
 8015b76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015b78:	18d3      	adds	r3, r2, r3
 8015b7a:	9315      	str	r3, [sp, #84]	; 0x54
 8015b7c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015b7e:	9308      	str	r3, [sp, #32]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d007      	beq.n	8015b94 <_svfprintf_r+0xed4>
 8015b84:	aa2c      	add	r2, sp, #176	; 0xb0
 8015b86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b8a:	f002 f9ed 	bl	8017f68 <__ssprint_r>
 8015b8e:	2800      	cmp	r0, #0
 8015b90:	d000      	beq.n	8015b94 <_svfprintf_r+0xed4>
 8015b92:	e2b9      	b.n	8016108 <_svfprintf_r+0x1448>
 8015b94:	2300      	movs	r3, #0
 8015b96:	932d      	str	r3, [sp, #180]	; 0xb4
 8015b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d000      	beq.n	8015ba0 <_svfprintf_r+0xee0>
 8015b9e:	e2cf      	b.n	8016140 <_svfprintf_r+0x1480>
 8015ba0:	af2f      	add	r7, sp, #188	; 0xbc
 8015ba2:	e5d6      	b.n	8015752 <_svfprintf_r+0xa92>
 8015ba4:	3210      	adds	r2, #16
 8015ba6:	607d      	str	r5, [r7, #4]
 8015ba8:	922e      	str	r2, [sp, #184]	; 0xb8
 8015baa:	932d      	str	r3, [sp, #180]	; 0xb4
 8015bac:	2b07      	cmp	r3, #7
 8015bae:	dd08      	ble.n	8015bc2 <_svfprintf_r+0xf02>
 8015bb0:	aa2c      	add	r2, sp, #176	; 0xb0
 8015bb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015bb6:	f002 f9d7 	bl	8017f68 <__ssprint_r>
 8015bba:	2800      	cmp	r0, #0
 8015bbc:	d000      	beq.n	8015bc0 <_svfprintf_r+0xf00>
 8015bbe:	e2a3      	b.n	8016108 <_svfprintf_r+0x1448>
 8015bc0:	a92f      	add	r1, sp, #188	; 0xbc
 8015bc2:	000f      	movs	r7, r1
 8015bc4:	3c10      	subs	r4, #16
 8015bc6:	0039      	movs	r1, r7
 8015bc8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015bca:	484c      	ldr	r0, [pc, #304]	; (8015cfc <_svfprintf_r+0x103c>)
 8015bcc:	9308      	str	r3, [sp, #32]
 8015bce:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015bd0:	3301      	adds	r3, #1
 8015bd2:	3108      	adds	r1, #8
 8015bd4:	6038      	str	r0, [r7, #0]
 8015bd6:	2c10      	cmp	r4, #16
 8015bd8:	dce4      	bgt.n	8015ba4 <_svfprintf_r+0xee4>
 8015bda:	607c      	str	r4, [r7, #4]
 8015bdc:	18a4      	adds	r4, r4, r2
 8015bde:	942e      	str	r4, [sp, #184]	; 0xb8
 8015be0:	932d      	str	r3, [sp, #180]	; 0xb4
 8015be2:	000f      	movs	r7, r1
 8015be4:	2b07      	cmp	r3, #7
 8015be6:	ddbe      	ble.n	8015b66 <_svfprintf_r+0xea6>
 8015be8:	e06a      	b.n	8015cc0 <_svfprintf_r+0x1000>
 8015bea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	dd00      	ble.n	8015bf2 <_svfprintf_r+0xf32>
 8015bf0:	e086      	b.n	8015d00 <_svfprintf_r+0x1040>
 8015bf2:	4b41      	ldr	r3, [pc, #260]	; (8015cf8 <_svfprintf_r+0x1038>)
 8015bf4:	603b      	str	r3, [r7, #0]
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	607b      	str	r3, [r7, #4]
 8015bfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015bfc:	3708      	adds	r7, #8
 8015bfe:	3301      	adds	r3, #1
 8015c00:	932e      	str	r3, [sp, #184]	; 0xb8
 8015c02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015c04:	9308      	str	r3, [sp, #32]
 8015c06:	3301      	adds	r3, #1
 8015c08:	932d      	str	r3, [sp, #180]	; 0xb4
 8015c0a:	2b07      	cmp	r3, #7
 8015c0c:	dd08      	ble.n	8015c20 <_svfprintf_r+0xf60>
 8015c0e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c14:	f002 f9a8 	bl	8017f68 <__ssprint_r>
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	d000      	beq.n	8015c1e <_svfprintf_r+0xf5e>
 8015c1c:	e274      	b.n	8016108 <_svfprintf_r+0x1448>
 8015c1e:	af2f      	add	r7, sp, #188	; 0xbc
 8015c20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d104      	bne.n	8015c30 <_svfprintf_r+0xf70>
 8015c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d101      	bne.n	8015c30 <_svfprintf_r+0xf70>
 8015c2c:	07f3      	lsls	r3, r6, #31
 8015c2e:	d59a      	bpl.n	8015b66 <_svfprintf_r+0xea6>
 8015c30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015c34:	4694      	mov	ip, r2
 8015c36:	603b      	str	r3, [r7, #0]
 8015c38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c3a:	607b      	str	r3, [r7, #4]
 8015c3c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015c3e:	3708      	adds	r7, #8
 8015c40:	4463      	add	r3, ip
 8015c42:	932e      	str	r3, [sp, #184]	; 0xb8
 8015c44:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015c46:	9308      	str	r3, [sp, #32]
 8015c48:	3301      	adds	r3, #1
 8015c4a:	932d      	str	r3, [sp, #180]	; 0xb4
 8015c4c:	2b07      	cmp	r3, #7
 8015c4e:	dd08      	ble.n	8015c62 <_svfprintf_r+0xfa2>
 8015c50:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c56:	f002 f987 	bl	8017f68 <__ssprint_r>
 8015c5a:	2800      	cmp	r0, #0
 8015c5c:	d000      	beq.n	8015c60 <_svfprintf_r+0xfa0>
 8015c5e:	e253      	b.n	8016108 <_svfprintf_r+0x1448>
 8015c60:	af2f      	add	r7, sp, #188	; 0xbc
 8015c62:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8015c64:	2c00      	cmp	r4, #0
 8015c66:	da1a      	bge.n	8015c9e <_svfprintf_r+0xfde>
 8015c68:	0039      	movs	r1, r7
 8015c6a:	2510      	movs	r5, #16
 8015c6c:	4264      	negs	r4, r4
 8015c6e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015c70:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8015c72:	9308      	str	r3, [sp, #32]
 8015c74:	1c5a      	adds	r2, r3, #1
 8015c76:	4b21      	ldr	r3, [pc, #132]	; (8015cfc <_svfprintf_r+0x103c>)
 8015c78:	3708      	adds	r7, #8
 8015c7a:	600b      	str	r3, [r1, #0]
 8015c7c:	2c10      	cmp	r4, #16
 8015c7e:	dc29      	bgt.n	8015cd4 <_svfprintf_r+0x1014>
 8015c80:	604c      	str	r4, [r1, #4]
 8015c82:	1824      	adds	r4, r4, r0
 8015c84:	942e      	str	r4, [sp, #184]	; 0xb8
 8015c86:	922d      	str	r2, [sp, #180]	; 0xb4
 8015c88:	2a07      	cmp	r2, #7
 8015c8a:	dd08      	ble.n	8015c9e <_svfprintf_r+0xfde>
 8015c8c:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c92:	f002 f969 	bl	8017f68 <__ssprint_r>
 8015c96:	2800      	cmp	r0, #0
 8015c98:	d000      	beq.n	8015c9c <_svfprintf_r+0xfdc>
 8015c9a:	e235      	b.n	8016108 <_svfprintf_r+0x1448>
 8015c9c:	af2f      	add	r7, sp, #188	; 0xbc
 8015c9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ca2:	468c      	mov	ip, r1
 8015ca4:	603b      	str	r3, [r7, #0]
 8015ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ca8:	607b      	str	r3, [r7, #4]
 8015caa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015cac:	4463      	add	r3, ip
 8015cae:	932e      	str	r3, [sp, #184]	; 0xb8
 8015cb0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015cb2:	1c5a      	adds	r2, r3, #1
 8015cb4:	9308      	str	r3, [sp, #32]
 8015cb6:	922d      	str	r2, [sp, #180]	; 0xb4
 8015cb8:	2a07      	cmp	r2, #7
 8015cba:	dc01      	bgt.n	8015cc0 <_svfprintf_r+0x1000>
 8015cbc:	f7ff fa6c 	bl	8015198 <_svfprintf_r+0x4d8>
 8015cc0:	aa2c      	add	r2, sp, #176	; 0xb0
 8015cc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015cc4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015cc6:	f002 f94f 	bl	8017f68 <__ssprint_r>
 8015cca:	2800      	cmp	r0, #0
 8015ccc:	d000      	beq.n	8015cd0 <_svfprintf_r+0x1010>
 8015cce:	e21b      	b.n	8016108 <_svfprintf_r+0x1448>
 8015cd0:	af2f      	add	r7, sp, #188	; 0xbc
 8015cd2:	e748      	b.n	8015b66 <_svfprintf_r+0xea6>
 8015cd4:	3010      	adds	r0, #16
 8015cd6:	604d      	str	r5, [r1, #4]
 8015cd8:	902e      	str	r0, [sp, #184]	; 0xb8
 8015cda:	922d      	str	r2, [sp, #180]	; 0xb4
 8015cdc:	2a07      	cmp	r2, #7
 8015cde:	dd08      	ble.n	8015cf2 <_svfprintf_r+0x1032>
 8015ce0:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ce2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ce4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ce6:	f002 f93f 	bl	8017f68 <__ssprint_r>
 8015cea:	2800      	cmp	r0, #0
 8015cec:	d000      	beq.n	8015cf0 <_svfprintf_r+0x1030>
 8015cee:	e20b      	b.n	8016108 <_svfprintf_r+0x1448>
 8015cf0:	af2f      	add	r7, sp, #188	; 0xbc
 8015cf2:	3c10      	subs	r4, #16
 8015cf4:	0039      	movs	r1, r7
 8015cf6:	e7ba      	b.n	8015c6e <_svfprintf_r+0xfae>
 8015cf8:	0801b932 	.word	0x0801b932
 8015cfc:	0801b944 	.word	0x0801b944
 8015d00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d02:	002c      	movs	r4, r5
 8015d04:	429d      	cmp	r5, r3
 8015d06:	dd00      	ble.n	8015d0a <_svfprintf_r+0x104a>
 8015d08:	001c      	movs	r4, r3
 8015d0a:	2c00      	cmp	r4, #0
 8015d0c:	dd15      	ble.n	8015d3a <_svfprintf_r+0x107a>
 8015d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d10:	607c      	str	r4, [r7, #4]
 8015d12:	603b      	str	r3, [r7, #0]
 8015d14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d16:	3708      	adds	r7, #8
 8015d18:	18e3      	adds	r3, r4, r3
 8015d1a:	932e      	str	r3, [sp, #184]	; 0xb8
 8015d1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015d1e:	9308      	str	r3, [sp, #32]
 8015d20:	3301      	adds	r3, #1
 8015d22:	932d      	str	r3, [sp, #180]	; 0xb4
 8015d24:	2b07      	cmp	r3, #7
 8015d26:	dd08      	ble.n	8015d3a <_svfprintf_r+0x107a>
 8015d28:	aa2c      	add	r2, sp, #176	; 0xb0
 8015d2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015d2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015d2e:	f002 f91b 	bl	8017f68 <__ssprint_r>
 8015d32:	2800      	cmp	r0, #0
 8015d34:	d000      	beq.n	8015d38 <_svfprintf_r+0x1078>
 8015d36:	e1e7      	b.n	8016108 <_svfprintf_r+0x1448>
 8015d38:	af2f      	add	r7, sp, #188	; 0xbc
 8015d3a:	43e3      	mvns	r3, r4
 8015d3c:	17db      	asrs	r3, r3, #31
 8015d3e:	401c      	ands	r4, r3
 8015d40:	1b2c      	subs	r4, r5, r4
 8015d42:	2c00      	cmp	r4, #0
 8015d44:	dd1a      	ble.n	8015d7c <_svfprintf_r+0x10bc>
 8015d46:	0039      	movs	r1, r7
 8015d48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015d4a:	48d4      	ldr	r0, [pc, #848]	; (801609c <_svfprintf_r+0x13dc>)
 8015d4c:	9308      	str	r3, [sp, #32]
 8015d4e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015d50:	3301      	adds	r3, #1
 8015d52:	3108      	adds	r1, #8
 8015d54:	6038      	str	r0, [r7, #0]
 8015d56:	2c10      	cmp	r4, #16
 8015d58:	dd00      	ble.n	8015d5c <_svfprintf_r+0x109c>
 8015d5a:	e089      	b.n	8015e70 <_svfprintf_r+0x11b0>
 8015d5c:	607c      	str	r4, [r7, #4]
 8015d5e:	18a4      	adds	r4, r4, r2
 8015d60:	942e      	str	r4, [sp, #184]	; 0xb8
 8015d62:	932d      	str	r3, [sp, #180]	; 0xb4
 8015d64:	000f      	movs	r7, r1
 8015d66:	2b07      	cmp	r3, #7
 8015d68:	dd08      	ble.n	8015d7c <_svfprintf_r+0x10bc>
 8015d6a:	aa2c      	add	r2, sp, #176	; 0xb0
 8015d6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015d6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015d70:	f002 f8fa 	bl	8017f68 <__ssprint_r>
 8015d74:	2800      	cmp	r0, #0
 8015d76:	d000      	beq.n	8015d7a <_svfprintf_r+0x10ba>
 8015d78:	e1c6      	b.n	8016108 <_svfprintf_r+0x1448>
 8015d7a:	af2f      	add	r7, sp, #188	; 0xbc
 8015d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d7e:	195d      	adds	r5, r3, r5
 8015d80:	0573      	lsls	r3, r6, #21
 8015d82:	d50d      	bpl.n	8015da0 <_svfprintf_r+0x10e0>
 8015d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d000      	beq.n	8015d8c <_svfprintf_r+0x10cc>
 8015d8a:	e084      	b.n	8015e96 <_svfprintf_r+0x11d6>
 8015d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d000      	beq.n	8015d94 <_svfprintf_r+0x10d4>
 8015d92:	e083      	b.n	8015e9c <_svfprintf_r+0x11dc>
 8015d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015d98:	189b      	adds	r3, r3, r2
 8015d9a:	429d      	cmp	r5, r3
 8015d9c:	d900      	bls.n	8015da0 <_svfprintf_r+0x10e0>
 8015d9e:	001d      	movs	r5, r3
 8015da0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015da2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015da4:	4293      	cmp	r3, r2
 8015da6:	db01      	blt.n	8015dac <_svfprintf_r+0x10ec>
 8015da8:	07f3      	lsls	r3, r6, #31
 8015daa:	d518      	bpl.n	8015dde <_svfprintf_r+0x111e>
 8015dac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015dae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015db0:	4694      	mov	ip, r2
 8015db2:	603b      	str	r3, [r7, #0]
 8015db4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015db6:	607b      	str	r3, [r7, #4]
 8015db8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015dba:	3708      	adds	r7, #8
 8015dbc:	4463      	add	r3, ip
 8015dbe:	932e      	str	r3, [sp, #184]	; 0xb8
 8015dc0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015dc2:	9308      	str	r3, [sp, #32]
 8015dc4:	3301      	adds	r3, #1
 8015dc6:	932d      	str	r3, [sp, #180]	; 0xb4
 8015dc8:	2b07      	cmp	r3, #7
 8015dca:	dd08      	ble.n	8015dde <_svfprintf_r+0x111e>
 8015dcc:	aa2c      	add	r2, sp, #176	; 0xb0
 8015dce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015dd0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015dd2:	f002 f8c9 	bl	8017f68 <__ssprint_r>
 8015dd6:	2800      	cmp	r0, #0
 8015dd8:	d000      	beq.n	8015ddc <_svfprintf_r+0x111c>
 8015dda:	e195      	b.n	8016108 <_svfprintf_r+0x1448>
 8015ddc:	af2f      	add	r7, sp, #188	; 0xbc
 8015dde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015de2:	4694      	mov	ip, r2
 8015de4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8015de6:	4463      	add	r3, ip
 8015de8:	1b5b      	subs	r3, r3, r5
 8015dea:	1a54      	subs	r4, r2, r1
 8015dec:	429c      	cmp	r4, r3
 8015dee:	dd00      	ble.n	8015df2 <_svfprintf_r+0x1132>
 8015df0:	001c      	movs	r4, r3
 8015df2:	2c00      	cmp	r4, #0
 8015df4:	dd14      	ble.n	8015e20 <_svfprintf_r+0x1160>
 8015df6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015df8:	603d      	str	r5, [r7, #0]
 8015dfa:	18e3      	adds	r3, r4, r3
 8015dfc:	932e      	str	r3, [sp, #184]	; 0xb8
 8015dfe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015e00:	607c      	str	r4, [r7, #4]
 8015e02:	9308      	str	r3, [sp, #32]
 8015e04:	3301      	adds	r3, #1
 8015e06:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e08:	3708      	adds	r7, #8
 8015e0a:	2b07      	cmp	r3, #7
 8015e0c:	dd08      	ble.n	8015e20 <_svfprintf_r+0x1160>
 8015e0e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e14:	f002 f8a8 	bl	8017f68 <__ssprint_r>
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	d000      	beq.n	8015e1e <_svfprintf_r+0x115e>
 8015e1c:	e174      	b.n	8016108 <_svfprintf_r+0x1448>
 8015e1e:	af2f      	add	r7, sp, #188	; 0xbc
 8015e20:	43e3      	mvns	r3, r4
 8015e22:	17db      	asrs	r3, r3, #31
 8015e24:	401c      	ands	r4, r3
 8015e26:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015e28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e2a:	2510      	movs	r5, #16
 8015e2c:	1a9b      	subs	r3, r3, r2
 8015e2e:	1b1c      	subs	r4, r3, r4
 8015e30:	2c00      	cmp	r4, #0
 8015e32:	dc00      	bgt.n	8015e36 <_svfprintf_r+0x1176>
 8015e34:	e697      	b.n	8015b66 <_svfprintf_r+0xea6>
 8015e36:	0039      	movs	r1, r7
 8015e38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015e3a:	4898      	ldr	r0, [pc, #608]	; (801609c <_svfprintf_r+0x13dc>)
 8015e3c:	9308      	str	r3, [sp, #32]
 8015e3e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015e40:	3301      	adds	r3, #1
 8015e42:	3108      	adds	r1, #8
 8015e44:	6038      	str	r0, [r7, #0]
 8015e46:	2c10      	cmp	r4, #16
 8015e48:	dc00      	bgt.n	8015e4c <_svfprintf_r+0x118c>
 8015e4a:	e6c6      	b.n	8015bda <_svfprintf_r+0xf1a>
 8015e4c:	3210      	adds	r2, #16
 8015e4e:	607d      	str	r5, [r7, #4]
 8015e50:	922e      	str	r2, [sp, #184]	; 0xb8
 8015e52:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e54:	2b07      	cmp	r3, #7
 8015e56:	dd08      	ble.n	8015e6a <_svfprintf_r+0x11aa>
 8015e58:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e5e:	f002 f883 	bl	8017f68 <__ssprint_r>
 8015e62:	2800      	cmp	r0, #0
 8015e64:	d000      	beq.n	8015e68 <_svfprintf_r+0x11a8>
 8015e66:	e14f      	b.n	8016108 <_svfprintf_r+0x1448>
 8015e68:	a92f      	add	r1, sp, #188	; 0xbc
 8015e6a:	3c10      	subs	r4, #16
 8015e6c:	000f      	movs	r7, r1
 8015e6e:	e7e2      	b.n	8015e36 <_svfprintf_r+0x1176>
 8015e70:	2010      	movs	r0, #16
 8015e72:	1812      	adds	r2, r2, r0
 8015e74:	6078      	str	r0, [r7, #4]
 8015e76:	922e      	str	r2, [sp, #184]	; 0xb8
 8015e78:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e7a:	2b07      	cmp	r3, #7
 8015e7c:	dd08      	ble.n	8015e90 <_svfprintf_r+0x11d0>
 8015e7e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e84:	f002 f870 	bl	8017f68 <__ssprint_r>
 8015e88:	2800      	cmp	r0, #0
 8015e8a:	d000      	beq.n	8015e8e <_svfprintf_r+0x11ce>
 8015e8c:	e13c      	b.n	8016108 <_svfprintf_r+0x1448>
 8015e8e:	a92f      	add	r1, sp, #188	; 0xbc
 8015e90:	3c10      	subs	r4, #16
 8015e92:	000f      	movs	r7, r1
 8015e94:	e757      	b.n	8015d46 <_svfprintf_r+0x1086>
 8015e96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d061      	beq.n	8015f60 <_svfprintf_r+0x12a0>
 8015e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e9e:	3b01      	subs	r3, #1
 8015ea0:	9310      	str	r3, [sp, #64]	; 0x40
 8015ea2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015ea4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015ea6:	4694      	mov	ip, r2
 8015ea8:	603b      	str	r3, [r7, #0]
 8015eaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015eac:	607b      	str	r3, [r7, #4]
 8015eae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015eb0:	3708      	adds	r7, #8
 8015eb2:	4463      	add	r3, ip
 8015eb4:	932e      	str	r3, [sp, #184]	; 0xb8
 8015eb6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015eb8:	9308      	str	r3, [sp, #32]
 8015eba:	3301      	adds	r3, #1
 8015ebc:	932d      	str	r3, [sp, #180]	; 0xb4
 8015ebe:	2b07      	cmp	r3, #7
 8015ec0:	dd08      	ble.n	8015ed4 <_svfprintf_r+0x1214>
 8015ec2:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ec6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ec8:	f002 f84e 	bl	8017f68 <__ssprint_r>
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d000      	beq.n	8015ed2 <_svfprintf_r+0x1212>
 8015ed0:	e11a      	b.n	8016108 <_svfprintf_r+0x1448>
 8015ed2:	af2f      	add	r7, sp, #188	; 0xbc
 8015ed4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ed8:	189b      	adds	r3, r3, r2
 8015eda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015edc:	1b5b      	subs	r3, r3, r5
 8015ede:	7814      	ldrb	r4, [r2, #0]
 8015ee0:	429c      	cmp	r4, r3
 8015ee2:	dd00      	ble.n	8015ee6 <_svfprintf_r+0x1226>
 8015ee4:	001c      	movs	r4, r3
 8015ee6:	2c00      	cmp	r4, #0
 8015ee8:	dd14      	ble.n	8015f14 <_svfprintf_r+0x1254>
 8015eea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015eec:	603d      	str	r5, [r7, #0]
 8015eee:	18e3      	adds	r3, r4, r3
 8015ef0:	932e      	str	r3, [sp, #184]	; 0xb8
 8015ef2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015ef4:	607c      	str	r4, [r7, #4]
 8015ef6:	9308      	str	r3, [sp, #32]
 8015ef8:	3301      	adds	r3, #1
 8015efa:	932d      	str	r3, [sp, #180]	; 0xb4
 8015efc:	3708      	adds	r7, #8
 8015efe:	2b07      	cmp	r3, #7
 8015f00:	dd08      	ble.n	8015f14 <_svfprintf_r+0x1254>
 8015f02:	aa2c      	add	r2, sp, #176	; 0xb0
 8015f04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f08:	f002 f82e 	bl	8017f68 <__ssprint_r>
 8015f0c:	2800      	cmp	r0, #0
 8015f0e:	d000      	beq.n	8015f12 <_svfprintf_r+0x1252>
 8015f10:	e0fa      	b.n	8016108 <_svfprintf_r+0x1448>
 8015f12:	af2f      	add	r7, sp, #188	; 0xbc
 8015f14:	43e3      	mvns	r3, r4
 8015f16:	17db      	asrs	r3, r3, #31
 8015f18:	401c      	ands	r4, r3
 8015f1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f1c:	781b      	ldrb	r3, [r3, #0]
 8015f1e:	1b1c      	subs	r4, r3, r4
 8015f20:	2c00      	cmp	r4, #0
 8015f22:	dd19      	ble.n	8015f58 <_svfprintf_r+0x1298>
 8015f24:	0039      	movs	r1, r7
 8015f26:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015f28:	485c      	ldr	r0, [pc, #368]	; (801609c <_svfprintf_r+0x13dc>)
 8015f2a:	9308      	str	r3, [sp, #32]
 8015f2c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015f2e:	3301      	adds	r3, #1
 8015f30:	3108      	adds	r1, #8
 8015f32:	6038      	str	r0, [r7, #0]
 8015f34:	2c10      	cmp	r4, #16
 8015f36:	dc1a      	bgt.n	8015f6e <_svfprintf_r+0x12ae>
 8015f38:	607c      	str	r4, [r7, #4]
 8015f3a:	18a4      	adds	r4, r4, r2
 8015f3c:	942e      	str	r4, [sp, #184]	; 0xb8
 8015f3e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015f40:	000f      	movs	r7, r1
 8015f42:	2b07      	cmp	r3, #7
 8015f44:	dd08      	ble.n	8015f58 <_svfprintf_r+0x1298>
 8015f46:	aa2c      	add	r2, sp, #176	; 0xb0
 8015f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f4c:	f002 f80c 	bl	8017f68 <__ssprint_r>
 8015f50:	2800      	cmp	r0, #0
 8015f52:	d000      	beq.n	8015f56 <_svfprintf_r+0x1296>
 8015f54:	e0d8      	b.n	8016108 <_svfprintf_r+0x1448>
 8015f56:	af2f      	add	r7, sp, #188	; 0xbc
 8015f58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f5a:	781b      	ldrb	r3, [r3, #0]
 8015f5c:	18ed      	adds	r5, r5, r3
 8015f5e:	e711      	b.n	8015d84 <_svfprintf_r+0x10c4>
 8015f60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f62:	3b01      	subs	r3, #1
 8015f64:	9313      	str	r3, [sp, #76]	; 0x4c
 8015f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f68:	3b01      	subs	r3, #1
 8015f6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f6c:	e799      	b.n	8015ea2 <_svfprintf_r+0x11e2>
 8015f6e:	2010      	movs	r0, #16
 8015f70:	1812      	adds	r2, r2, r0
 8015f72:	6078      	str	r0, [r7, #4]
 8015f74:	922e      	str	r2, [sp, #184]	; 0xb8
 8015f76:	932d      	str	r3, [sp, #180]	; 0xb4
 8015f78:	2b07      	cmp	r3, #7
 8015f7a:	dd08      	ble.n	8015f8e <_svfprintf_r+0x12ce>
 8015f7c:	aa2c      	add	r2, sp, #176	; 0xb0
 8015f7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f82:	f001 fff1 	bl	8017f68 <__ssprint_r>
 8015f86:	2800      	cmp	r0, #0
 8015f88:	d000      	beq.n	8015f8c <_svfprintf_r+0x12cc>
 8015f8a:	e0bd      	b.n	8016108 <_svfprintf_r+0x1448>
 8015f8c:	a92f      	add	r1, sp, #188	; 0xbc
 8015f8e:	3c10      	subs	r4, #16
 8015f90:	000f      	movs	r7, r1
 8015f92:	e7c7      	b.n	8015f24 <_svfprintf_r+0x1264>
 8015f94:	003c      	movs	r4, r7
 8015f96:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015f98:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015f9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015f9c:	9308      	str	r3, [sp, #32]
 8015f9e:	3101      	adds	r1, #1
 8015fa0:	3301      	adds	r3, #1
 8015fa2:	3408      	adds	r4, #8
 8015fa4:	2a01      	cmp	r2, #1
 8015fa6:	dc03      	bgt.n	8015fb0 <_svfprintf_r+0x12f0>
 8015fa8:	2201      	movs	r2, #1
 8015faa:	4216      	tst	r6, r2
 8015fac:	d100      	bne.n	8015fb0 <_svfprintf_r+0x12f0>
 8015fae:	e088      	b.n	80160c2 <_svfprintf_r+0x1402>
 8015fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fb2:	912e      	str	r1, [sp, #184]	; 0xb8
 8015fb4:	603a      	str	r2, [r7, #0]
 8015fb6:	2201      	movs	r2, #1
 8015fb8:	932d      	str	r3, [sp, #180]	; 0xb4
 8015fba:	607a      	str	r2, [r7, #4]
 8015fbc:	2b07      	cmp	r3, #7
 8015fbe:	dd08      	ble.n	8015fd2 <_svfprintf_r+0x1312>
 8015fc0:	aa2c      	add	r2, sp, #176	; 0xb0
 8015fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015fc4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015fc6:	f001 ffcf 	bl	8017f68 <__ssprint_r>
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	d000      	beq.n	8015fd0 <_svfprintf_r+0x1310>
 8015fce:	e09b      	b.n	8016108 <_svfprintf_r+0x1448>
 8015fd0:	ac2f      	add	r4, sp, #188	; 0xbc
 8015fd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015fd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015fd6:	4694      	mov	ip, r2
 8015fd8:	6023      	str	r3, [r4, #0]
 8015fda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015fdc:	6063      	str	r3, [r4, #4]
 8015fde:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015fe0:	3408      	adds	r4, #8
 8015fe2:	4463      	add	r3, ip
 8015fe4:	932e      	str	r3, [sp, #184]	; 0xb8
 8015fe6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015fe8:	9308      	str	r3, [sp, #32]
 8015fea:	3301      	adds	r3, #1
 8015fec:	932d      	str	r3, [sp, #180]	; 0xb4
 8015fee:	2b07      	cmp	r3, #7
 8015ff0:	dd08      	ble.n	8016004 <_svfprintf_r+0x1344>
 8015ff2:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ff6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ff8:	f001 ffb6 	bl	8017f68 <__ssprint_r>
 8015ffc:	2800      	cmp	r0, #0
 8015ffe:	d000      	beq.n	8016002 <_svfprintf_r+0x1342>
 8016000:	e082      	b.n	8016108 <_svfprintf_r+0x1448>
 8016002:	ac2f      	add	r4, sp, #188	; 0xbc
 8016004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016006:	2200      	movs	r2, #0
 8016008:	1e5d      	subs	r5, r3, #1
 801600a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801600c:	2300      	movs	r3, #0
 801600e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016010:	f7ea fa24 	bl	800045c <__aeabi_dcmpeq>
 8016014:	2800      	cmp	r0, #0
 8016016:	d12c      	bne.n	8016072 <_svfprintf_r+0x13b2>
 8016018:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801601a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801601c:	9308      	str	r3, [sp, #32]
 801601e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016020:	6065      	str	r5, [r4, #4]
 8016022:	1c5a      	adds	r2, r3, #1
 8016024:	930e      	str	r3, [sp, #56]	; 0x38
 8016026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016028:	922d      	str	r2, [sp, #180]	; 0xb4
 801602a:	3301      	adds	r3, #1
 801602c:	6023      	str	r3, [r4, #0]
 801602e:	9b08      	ldr	r3, [sp, #32]
 8016030:	3408      	adds	r4, #8
 8016032:	3b01      	subs	r3, #1
 8016034:	185b      	adds	r3, r3, r1
 8016036:	932e      	str	r3, [sp, #184]	; 0xb8
 8016038:	2a07      	cmp	r2, #7
 801603a:	dd07      	ble.n	801604c <_svfprintf_r+0x138c>
 801603c:	aa2c      	add	r2, sp, #176	; 0xb0
 801603e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016040:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016042:	f001 ff91 	bl	8017f68 <__ssprint_r>
 8016046:	2800      	cmp	r0, #0
 8016048:	d15e      	bne.n	8016108 <_svfprintf_r+0x1448>
 801604a:	ac2f      	add	r4, sp, #188	; 0xbc
 801604c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801604e:	ab28      	add	r3, sp, #160	; 0xa0
 8016050:	4694      	mov	ip, r2
 8016052:	6023      	str	r3, [r4, #0]
 8016054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016056:	6063      	str	r3, [r4, #4]
 8016058:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801605a:	4463      	add	r3, ip
 801605c:	932e      	str	r3, [sp, #184]	; 0xb8
 801605e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016060:	9308      	str	r3, [sp, #32]
 8016062:	3301      	adds	r3, #1
 8016064:	932d      	str	r3, [sp, #180]	; 0xb4
 8016066:	2b07      	cmp	r3, #7
 8016068:	dd00      	ble.n	801606c <_svfprintf_r+0x13ac>
 801606a:	e629      	b.n	8015cc0 <_svfprintf_r+0x1000>
 801606c:	3408      	adds	r4, #8
 801606e:	0027      	movs	r7, r4
 8016070:	e579      	b.n	8015b66 <_svfprintf_r+0xea6>
 8016072:	2710      	movs	r7, #16
 8016074:	2d00      	cmp	r5, #0
 8016076:	dde9      	ble.n	801604c <_svfprintf_r+0x138c>
 8016078:	0021      	movs	r1, r4
 801607a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801607c:	4807      	ldr	r0, [pc, #28]	; (801609c <_svfprintf_r+0x13dc>)
 801607e:	9308      	str	r3, [sp, #32]
 8016080:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016082:	3301      	adds	r3, #1
 8016084:	3108      	adds	r1, #8
 8016086:	6020      	str	r0, [r4, #0]
 8016088:	2d10      	cmp	r5, #16
 801608a:	dc09      	bgt.n	80160a0 <_svfprintf_r+0x13e0>
 801608c:	6065      	str	r5, [r4, #4]
 801608e:	000c      	movs	r4, r1
 8016090:	18ad      	adds	r5, r5, r2
 8016092:	952e      	str	r5, [sp, #184]	; 0xb8
 8016094:	932d      	str	r3, [sp, #180]	; 0xb4
 8016096:	2b07      	cmp	r3, #7
 8016098:	ddd8      	ble.n	801604c <_svfprintf_r+0x138c>
 801609a:	e7cf      	b.n	801603c <_svfprintf_r+0x137c>
 801609c:	0801b944 	.word	0x0801b944
 80160a0:	3210      	adds	r2, #16
 80160a2:	6067      	str	r7, [r4, #4]
 80160a4:	922e      	str	r2, [sp, #184]	; 0xb8
 80160a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80160a8:	2b07      	cmp	r3, #7
 80160aa:	dd07      	ble.n	80160bc <_svfprintf_r+0x13fc>
 80160ac:	aa2c      	add	r2, sp, #176	; 0xb0
 80160ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160b2:	f001 ff59 	bl	8017f68 <__ssprint_r>
 80160b6:	2800      	cmp	r0, #0
 80160b8:	d126      	bne.n	8016108 <_svfprintf_r+0x1448>
 80160ba:	a92f      	add	r1, sp, #188	; 0xbc
 80160bc:	3d10      	subs	r5, #16
 80160be:	000c      	movs	r4, r1
 80160c0:	e7da      	b.n	8016078 <_svfprintf_r+0x13b8>
 80160c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80160c4:	912e      	str	r1, [sp, #184]	; 0xb8
 80160c6:	c705      	stmia	r7!, {r0, r2}
 80160c8:	932d      	str	r3, [sp, #180]	; 0xb4
 80160ca:	e7e4      	b.n	8016096 <_svfprintf_r+0x13d6>
 80160cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80160ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80160d0:	2510      	movs	r5, #16
 80160d2:	1a9c      	subs	r4, r3, r2
 80160d4:	2c00      	cmp	r4, #0
 80160d6:	dc00      	bgt.n	80160da <_svfprintf_r+0x141a>
 80160d8:	e548      	b.n	8015b6c <_svfprintf_r+0xeac>
 80160da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80160dc:	4921      	ldr	r1, [pc, #132]	; (8016164 <_svfprintf_r+0x14a4>)
 80160de:	9308      	str	r3, [sp, #32]
 80160e0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80160e2:	3301      	adds	r3, #1
 80160e4:	6039      	str	r1, [r7, #0]
 80160e6:	2c10      	cmp	r4, #16
 80160e8:	dc19      	bgt.n	801611e <_svfprintf_r+0x145e>
 80160ea:	607c      	str	r4, [r7, #4]
 80160ec:	18a4      	adds	r4, r4, r2
 80160ee:	942e      	str	r4, [sp, #184]	; 0xb8
 80160f0:	932d      	str	r3, [sp, #180]	; 0xb4
 80160f2:	2b07      	cmp	r3, #7
 80160f4:	dc00      	bgt.n	80160f8 <_svfprintf_r+0x1438>
 80160f6:	e539      	b.n	8015b6c <_svfprintf_r+0xeac>
 80160f8:	aa2c      	add	r2, sp, #176	; 0xb0
 80160fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160fe:	f001 ff33 	bl	8017f68 <__ssprint_r>
 8016102:	2800      	cmp	r0, #0
 8016104:	d100      	bne.n	8016108 <_svfprintf_r+0x1448>
 8016106:	e531      	b.n	8015b6c <_svfprintf_r+0xeac>
 8016108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801610a:	2b00      	cmp	r3, #0
 801610c:	d101      	bne.n	8016112 <_svfprintf_r+0x1452>
 801610e:	f7ff f908 	bl	8015322 <_svfprintf_r+0x662>
 8016112:	0019      	movs	r1, r3
 8016114:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016116:	f000 ff19 	bl	8016f4c <_free_r>
 801611a:	f7ff f902 	bl	8015322 <_svfprintf_r+0x662>
 801611e:	3210      	adds	r2, #16
 8016120:	607d      	str	r5, [r7, #4]
 8016122:	922e      	str	r2, [sp, #184]	; 0xb8
 8016124:	932d      	str	r3, [sp, #180]	; 0xb4
 8016126:	3708      	adds	r7, #8
 8016128:	2b07      	cmp	r3, #7
 801612a:	dd07      	ble.n	801613c <_svfprintf_r+0x147c>
 801612c:	aa2c      	add	r2, sp, #176	; 0xb0
 801612e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016130:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016132:	f001 ff19 	bl	8017f68 <__ssprint_r>
 8016136:	2800      	cmp	r0, #0
 8016138:	d1e6      	bne.n	8016108 <_svfprintf_r+0x1448>
 801613a:	af2f      	add	r7, sp, #188	; 0xbc
 801613c:	3c10      	subs	r4, #16
 801613e:	e7cc      	b.n	80160da <_svfprintf_r+0x141a>
 8016140:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016142:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016144:	f000 ff02 	bl	8016f4c <_free_r>
 8016148:	e52a      	b.n	8015ba0 <_svfprintf_r+0xee0>
 801614a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801614c:	9306      	str	r3, [sp, #24]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d101      	bne.n	8016156 <_svfprintf_r+0x1496>
 8016152:	f7ff f8e6 	bl	8015322 <_svfprintf_r+0x662>
 8016156:	aa2c      	add	r2, sp, #176	; 0xb0
 8016158:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801615a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801615c:	f001 ff04 	bl	8017f68 <__ssprint_r>
 8016160:	f7ff f8df 	bl	8015322 <_svfprintf_r+0x662>
 8016164:	0801b934 	.word	0x0801b934

08016168 <sysconf>:
 8016168:	2380      	movs	r3, #128	; 0x80
 801616a:	b510      	push	{r4, lr}
 801616c:	015b      	lsls	r3, r3, #5
 801616e:	2808      	cmp	r0, #8
 8016170:	d004      	beq.n	801617c <sysconf+0x14>
 8016172:	f000 fe7d 	bl	8016e70 <__errno>
 8016176:	2316      	movs	r3, #22
 8016178:	6003      	str	r3, [r0, #0]
 801617a:	3b17      	subs	r3, #23
 801617c:	0018      	movs	r0, r3
 801617e:	bd10      	pop	{r4, pc}

08016180 <__ascii_wctomb>:
 8016180:	1e0b      	subs	r3, r1, #0
 8016182:	d004      	beq.n	801618e <__ascii_wctomb+0xe>
 8016184:	2aff      	cmp	r2, #255	; 0xff
 8016186:	d904      	bls.n	8016192 <__ascii_wctomb+0x12>
 8016188:	238a      	movs	r3, #138	; 0x8a
 801618a:	6003      	str	r3, [r0, #0]
 801618c:	3b8b      	subs	r3, #139	; 0x8b
 801618e:	0018      	movs	r0, r3
 8016190:	4770      	bx	lr
 8016192:	700a      	strb	r2, [r1, #0]
 8016194:	2301      	movs	r3, #1
 8016196:	e7fa      	b.n	801618e <__ascii_wctomb+0xe>

08016198 <register_fini>:
 8016198:	4b03      	ldr	r3, [pc, #12]	; (80161a8 <register_fini+0x10>)
 801619a:	b510      	push	{r4, lr}
 801619c:	2b00      	cmp	r3, #0
 801619e:	d002      	beq.n	80161a6 <register_fini+0xe>
 80161a0:	4802      	ldr	r0, [pc, #8]	; (80161ac <register_fini+0x14>)
 80161a2:	f000 f805 	bl	80161b0 <atexit>
 80161a6:	bd10      	pop	{r4, pc}
 80161a8:	00000000 	.word	0x00000000
 80161ac:	08016e7d 	.word	0x08016e7d

080161b0 <atexit>:
 80161b0:	2300      	movs	r3, #0
 80161b2:	b510      	push	{r4, lr}
 80161b4:	0001      	movs	r1, r0
 80161b6:	001a      	movs	r2, r3
 80161b8:	0018      	movs	r0, r3
 80161ba:	f001 ff53 	bl	8018064 <__register_exitproc>
 80161be:	bd10      	pop	{r4, pc}

080161c0 <quorem>:
 80161c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161c2:	6903      	ldr	r3, [r0, #16]
 80161c4:	690c      	ldr	r4, [r1, #16]
 80161c6:	b089      	sub	sp, #36	; 0x24
 80161c8:	0007      	movs	r7, r0
 80161ca:	9105      	str	r1, [sp, #20]
 80161cc:	2600      	movs	r6, #0
 80161ce:	42a3      	cmp	r3, r4
 80161d0:	db65      	blt.n	801629e <quorem+0xde>
 80161d2:	000b      	movs	r3, r1
 80161d4:	3c01      	subs	r4, #1
 80161d6:	3314      	adds	r3, #20
 80161d8:	00a5      	lsls	r5, r4, #2
 80161da:	9303      	str	r3, [sp, #12]
 80161dc:	195b      	adds	r3, r3, r5
 80161de:	9304      	str	r3, [sp, #16]
 80161e0:	0003      	movs	r3, r0
 80161e2:	3314      	adds	r3, #20
 80161e4:	9302      	str	r3, [sp, #8]
 80161e6:	195d      	adds	r5, r3, r5
 80161e8:	9b04      	ldr	r3, [sp, #16]
 80161ea:	6828      	ldr	r0, [r5, #0]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	1c59      	adds	r1, r3, #1
 80161f0:	9301      	str	r3, [sp, #4]
 80161f2:	f7e9 ffad 	bl	8000150 <__udivsi3>
 80161f6:	9001      	str	r0, [sp, #4]
 80161f8:	42b0      	cmp	r0, r6
 80161fa:	d029      	beq.n	8016250 <quorem+0x90>
 80161fc:	9b03      	ldr	r3, [sp, #12]
 80161fe:	9802      	ldr	r0, [sp, #8]
 8016200:	469c      	mov	ip, r3
 8016202:	9606      	str	r6, [sp, #24]
 8016204:	4662      	mov	r2, ip
 8016206:	ca08      	ldmia	r2!, {r3}
 8016208:	4694      	mov	ip, r2
 801620a:	9a01      	ldr	r2, [sp, #4]
 801620c:	b299      	uxth	r1, r3
 801620e:	4351      	muls	r1, r2
 8016210:	0c1b      	lsrs	r3, r3, #16
 8016212:	4353      	muls	r3, r2
 8016214:	1989      	adds	r1, r1, r6
 8016216:	0c0a      	lsrs	r2, r1, #16
 8016218:	189b      	adds	r3, r3, r2
 801621a:	9307      	str	r3, [sp, #28]
 801621c:	0c1e      	lsrs	r6, r3, #16
 801621e:	6803      	ldr	r3, [r0, #0]
 8016220:	b289      	uxth	r1, r1
 8016222:	b29a      	uxth	r2, r3
 8016224:	9b06      	ldr	r3, [sp, #24]
 8016226:	18d2      	adds	r2, r2, r3
 8016228:	6803      	ldr	r3, [r0, #0]
 801622a:	1a52      	subs	r2, r2, r1
 801622c:	0c19      	lsrs	r1, r3, #16
 801622e:	466b      	mov	r3, sp
 8016230:	8b9b      	ldrh	r3, [r3, #28]
 8016232:	1acb      	subs	r3, r1, r3
 8016234:	1411      	asrs	r1, r2, #16
 8016236:	185b      	adds	r3, r3, r1
 8016238:	1419      	asrs	r1, r3, #16
 801623a:	b292      	uxth	r2, r2
 801623c:	041b      	lsls	r3, r3, #16
 801623e:	431a      	orrs	r2, r3
 8016240:	9b04      	ldr	r3, [sp, #16]
 8016242:	9106      	str	r1, [sp, #24]
 8016244:	c004      	stmia	r0!, {r2}
 8016246:	4563      	cmp	r3, ip
 8016248:	d2dc      	bcs.n	8016204 <quorem+0x44>
 801624a:	682b      	ldr	r3, [r5, #0]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d02d      	beq.n	80162ac <quorem+0xec>
 8016250:	9905      	ldr	r1, [sp, #20]
 8016252:	0038      	movs	r0, r7
 8016254:	f001 fcb2 	bl	8017bbc <__mcmp>
 8016258:	2800      	cmp	r0, #0
 801625a:	db1f      	blt.n	801629c <quorem+0xdc>
 801625c:	2500      	movs	r5, #0
 801625e:	9b01      	ldr	r3, [sp, #4]
 8016260:	9802      	ldr	r0, [sp, #8]
 8016262:	3301      	adds	r3, #1
 8016264:	9903      	ldr	r1, [sp, #12]
 8016266:	9301      	str	r3, [sp, #4]
 8016268:	6802      	ldr	r2, [r0, #0]
 801626a:	c908      	ldmia	r1!, {r3}
 801626c:	b292      	uxth	r2, r2
 801626e:	1955      	adds	r5, r2, r5
 8016270:	b29a      	uxth	r2, r3
 8016272:	1aaa      	subs	r2, r5, r2
 8016274:	6805      	ldr	r5, [r0, #0]
 8016276:	0c1b      	lsrs	r3, r3, #16
 8016278:	0c2d      	lsrs	r5, r5, #16
 801627a:	1aeb      	subs	r3, r5, r3
 801627c:	1415      	asrs	r5, r2, #16
 801627e:	195b      	adds	r3, r3, r5
 8016280:	141d      	asrs	r5, r3, #16
 8016282:	b292      	uxth	r2, r2
 8016284:	041b      	lsls	r3, r3, #16
 8016286:	4313      	orrs	r3, r2
 8016288:	c008      	stmia	r0!, {r3}
 801628a:	9b04      	ldr	r3, [sp, #16]
 801628c:	428b      	cmp	r3, r1
 801628e:	d2eb      	bcs.n	8016268 <quorem+0xa8>
 8016290:	9a02      	ldr	r2, [sp, #8]
 8016292:	00a3      	lsls	r3, r4, #2
 8016294:	18d3      	adds	r3, r2, r3
 8016296:	681a      	ldr	r2, [r3, #0]
 8016298:	2a00      	cmp	r2, #0
 801629a:	d011      	beq.n	80162c0 <quorem+0x100>
 801629c:	9e01      	ldr	r6, [sp, #4]
 801629e:	0030      	movs	r0, r6
 80162a0:	b009      	add	sp, #36	; 0x24
 80162a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162a4:	682b      	ldr	r3, [r5, #0]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d104      	bne.n	80162b4 <quorem+0xf4>
 80162aa:	3c01      	subs	r4, #1
 80162ac:	9b02      	ldr	r3, [sp, #8]
 80162ae:	3d04      	subs	r5, #4
 80162b0:	42ab      	cmp	r3, r5
 80162b2:	d3f7      	bcc.n	80162a4 <quorem+0xe4>
 80162b4:	613c      	str	r4, [r7, #16]
 80162b6:	e7cb      	b.n	8016250 <quorem+0x90>
 80162b8:	681a      	ldr	r2, [r3, #0]
 80162ba:	2a00      	cmp	r2, #0
 80162bc:	d104      	bne.n	80162c8 <quorem+0x108>
 80162be:	3c01      	subs	r4, #1
 80162c0:	9a02      	ldr	r2, [sp, #8]
 80162c2:	3b04      	subs	r3, #4
 80162c4:	429a      	cmp	r2, r3
 80162c6:	d3f7      	bcc.n	80162b8 <quorem+0xf8>
 80162c8:	613c      	str	r4, [r7, #16]
 80162ca:	e7e7      	b.n	801629c <quorem+0xdc>

080162cc <_dtoa_r>:
 80162cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162ce:	0014      	movs	r4, r2
 80162d0:	001d      	movs	r5, r3
 80162d2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80162d4:	b09b      	sub	sp, #108	; 0x6c
 80162d6:	9002      	str	r0, [sp, #8]
 80162d8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80162da:	9406      	str	r4, [sp, #24]
 80162dc:	9507      	str	r5, [sp, #28]
 80162de:	2900      	cmp	r1, #0
 80162e0:	d009      	beq.n	80162f6 <_dtoa_r+0x2a>
 80162e2:	2301      	movs	r3, #1
 80162e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80162e6:	4093      	lsls	r3, r2
 80162e8:	604a      	str	r2, [r1, #4]
 80162ea:	608b      	str	r3, [r1, #8]
 80162ec:	f001 fa6a 	bl	80177c4 <_Bfree>
 80162f0:	2300      	movs	r3, #0
 80162f2:	9a02      	ldr	r2, [sp, #8]
 80162f4:	6413      	str	r3, [r2, #64]	; 0x40
 80162f6:	2d00      	cmp	r5, #0
 80162f8:	da20      	bge.n	801633c <_dtoa_r+0x70>
 80162fa:	2301      	movs	r3, #1
 80162fc:	6033      	str	r3, [r6, #0]
 80162fe:	006b      	lsls	r3, r5, #1
 8016300:	085b      	lsrs	r3, r3, #1
 8016302:	9307      	str	r3, [sp, #28]
 8016304:	9c07      	ldr	r4, [sp, #28]
 8016306:	4bb2      	ldr	r3, [pc, #712]	; (80165d0 <_dtoa_r+0x304>)
 8016308:	0022      	movs	r2, r4
 801630a:	9317      	str	r3, [sp, #92]	; 0x5c
 801630c:	401a      	ands	r2, r3
 801630e:	429a      	cmp	r2, r3
 8016310:	d117      	bne.n	8016342 <_dtoa_r+0x76>
 8016312:	4bb0      	ldr	r3, [pc, #704]	; (80165d4 <_dtoa_r+0x308>)
 8016314:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016316:	6013      	str	r3, [r2, #0]
 8016318:	9b06      	ldr	r3, [sp, #24]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d103      	bne.n	8016326 <_dtoa_r+0x5a>
 801631e:	0324      	lsls	r4, r4, #12
 8016320:	d101      	bne.n	8016326 <_dtoa_r+0x5a>
 8016322:	f000 fd89 	bl	8016e38 <_dtoa_r+0xb6c>
 8016326:	4bac      	ldr	r3, [pc, #688]	; (80165d8 <_dtoa_r+0x30c>)
 8016328:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801632a:	9308      	str	r3, [sp, #32]
 801632c:	2a00      	cmp	r2, #0
 801632e:	d002      	beq.n	8016336 <_dtoa_r+0x6a>
 8016330:	4baa      	ldr	r3, [pc, #680]	; (80165dc <_dtoa_r+0x310>)
 8016332:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016334:	6013      	str	r3, [r2, #0]
 8016336:	9808      	ldr	r0, [sp, #32]
 8016338:	b01b      	add	sp, #108	; 0x6c
 801633a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801633c:	2300      	movs	r3, #0
 801633e:	6033      	str	r3, [r6, #0]
 8016340:	e7e0      	b.n	8016304 <_dtoa_r+0x38>
 8016342:	9e06      	ldr	r6, [sp, #24]
 8016344:	9f07      	ldr	r7, [sp, #28]
 8016346:	2200      	movs	r2, #0
 8016348:	2300      	movs	r3, #0
 801634a:	0030      	movs	r0, r6
 801634c:	0039      	movs	r1, r7
 801634e:	f7ea f885 	bl	800045c <__aeabi_dcmpeq>
 8016352:	1e05      	subs	r5, r0, #0
 8016354:	d00b      	beq.n	801636e <_dtoa_r+0xa2>
 8016356:	2301      	movs	r3, #1
 8016358:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801635a:	6013      	str	r3, [r2, #0]
 801635c:	4ba0      	ldr	r3, [pc, #640]	; (80165e0 <_dtoa_r+0x314>)
 801635e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016360:	9308      	str	r3, [sp, #32]
 8016362:	2a00      	cmp	r2, #0
 8016364:	d0e7      	beq.n	8016336 <_dtoa_r+0x6a>
 8016366:	4a9f      	ldr	r2, [pc, #636]	; (80165e4 <_dtoa_r+0x318>)
 8016368:	9924      	ldr	r1, [sp, #144]	; 0x90
 801636a:	600a      	str	r2, [r1, #0]
 801636c:	e7e3      	b.n	8016336 <_dtoa_r+0x6a>
 801636e:	ab18      	add	r3, sp, #96	; 0x60
 8016370:	9301      	str	r3, [sp, #4]
 8016372:	ab19      	add	r3, sp, #100	; 0x64
 8016374:	9300      	str	r3, [sp, #0]
 8016376:	0032      	movs	r2, r6
 8016378:	003b      	movs	r3, r7
 801637a:	9802      	ldr	r0, [sp, #8]
 801637c:	f001 fd0e 	bl	8017d9c <__d2b>
 8016380:	0063      	lsls	r3, r4, #1
 8016382:	9003      	str	r0, [sp, #12]
 8016384:	0d5b      	lsrs	r3, r3, #21
 8016386:	d074      	beq.n	8016472 <_dtoa_r+0x1a6>
 8016388:	033a      	lsls	r2, r7, #12
 801638a:	4c97      	ldr	r4, [pc, #604]	; (80165e8 <_dtoa_r+0x31c>)
 801638c:	0b12      	lsrs	r2, r2, #12
 801638e:	4314      	orrs	r4, r2
 8016390:	0021      	movs	r1, r4
 8016392:	4a96      	ldr	r2, [pc, #600]	; (80165ec <_dtoa_r+0x320>)
 8016394:	0030      	movs	r0, r6
 8016396:	9516      	str	r5, [sp, #88]	; 0x58
 8016398:	189e      	adds	r6, r3, r2
 801639a:	2200      	movs	r2, #0
 801639c:	4b94      	ldr	r3, [pc, #592]	; (80165f0 <_dtoa_r+0x324>)
 801639e:	f7ec f8cd 	bl	800253c <__aeabi_dsub>
 80163a2:	4a94      	ldr	r2, [pc, #592]	; (80165f4 <_dtoa_r+0x328>)
 80163a4:	4b94      	ldr	r3, [pc, #592]	; (80165f8 <_dtoa_r+0x32c>)
 80163a6:	f7eb fe57 	bl	8002058 <__aeabi_dmul>
 80163aa:	4a94      	ldr	r2, [pc, #592]	; (80165fc <_dtoa_r+0x330>)
 80163ac:	4b94      	ldr	r3, [pc, #592]	; (8016600 <_dtoa_r+0x334>)
 80163ae:	f7ea ff2d 	bl	800120c <__aeabi_dadd>
 80163b2:	0004      	movs	r4, r0
 80163b4:	0030      	movs	r0, r6
 80163b6:	000d      	movs	r5, r1
 80163b8:	f7ec fc5a 	bl	8002c70 <__aeabi_i2d>
 80163bc:	4a91      	ldr	r2, [pc, #580]	; (8016604 <_dtoa_r+0x338>)
 80163be:	4b92      	ldr	r3, [pc, #584]	; (8016608 <_dtoa_r+0x33c>)
 80163c0:	f7eb fe4a 	bl	8002058 <__aeabi_dmul>
 80163c4:	0002      	movs	r2, r0
 80163c6:	000b      	movs	r3, r1
 80163c8:	0020      	movs	r0, r4
 80163ca:	0029      	movs	r1, r5
 80163cc:	f7ea ff1e 	bl	800120c <__aeabi_dadd>
 80163d0:	0004      	movs	r4, r0
 80163d2:	000d      	movs	r5, r1
 80163d4:	f7ec fc16 	bl	8002c04 <__aeabi_d2iz>
 80163d8:	2200      	movs	r2, #0
 80163da:	0007      	movs	r7, r0
 80163dc:	2300      	movs	r3, #0
 80163de:	0020      	movs	r0, r4
 80163e0:	0029      	movs	r1, r5
 80163e2:	f7ea f841 	bl	8000468 <__aeabi_dcmplt>
 80163e6:	2800      	cmp	r0, #0
 80163e8:	d009      	beq.n	80163fe <_dtoa_r+0x132>
 80163ea:	0038      	movs	r0, r7
 80163ec:	f7ec fc40 	bl	8002c70 <__aeabi_i2d>
 80163f0:	002b      	movs	r3, r5
 80163f2:	0022      	movs	r2, r4
 80163f4:	f7ea f832 	bl	800045c <__aeabi_dcmpeq>
 80163f8:	4243      	negs	r3, r0
 80163fa:	4158      	adcs	r0, r3
 80163fc:	1a3f      	subs	r7, r7, r0
 80163fe:	2301      	movs	r3, #1
 8016400:	9314      	str	r3, [sp, #80]	; 0x50
 8016402:	2f16      	cmp	r7, #22
 8016404:	d80d      	bhi.n	8016422 <_dtoa_r+0x156>
 8016406:	4981      	ldr	r1, [pc, #516]	; (801660c <_dtoa_r+0x340>)
 8016408:	00fb      	lsls	r3, r7, #3
 801640a:	18c9      	adds	r1, r1, r3
 801640c:	6808      	ldr	r0, [r1, #0]
 801640e:	6849      	ldr	r1, [r1, #4]
 8016410:	9a06      	ldr	r2, [sp, #24]
 8016412:	9b07      	ldr	r3, [sp, #28]
 8016414:	f7ea f83c 	bl	8000490 <__aeabi_dcmpgt>
 8016418:	2800      	cmp	r0, #0
 801641a:	d046      	beq.n	80164aa <_dtoa_r+0x1de>
 801641c:	2300      	movs	r3, #0
 801641e:	3f01      	subs	r7, #1
 8016420:	9314      	str	r3, [sp, #80]	; 0x50
 8016422:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016424:	1b9e      	subs	r6, r3, r6
 8016426:	2300      	movs	r3, #0
 8016428:	930a      	str	r3, [sp, #40]	; 0x28
 801642a:	0033      	movs	r3, r6
 801642c:	3b01      	subs	r3, #1
 801642e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016430:	d504      	bpl.n	801643c <_dtoa_r+0x170>
 8016432:	2301      	movs	r3, #1
 8016434:	1b9b      	subs	r3, r3, r6
 8016436:	930a      	str	r3, [sp, #40]	; 0x28
 8016438:	2300      	movs	r3, #0
 801643a:	930b      	str	r3, [sp, #44]	; 0x2c
 801643c:	2f00      	cmp	r7, #0
 801643e:	db36      	blt.n	80164ae <_dtoa_r+0x1e2>
 8016440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016442:	9711      	str	r7, [sp, #68]	; 0x44
 8016444:	19db      	adds	r3, r3, r7
 8016446:	930b      	str	r3, [sp, #44]	; 0x2c
 8016448:	2300      	movs	r3, #0
 801644a:	9304      	str	r3, [sp, #16]
 801644c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801644e:	2401      	movs	r4, #1
 8016450:	2b09      	cmp	r3, #9
 8016452:	d900      	bls.n	8016456 <_dtoa_r+0x18a>
 8016454:	e082      	b.n	801655c <_dtoa_r+0x290>
 8016456:	2b05      	cmp	r3, #5
 8016458:	dd02      	ble.n	8016460 <_dtoa_r+0x194>
 801645a:	2400      	movs	r4, #0
 801645c:	3b04      	subs	r3, #4
 801645e:	9320      	str	r3, [sp, #128]	; 0x80
 8016460:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016462:	1e98      	subs	r0, r3, #2
 8016464:	2803      	cmp	r0, #3
 8016466:	d900      	bls.n	801646a <_dtoa_r+0x19e>
 8016468:	e082      	b.n	8016570 <_dtoa_r+0x2a4>
 801646a:	f7e9 fe5d 	bl	8000128 <__gnu_thumb1_case_uqi>
 801646e:	7573      	.short	0x7573
 8016470:	6828      	.short	0x6828
 8016472:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016474:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016476:	189e      	adds	r6, r3, r2
 8016478:	4b65      	ldr	r3, [pc, #404]	; (8016610 <_dtoa_r+0x344>)
 801647a:	18f2      	adds	r2, r6, r3
 801647c:	2a20      	cmp	r2, #32
 801647e:	dd0f      	ble.n	80164a0 <_dtoa_r+0x1d4>
 8016480:	2340      	movs	r3, #64	; 0x40
 8016482:	1a9b      	subs	r3, r3, r2
 8016484:	409c      	lsls	r4, r3
 8016486:	4b63      	ldr	r3, [pc, #396]	; (8016614 <_dtoa_r+0x348>)
 8016488:	9806      	ldr	r0, [sp, #24]
 801648a:	18f3      	adds	r3, r6, r3
 801648c:	40d8      	lsrs	r0, r3
 801648e:	4320      	orrs	r0, r4
 8016490:	f7ec fc28 	bl	8002ce4 <__aeabi_ui2d>
 8016494:	2301      	movs	r3, #1
 8016496:	4c60      	ldr	r4, [pc, #384]	; (8016618 <_dtoa_r+0x34c>)
 8016498:	3e01      	subs	r6, #1
 801649a:	1909      	adds	r1, r1, r4
 801649c:	9316      	str	r3, [sp, #88]	; 0x58
 801649e:	e77c      	b.n	801639a <_dtoa_r+0xce>
 80164a0:	2320      	movs	r3, #32
 80164a2:	9806      	ldr	r0, [sp, #24]
 80164a4:	1a9b      	subs	r3, r3, r2
 80164a6:	4098      	lsls	r0, r3
 80164a8:	e7f2      	b.n	8016490 <_dtoa_r+0x1c4>
 80164aa:	9014      	str	r0, [sp, #80]	; 0x50
 80164ac:	e7b9      	b.n	8016422 <_dtoa_r+0x156>
 80164ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164b0:	1bdb      	subs	r3, r3, r7
 80164b2:	930a      	str	r3, [sp, #40]	; 0x28
 80164b4:	427b      	negs	r3, r7
 80164b6:	9304      	str	r3, [sp, #16]
 80164b8:	2300      	movs	r3, #0
 80164ba:	9311      	str	r3, [sp, #68]	; 0x44
 80164bc:	e7c6      	b.n	801644c <_dtoa_r+0x180>
 80164be:	2301      	movs	r3, #1
 80164c0:	930d      	str	r3, [sp, #52]	; 0x34
 80164c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	dd57      	ble.n	8016578 <_dtoa_r+0x2ac>
 80164c8:	930c      	str	r3, [sp, #48]	; 0x30
 80164ca:	9309      	str	r3, [sp, #36]	; 0x24
 80164cc:	2200      	movs	r2, #0
 80164ce:	9902      	ldr	r1, [sp, #8]
 80164d0:	644a      	str	r2, [r1, #68]	; 0x44
 80164d2:	3204      	adds	r2, #4
 80164d4:	0010      	movs	r0, r2
 80164d6:	9902      	ldr	r1, [sp, #8]
 80164d8:	3014      	adds	r0, #20
 80164da:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80164dc:	4298      	cmp	r0, r3
 80164de:	d950      	bls.n	8016582 <_dtoa_r+0x2b6>
 80164e0:	9802      	ldr	r0, [sp, #8]
 80164e2:	f001 f947 	bl	8017774 <_Balloc>
 80164e6:	9b02      	ldr	r3, [sp, #8]
 80164e8:	9008      	str	r0, [sp, #32]
 80164ea:	6418      	str	r0, [r3, #64]	; 0x40
 80164ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164ee:	2b0e      	cmp	r3, #14
 80164f0:	d900      	bls.n	80164f4 <_dtoa_r+0x228>
 80164f2:	e10c      	b.n	801670e <_dtoa_r+0x442>
 80164f4:	2c00      	cmp	r4, #0
 80164f6:	d100      	bne.n	80164fa <_dtoa_r+0x22e>
 80164f8:	e109      	b.n	801670e <_dtoa_r+0x442>
 80164fa:	9b06      	ldr	r3, [sp, #24]
 80164fc:	9c07      	ldr	r4, [sp, #28]
 80164fe:	9312      	str	r3, [sp, #72]	; 0x48
 8016500:	9413      	str	r4, [sp, #76]	; 0x4c
 8016502:	2f00      	cmp	r7, #0
 8016504:	dc00      	bgt.n	8016508 <_dtoa_r+0x23c>
 8016506:	e08b      	b.n	8016620 <_dtoa_r+0x354>
 8016508:	210f      	movs	r1, #15
 801650a:	003a      	movs	r2, r7
 801650c:	4b3f      	ldr	r3, [pc, #252]	; (801660c <_dtoa_r+0x340>)
 801650e:	400a      	ands	r2, r1
 8016510:	00d2      	lsls	r2, r2, #3
 8016512:	189b      	adds	r3, r3, r2
 8016514:	681d      	ldr	r5, [r3, #0]
 8016516:	685e      	ldr	r6, [r3, #4]
 8016518:	2302      	movs	r3, #2
 801651a:	113c      	asrs	r4, r7, #4
 801651c:	930e      	str	r3, [sp, #56]	; 0x38
 801651e:	06e3      	lsls	r3, r4, #27
 8016520:	d50b      	bpl.n	801653a <_dtoa_r+0x26e>
 8016522:	4b3e      	ldr	r3, [pc, #248]	; (801661c <_dtoa_r+0x350>)
 8016524:	400c      	ands	r4, r1
 8016526:	6a1a      	ldr	r2, [r3, #32]
 8016528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801652a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801652c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801652e:	f7eb f989 	bl	8001844 <__aeabi_ddiv>
 8016532:	2303      	movs	r3, #3
 8016534:	9006      	str	r0, [sp, #24]
 8016536:	9107      	str	r1, [sp, #28]
 8016538:	930e      	str	r3, [sp, #56]	; 0x38
 801653a:	2300      	movs	r3, #0
 801653c:	e03b      	b.n	80165b6 <_dtoa_r+0x2ea>
 801653e:	2301      	movs	r3, #1
 8016540:	930d      	str	r3, [sp, #52]	; 0x34
 8016542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016544:	18fb      	adds	r3, r7, r3
 8016546:	930c      	str	r3, [sp, #48]	; 0x30
 8016548:	3301      	adds	r3, #1
 801654a:	9309      	str	r3, [sp, #36]	; 0x24
 801654c:	2b00      	cmp	r3, #0
 801654e:	dcbd      	bgt.n	80164cc <_dtoa_r+0x200>
 8016550:	2301      	movs	r3, #1
 8016552:	e7bb      	b.n	80164cc <_dtoa_r+0x200>
 8016554:	2300      	movs	r3, #0
 8016556:	e7b3      	b.n	80164c0 <_dtoa_r+0x1f4>
 8016558:	2300      	movs	r3, #0
 801655a:	e7f1      	b.n	8016540 <_dtoa_r+0x274>
 801655c:	2300      	movs	r3, #0
 801655e:	940d      	str	r4, [sp, #52]	; 0x34
 8016560:	9320      	str	r3, [sp, #128]	; 0x80
 8016562:	3b01      	subs	r3, #1
 8016564:	2200      	movs	r2, #0
 8016566:	930c      	str	r3, [sp, #48]	; 0x30
 8016568:	9309      	str	r3, [sp, #36]	; 0x24
 801656a:	3313      	adds	r3, #19
 801656c:	9221      	str	r2, [sp, #132]	; 0x84
 801656e:	e7ad      	b.n	80164cc <_dtoa_r+0x200>
 8016570:	2301      	movs	r3, #1
 8016572:	930d      	str	r3, [sp, #52]	; 0x34
 8016574:	3b02      	subs	r3, #2
 8016576:	e7f5      	b.n	8016564 <_dtoa_r+0x298>
 8016578:	2301      	movs	r3, #1
 801657a:	930c      	str	r3, [sp, #48]	; 0x30
 801657c:	9309      	str	r3, [sp, #36]	; 0x24
 801657e:	001a      	movs	r2, r3
 8016580:	e7f4      	b.n	801656c <_dtoa_r+0x2a0>
 8016582:	9802      	ldr	r0, [sp, #8]
 8016584:	3101      	adds	r1, #1
 8016586:	6441      	str	r1, [r0, #68]	; 0x44
 8016588:	0052      	lsls	r2, r2, #1
 801658a:	e7a3      	b.n	80164d4 <_dtoa_r+0x208>
 801658c:	2301      	movs	r3, #1
 801658e:	421c      	tst	r4, r3
 8016590:	d00e      	beq.n	80165b0 <_dtoa_r+0x2e4>
 8016592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016594:	4a21      	ldr	r2, [pc, #132]	; (801661c <_dtoa_r+0x350>)
 8016596:	3301      	adds	r3, #1
 8016598:	930e      	str	r3, [sp, #56]	; 0x38
 801659a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801659c:	0028      	movs	r0, r5
 801659e:	00db      	lsls	r3, r3, #3
 80165a0:	189b      	adds	r3, r3, r2
 80165a2:	0031      	movs	r1, r6
 80165a4:	681a      	ldr	r2, [r3, #0]
 80165a6:	685b      	ldr	r3, [r3, #4]
 80165a8:	f7eb fd56 	bl	8002058 <__aeabi_dmul>
 80165ac:	0005      	movs	r5, r0
 80165ae:	000e      	movs	r6, r1
 80165b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165b2:	1064      	asrs	r4, r4, #1
 80165b4:	3301      	adds	r3, #1
 80165b6:	9310      	str	r3, [sp, #64]	; 0x40
 80165b8:	2c00      	cmp	r4, #0
 80165ba:	d1e7      	bne.n	801658c <_dtoa_r+0x2c0>
 80165bc:	9806      	ldr	r0, [sp, #24]
 80165be:	9907      	ldr	r1, [sp, #28]
 80165c0:	002a      	movs	r2, r5
 80165c2:	0033      	movs	r3, r6
 80165c4:	f7eb f93e 	bl	8001844 <__aeabi_ddiv>
 80165c8:	9006      	str	r0, [sp, #24]
 80165ca:	9107      	str	r1, [sp, #28]
 80165cc:	e043      	b.n	8016656 <_dtoa_r+0x38a>
 80165ce:	46c0      	nop			; (mov r8, r8)
 80165d0:	7ff00000 	.word	0x7ff00000
 80165d4:	0000270f 	.word	0x0000270f
 80165d8:	0801ba5e 	.word	0x0801ba5e
 80165dc:	0801ba61 	.word	0x0801ba61
 80165e0:	0801b932 	.word	0x0801b932
 80165e4:	0801b933 	.word	0x0801b933
 80165e8:	3ff00000 	.word	0x3ff00000
 80165ec:	fffffc01 	.word	0xfffffc01
 80165f0:	3ff80000 	.word	0x3ff80000
 80165f4:	636f4361 	.word	0x636f4361
 80165f8:	3fd287a7 	.word	0x3fd287a7
 80165fc:	8b60c8b3 	.word	0x8b60c8b3
 8016600:	3fc68a28 	.word	0x3fc68a28
 8016604:	509f79fb 	.word	0x509f79fb
 8016608:	3fd34413 	.word	0x3fd34413
 801660c:	0801ba90 	.word	0x0801ba90
 8016610:	00000432 	.word	0x00000432
 8016614:	00000412 	.word	0x00000412
 8016618:	fe100000 	.word	0xfe100000
 801661c:	0801ba68 	.word	0x0801ba68
 8016620:	2302      	movs	r3, #2
 8016622:	930e      	str	r3, [sp, #56]	; 0x38
 8016624:	2f00      	cmp	r7, #0
 8016626:	d016      	beq.n	8016656 <_dtoa_r+0x38a>
 8016628:	9812      	ldr	r0, [sp, #72]	; 0x48
 801662a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801662c:	427c      	negs	r4, r7
 801662e:	330d      	adds	r3, #13
 8016630:	4023      	ands	r3, r4
 8016632:	4acf      	ldr	r2, [pc, #828]	; (8016970 <_dtoa_r+0x6a4>)
 8016634:	00db      	lsls	r3, r3, #3
 8016636:	18d3      	adds	r3, r2, r3
 8016638:	681a      	ldr	r2, [r3, #0]
 801663a:	685b      	ldr	r3, [r3, #4]
 801663c:	f7eb fd0c 	bl	8002058 <__aeabi_dmul>
 8016640:	2300      	movs	r3, #0
 8016642:	2601      	movs	r6, #1
 8016644:	001d      	movs	r5, r3
 8016646:	9006      	str	r0, [sp, #24]
 8016648:	9107      	str	r1, [sp, #28]
 801664a:	1124      	asrs	r4, r4, #4
 801664c:	2c00      	cmp	r4, #0
 801664e:	d000      	beq.n	8016652 <_dtoa_r+0x386>
 8016650:	e08c      	b.n	801676c <_dtoa_r+0x4a0>
 8016652:	2b00      	cmp	r3, #0
 8016654:	d1b8      	bne.n	80165c8 <_dtoa_r+0x2fc>
 8016656:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016658:	2b00      	cmp	r3, #0
 801665a:	d100      	bne.n	801665e <_dtoa_r+0x392>
 801665c:	e096      	b.n	801678c <_dtoa_r+0x4c0>
 801665e:	9c06      	ldr	r4, [sp, #24]
 8016660:	9d07      	ldr	r5, [sp, #28]
 8016662:	2200      	movs	r2, #0
 8016664:	4bc3      	ldr	r3, [pc, #780]	; (8016974 <_dtoa_r+0x6a8>)
 8016666:	0020      	movs	r0, r4
 8016668:	0029      	movs	r1, r5
 801666a:	f7e9 fefd 	bl	8000468 <__aeabi_dcmplt>
 801666e:	2800      	cmp	r0, #0
 8016670:	d100      	bne.n	8016674 <_dtoa_r+0x3a8>
 8016672:	e08b      	b.n	801678c <_dtoa_r+0x4c0>
 8016674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016676:	2b00      	cmp	r3, #0
 8016678:	d100      	bne.n	801667c <_dtoa_r+0x3b0>
 801667a:	e087      	b.n	801678c <_dtoa_r+0x4c0>
 801667c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801667e:	2b00      	cmp	r3, #0
 8016680:	dd41      	ble.n	8016706 <_dtoa_r+0x43a>
 8016682:	4bbd      	ldr	r3, [pc, #756]	; (8016978 <_dtoa_r+0x6ac>)
 8016684:	2200      	movs	r2, #0
 8016686:	0020      	movs	r0, r4
 8016688:	0029      	movs	r1, r5
 801668a:	f7eb fce5 	bl	8002058 <__aeabi_dmul>
 801668e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016690:	9006      	str	r0, [sp, #24]
 8016692:	9107      	str	r1, [sp, #28]
 8016694:	3301      	adds	r3, #1
 8016696:	930e      	str	r3, [sp, #56]	; 0x38
 8016698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801669a:	1e7e      	subs	r6, r7, #1
 801669c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801669e:	9310      	str	r3, [sp, #64]	; 0x40
 80166a0:	f7ec fae6 	bl	8002c70 <__aeabi_i2d>
 80166a4:	9a06      	ldr	r2, [sp, #24]
 80166a6:	9b07      	ldr	r3, [sp, #28]
 80166a8:	f7eb fcd6 	bl	8002058 <__aeabi_dmul>
 80166ac:	2200      	movs	r2, #0
 80166ae:	4bb3      	ldr	r3, [pc, #716]	; (801697c <_dtoa_r+0x6b0>)
 80166b0:	f7ea fdac 	bl	800120c <__aeabi_dadd>
 80166b4:	4ab2      	ldr	r2, [pc, #712]	; (8016980 <_dtoa_r+0x6b4>)
 80166b6:	900e      	str	r0, [sp, #56]	; 0x38
 80166b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80166ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80166bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80166be:	4694      	mov	ip, r2
 80166c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166c2:	4463      	add	r3, ip
 80166c4:	9315      	str	r3, [sp, #84]	; 0x54
 80166c6:	001d      	movs	r5, r3
 80166c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d161      	bne.n	8016792 <_dtoa_r+0x4c6>
 80166ce:	9806      	ldr	r0, [sp, #24]
 80166d0:	9907      	ldr	r1, [sp, #28]
 80166d2:	2200      	movs	r2, #0
 80166d4:	4bab      	ldr	r3, [pc, #684]	; (8016984 <_dtoa_r+0x6b8>)
 80166d6:	f7eb ff31 	bl	800253c <__aeabi_dsub>
 80166da:	0022      	movs	r2, r4
 80166dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80166de:	9006      	str	r0, [sp, #24]
 80166e0:	9107      	str	r1, [sp, #28]
 80166e2:	f7e9 fed5 	bl	8000490 <__aeabi_dcmpgt>
 80166e6:	2800      	cmp	r0, #0
 80166e8:	d000      	beq.n	80166ec <_dtoa_r+0x420>
 80166ea:	e2aa      	b.n	8016c42 <_dtoa_r+0x976>
 80166ec:	48a6      	ldr	r0, [pc, #664]	; (8016988 <_dtoa_r+0x6bc>)
 80166ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80166f0:	4684      	mov	ip, r0
 80166f2:	4461      	add	r1, ip
 80166f4:	000b      	movs	r3, r1
 80166f6:	9806      	ldr	r0, [sp, #24]
 80166f8:	9907      	ldr	r1, [sp, #28]
 80166fa:	0022      	movs	r2, r4
 80166fc:	f7e9 feb4 	bl	8000468 <__aeabi_dcmplt>
 8016700:	2800      	cmp	r0, #0
 8016702:	d000      	beq.n	8016706 <_dtoa_r+0x43a>
 8016704:	e297      	b.n	8016c36 <_dtoa_r+0x96a>
 8016706:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016708:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801670a:	9306      	str	r3, [sp, #24]
 801670c:	9407      	str	r4, [sp, #28]
 801670e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016710:	2b00      	cmp	r3, #0
 8016712:	da00      	bge.n	8016716 <_dtoa_r+0x44a>
 8016714:	e15e      	b.n	80169d4 <_dtoa_r+0x708>
 8016716:	2f0e      	cmp	r7, #14
 8016718:	dd00      	ble.n	801671c <_dtoa_r+0x450>
 801671a:	e15b      	b.n	80169d4 <_dtoa_r+0x708>
 801671c:	4b94      	ldr	r3, [pc, #592]	; (8016970 <_dtoa_r+0x6a4>)
 801671e:	00fa      	lsls	r2, r7, #3
 8016720:	189b      	adds	r3, r3, r2
 8016722:	685c      	ldr	r4, [r3, #4]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	9304      	str	r3, [sp, #16]
 8016728:	9405      	str	r4, [sp, #20]
 801672a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801672c:	2b00      	cmp	r3, #0
 801672e:	db00      	blt.n	8016732 <_dtoa_r+0x466>
 8016730:	e0da      	b.n	80168e8 <_dtoa_r+0x61c>
 8016732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016734:	2b00      	cmp	r3, #0
 8016736:	dd00      	ble.n	801673a <_dtoa_r+0x46e>
 8016738:	e0d6      	b.n	80168e8 <_dtoa_r+0x61c>
 801673a:	d000      	beq.n	801673e <_dtoa_r+0x472>
 801673c:	e27f      	b.n	8016c3e <_dtoa_r+0x972>
 801673e:	9804      	ldr	r0, [sp, #16]
 8016740:	9905      	ldr	r1, [sp, #20]
 8016742:	2200      	movs	r2, #0
 8016744:	4b8f      	ldr	r3, [pc, #572]	; (8016984 <_dtoa_r+0x6b8>)
 8016746:	f7eb fc87 	bl	8002058 <__aeabi_dmul>
 801674a:	9a06      	ldr	r2, [sp, #24]
 801674c:	9b07      	ldr	r3, [sp, #28]
 801674e:	f7e9 fea9 	bl	80004a4 <__aeabi_dcmpge>
 8016752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016754:	9304      	str	r3, [sp, #16]
 8016756:	001e      	movs	r6, r3
 8016758:	2800      	cmp	r0, #0
 801675a:	d000      	beq.n	801675e <_dtoa_r+0x492>
 801675c:	e251      	b.n	8016c02 <_dtoa_r+0x936>
 801675e:	9b08      	ldr	r3, [sp, #32]
 8016760:	9a08      	ldr	r2, [sp, #32]
 8016762:	1c5d      	adds	r5, r3, #1
 8016764:	2331      	movs	r3, #49	; 0x31
 8016766:	3701      	adds	r7, #1
 8016768:	7013      	strb	r3, [r2, #0]
 801676a:	e24d      	b.n	8016c08 <_dtoa_r+0x93c>
 801676c:	4234      	tst	r4, r6
 801676e:	d00a      	beq.n	8016786 <_dtoa_r+0x4ba>
 8016770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016772:	4a86      	ldr	r2, [pc, #536]	; (801698c <_dtoa_r+0x6c0>)
 8016774:	3301      	adds	r3, #1
 8016776:	930e      	str	r3, [sp, #56]	; 0x38
 8016778:	00eb      	lsls	r3, r5, #3
 801677a:	189b      	adds	r3, r3, r2
 801677c:	681a      	ldr	r2, [r3, #0]
 801677e:	685b      	ldr	r3, [r3, #4]
 8016780:	f7eb fc6a 	bl	8002058 <__aeabi_dmul>
 8016784:	0033      	movs	r3, r6
 8016786:	1064      	asrs	r4, r4, #1
 8016788:	3501      	adds	r5, #1
 801678a:	e75f      	b.n	801664c <_dtoa_r+0x380>
 801678c:	003e      	movs	r6, r7
 801678e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016790:	e784      	b.n	801669c <_dtoa_r+0x3d0>
 8016792:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016794:	1e5a      	subs	r2, r3, #1
 8016796:	4b76      	ldr	r3, [pc, #472]	; (8016970 <_dtoa_r+0x6a4>)
 8016798:	00d2      	lsls	r2, r2, #3
 801679a:	189b      	adds	r3, r3, r2
 801679c:	6818      	ldr	r0, [r3, #0]
 801679e:	6859      	ldr	r1, [r3, #4]
 80167a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d04b      	beq.n	801683e <_dtoa_r+0x572>
 80167a6:	0002      	movs	r2, r0
 80167a8:	000b      	movs	r3, r1
 80167aa:	2000      	movs	r0, #0
 80167ac:	4978      	ldr	r1, [pc, #480]	; (8016990 <_dtoa_r+0x6c4>)
 80167ae:	f7eb f849 	bl	8001844 <__aeabi_ddiv>
 80167b2:	002b      	movs	r3, r5
 80167b4:	0022      	movs	r2, r4
 80167b6:	f7eb fec1 	bl	800253c <__aeabi_dsub>
 80167ba:	9b08      	ldr	r3, [sp, #32]
 80167bc:	900e      	str	r0, [sp, #56]	; 0x38
 80167be:	910f      	str	r1, [sp, #60]	; 0x3c
 80167c0:	9315      	str	r3, [sp, #84]	; 0x54
 80167c2:	9806      	ldr	r0, [sp, #24]
 80167c4:	9907      	ldr	r1, [sp, #28]
 80167c6:	f7ec fa1d 	bl	8002c04 <__aeabi_d2iz>
 80167ca:	0004      	movs	r4, r0
 80167cc:	f7ec fa50 	bl	8002c70 <__aeabi_i2d>
 80167d0:	0002      	movs	r2, r0
 80167d2:	000b      	movs	r3, r1
 80167d4:	9806      	ldr	r0, [sp, #24]
 80167d6:	9907      	ldr	r1, [sp, #28]
 80167d8:	f7eb feb0 	bl	800253c <__aeabi_dsub>
 80167dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167de:	3430      	adds	r4, #48	; 0x30
 80167e0:	1c5d      	adds	r5, r3, #1
 80167e2:	701c      	strb	r4, [r3, #0]
 80167e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80167e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80167e8:	9006      	str	r0, [sp, #24]
 80167ea:	9107      	str	r1, [sp, #28]
 80167ec:	f7e9 fe3c 	bl	8000468 <__aeabi_dcmplt>
 80167f0:	2800      	cmp	r0, #0
 80167f2:	d16c      	bne.n	80168ce <_dtoa_r+0x602>
 80167f4:	9a06      	ldr	r2, [sp, #24]
 80167f6:	9b07      	ldr	r3, [sp, #28]
 80167f8:	2000      	movs	r0, #0
 80167fa:	495e      	ldr	r1, [pc, #376]	; (8016974 <_dtoa_r+0x6a8>)
 80167fc:	f7eb fe9e 	bl	800253c <__aeabi_dsub>
 8016800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016804:	f7e9 fe30 	bl	8000468 <__aeabi_dcmplt>
 8016808:	2800      	cmp	r0, #0
 801680a:	d000      	beq.n	801680e <_dtoa_r+0x542>
 801680c:	e0c3      	b.n	8016996 <_dtoa_r+0x6ca>
 801680e:	9b08      	ldr	r3, [sp, #32]
 8016810:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016812:	1aeb      	subs	r3, r5, r3
 8016814:	429a      	cmp	r2, r3
 8016816:	dc00      	bgt.n	801681a <_dtoa_r+0x54e>
 8016818:	e775      	b.n	8016706 <_dtoa_r+0x43a>
 801681a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801681c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801681e:	2200      	movs	r2, #0
 8016820:	4b55      	ldr	r3, [pc, #340]	; (8016978 <_dtoa_r+0x6ac>)
 8016822:	f7eb fc19 	bl	8002058 <__aeabi_dmul>
 8016826:	2200      	movs	r2, #0
 8016828:	900e      	str	r0, [sp, #56]	; 0x38
 801682a:	910f      	str	r1, [sp, #60]	; 0x3c
 801682c:	9806      	ldr	r0, [sp, #24]
 801682e:	9907      	ldr	r1, [sp, #28]
 8016830:	4b51      	ldr	r3, [pc, #324]	; (8016978 <_dtoa_r+0x6ac>)
 8016832:	f7eb fc11 	bl	8002058 <__aeabi_dmul>
 8016836:	9515      	str	r5, [sp, #84]	; 0x54
 8016838:	9006      	str	r0, [sp, #24]
 801683a:	9107      	str	r1, [sp, #28]
 801683c:	e7c1      	b.n	80167c2 <_dtoa_r+0x4f6>
 801683e:	0022      	movs	r2, r4
 8016840:	002b      	movs	r3, r5
 8016842:	f7eb fc09 	bl	8002058 <__aeabi_dmul>
 8016846:	9c08      	ldr	r4, [sp, #32]
 8016848:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801684a:	0023      	movs	r3, r4
 801684c:	4694      	mov	ip, r2
 801684e:	900e      	str	r0, [sp, #56]	; 0x38
 8016850:	910f      	str	r1, [sp, #60]	; 0x3c
 8016852:	4463      	add	r3, ip
 8016854:	9315      	str	r3, [sp, #84]	; 0x54
 8016856:	9806      	ldr	r0, [sp, #24]
 8016858:	9907      	ldr	r1, [sp, #28]
 801685a:	f7ec f9d3 	bl	8002c04 <__aeabi_d2iz>
 801685e:	0005      	movs	r5, r0
 8016860:	f7ec fa06 	bl	8002c70 <__aeabi_i2d>
 8016864:	000b      	movs	r3, r1
 8016866:	0002      	movs	r2, r0
 8016868:	9806      	ldr	r0, [sp, #24]
 801686a:	9907      	ldr	r1, [sp, #28]
 801686c:	f7eb fe66 	bl	800253c <__aeabi_dsub>
 8016870:	3530      	adds	r5, #48	; 0x30
 8016872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016874:	7025      	strb	r5, [r4, #0]
 8016876:	3401      	adds	r4, #1
 8016878:	9006      	str	r0, [sp, #24]
 801687a:	9107      	str	r1, [sp, #28]
 801687c:	42a3      	cmp	r3, r4
 801687e:	d12a      	bne.n	80168d6 <_dtoa_r+0x60a>
 8016880:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016882:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016884:	9a08      	ldr	r2, [sp, #32]
 8016886:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016888:	4694      	mov	ip, r2
 801688a:	4463      	add	r3, ip
 801688c:	2200      	movs	r2, #0
 801688e:	001d      	movs	r5, r3
 8016890:	4b3f      	ldr	r3, [pc, #252]	; (8016990 <_dtoa_r+0x6c4>)
 8016892:	f7ea fcbb 	bl	800120c <__aeabi_dadd>
 8016896:	0002      	movs	r2, r0
 8016898:	000b      	movs	r3, r1
 801689a:	9806      	ldr	r0, [sp, #24]
 801689c:	9907      	ldr	r1, [sp, #28]
 801689e:	f7e9 fdf7 	bl	8000490 <__aeabi_dcmpgt>
 80168a2:	2800      	cmp	r0, #0
 80168a4:	d000      	beq.n	80168a8 <_dtoa_r+0x5dc>
 80168a6:	e076      	b.n	8016996 <_dtoa_r+0x6ca>
 80168a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80168aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168ac:	2000      	movs	r0, #0
 80168ae:	4938      	ldr	r1, [pc, #224]	; (8016990 <_dtoa_r+0x6c4>)
 80168b0:	f7eb fe44 	bl	800253c <__aeabi_dsub>
 80168b4:	0002      	movs	r2, r0
 80168b6:	000b      	movs	r3, r1
 80168b8:	9806      	ldr	r0, [sp, #24]
 80168ba:	9907      	ldr	r1, [sp, #28]
 80168bc:	f7e9 fdd4 	bl	8000468 <__aeabi_dcmplt>
 80168c0:	2800      	cmp	r0, #0
 80168c2:	d100      	bne.n	80168c6 <_dtoa_r+0x5fa>
 80168c4:	e71f      	b.n	8016706 <_dtoa_r+0x43a>
 80168c6:	1e6b      	subs	r3, r5, #1
 80168c8:	781a      	ldrb	r2, [r3, #0]
 80168ca:	2a30      	cmp	r2, #48	; 0x30
 80168cc:	d001      	beq.n	80168d2 <_dtoa_r+0x606>
 80168ce:	0037      	movs	r7, r6
 80168d0:	e03f      	b.n	8016952 <_dtoa_r+0x686>
 80168d2:	001d      	movs	r5, r3
 80168d4:	e7f7      	b.n	80168c6 <_dtoa_r+0x5fa>
 80168d6:	9806      	ldr	r0, [sp, #24]
 80168d8:	9907      	ldr	r1, [sp, #28]
 80168da:	2200      	movs	r2, #0
 80168dc:	4b26      	ldr	r3, [pc, #152]	; (8016978 <_dtoa_r+0x6ac>)
 80168de:	f7eb fbbb 	bl	8002058 <__aeabi_dmul>
 80168e2:	9006      	str	r0, [sp, #24]
 80168e4:	9107      	str	r1, [sp, #28]
 80168e6:	e7b6      	b.n	8016856 <_dtoa_r+0x58a>
 80168e8:	9e08      	ldr	r6, [sp, #32]
 80168ea:	9a04      	ldr	r2, [sp, #16]
 80168ec:	9b05      	ldr	r3, [sp, #20]
 80168ee:	9806      	ldr	r0, [sp, #24]
 80168f0:	9907      	ldr	r1, [sp, #28]
 80168f2:	f7ea ffa7 	bl	8001844 <__aeabi_ddiv>
 80168f6:	f7ec f985 	bl	8002c04 <__aeabi_d2iz>
 80168fa:	0004      	movs	r4, r0
 80168fc:	f7ec f9b8 	bl	8002c70 <__aeabi_i2d>
 8016900:	9a04      	ldr	r2, [sp, #16]
 8016902:	9b05      	ldr	r3, [sp, #20]
 8016904:	f7eb fba8 	bl	8002058 <__aeabi_dmul>
 8016908:	0002      	movs	r2, r0
 801690a:	000b      	movs	r3, r1
 801690c:	9806      	ldr	r0, [sp, #24]
 801690e:	9907      	ldr	r1, [sp, #28]
 8016910:	f7eb fe14 	bl	800253c <__aeabi_dsub>
 8016914:	0023      	movs	r3, r4
 8016916:	3330      	adds	r3, #48	; 0x30
 8016918:	7033      	strb	r3, [r6, #0]
 801691a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801691c:	9b08      	ldr	r3, [sp, #32]
 801691e:	1c75      	adds	r5, r6, #1
 8016920:	1aeb      	subs	r3, r5, r3
 8016922:	429a      	cmp	r2, r3
 8016924:	d148      	bne.n	80169b8 <_dtoa_r+0x6ec>
 8016926:	0002      	movs	r2, r0
 8016928:	000b      	movs	r3, r1
 801692a:	f7ea fc6f 	bl	800120c <__aeabi_dadd>
 801692e:	9a04      	ldr	r2, [sp, #16]
 8016930:	9b05      	ldr	r3, [sp, #20]
 8016932:	9006      	str	r0, [sp, #24]
 8016934:	9107      	str	r1, [sp, #28]
 8016936:	f7e9 fdab 	bl	8000490 <__aeabi_dcmpgt>
 801693a:	2800      	cmp	r0, #0
 801693c:	d12a      	bne.n	8016994 <_dtoa_r+0x6c8>
 801693e:	9a04      	ldr	r2, [sp, #16]
 8016940:	9b05      	ldr	r3, [sp, #20]
 8016942:	9806      	ldr	r0, [sp, #24]
 8016944:	9907      	ldr	r1, [sp, #28]
 8016946:	f7e9 fd89 	bl	800045c <__aeabi_dcmpeq>
 801694a:	2800      	cmp	r0, #0
 801694c:	d001      	beq.n	8016952 <_dtoa_r+0x686>
 801694e:	07e3      	lsls	r3, r4, #31
 8016950:	d420      	bmi.n	8016994 <_dtoa_r+0x6c8>
 8016952:	9903      	ldr	r1, [sp, #12]
 8016954:	9802      	ldr	r0, [sp, #8]
 8016956:	f000 ff35 	bl	80177c4 <_Bfree>
 801695a:	2300      	movs	r3, #0
 801695c:	702b      	strb	r3, [r5, #0]
 801695e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016960:	3701      	adds	r7, #1
 8016962:	601f      	str	r7, [r3, #0]
 8016964:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016966:	2b00      	cmp	r3, #0
 8016968:	d100      	bne.n	801696c <_dtoa_r+0x6a0>
 801696a:	e4e4      	b.n	8016336 <_dtoa_r+0x6a>
 801696c:	601d      	str	r5, [r3, #0]
 801696e:	e4e2      	b.n	8016336 <_dtoa_r+0x6a>
 8016970:	0801ba90 	.word	0x0801ba90
 8016974:	3ff00000 	.word	0x3ff00000
 8016978:	40240000 	.word	0x40240000
 801697c:	401c0000 	.word	0x401c0000
 8016980:	fcc00000 	.word	0xfcc00000
 8016984:	40140000 	.word	0x40140000
 8016988:	7cc00000 	.word	0x7cc00000
 801698c:	0801ba68 	.word	0x0801ba68
 8016990:	3fe00000 	.word	0x3fe00000
 8016994:	003e      	movs	r6, r7
 8016996:	1e6b      	subs	r3, r5, #1
 8016998:	781a      	ldrb	r2, [r3, #0]
 801699a:	2a39      	cmp	r2, #57	; 0x39
 801699c:	d106      	bne.n	80169ac <_dtoa_r+0x6e0>
 801699e:	9a08      	ldr	r2, [sp, #32]
 80169a0:	429a      	cmp	r2, r3
 80169a2:	d107      	bne.n	80169b4 <_dtoa_r+0x6e8>
 80169a4:	2330      	movs	r3, #48	; 0x30
 80169a6:	7013      	strb	r3, [r2, #0]
 80169a8:	0013      	movs	r3, r2
 80169aa:	3601      	adds	r6, #1
 80169ac:	781a      	ldrb	r2, [r3, #0]
 80169ae:	3201      	adds	r2, #1
 80169b0:	701a      	strb	r2, [r3, #0]
 80169b2:	e78c      	b.n	80168ce <_dtoa_r+0x602>
 80169b4:	001d      	movs	r5, r3
 80169b6:	e7ee      	b.n	8016996 <_dtoa_r+0x6ca>
 80169b8:	2200      	movs	r2, #0
 80169ba:	4ba4      	ldr	r3, [pc, #656]	; (8016c4c <_dtoa_r+0x980>)
 80169bc:	f7eb fb4c 	bl	8002058 <__aeabi_dmul>
 80169c0:	2200      	movs	r2, #0
 80169c2:	2300      	movs	r3, #0
 80169c4:	9006      	str	r0, [sp, #24]
 80169c6:	9107      	str	r1, [sp, #28]
 80169c8:	002e      	movs	r6, r5
 80169ca:	f7e9 fd47 	bl	800045c <__aeabi_dcmpeq>
 80169ce:	2800      	cmp	r0, #0
 80169d0:	d08b      	beq.n	80168ea <_dtoa_r+0x61e>
 80169d2:	e7be      	b.n	8016952 <_dtoa_r+0x686>
 80169d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80169d6:	2a00      	cmp	r2, #0
 80169d8:	d100      	bne.n	80169dc <_dtoa_r+0x710>
 80169da:	e0da      	b.n	8016b92 <_dtoa_r+0x8c6>
 80169dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80169de:	2a01      	cmp	r2, #1
 80169e0:	dd00      	ble.n	80169e4 <_dtoa_r+0x718>
 80169e2:	e0bd      	b.n	8016b60 <_dtoa_r+0x894>
 80169e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80169e6:	2a00      	cmp	r2, #0
 80169e8:	d100      	bne.n	80169ec <_dtoa_r+0x720>
 80169ea:	e0b5      	b.n	8016b58 <_dtoa_r+0x88c>
 80169ec:	4a98      	ldr	r2, [pc, #608]	; (8016c50 <_dtoa_r+0x984>)
 80169ee:	189b      	adds	r3, r3, r2
 80169f0:	9d04      	ldr	r5, [sp, #16]
 80169f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80169f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169f6:	2101      	movs	r1, #1
 80169f8:	18d2      	adds	r2, r2, r3
 80169fa:	920a      	str	r2, [sp, #40]	; 0x28
 80169fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80169fe:	9802      	ldr	r0, [sp, #8]
 8016a00:	18d3      	adds	r3, r2, r3
 8016a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a04:	f000 ffad 	bl	8017962 <__i2b>
 8016a08:	0006      	movs	r6, r0
 8016a0a:	2c00      	cmp	r4, #0
 8016a0c:	dd0e      	ble.n	8016a2c <_dtoa_r+0x760>
 8016a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	dd0b      	ble.n	8016a2c <_dtoa_r+0x760>
 8016a14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016a16:	0023      	movs	r3, r4
 8016a18:	4294      	cmp	r4, r2
 8016a1a:	dd00      	ble.n	8016a1e <_dtoa_r+0x752>
 8016a1c:	0013      	movs	r3, r2
 8016a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a20:	1ae4      	subs	r4, r4, r3
 8016a22:	1ad2      	subs	r2, r2, r3
 8016a24:	920a      	str	r2, [sp, #40]	; 0x28
 8016a26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016a28:	1ad3      	subs	r3, r2, r3
 8016a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a2c:	9b04      	ldr	r3, [sp, #16]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d01f      	beq.n	8016a72 <_dtoa_r+0x7a6>
 8016a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d100      	bne.n	8016a3a <_dtoa_r+0x76e>
 8016a38:	e0af      	b.n	8016b9a <_dtoa_r+0x8ce>
 8016a3a:	2d00      	cmp	r5, #0
 8016a3c:	d011      	beq.n	8016a62 <_dtoa_r+0x796>
 8016a3e:	0031      	movs	r1, r6
 8016a40:	002a      	movs	r2, r5
 8016a42:	9802      	ldr	r0, [sp, #8]
 8016a44:	f001 f826 	bl	8017a94 <__pow5mult>
 8016a48:	9a03      	ldr	r2, [sp, #12]
 8016a4a:	0001      	movs	r1, r0
 8016a4c:	0006      	movs	r6, r0
 8016a4e:	9802      	ldr	r0, [sp, #8]
 8016a50:	f000 ff90 	bl	8017974 <__multiply>
 8016a54:	9903      	ldr	r1, [sp, #12]
 8016a56:	9010      	str	r0, [sp, #64]	; 0x40
 8016a58:	9802      	ldr	r0, [sp, #8]
 8016a5a:	f000 feb3 	bl	80177c4 <_Bfree>
 8016a5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a60:	9303      	str	r3, [sp, #12]
 8016a62:	9b04      	ldr	r3, [sp, #16]
 8016a64:	1b5a      	subs	r2, r3, r5
 8016a66:	d004      	beq.n	8016a72 <_dtoa_r+0x7a6>
 8016a68:	9903      	ldr	r1, [sp, #12]
 8016a6a:	9802      	ldr	r0, [sp, #8]
 8016a6c:	f001 f812 	bl	8017a94 <__pow5mult>
 8016a70:	9003      	str	r0, [sp, #12]
 8016a72:	2101      	movs	r1, #1
 8016a74:	9802      	ldr	r0, [sp, #8]
 8016a76:	f000 ff74 	bl	8017962 <__i2b>
 8016a7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016a7c:	9004      	str	r0, [sp, #16]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d100      	bne.n	8016a84 <_dtoa_r+0x7b8>
 8016a82:	e1e3      	b.n	8016e4c <_dtoa_r+0xb80>
 8016a84:	001a      	movs	r2, r3
 8016a86:	0001      	movs	r1, r0
 8016a88:	9802      	ldr	r0, [sp, #8]
 8016a8a:	f001 f803 	bl	8017a94 <__pow5mult>
 8016a8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016a90:	9004      	str	r0, [sp, #16]
 8016a92:	2b01      	cmp	r3, #1
 8016a94:	dd00      	ble.n	8016a98 <_dtoa_r+0x7cc>
 8016a96:	e082      	b.n	8016b9e <_dtoa_r+0x8d2>
 8016a98:	2500      	movs	r5, #0
 8016a9a:	9b06      	ldr	r3, [sp, #24]
 8016a9c:	42ab      	cmp	r3, r5
 8016a9e:	d10e      	bne.n	8016abe <_dtoa_r+0x7f2>
 8016aa0:	9b07      	ldr	r3, [sp, #28]
 8016aa2:	031b      	lsls	r3, r3, #12
 8016aa4:	42ab      	cmp	r3, r5
 8016aa6:	d10a      	bne.n	8016abe <_dtoa_r+0x7f2>
 8016aa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016aaa:	9a07      	ldr	r2, [sp, #28]
 8016aac:	4213      	tst	r3, r2
 8016aae:	d006      	beq.n	8016abe <_dtoa_r+0x7f2>
 8016ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ab2:	3501      	adds	r5, #1
 8016ab4:	3301      	adds	r3, #1
 8016ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8016ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016aba:	3301      	adds	r3, #1
 8016abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8016abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ac0:	2001      	movs	r0, #1
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d16c      	bne.n	8016ba0 <_dtoa_r+0x8d4>
 8016ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ac8:	1818      	adds	r0, r3, r0
 8016aca:	231f      	movs	r3, #31
 8016acc:	4018      	ands	r0, r3
 8016ace:	d07e      	beq.n	8016bce <_dtoa_r+0x902>
 8016ad0:	3301      	adds	r3, #1
 8016ad2:	1a1b      	subs	r3, r3, r0
 8016ad4:	2b04      	cmp	r3, #4
 8016ad6:	dd70      	ble.n	8016bba <_dtoa_r+0x8ee>
 8016ad8:	231c      	movs	r3, #28
 8016ada:	1a18      	subs	r0, r3, r0
 8016adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ade:	1824      	adds	r4, r4, r0
 8016ae0:	181b      	adds	r3, r3, r0
 8016ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8016ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ae6:	181b      	adds	r3, r3, r0
 8016ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8016aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	dd05      	ble.n	8016afc <_dtoa_r+0x830>
 8016af0:	001a      	movs	r2, r3
 8016af2:	9903      	ldr	r1, [sp, #12]
 8016af4:	9802      	ldr	r0, [sp, #8]
 8016af6:	f001 f80f 	bl	8017b18 <__lshift>
 8016afa:	9003      	str	r0, [sp, #12]
 8016afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	dd05      	ble.n	8016b0e <_dtoa_r+0x842>
 8016b02:	001a      	movs	r2, r3
 8016b04:	9904      	ldr	r1, [sp, #16]
 8016b06:	9802      	ldr	r0, [sp, #8]
 8016b08:	f001 f806 	bl	8017b18 <__lshift>
 8016b0c:	9004      	str	r0, [sp, #16]
 8016b0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d05e      	beq.n	8016bd2 <_dtoa_r+0x906>
 8016b14:	9904      	ldr	r1, [sp, #16]
 8016b16:	9803      	ldr	r0, [sp, #12]
 8016b18:	f001 f850 	bl	8017bbc <__mcmp>
 8016b1c:	2800      	cmp	r0, #0
 8016b1e:	da58      	bge.n	8016bd2 <_dtoa_r+0x906>
 8016b20:	2300      	movs	r3, #0
 8016b22:	220a      	movs	r2, #10
 8016b24:	9903      	ldr	r1, [sp, #12]
 8016b26:	9802      	ldr	r0, [sp, #8]
 8016b28:	f000 fe56 	bl	80177d8 <__multadd>
 8016b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b2e:	3f01      	subs	r7, #1
 8016b30:	9003      	str	r0, [sp, #12]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d100      	bne.n	8016b38 <_dtoa_r+0x86c>
 8016b36:	e190      	b.n	8016e5a <_dtoa_r+0xb8e>
 8016b38:	2300      	movs	r3, #0
 8016b3a:	0031      	movs	r1, r6
 8016b3c:	220a      	movs	r2, #10
 8016b3e:	9802      	ldr	r0, [sp, #8]
 8016b40:	f000 fe4a 	bl	80177d8 <__multadd>
 8016b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b46:	0006      	movs	r6, r0
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	dd00      	ble.n	8016b4e <_dtoa_r+0x882>
 8016b4c:	e088      	b.n	8016c60 <_dtoa_r+0x994>
 8016b4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016b50:	2b02      	cmp	r3, #2
 8016b52:	dc00      	bgt.n	8016b56 <_dtoa_r+0x88a>
 8016b54:	e084      	b.n	8016c60 <_dtoa_r+0x994>
 8016b56:	e044      	b.n	8016be2 <_dtoa_r+0x916>
 8016b58:	2336      	movs	r3, #54	; 0x36
 8016b5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016b5c:	1a9b      	subs	r3, r3, r2
 8016b5e:	e747      	b.n	80169f0 <_dtoa_r+0x724>
 8016b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b62:	1e5d      	subs	r5, r3, #1
 8016b64:	9b04      	ldr	r3, [sp, #16]
 8016b66:	42ab      	cmp	r3, r5
 8016b68:	db08      	blt.n	8016b7c <_dtoa_r+0x8b0>
 8016b6a:	1b5d      	subs	r5, r3, r5
 8016b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	da0c      	bge.n	8016b8c <_dtoa_r+0x8c0>
 8016b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b76:	1a9c      	subs	r4, r3, r2
 8016b78:	2300      	movs	r3, #0
 8016b7a:	e73b      	b.n	80169f4 <_dtoa_r+0x728>
 8016b7c:	9b04      	ldr	r3, [sp, #16]
 8016b7e:	9504      	str	r5, [sp, #16]
 8016b80:	1aea      	subs	r2, r5, r3
 8016b82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b84:	2500      	movs	r5, #0
 8016b86:	189b      	adds	r3, r3, r2
 8016b88:	9311      	str	r3, [sp, #68]	; 0x44
 8016b8a:	e7ef      	b.n	8016b6c <_dtoa_r+0x8a0>
 8016b8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b90:	e730      	b.n	80169f4 <_dtoa_r+0x728>
 8016b92:	9d04      	ldr	r5, [sp, #16]
 8016b94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016b96:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8016b98:	e737      	b.n	8016a0a <_dtoa_r+0x73e>
 8016b9a:	9a04      	ldr	r2, [sp, #16]
 8016b9c:	e764      	b.n	8016a68 <_dtoa_r+0x79c>
 8016b9e:	2500      	movs	r5, #0
 8016ba0:	9b04      	ldr	r3, [sp, #16]
 8016ba2:	9a04      	ldr	r2, [sp, #16]
 8016ba4:	691b      	ldr	r3, [r3, #16]
 8016ba6:	9310      	str	r3, [sp, #64]	; 0x40
 8016ba8:	3303      	adds	r3, #3
 8016baa:	009b      	lsls	r3, r3, #2
 8016bac:	18d3      	adds	r3, r2, r3
 8016bae:	6858      	ldr	r0, [r3, #4]
 8016bb0:	f000 fe8e 	bl	80178d0 <__hi0bits>
 8016bb4:	2320      	movs	r3, #32
 8016bb6:	1a18      	subs	r0, r3, r0
 8016bb8:	e785      	b.n	8016ac6 <_dtoa_r+0x7fa>
 8016bba:	2b04      	cmp	r3, #4
 8016bbc:	d095      	beq.n	8016aea <_dtoa_r+0x81e>
 8016bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016bc0:	331c      	adds	r3, #28
 8016bc2:	18d2      	adds	r2, r2, r3
 8016bc4:	920a      	str	r2, [sp, #40]	; 0x28
 8016bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016bc8:	18e4      	adds	r4, r4, r3
 8016bca:	18d3      	adds	r3, r2, r3
 8016bcc:	e78c      	b.n	8016ae8 <_dtoa_r+0x81c>
 8016bce:	0003      	movs	r3, r0
 8016bd0:	e7f5      	b.n	8016bbe <_dtoa_r+0x8f2>
 8016bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	dc3d      	bgt.n	8016c54 <_dtoa_r+0x988>
 8016bd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016bda:	2b02      	cmp	r3, #2
 8016bdc:	dd3a      	ble.n	8016c54 <_dtoa_r+0x988>
 8016bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016be0:	930c      	str	r3, [sp, #48]	; 0x30
 8016be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d10c      	bne.n	8016c02 <_dtoa_r+0x936>
 8016be8:	9904      	ldr	r1, [sp, #16]
 8016bea:	2205      	movs	r2, #5
 8016bec:	9802      	ldr	r0, [sp, #8]
 8016bee:	f000 fdf3 	bl	80177d8 <__multadd>
 8016bf2:	9004      	str	r0, [sp, #16]
 8016bf4:	0001      	movs	r1, r0
 8016bf6:	9803      	ldr	r0, [sp, #12]
 8016bf8:	f000 ffe0 	bl	8017bbc <__mcmp>
 8016bfc:	2800      	cmp	r0, #0
 8016bfe:	dd00      	ble.n	8016c02 <_dtoa_r+0x936>
 8016c00:	e5ad      	b.n	801675e <_dtoa_r+0x492>
 8016c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c04:	9d08      	ldr	r5, [sp, #32]
 8016c06:	43df      	mvns	r7, r3
 8016c08:	2300      	movs	r3, #0
 8016c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8016c0c:	9904      	ldr	r1, [sp, #16]
 8016c0e:	9802      	ldr	r0, [sp, #8]
 8016c10:	f000 fdd8 	bl	80177c4 <_Bfree>
 8016c14:	2e00      	cmp	r6, #0
 8016c16:	d100      	bne.n	8016c1a <_dtoa_r+0x94e>
 8016c18:	e69b      	b.n	8016952 <_dtoa_r+0x686>
 8016c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d005      	beq.n	8016c2c <_dtoa_r+0x960>
 8016c20:	42b3      	cmp	r3, r6
 8016c22:	d003      	beq.n	8016c2c <_dtoa_r+0x960>
 8016c24:	0019      	movs	r1, r3
 8016c26:	9802      	ldr	r0, [sp, #8]
 8016c28:	f000 fdcc 	bl	80177c4 <_Bfree>
 8016c2c:	0031      	movs	r1, r6
 8016c2e:	9802      	ldr	r0, [sp, #8]
 8016c30:	f000 fdc8 	bl	80177c4 <_Bfree>
 8016c34:	e68d      	b.n	8016952 <_dtoa_r+0x686>
 8016c36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c38:	9304      	str	r3, [sp, #16]
 8016c3a:	001e      	movs	r6, r3
 8016c3c:	e7e1      	b.n	8016c02 <_dtoa_r+0x936>
 8016c3e:	2300      	movs	r3, #0
 8016c40:	e7fa      	b.n	8016c38 <_dtoa_r+0x96c>
 8016c42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c44:	0037      	movs	r7, r6
 8016c46:	9304      	str	r3, [sp, #16]
 8016c48:	001e      	movs	r6, r3
 8016c4a:	e588      	b.n	801675e <_dtoa_r+0x492>
 8016c4c:	40240000 	.word	0x40240000
 8016c50:	00000433 	.word	0x00000433
 8016c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d100      	bne.n	8016c5c <_dtoa_r+0x990>
 8016c5a:	e0b2      	b.n	8016dc2 <_dtoa_r+0xaf6>
 8016c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8016c60:	2c00      	cmp	r4, #0
 8016c62:	dd05      	ble.n	8016c70 <_dtoa_r+0x9a4>
 8016c64:	0031      	movs	r1, r6
 8016c66:	0022      	movs	r2, r4
 8016c68:	9802      	ldr	r0, [sp, #8]
 8016c6a:	f000 ff55 	bl	8017b18 <__lshift>
 8016c6e:	0006      	movs	r6, r0
 8016c70:	0030      	movs	r0, r6
 8016c72:	2d00      	cmp	r5, #0
 8016c74:	d011      	beq.n	8016c9a <_dtoa_r+0x9ce>
 8016c76:	6871      	ldr	r1, [r6, #4]
 8016c78:	9802      	ldr	r0, [sp, #8]
 8016c7a:	f000 fd7b 	bl	8017774 <_Balloc>
 8016c7e:	0031      	movs	r1, r6
 8016c80:	0004      	movs	r4, r0
 8016c82:	6933      	ldr	r3, [r6, #16]
 8016c84:	310c      	adds	r1, #12
 8016c86:	1c9a      	adds	r2, r3, #2
 8016c88:	0092      	lsls	r2, r2, #2
 8016c8a:	300c      	adds	r0, #12
 8016c8c:	f7fc fe8b 	bl	80139a6 <memcpy>
 8016c90:	2201      	movs	r2, #1
 8016c92:	0021      	movs	r1, r4
 8016c94:	9802      	ldr	r0, [sp, #8]
 8016c96:	f000 ff3f 	bl	8017b18 <__lshift>
 8016c9a:	9609      	str	r6, [sp, #36]	; 0x24
 8016c9c:	0006      	movs	r6, r0
 8016c9e:	9b08      	ldr	r3, [sp, #32]
 8016ca0:	930a      	str	r3, [sp, #40]	; 0x28
 8016ca2:	9904      	ldr	r1, [sp, #16]
 8016ca4:	9803      	ldr	r0, [sp, #12]
 8016ca6:	f7ff fa8b 	bl	80161c0 <quorem>
 8016caa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016cac:	900d      	str	r0, [sp, #52]	; 0x34
 8016cae:	0004      	movs	r4, r0
 8016cb0:	9803      	ldr	r0, [sp, #12]
 8016cb2:	f000 ff83 	bl	8017bbc <__mcmp>
 8016cb6:	0032      	movs	r2, r6
 8016cb8:	9010      	str	r0, [sp, #64]	; 0x40
 8016cba:	9904      	ldr	r1, [sp, #16]
 8016cbc:	9802      	ldr	r0, [sp, #8]
 8016cbe:	f000 ff97 	bl	8017bf0 <__mdiff>
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016cc6:	68c3      	ldr	r3, [r0, #12]
 8016cc8:	3430      	adds	r4, #48	; 0x30
 8016cca:	0005      	movs	r5, r0
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d104      	bne.n	8016cda <_dtoa_r+0xa0e>
 8016cd0:	0001      	movs	r1, r0
 8016cd2:	9803      	ldr	r0, [sp, #12]
 8016cd4:	f000 ff72 	bl	8017bbc <__mcmp>
 8016cd8:	900b      	str	r0, [sp, #44]	; 0x2c
 8016cda:	0029      	movs	r1, r5
 8016cdc:	9802      	ldr	r0, [sp, #8]
 8016cde:	f000 fd71 	bl	80177c4 <_Bfree>
 8016ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ce4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016ce6:	4313      	orrs	r3, r2
 8016ce8:	d10e      	bne.n	8016d08 <_dtoa_r+0xa3c>
 8016cea:	9a06      	ldr	r2, [sp, #24]
 8016cec:	3301      	adds	r3, #1
 8016cee:	4213      	tst	r3, r2
 8016cf0:	d10a      	bne.n	8016d08 <_dtoa_r+0xa3c>
 8016cf2:	2c39      	cmp	r4, #57	; 0x39
 8016cf4:	d026      	beq.n	8016d44 <_dtoa_r+0xa78>
 8016cf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	dd01      	ble.n	8016d00 <_dtoa_r+0xa34>
 8016cfc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016cfe:	3431      	adds	r4, #49	; 0x31
 8016d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d02:	1c5d      	adds	r5, r3, #1
 8016d04:	701c      	strb	r4, [r3, #0]
 8016d06:	e781      	b.n	8016c0c <_dtoa_r+0x940>
 8016d08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	db07      	blt.n	8016d1e <_dtoa_r+0xa52>
 8016d0e:	001d      	movs	r5, r3
 8016d10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016d12:	431d      	orrs	r5, r3
 8016d14:	d122      	bne.n	8016d5c <_dtoa_r+0xa90>
 8016d16:	2301      	movs	r3, #1
 8016d18:	9a06      	ldr	r2, [sp, #24]
 8016d1a:	4213      	tst	r3, r2
 8016d1c:	d11e      	bne.n	8016d5c <_dtoa_r+0xa90>
 8016d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	dded      	ble.n	8016d00 <_dtoa_r+0xa34>
 8016d24:	9903      	ldr	r1, [sp, #12]
 8016d26:	2201      	movs	r2, #1
 8016d28:	9802      	ldr	r0, [sp, #8]
 8016d2a:	f000 fef5 	bl	8017b18 <__lshift>
 8016d2e:	9904      	ldr	r1, [sp, #16]
 8016d30:	9003      	str	r0, [sp, #12]
 8016d32:	f000 ff43 	bl	8017bbc <__mcmp>
 8016d36:	2800      	cmp	r0, #0
 8016d38:	dc02      	bgt.n	8016d40 <_dtoa_r+0xa74>
 8016d3a:	d1e1      	bne.n	8016d00 <_dtoa_r+0xa34>
 8016d3c:	07e3      	lsls	r3, r4, #31
 8016d3e:	d5df      	bpl.n	8016d00 <_dtoa_r+0xa34>
 8016d40:	2c39      	cmp	r4, #57	; 0x39
 8016d42:	d1db      	bne.n	8016cfc <_dtoa_r+0xa30>
 8016d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d48:	1c5d      	adds	r5, r3, #1
 8016d4a:	2339      	movs	r3, #57	; 0x39
 8016d4c:	7013      	strb	r3, [r2, #0]
 8016d4e:	1e6b      	subs	r3, r5, #1
 8016d50:	781a      	ldrb	r2, [r3, #0]
 8016d52:	2a39      	cmp	r2, #57	; 0x39
 8016d54:	d067      	beq.n	8016e26 <_dtoa_r+0xb5a>
 8016d56:	3201      	adds	r2, #1
 8016d58:	701a      	strb	r2, [r3, #0]
 8016d5a:	e757      	b.n	8016c0c <_dtoa_r+0x940>
 8016d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d5e:	1c5d      	adds	r5, r3, #1
 8016d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	dd04      	ble.n	8016d70 <_dtoa_r+0xaa4>
 8016d66:	2c39      	cmp	r4, #57	; 0x39
 8016d68:	d0ec      	beq.n	8016d44 <_dtoa_r+0xa78>
 8016d6a:	3401      	adds	r4, #1
 8016d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d6e:	e7c9      	b.n	8016d04 <_dtoa_r+0xa38>
 8016d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016d74:	701c      	strb	r4, [r3, #0]
 8016d76:	9b08      	ldr	r3, [sp, #32]
 8016d78:	1aeb      	subs	r3, r5, r3
 8016d7a:	4293      	cmp	r3, r2
 8016d7c:	d03e      	beq.n	8016dfc <_dtoa_r+0xb30>
 8016d7e:	2300      	movs	r3, #0
 8016d80:	220a      	movs	r2, #10
 8016d82:	9903      	ldr	r1, [sp, #12]
 8016d84:	9802      	ldr	r0, [sp, #8]
 8016d86:	f000 fd27 	bl	80177d8 <__multadd>
 8016d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d8c:	9003      	str	r0, [sp, #12]
 8016d8e:	42b3      	cmp	r3, r6
 8016d90:	d109      	bne.n	8016da6 <_dtoa_r+0xada>
 8016d92:	2300      	movs	r3, #0
 8016d94:	220a      	movs	r2, #10
 8016d96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016d98:	9802      	ldr	r0, [sp, #8]
 8016d9a:	f000 fd1d 	bl	80177d8 <__multadd>
 8016d9e:	9009      	str	r0, [sp, #36]	; 0x24
 8016da0:	0006      	movs	r6, r0
 8016da2:	950a      	str	r5, [sp, #40]	; 0x28
 8016da4:	e77d      	b.n	8016ca2 <_dtoa_r+0x9d6>
 8016da6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016da8:	2300      	movs	r3, #0
 8016daa:	220a      	movs	r2, #10
 8016dac:	9802      	ldr	r0, [sp, #8]
 8016dae:	f000 fd13 	bl	80177d8 <__multadd>
 8016db2:	2300      	movs	r3, #0
 8016db4:	9009      	str	r0, [sp, #36]	; 0x24
 8016db6:	220a      	movs	r2, #10
 8016db8:	0031      	movs	r1, r6
 8016dba:	9802      	ldr	r0, [sp, #8]
 8016dbc:	f000 fd0c 	bl	80177d8 <__multadd>
 8016dc0:	e7ee      	b.n	8016da0 <_dtoa_r+0xad4>
 8016dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dc4:	930c      	str	r3, [sp, #48]	; 0x30
 8016dc6:	9b08      	ldr	r3, [sp, #32]
 8016dc8:	9306      	str	r3, [sp, #24]
 8016dca:	9904      	ldr	r1, [sp, #16]
 8016dcc:	9803      	ldr	r0, [sp, #12]
 8016dce:	f7ff f9f7 	bl	80161c0 <quorem>
 8016dd2:	9b06      	ldr	r3, [sp, #24]
 8016dd4:	3030      	adds	r0, #48	; 0x30
 8016dd6:	1c5d      	adds	r5, r3, #1
 8016dd8:	7018      	strb	r0, [r3, #0]
 8016dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016ddc:	9b08      	ldr	r3, [sp, #32]
 8016dde:	0004      	movs	r4, r0
 8016de0:	1aeb      	subs	r3, r5, r3
 8016de2:	429a      	cmp	r2, r3
 8016de4:	dd08      	ble.n	8016df8 <_dtoa_r+0xb2c>
 8016de6:	2300      	movs	r3, #0
 8016de8:	220a      	movs	r2, #10
 8016dea:	9903      	ldr	r1, [sp, #12]
 8016dec:	9802      	ldr	r0, [sp, #8]
 8016dee:	f000 fcf3 	bl	80177d8 <__multadd>
 8016df2:	9506      	str	r5, [sp, #24]
 8016df4:	9003      	str	r0, [sp, #12]
 8016df6:	e7e8      	b.n	8016dca <_dtoa_r+0xafe>
 8016df8:	2300      	movs	r3, #0
 8016dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8016dfc:	9903      	ldr	r1, [sp, #12]
 8016dfe:	2201      	movs	r2, #1
 8016e00:	9802      	ldr	r0, [sp, #8]
 8016e02:	f000 fe89 	bl	8017b18 <__lshift>
 8016e06:	9904      	ldr	r1, [sp, #16]
 8016e08:	9003      	str	r0, [sp, #12]
 8016e0a:	f000 fed7 	bl	8017bbc <__mcmp>
 8016e0e:	2800      	cmp	r0, #0
 8016e10:	dc9d      	bgt.n	8016d4e <_dtoa_r+0xa82>
 8016e12:	d101      	bne.n	8016e18 <_dtoa_r+0xb4c>
 8016e14:	07e3      	lsls	r3, r4, #31
 8016e16:	d49a      	bmi.n	8016d4e <_dtoa_r+0xa82>
 8016e18:	1e6b      	subs	r3, r5, #1
 8016e1a:	781a      	ldrb	r2, [r3, #0]
 8016e1c:	2a30      	cmp	r2, #48	; 0x30
 8016e1e:	d000      	beq.n	8016e22 <_dtoa_r+0xb56>
 8016e20:	e6f4      	b.n	8016c0c <_dtoa_r+0x940>
 8016e22:	001d      	movs	r5, r3
 8016e24:	e7f8      	b.n	8016e18 <_dtoa_r+0xb4c>
 8016e26:	9a08      	ldr	r2, [sp, #32]
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	d103      	bne.n	8016e34 <_dtoa_r+0xb68>
 8016e2c:	2331      	movs	r3, #49	; 0x31
 8016e2e:	3701      	adds	r7, #1
 8016e30:	7013      	strb	r3, [r2, #0]
 8016e32:	e6eb      	b.n	8016c0c <_dtoa_r+0x940>
 8016e34:	001d      	movs	r5, r3
 8016e36:	e78a      	b.n	8016d4e <_dtoa_r+0xa82>
 8016e38:	4b0b      	ldr	r3, [pc, #44]	; (8016e68 <_dtoa_r+0xb9c>)
 8016e3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016e3c:	9308      	str	r3, [sp, #32]
 8016e3e:	4b0b      	ldr	r3, [pc, #44]	; (8016e6c <_dtoa_r+0xba0>)
 8016e40:	2a00      	cmp	r2, #0
 8016e42:	d001      	beq.n	8016e48 <_dtoa_r+0xb7c>
 8016e44:	f7ff fa75 	bl	8016332 <_dtoa_r+0x66>
 8016e48:	f7ff fa75 	bl	8016336 <_dtoa_r+0x6a>
 8016e4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016e4e:	2b01      	cmp	r3, #1
 8016e50:	dc00      	bgt.n	8016e54 <_dtoa_r+0xb88>
 8016e52:	e621      	b.n	8016a98 <_dtoa_r+0x7cc>
 8016e54:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016e56:	2001      	movs	r0, #1
 8016e58:	e635      	b.n	8016ac6 <_dtoa_r+0x7fa>
 8016e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	dcb2      	bgt.n	8016dc6 <_dtoa_r+0xafa>
 8016e60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016e62:	2b02      	cmp	r3, #2
 8016e64:	ddaf      	ble.n	8016dc6 <_dtoa_r+0xafa>
 8016e66:	e6bc      	b.n	8016be2 <_dtoa_r+0x916>
 8016e68:	0801ba55 	.word	0x0801ba55
 8016e6c:	0801ba5d 	.word	0x0801ba5d

08016e70 <__errno>:
 8016e70:	4b01      	ldr	r3, [pc, #4]	; (8016e78 <__errno+0x8>)
 8016e72:	6818      	ldr	r0, [r3, #0]
 8016e74:	4770      	bx	lr
 8016e76:	46c0      	nop			; (mov r8, r8)
 8016e78:	200000dc 	.word	0x200000dc

08016e7c <__libc_fini_array>:
 8016e7c:	b570      	push	{r4, r5, r6, lr}
 8016e7e:	4d07      	ldr	r5, [pc, #28]	; (8016e9c <__libc_fini_array+0x20>)
 8016e80:	4c07      	ldr	r4, [pc, #28]	; (8016ea0 <__libc_fini_array+0x24>)
 8016e82:	1b64      	subs	r4, r4, r5
 8016e84:	10a4      	asrs	r4, r4, #2
 8016e86:	2c00      	cmp	r4, #0
 8016e88:	d102      	bne.n	8016e90 <__libc_fini_array+0x14>
 8016e8a:	f001 f95b 	bl	8018144 <_fini>
 8016e8e:	bd70      	pop	{r4, r5, r6, pc}
 8016e90:	3c01      	subs	r4, #1
 8016e92:	00a3      	lsls	r3, r4, #2
 8016e94:	58eb      	ldr	r3, [r5, r3]
 8016e96:	4798      	blx	r3
 8016e98:	e7f5      	b.n	8016e86 <__libc_fini_array+0xa>
 8016e9a:	46c0      	nop			; (mov r8, r8)
 8016e9c:	0801bb74 	.word	0x0801bb74
 8016ea0:	0801bb78 	.word	0x0801bb78

08016ea4 <_malloc_trim_r>:
 8016ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ea6:	0005      	movs	r5, r0
 8016ea8:	2008      	movs	r0, #8
 8016eaa:	000c      	movs	r4, r1
 8016eac:	f7ff f95c 	bl	8016168 <sysconf>
 8016eb0:	0007      	movs	r7, r0
 8016eb2:	0028      	movs	r0, r5
 8016eb4:	f7fc fd88 	bl	80139c8 <__malloc_lock>
 8016eb8:	2203      	movs	r2, #3
 8016eba:	4e21      	ldr	r6, [pc, #132]	; (8016f40 <_malloc_trim_r+0x9c>)
 8016ebc:	0039      	movs	r1, r7
 8016ebe:	68b3      	ldr	r3, [r6, #8]
 8016ec0:	685b      	ldr	r3, [r3, #4]
 8016ec2:	4393      	bics	r3, r2
 8016ec4:	1b18      	subs	r0, r3, r4
 8016ec6:	3811      	subs	r0, #17
 8016ec8:	19c0      	adds	r0, r0, r7
 8016eca:	9301      	str	r3, [sp, #4]
 8016ecc:	f7e9 f940 	bl	8000150 <__udivsi3>
 8016ed0:	1e44      	subs	r4, r0, #1
 8016ed2:	437c      	muls	r4, r7
 8016ed4:	42a7      	cmp	r7, r4
 8016ed6:	dd04      	ble.n	8016ee2 <_malloc_trim_r+0x3e>
 8016ed8:	0028      	movs	r0, r5
 8016eda:	f7fc fd7d 	bl	80139d8 <__malloc_unlock>
 8016ede:	2000      	movs	r0, #0
 8016ee0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016ee2:	2100      	movs	r1, #0
 8016ee4:	0028      	movs	r0, r5
 8016ee6:	f7fc ff4f 	bl	8013d88 <_sbrk_r>
 8016eea:	68b3      	ldr	r3, [r6, #8]
 8016eec:	9a01      	ldr	r2, [sp, #4]
 8016eee:	189b      	adds	r3, r3, r2
 8016ef0:	4298      	cmp	r0, r3
 8016ef2:	d1f1      	bne.n	8016ed8 <_malloc_trim_r+0x34>
 8016ef4:	4261      	negs	r1, r4
 8016ef6:	0028      	movs	r0, r5
 8016ef8:	f7fc ff46 	bl	8013d88 <_sbrk_r>
 8016efc:	1c43      	adds	r3, r0, #1
 8016efe:	d110      	bne.n	8016f22 <_malloc_trim_r+0x7e>
 8016f00:	2100      	movs	r1, #0
 8016f02:	0028      	movs	r0, r5
 8016f04:	f7fc ff40 	bl	8013d88 <_sbrk_r>
 8016f08:	68b2      	ldr	r2, [r6, #8]
 8016f0a:	1a81      	subs	r1, r0, r2
 8016f0c:	290f      	cmp	r1, #15
 8016f0e:	dde3      	ble.n	8016ed8 <_malloc_trim_r+0x34>
 8016f10:	4b0c      	ldr	r3, [pc, #48]	; (8016f44 <_malloc_trim_r+0xa0>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	1ac0      	subs	r0, r0, r3
 8016f16:	4b0c      	ldr	r3, [pc, #48]	; (8016f48 <_malloc_trim_r+0xa4>)
 8016f18:	6018      	str	r0, [r3, #0]
 8016f1a:	2301      	movs	r3, #1
 8016f1c:	430b      	orrs	r3, r1
 8016f1e:	6053      	str	r3, [r2, #4]
 8016f20:	e7da      	b.n	8016ed8 <_malloc_trim_r+0x34>
 8016f22:	68b2      	ldr	r2, [r6, #8]
 8016f24:	2601      	movs	r6, #1
 8016f26:	9b01      	ldr	r3, [sp, #4]
 8016f28:	0028      	movs	r0, r5
 8016f2a:	1b1b      	subs	r3, r3, r4
 8016f2c:	4333      	orrs	r3, r6
 8016f2e:	6053      	str	r3, [r2, #4]
 8016f30:	4b05      	ldr	r3, [pc, #20]	; (8016f48 <_malloc_trim_r+0xa4>)
 8016f32:	681a      	ldr	r2, [r3, #0]
 8016f34:	1b14      	subs	r4, r2, r4
 8016f36:	601c      	str	r4, [r3, #0]
 8016f38:	f7fc fd4e 	bl	80139d8 <__malloc_unlock>
 8016f3c:	0030      	movs	r0, r6
 8016f3e:	e7cf      	b.n	8016ee0 <_malloc_trim_r+0x3c>
 8016f40:	20000674 	.word	0x20000674
 8016f44:	20000a7c 	.word	0x20000a7c
 8016f48:	200067c0 	.word	0x200067c0

08016f4c <_free_r>:
 8016f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f4e:	1e0d      	subs	r5, r1, #0
 8016f50:	9001      	str	r0, [sp, #4]
 8016f52:	d02d      	beq.n	8016fb0 <_free_r+0x64>
 8016f54:	f7fc fd38 	bl	80139c8 <__malloc_lock>
 8016f58:	2301      	movs	r3, #1
 8016f5a:	0029      	movs	r1, r5
 8016f5c:	469c      	mov	ip, r3
 8016f5e:	3908      	subs	r1, #8
 8016f60:	684f      	ldr	r7, [r1, #4]
 8016f62:	4662      	mov	r2, ip
 8016f64:	003b      	movs	r3, r7
 8016f66:	4666      	mov	r6, ip
 8016f68:	4393      	bics	r3, r2
 8016f6a:	18c8      	adds	r0, r1, r3
 8016f6c:	6845      	ldr	r5, [r0, #4]
 8016f6e:	3202      	adds	r2, #2
 8016f70:	4395      	bics	r5, r2
 8016f72:	4a4a      	ldr	r2, [pc, #296]	; (801709c <_free_r+0x150>)
 8016f74:	4037      	ands	r7, r6
 8016f76:	6896      	ldr	r6, [r2, #8]
 8016f78:	4286      	cmp	r6, r0
 8016f7a:	d11a      	bne.n	8016fb2 <_free_r+0x66>
 8016f7c:	195b      	adds	r3, r3, r5
 8016f7e:	2f00      	cmp	r7, #0
 8016f80:	d106      	bne.n	8016f90 <_free_r+0x44>
 8016f82:	6808      	ldr	r0, [r1, #0]
 8016f84:	1a09      	subs	r1, r1, r0
 8016f86:	688d      	ldr	r5, [r1, #8]
 8016f88:	181b      	adds	r3, r3, r0
 8016f8a:	68c8      	ldr	r0, [r1, #12]
 8016f8c:	60e8      	str	r0, [r5, #12]
 8016f8e:	6085      	str	r5, [r0, #8]
 8016f90:	2001      	movs	r0, #1
 8016f92:	4318      	orrs	r0, r3
 8016f94:	6048      	str	r0, [r1, #4]
 8016f96:	6091      	str	r1, [r2, #8]
 8016f98:	4a41      	ldr	r2, [pc, #260]	; (80170a0 <_free_r+0x154>)
 8016f9a:	6812      	ldr	r2, [r2, #0]
 8016f9c:	429a      	cmp	r2, r3
 8016f9e:	d804      	bhi.n	8016faa <_free_r+0x5e>
 8016fa0:	4b40      	ldr	r3, [pc, #256]	; (80170a4 <_free_r+0x158>)
 8016fa2:	9801      	ldr	r0, [sp, #4]
 8016fa4:	6819      	ldr	r1, [r3, #0]
 8016fa6:	f7ff ff7d 	bl	8016ea4 <_malloc_trim_r>
 8016faa:	9801      	ldr	r0, [sp, #4]
 8016fac:	f7fc fd14 	bl	80139d8 <__malloc_unlock>
 8016fb0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8016fb2:	2600      	movs	r6, #0
 8016fb4:	6045      	str	r5, [r0, #4]
 8016fb6:	42b7      	cmp	r7, r6
 8016fb8:	d109      	bne.n	8016fce <_free_r+0x82>
 8016fba:	680f      	ldr	r7, [r1, #0]
 8016fbc:	4c3a      	ldr	r4, [pc, #232]	; (80170a8 <_free_r+0x15c>)
 8016fbe:	1bc9      	subs	r1, r1, r7
 8016fc0:	19db      	adds	r3, r3, r7
 8016fc2:	688f      	ldr	r7, [r1, #8]
 8016fc4:	42a7      	cmp	r7, r4
 8016fc6:	d02b      	beq.n	8017020 <_free_r+0xd4>
 8016fc8:	68cc      	ldr	r4, [r1, #12]
 8016fca:	60fc      	str	r4, [r7, #12]
 8016fcc:	60a7      	str	r7, [r4, #8]
 8016fce:	1947      	adds	r7, r0, r5
 8016fd0:	687c      	ldr	r4, [r7, #4]
 8016fd2:	2701      	movs	r7, #1
 8016fd4:	423c      	tst	r4, r7
 8016fd6:	d10b      	bne.n	8016ff0 <_free_r+0xa4>
 8016fd8:	195b      	adds	r3, r3, r5
 8016fda:	6885      	ldr	r5, [r0, #8]
 8016fdc:	2e00      	cmp	r6, #0
 8016fde:	d121      	bne.n	8017024 <_free_r+0xd8>
 8016fe0:	4c31      	ldr	r4, [pc, #196]	; (80170a8 <_free_r+0x15c>)
 8016fe2:	42a5      	cmp	r5, r4
 8016fe4:	d11e      	bne.n	8017024 <_free_r+0xd8>
 8016fe6:	003e      	movs	r6, r7
 8016fe8:	6151      	str	r1, [r2, #20]
 8016fea:	6111      	str	r1, [r2, #16]
 8016fec:	60cd      	str	r5, [r1, #12]
 8016fee:	608d      	str	r5, [r1, #8]
 8016ff0:	2001      	movs	r0, #1
 8016ff2:	0005      	movs	r5, r0
 8016ff4:	431d      	orrs	r5, r3
 8016ff6:	604d      	str	r5, [r1, #4]
 8016ff8:	50cb      	str	r3, [r1, r3]
 8016ffa:	2e00      	cmp	r6, #0
 8016ffc:	d1d5      	bne.n	8016faa <_free_r+0x5e>
 8016ffe:	4d2b      	ldr	r5, [pc, #172]	; (80170ac <_free_r+0x160>)
 8017000:	42ab      	cmp	r3, r5
 8017002:	d813      	bhi.n	801702c <_free_r+0xe0>
 8017004:	08db      	lsrs	r3, r3, #3
 8017006:	109d      	asrs	r5, r3, #2
 8017008:	40a8      	lsls	r0, r5
 801700a:	6854      	ldr	r4, [r2, #4]
 801700c:	00db      	lsls	r3, r3, #3
 801700e:	4320      	orrs	r0, r4
 8017010:	6050      	str	r0, [r2, #4]
 8017012:	189a      	adds	r2, r3, r2
 8017014:	6893      	ldr	r3, [r2, #8]
 8017016:	60ca      	str	r2, [r1, #12]
 8017018:	608b      	str	r3, [r1, #8]
 801701a:	6091      	str	r1, [r2, #8]
 801701c:	60d9      	str	r1, [r3, #12]
 801701e:	e7c4      	b.n	8016faa <_free_r+0x5e>
 8017020:	4666      	mov	r6, ip
 8017022:	e7d4      	b.n	8016fce <_free_r+0x82>
 8017024:	68c0      	ldr	r0, [r0, #12]
 8017026:	60e8      	str	r0, [r5, #12]
 8017028:	6085      	str	r5, [r0, #8]
 801702a:	e7e1      	b.n	8016ff0 <_free_r+0xa4>
 801702c:	0a5d      	lsrs	r5, r3, #9
 801702e:	2d04      	cmp	r5, #4
 8017030:	d812      	bhi.n	8017058 <_free_r+0x10c>
 8017032:	0998      	lsrs	r0, r3, #6
 8017034:	3038      	adds	r0, #56	; 0x38
 8017036:	00c6      	lsls	r6, r0, #3
 8017038:	18b6      	adds	r6, r6, r2
 801703a:	68b5      	ldr	r5, [r6, #8]
 801703c:	2703      	movs	r7, #3
 801703e:	42ae      	cmp	r6, r5
 8017040:	d125      	bne.n	801708e <_free_r+0x142>
 8017042:	2301      	movs	r3, #1
 8017044:	1080      	asrs	r0, r0, #2
 8017046:	4083      	lsls	r3, r0
 8017048:	6850      	ldr	r0, [r2, #4]
 801704a:	4303      	orrs	r3, r0
 801704c:	6053      	str	r3, [r2, #4]
 801704e:	60ce      	str	r6, [r1, #12]
 8017050:	608d      	str	r5, [r1, #8]
 8017052:	60b1      	str	r1, [r6, #8]
 8017054:	60e9      	str	r1, [r5, #12]
 8017056:	e7a8      	b.n	8016faa <_free_r+0x5e>
 8017058:	2d14      	cmp	r5, #20
 801705a:	d802      	bhi.n	8017062 <_free_r+0x116>
 801705c:	0028      	movs	r0, r5
 801705e:	305b      	adds	r0, #91	; 0x5b
 8017060:	e7e9      	b.n	8017036 <_free_r+0xea>
 8017062:	2d54      	cmp	r5, #84	; 0x54
 8017064:	d802      	bhi.n	801706c <_free_r+0x120>
 8017066:	0b18      	lsrs	r0, r3, #12
 8017068:	306e      	adds	r0, #110	; 0x6e
 801706a:	e7e4      	b.n	8017036 <_free_r+0xea>
 801706c:	20aa      	movs	r0, #170	; 0xaa
 801706e:	0040      	lsls	r0, r0, #1
 8017070:	4285      	cmp	r5, r0
 8017072:	d802      	bhi.n	801707a <_free_r+0x12e>
 8017074:	0bd8      	lsrs	r0, r3, #15
 8017076:	3077      	adds	r0, #119	; 0x77
 8017078:	e7dd      	b.n	8017036 <_free_r+0xea>
 801707a:	4e0d      	ldr	r6, [pc, #52]	; (80170b0 <_free_r+0x164>)
 801707c:	207e      	movs	r0, #126	; 0x7e
 801707e:	42b5      	cmp	r5, r6
 8017080:	d8d9      	bhi.n	8017036 <_free_r+0xea>
 8017082:	0c98      	lsrs	r0, r3, #18
 8017084:	307c      	adds	r0, #124	; 0x7c
 8017086:	e7d6      	b.n	8017036 <_free_r+0xea>
 8017088:	68ad      	ldr	r5, [r5, #8]
 801708a:	42ae      	cmp	r6, r5
 801708c:	d003      	beq.n	8017096 <_free_r+0x14a>
 801708e:	686a      	ldr	r2, [r5, #4]
 8017090:	43ba      	bics	r2, r7
 8017092:	429a      	cmp	r2, r3
 8017094:	d8f8      	bhi.n	8017088 <_free_r+0x13c>
 8017096:	68ee      	ldr	r6, [r5, #12]
 8017098:	e7d9      	b.n	801704e <_free_r+0x102>
 801709a:	46c0      	nop			; (mov r8, r8)
 801709c:	20000674 	.word	0x20000674
 80170a0:	20000a80 	.word	0x20000a80
 80170a4:	200067f0 	.word	0x200067f0
 80170a8:	2000067c 	.word	0x2000067c
 80170ac:	000001ff 	.word	0x000001ff
 80170b0:	00000554 	.word	0x00000554

080170b4 <rshift>:
 80170b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170b6:	0004      	movs	r4, r0
 80170b8:	6905      	ldr	r5, [r0, #16]
 80170ba:	3414      	adds	r4, #20
 80170bc:	114b      	asrs	r3, r1, #5
 80170be:	0026      	movs	r6, r4
 80170c0:	429d      	cmp	r5, r3
 80170c2:	dd14      	ble.n	80170ee <rshift+0x3a>
 80170c4:	221f      	movs	r2, #31
 80170c6:	00ad      	lsls	r5, r5, #2
 80170c8:	009b      	lsls	r3, r3, #2
 80170ca:	4011      	ands	r1, r2
 80170cc:	1965      	adds	r5, r4, r5
 80170ce:	18e3      	adds	r3, r4, r3
 80170d0:	0022      	movs	r2, r4
 80170d2:	2900      	cmp	r1, #0
 80170d4:	d01e      	beq.n	8017114 <rshift+0x60>
 80170d6:	cb04      	ldmia	r3!, {r2}
 80170d8:	2720      	movs	r7, #32
 80170da:	40ca      	lsrs	r2, r1
 80170dc:	46a4      	mov	ip, r4
 80170de:	1a7f      	subs	r7, r7, r1
 80170e0:	4666      	mov	r6, ip
 80170e2:	429d      	cmp	r5, r3
 80170e4:	d80b      	bhi.n	80170fe <rshift+0x4a>
 80170e6:	6032      	str	r2, [r6, #0]
 80170e8:	2a00      	cmp	r2, #0
 80170ea:	d000      	beq.n	80170ee <rshift+0x3a>
 80170ec:	3604      	adds	r6, #4
 80170ee:	1b33      	subs	r3, r6, r4
 80170f0:	109b      	asrs	r3, r3, #2
 80170f2:	6103      	str	r3, [r0, #16]
 80170f4:	42a6      	cmp	r6, r4
 80170f6:	d101      	bne.n	80170fc <rshift+0x48>
 80170f8:	2300      	movs	r3, #0
 80170fa:	6143      	str	r3, [r0, #20]
 80170fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170fe:	681e      	ldr	r6, [r3, #0]
 8017100:	40be      	lsls	r6, r7
 8017102:	4332      	orrs	r2, r6
 8017104:	4666      	mov	r6, ip
 8017106:	c604      	stmia	r6!, {r2}
 8017108:	cb04      	ldmia	r3!, {r2}
 801710a:	46b4      	mov	ip, r6
 801710c:	40ca      	lsrs	r2, r1
 801710e:	e7e7      	b.n	80170e0 <rshift+0x2c>
 8017110:	cb02      	ldmia	r3!, {r1}
 8017112:	c202      	stmia	r2!, {r1}
 8017114:	0016      	movs	r6, r2
 8017116:	429d      	cmp	r5, r3
 8017118:	d8fa      	bhi.n	8017110 <rshift+0x5c>
 801711a:	e7e8      	b.n	80170ee <rshift+0x3a>

0801711c <__hexdig_fun>:
 801711c:	0003      	movs	r3, r0
 801711e:	3b30      	subs	r3, #48	; 0x30
 8017120:	2b09      	cmp	r3, #9
 8017122:	d803      	bhi.n	801712c <__hexdig_fun+0x10>
 8017124:	3820      	subs	r0, #32
 8017126:	b2c3      	uxtb	r3, r0
 8017128:	0018      	movs	r0, r3
 801712a:	4770      	bx	lr
 801712c:	0003      	movs	r3, r0
 801712e:	3b61      	subs	r3, #97	; 0x61
 8017130:	2b05      	cmp	r3, #5
 8017132:	d801      	bhi.n	8017138 <__hexdig_fun+0x1c>
 8017134:	3847      	subs	r0, #71	; 0x47
 8017136:	e7f6      	b.n	8017126 <__hexdig_fun+0xa>
 8017138:	0002      	movs	r2, r0
 801713a:	3a41      	subs	r2, #65	; 0x41
 801713c:	2300      	movs	r3, #0
 801713e:	2a05      	cmp	r2, #5
 8017140:	d8f2      	bhi.n	8017128 <__hexdig_fun+0xc>
 8017142:	3827      	subs	r0, #39	; 0x27
 8017144:	e7ef      	b.n	8017126 <__hexdig_fun+0xa>

08017146 <__gethex>:
 8017146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017148:	b08d      	sub	sp, #52	; 0x34
 801714a:	9005      	str	r0, [sp, #20]
 801714c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801714e:	9109      	str	r1, [sp, #36]	; 0x24
 8017150:	9202      	str	r2, [sp, #8]
 8017152:	930a      	str	r3, [sp, #40]	; 0x28
 8017154:	f000 fadf 	bl	8017716 <__localeconv_l>
 8017158:	6803      	ldr	r3, [r0, #0]
 801715a:	0018      	movs	r0, r3
 801715c:	9307      	str	r3, [sp, #28]
 801715e:	f7e8 ffdb 	bl	8000118 <strlen>
 8017162:	2202      	movs	r2, #2
 8017164:	9b07      	ldr	r3, [sp, #28]
 8017166:	4252      	negs	r2, r2
 8017168:	181b      	adds	r3, r3, r0
 801716a:	3b01      	subs	r3, #1
 801716c:	781b      	ldrb	r3, [r3, #0]
 801716e:	9004      	str	r0, [sp, #16]
 8017170:	930b      	str	r3, [sp, #44]	; 0x2c
 8017172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017174:	6819      	ldr	r1, [r3, #0]
 8017176:	1c8b      	adds	r3, r1, #2
 8017178:	1a52      	subs	r2, r2, r1
 801717a:	18d1      	adds	r1, r2, r3
 801717c:	9301      	str	r3, [sp, #4]
 801717e:	9108      	str	r1, [sp, #32]
 8017180:	9901      	ldr	r1, [sp, #4]
 8017182:	3301      	adds	r3, #1
 8017184:	7808      	ldrb	r0, [r1, #0]
 8017186:	2830      	cmp	r0, #48	; 0x30
 8017188:	d0f7      	beq.n	801717a <__gethex+0x34>
 801718a:	f7ff ffc7 	bl	801711c <__hexdig_fun>
 801718e:	1e07      	subs	r7, r0, #0
 8017190:	d000      	beq.n	8017194 <__gethex+0x4e>
 8017192:	e06f      	b.n	8017274 <__gethex+0x12e>
 8017194:	9a04      	ldr	r2, [sp, #16]
 8017196:	9907      	ldr	r1, [sp, #28]
 8017198:	9801      	ldr	r0, [sp, #4]
 801719a:	f7fc fe4b 	bl	8013e34 <strncmp>
 801719e:	2800      	cmp	r0, #0
 80171a0:	d000      	beq.n	80171a4 <__gethex+0x5e>
 80171a2:	e06d      	b.n	8017280 <__gethex+0x13a>
 80171a4:	9b01      	ldr	r3, [sp, #4]
 80171a6:	9a04      	ldr	r2, [sp, #16]
 80171a8:	189c      	adds	r4, r3, r2
 80171aa:	7820      	ldrb	r0, [r4, #0]
 80171ac:	f7ff ffb6 	bl	801711c <__hexdig_fun>
 80171b0:	2800      	cmp	r0, #0
 80171b2:	d069      	beq.n	8017288 <__gethex+0x142>
 80171b4:	9401      	str	r4, [sp, #4]
 80171b6:	9b01      	ldr	r3, [sp, #4]
 80171b8:	7818      	ldrb	r0, [r3, #0]
 80171ba:	2830      	cmp	r0, #48	; 0x30
 80171bc:	d009      	beq.n	80171d2 <__gethex+0x8c>
 80171be:	f7ff ffad 	bl	801711c <__hexdig_fun>
 80171c2:	4243      	negs	r3, r0
 80171c4:	4143      	adcs	r3, r0
 80171c6:	9303      	str	r3, [sp, #12]
 80171c8:	2301      	movs	r3, #1
 80171ca:	0026      	movs	r6, r4
 80171cc:	9308      	str	r3, [sp, #32]
 80171ce:	9c01      	ldr	r4, [sp, #4]
 80171d0:	e004      	b.n	80171dc <__gethex+0x96>
 80171d2:	9b01      	ldr	r3, [sp, #4]
 80171d4:	3301      	adds	r3, #1
 80171d6:	9301      	str	r3, [sp, #4]
 80171d8:	e7ed      	b.n	80171b6 <__gethex+0x70>
 80171da:	3401      	adds	r4, #1
 80171dc:	7820      	ldrb	r0, [r4, #0]
 80171de:	f7ff ff9d 	bl	801711c <__hexdig_fun>
 80171e2:	2800      	cmp	r0, #0
 80171e4:	d1f9      	bne.n	80171da <__gethex+0x94>
 80171e6:	9a04      	ldr	r2, [sp, #16]
 80171e8:	9907      	ldr	r1, [sp, #28]
 80171ea:	0020      	movs	r0, r4
 80171ec:	f7fc fe22 	bl	8013e34 <strncmp>
 80171f0:	2800      	cmp	r0, #0
 80171f2:	d109      	bne.n	8017208 <__gethex+0xc2>
 80171f4:	2e00      	cmp	r6, #0
 80171f6:	d10a      	bne.n	801720e <__gethex+0xc8>
 80171f8:	9b04      	ldr	r3, [sp, #16]
 80171fa:	18e4      	adds	r4, r4, r3
 80171fc:	0026      	movs	r6, r4
 80171fe:	7820      	ldrb	r0, [r4, #0]
 8017200:	f7ff ff8c 	bl	801711c <__hexdig_fun>
 8017204:	2800      	cmp	r0, #0
 8017206:	d139      	bne.n	801727c <__gethex+0x136>
 8017208:	2700      	movs	r7, #0
 801720a:	42be      	cmp	r6, r7
 801720c:	d001      	beq.n	8017212 <__gethex+0xcc>
 801720e:	1b37      	subs	r7, r6, r4
 8017210:	00bf      	lsls	r7, r7, #2
 8017212:	7823      	ldrb	r3, [r4, #0]
 8017214:	2b50      	cmp	r3, #80	; 0x50
 8017216:	d001      	beq.n	801721c <__gethex+0xd6>
 8017218:	2b70      	cmp	r3, #112	; 0x70
 801721a:	d142      	bne.n	80172a2 <__gethex+0x15c>
 801721c:	7863      	ldrb	r3, [r4, #1]
 801721e:	2b2b      	cmp	r3, #43	; 0x2b
 8017220:	d034      	beq.n	801728c <__gethex+0x146>
 8017222:	2b2d      	cmp	r3, #45	; 0x2d
 8017224:	d036      	beq.n	8017294 <__gethex+0x14e>
 8017226:	2300      	movs	r3, #0
 8017228:	1c66      	adds	r6, r4, #1
 801722a:	9306      	str	r3, [sp, #24]
 801722c:	7830      	ldrb	r0, [r6, #0]
 801722e:	f7ff ff75 	bl	801711c <__hexdig_fun>
 8017232:	1e43      	subs	r3, r0, #1
 8017234:	b2db      	uxtb	r3, r3
 8017236:	2b18      	cmp	r3, #24
 8017238:	d833      	bhi.n	80172a2 <__gethex+0x15c>
 801723a:	3810      	subs	r0, #16
 801723c:	0005      	movs	r5, r0
 801723e:	3601      	adds	r6, #1
 8017240:	7830      	ldrb	r0, [r6, #0]
 8017242:	f7ff ff6b 	bl	801711c <__hexdig_fun>
 8017246:	1e43      	subs	r3, r0, #1
 8017248:	b2db      	uxtb	r3, r3
 801724a:	2b18      	cmp	r3, #24
 801724c:	d924      	bls.n	8017298 <__gethex+0x152>
 801724e:	9b06      	ldr	r3, [sp, #24]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d000      	beq.n	8017256 <__gethex+0x110>
 8017254:	426d      	negs	r5, r5
 8017256:	197f      	adds	r7, r7, r5
 8017258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801725a:	601e      	str	r6, [r3, #0]
 801725c:	9b03      	ldr	r3, [sp, #12]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d021      	beq.n	80172a6 <__gethex+0x160>
 8017262:	9b08      	ldr	r3, [sp, #32]
 8017264:	2606      	movs	r6, #6
 8017266:	425a      	negs	r2, r3
 8017268:	4153      	adcs	r3, r2
 801726a:	425b      	negs	r3, r3
 801726c:	401e      	ands	r6, r3
 801726e:	0030      	movs	r0, r6
 8017270:	b00d      	add	sp, #52	; 0x34
 8017272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017274:	2300      	movs	r3, #0
 8017276:	9303      	str	r3, [sp, #12]
 8017278:	001e      	movs	r6, r3
 801727a:	e7a8      	b.n	80171ce <__gethex+0x88>
 801727c:	3401      	adds	r4, #1
 801727e:	e7be      	b.n	80171fe <__gethex+0xb8>
 8017280:	9c01      	ldr	r4, [sp, #4]
 8017282:	2301      	movs	r3, #1
 8017284:	9303      	str	r3, [sp, #12]
 8017286:	e7c4      	b.n	8017212 <__gethex+0xcc>
 8017288:	0007      	movs	r7, r0
 801728a:	e7fa      	b.n	8017282 <__gethex+0x13c>
 801728c:	2300      	movs	r3, #0
 801728e:	9306      	str	r3, [sp, #24]
 8017290:	1ca6      	adds	r6, r4, #2
 8017292:	e7cb      	b.n	801722c <__gethex+0xe6>
 8017294:	2301      	movs	r3, #1
 8017296:	e7fa      	b.n	801728e <__gethex+0x148>
 8017298:	230a      	movs	r3, #10
 801729a:	435d      	muls	r5, r3
 801729c:	182d      	adds	r5, r5, r0
 801729e:	3d10      	subs	r5, #16
 80172a0:	e7cd      	b.n	801723e <__gethex+0xf8>
 80172a2:	0026      	movs	r6, r4
 80172a4:	e7d8      	b.n	8017258 <__gethex+0x112>
 80172a6:	9b01      	ldr	r3, [sp, #4]
 80172a8:	9903      	ldr	r1, [sp, #12]
 80172aa:	1ae3      	subs	r3, r4, r3
 80172ac:	3b01      	subs	r3, #1
 80172ae:	2b07      	cmp	r3, #7
 80172b0:	dc47      	bgt.n	8017342 <__gethex+0x1fc>
 80172b2:	9805      	ldr	r0, [sp, #20]
 80172b4:	f000 fa5e 	bl	8017774 <_Balloc>
 80172b8:	0003      	movs	r3, r0
 80172ba:	3314      	adds	r3, #20
 80172bc:	9303      	str	r3, [sp, #12]
 80172be:	9308      	str	r3, [sp, #32]
 80172c0:	2300      	movs	r3, #0
 80172c2:	0005      	movs	r5, r0
 80172c4:	001e      	movs	r6, r3
 80172c6:	9306      	str	r3, [sp, #24]
 80172c8:	9b01      	ldr	r3, [sp, #4]
 80172ca:	42a3      	cmp	r3, r4
 80172cc:	d33c      	bcc.n	8017348 <__gethex+0x202>
 80172ce:	9c08      	ldr	r4, [sp, #32]
 80172d0:	9b03      	ldr	r3, [sp, #12]
 80172d2:	c440      	stmia	r4!, {r6}
 80172d4:	1ae4      	subs	r4, r4, r3
 80172d6:	10a4      	asrs	r4, r4, #2
 80172d8:	612c      	str	r4, [r5, #16]
 80172da:	0030      	movs	r0, r6
 80172dc:	f000 faf8 	bl	80178d0 <__hi0bits>
 80172e0:	9b02      	ldr	r3, [sp, #8]
 80172e2:	0164      	lsls	r4, r4, #5
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	1a26      	subs	r6, r4, r0
 80172e8:	9301      	str	r3, [sp, #4]
 80172ea:	429e      	cmp	r6, r3
 80172ec:	dd5f      	ble.n	80173ae <__gethex+0x268>
 80172ee:	1af6      	subs	r6, r6, r3
 80172f0:	0031      	movs	r1, r6
 80172f2:	0028      	movs	r0, r5
 80172f4:	f000 fde3 	bl	8017ebe <__any_on>
 80172f8:	1e04      	subs	r4, r0, #0
 80172fa:	d00f      	beq.n	801731c <__gethex+0x1d6>
 80172fc:	2401      	movs	r4, #1
 80172fe:	211f      	movs	r1, #31
 8017300:	0020      	movs	r0, r4
 8017302:	1e73      	subs	r3, r6, #1
 8017304:	4019      	ands	r1, r3
 8017306:	4088      	lsls	r0, r1
 8017308:	0001      	movs	r1, r0
 801730a:	115a      	asrs	r2, r3, #5
 801730c:	9803      	ldr	r0, [sp, #12]
 801730e:	0092      	lsls	r2, r2, #2
 8017310:	5812      	ldr	r2, [r2, r0]
 8017312:	420a      	tst	r2, r1
 8017314:	d002      	beq.n	801731c <__gethex+0x1d6>
 8017316:	42a3      	cmp	r3, r4
 8017318:	dc41      	bgt.n	801739e <__gethex+0x258>
 801731a:	2402      	movs	r4, #2
 801731c:	0031      	movs	r1, r6
 801731e:	0028      	movs	r0, r5
 8017320:	f7ff fec8 	bl	80170b4 <rshift>
 8017324:	19bf      	adds	r7, r7, r6
 8017326:	9b02      	ldr	r3, [sp, #8]
 8017328:	689b      	ldr	r3, [r3, #8]
 801732a:	9304      	str	r3, [sp, #16]
 801732c:	42bb      	cmp	r3, r7
 801732e:	da4e      	bge.n	80173ce <__gethex+0x288>
 8017330:	0029      	movs	r1, r5
 8017332:	9805      	ldr	r0, [sp, #20]
 8017334:	f000 fa46 	bl	80177c4 <_Bfree>
 8017338:	2300      	movs	r3, #0
 801733a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801733c:	26a3      	movs	r6, #163	; 0xa3
 801733e:	6013      	str	r3, [r2, #0]
 8017340:	e795      	b.n	801726e <__gethex+0x128>
 8017342:	3101      	adds	r1, #1
 8017344:	105b      	asrs	r3, r3, #1
 8017346:	e7b2      	b.n	80172ae <__gethex+0x168>
 8017348:	1e63      	subs	r3, r4, #1
 801734a:	9309      	str	r3, [sp, #36]	; 0x24
 801734c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	4293      	cmp	r3, r2
 8017352:	d015      	beq.n	8017380 <__gethex+0x23a>
 8017354:	9b06      	ldr	r3, [sp, #24]
 8017356:	2b20      	cmp	r3, #32
 8017358:	d105      	bne.n	8017366 <__gethex+0x220>
 801735a:	9b08      	ldr	r3, [sp, #32]
 801735c:	601e      	str	r6, [r3, #0]
 801735e:	2600      	movs	r6, #0
 8017360:	3304      	adds	r3, #4
 8017362:	9308      	str	r3, [sp, #32]
 8017364:	9606      	str	r6, [sp, #24]
 8017366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017368:	7818      	ldrb	r0, [r3, #0]
 801736a:	f7ff fed7 	bl	801711c <__hexdig_fun>
 801736e:	230f      	movs	r3, #15
 8017370:	4018      	ands	r0, r3
 8017372:	9b06      	ldr	r3, [sp, #24]
 8017374:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017376:	4098      	lsls	r0, r3
 8017378:	3304      	adds	r3, #4
 801737a:	4306      	orrs	r6, r0
 801737c:	9306      	str	r3, [sp, #24]
 801737e:	e7a3      	b.n	80172c8 <__gethex+0x182>
 8017380:	2301      	movs	r3, #1
 8017382:	9a04      	ldr	r2, [sp, #16]
 8017384:	1a9c      	subs	r4, r3, r2
 8017386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017388:	191c      	adds	r4, r3, r4
 801738a:	9b01      	ldr	r3, [sp, #4]
 801738c:	429c      	cmp	r4, r3
 801738e:	d3e1      	bcc.n	8017354 <__gethex+0x20e>
 8017390:	9907      	ldr	r1, [sp, #28]
 8017392:	0020      	movs	r0, r4
 8017394:	f7fc fd4e 	bl	8013e34 <strncmp>
 8017398:	2800      	cmp	r0, #0
 801739a:	d1db      	bne.n	8017354 <__gethex+0x20e>
 801739c:	e794      	b.n	80172c8 <__gethex+0x182>
 801739e:	1eb1      	subs	r1, r6, #2
 80173a0:	0028      	movs	r0, r5
 80173a2:	f000 fd8c 	bl	8017ebe <__any_on>
 80173a6:	2800      	cmp	r0, #0
 80173a8:	d0b7      	beq.n	801731a <__gethex+0x1d4>
 80173aa:	2403      	movs	r4, #3
 80173ac:	e7b6      	b.n	801731c <__gethex+0x1d6>
 80173ae:	9b01      	ldr	r3, [sp, #4]
 80173b0:	2400      	movs	r4, #0
 80173b2:	429e      	cmp	r6, r3
 80173b4:	dab7      	bge.n	8017326 <__gethex+0x1e0>
 80173b6:	1b9e      	subs	r6, r3, r6
 80173b8:	0029      	movs	r1, r5
 80173ba:	0032      	movs	r2, r6
 80173bc:	9805      	ldr	r0, [sp, #20]
 80173be:	f000 fbab 	bl	8017b18 <__lshift>
 80173c2:	0003      	movs	r3, r0
 80173c4:	3314      	adds	r3, #20
 80173c6:	0005      	movs	r5, r0
 80173c8:	1bbf      	subs	r7, r7, r6
 80173ca:	9303      	str	r3, [sp, #12]
 80173cc:	e7ab      	b.n	8017326 <__gethex+0x1e0>
 80173ce:	9b02      	ldr	r3, [sp, #8]
 80173d0:	685e      	ldr	r6, [r3, #4]
 80173d2:	42be      	cmp	r6, r7
 80173d4:	dd6b      	ble.n	80174ae <__gethex+0x368>
 80173d6:	9b01      	ldr	r3, [sp, #4]
 80173d8:	1bf6      	subs	r6, r6, r7
 80173da:	42b3      	cmp	r3, r6
 80173dc:	dc32      	bgt.n	8017444 <__gethex+0x2fe>
 80173de:	9b02      	ldr	r3, [sp, #8]
 80173e0:	68db      	ldr	r3, [r3, #12]
 80173e2:	2b02      	cmp	r3, #2
 80173e4:	d026      	beq.n	8017434 <__gethex+0x2ee>
 80173e6:	2b03      	cmp	r3, #3
 80173e8:	d028      	beq.n	801743c <__gethex+0x2f6>
 80173ea:	2b01      	cmp	r3, #1
 80173ec:	d119      	bne.n	8017422 <__gethex+0x2dc>
 80173ee:	9b01      	ldr	r3, [sp, #4]
 80173f0:	42b3      	cmp	r3, r6
 80173f2:	d116      	bne.n	8017422 <__gethex+0x2dc>
 80173f4:	2b01      	cmp	r3, #1
 80173f6:	dc0d      	bgt.n	8017414 <__gethex+0x2ce>
 80173f8:	9b02      	ldr	r3, [sp, #8]
 80173fa:	2662      	movs	r6, #98	; 0x62
 80173fc:	685b      	ldr	r3, [r3, #4]
 80173fe:	9301      	str	r3, [sp, #4]
 8017400:	9a01      	ldr	r2, [sp, #4]
 8017402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017404:	601a      	str	r2, [r3, #0]
 8017406:	2301      	movs	r3, #1
 8017408:	9a03      	ldr	r2, [sp, #12]
 801740a:	612b      	str	r3, [r5, #16]
 801740c:	6013      	str	r3, [r2, #0]
 801740e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017410:	601d      	str	r5, [r3, #0]
 8017412:	e72c      	b.n	801726e <__gethex+0x128>
 8017414:	9901      	ldr	r1, [sp, #4]
 8017416:	0028      	movs	r0, r5
 8017418:	3901      	subs	r1, #1
 801741a:	f000 fd50 	bl	8017ebe <__any_on>
 801741e:	2800      	cmp	r0, #0
 8017420:	d1ea      	bne.n	80173f8 <__gethex+0x2b2>
 8017422:	0029      	movs	r1, r5
 8017424:	9805      	ldr	r0, [sp, #20]
 8017426:	f000 f9cd 	bl	80177c4 <_Bfree>
 801742a:	2300      	movs	r3, #0
 801742c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801742e:	2650      	movs	r6, #80	; 0x50
 8017430:	6013      	str	r3, [r2, #0]
 8017432:	e71c      	b.n	801726e <__gethex+0x128>
 8017434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017436:	2b00      	cmp	r3, #0
 8017438:	d0de      	beq.n	80173f8 <__gethex+0x2b2>
 801743a:	e7f2      	b.n	8017422 <__gethex+0x2dc>
 801743c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801743e:	2b00      	cmp	r3, #0
 8017440:	d1da      	bne.n	80173f8 <__gethex+0x2b2>
 8017442:	e7ee      	b.n	8017422 <__gethex+0x2dc>
 8017444:	1e77      	subs	r7, r6, #1
 8017446:	2c00      	cmp	r4, #0
 8017448:	d12f      	bne.n	80174aa <__gethex+0x364>
 801744a:	2f00      	cmp	r7, #0
 801744c:	d004      	beq.n	8017458 <__gethex+0x312>
 801744e:	0039      	movs	r1, r7
 8017450:	0028      	movs	r0, r5
 8017452:	f000 fd34 	bl	8017ebe <__any_on>
 8017456:	0004      	movs	r4, r0
 8017458:	231f      	movs	r3, #31
 801745a:	117a      	asrs	r2, r7, #5
 801745c:	401f      	ands	r7, r3
 801745e:	3b1e      	subs	r3, #30
 8017460:	40bb      	lsls	r3, r7
 8017462:	9903      	ldr	r1, [sp, #12]
 8017464:	0092      	lsls	r2, r2, #2
 8017466:	5852      	ldr	r2, [r2, r1]
 8017468:	421a      	tst	r2, r3
 801746a:	d001      	beq.n	8017470 <__gethex+0x32a>
 801746c:	2302      	movs	r3, #2
 801746e:	431c      	orrs	r4, r3
 8017470:	9b01      	ldr	r3, [sp, #4]
 8017472:	0031      	movs	r1, r6
 8017474:	1b9b      	subs	r3, r3, r6
 8017476:	2602      	movs	r6, #2
 8017478:	0028      	movs	r0, r5
 801747a:	9301      	str	r3, [sp, #4]
 801747c:	f7ff fe1a 	bl	80170b4 <rshift>
 8017480:	9b02      	ldr	r3, [sp, #8]
 8017482:	685f      	ldr	r7, [r3, #4]
 8017484:	2c00      	cmp	r4, #0
 8017486:	d040      	beq.n	801750a <__gethex+0x3c4>
 8017488:	9b02      	ldr	r3, [sp, #8]
 801748a:	68db      	ldr	r3, [r3, #12]
 801748c:	2b02      	cmp	r3, #2
 801748e:	d010      	beq.n	80174b2 <__gethex+0x36c>
 8017490:	2b03      	cmp	r3, #3
 8017492:	d012      	beq.n	80174ba <__gethex+0x374>
 8017494:	2b01      	cmp	r3, #1
 8017496:	d106      	bne.n	80174a6 <__gethex+0x360>
 8017498:	07a2      	lsls	r2, r4, #30
 801749a:	d504      	bpl.n	80174a6 <__gethex+0x360>
 801749c:	9a03      	ldr	r2, [sp, #12]
 801749e:	6812      	ldr	r2, [r2, #0]
 80174a0:	4314      	orrs	r4, r2
 80174a2:	421c      	tst	r4, r3
 80174a4:	d10c      	bne.n	80174c0 <__gethex+0x37a>
 80174a6:	2310      	movs	r3, #16
 80174a8:	e02e      	b.n	8017508 <__gethex+0x3c2>
 80174aa:	2401      	movs	r4, #1
 80174ac:	e7d4      	b.n	8017458 <__gethex+0x312>
 80174ae:	2601      	movs	r6, #1
 80174b0:	e7e8      	b.n	8017484 <__gethex+0x33e>
 80174b2:	2301      	movs	r3, #1
 80174b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80174b6:	1a9b      	subs	r3, r3, r2
 80174b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80174ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d0f2      	beq.n	80174a6 <__gethex+0x360>
 80174c0:	692c      	ldr	r4, [r5, #16]
 80174c2:	00a3      	lsls	r3, r4, #2
 80174c4:	9304      	str	r3, [sp, #16]
 80174c6:	002b      	movs	r3, r5
 80174c8:	00a2      	lsls	r2, r4, #2
 80174ca:	3314      	adds	r3, #20
 80174cc:	1899      	adds	r1, r3, r2
 80174ce:	2200      	movs	r2, #0
 80174d0:	4694      	mov	ip, r2
 80174d2:	681a      	ldr	r2, [r3, #0]
 80174d4:	1c50      	adds	r0, r2, #1
 80174d6:	d01d      	beq.n	8017514 <__gethex+0x3ce>
 80174d8:	3201      	adds	r2, #1
 80174da:	601a      	str	r2, [r3, #0]
 80174dc:	002b      	movs	r3, r5
 80174de:	3314      	adds	r3, #20
 80174e0:	2e02      	cmp	r6, #2
 80174e2:	d13a      	bne.n	801755a <__gethex+0x414>
 80174e4:	9a02      	ldr	r2, [sp, #8]
 80174e6:	9901      	ldr	r1, [sp, #4]
 80174e8:	6812      	ldr	r2, [r2, #0]
 80174ea:	3a01      	subs	r2, #1
 80174ec:	428a      	cmp	r2, r1
 80174ee:	d10a      	bne.n	8017506 <__gethex+0x3c0>
 80174f0:	114a      	asrs	r2, r1, #5
 80174f2:	211f      	movs	r1, #31
 80174f4:	9801      	ldr	r0, [sp, #4]
 80174f6:	0092      	lsls	r2, r2, #2
 80174f8:	4001      	ands	r1, r0
 80174fa:	2001      	movs	r0, #1
 80174fc:	0004      	movs	r4, r0
 80174fe:	408c      	lsls	r4, r1
 8017500:	58d3      	ldr	r3, [r2, r3]
 8017502:	4223      	tst	r3, r4
 8017504:	d148      	bne.n	8017598 <__gethex+0x452>
 8017506:	2320      	movs	r3, #32
 8017508:	431e      	orrs	r6, r3
 801750a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801750c:	601d      	str	r5, [r3, #0]
 801750e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017510:	601f      	str	r7, [r3, #0]
 8017512:	e6ac      	b.n	801726e <__gethex+0x128>
 8017514:	4662      	mov	r2, ip
 8017516:	c304      	stmia	r3!, {r2}
 8017518:	4299      	cmp	r1, r3
 801751a:	d8da      	bhi.n	80174d2 <__gethex+0x38c>
 801751c:	68ab      	ldr	r3, [r5, #8]
 801751e:	429c      	cmp	r4, r3
 8017520:	db12      	blt.n	8017548 <__gethex+0x402>
 8017522:	686b      	ldr	r3, [r5, #4]
 8017524:	9805      	ldr	r0, [sp, #20]
 8017526:	1c59      	adds	r1, r3, #1
 8017528:	f000 f924 	bl	8017774 <_Balloc>
 801752c:	0029      	movs	r1, r5
 801752e:	692b      	ldr	r3, [r5, #16]
 8017530:	9003      	str	r0, [sp, #12]
 8017532:	1c9a      	adds	r2, r3, #2
 8017534:	0092      	lsls	r2, r2, #2
 8017536:	310c      	adds	r1, #12
 8017538:	300c      	adds	r0, #12
 801753a:	f7fc fa34 	bl	80139a6 <memcpy>
 801753e:	0029      	movs	r1, r5
 8017540:	9805      	ldr	r0, [sp, #20]
 8017542:	f000 f93f 	bl	80177c4 <_Bfree>
 8017546:	9d03      	ldr	r5, [sp, #12]
 8017548:	692b      	ldr	r3, [r5, #16]
 801754a:	1c5a      	adds	r2, r3, #1
 801754c:	612a      	str	r2, [r5, #16]
 801754e:	2201      	movs	r2, #1
 8017550:	3304      	adds	r3, #4
 8017552:	009b      	lsls	r3, r3, #2
 8017554:	18eb      	adds	r3, r5, r3
 8017556:	605a      	str	r2, [r3, #4]
 8017558:	e7c0      	b.n	80174dc <__gethex+0x396>
 801755a:	692a      	ldr	r2, [r5, #16]
 801755c:	42a2      	cmp	r2, r4
 801755e:	dd0a      	ble.n	8017576 <__gethex+0x430>
 8017560:	2101      	movs	r1, #1
 8017562:	0028      	movs	r0, r5
 8017564:	f7ff fda6 	bl	80170b4 <rshift>
 8017568:	9b02      	ldr	r3, [sp, #8]
 801756a:	3701      	adds	r7, #1
 801756c:	689b      	ldr	r3, [r3, #8]
 801756e:	2601      	movs	r6, #1
 8017570:	42bb      	cmp	r3, r7
 8017572:	dac8      	bge.n	8017506 <__gethex+0x3c0>
 8017574:	e6dc      	b.n	8017330 <__gethex+0x1ea>
 8017576:	241f      	movs	r4, #31
 8017578:	9a01      	ldr	r2, [sp, #4]
 801757a:	2601      	movs	r6, #1
 801757c:	4022      	ands	r2, r4
 801757e:	1e14      	subs	r4, r2, #0
 8017580:	d0c1      	beq.n	8017506 <__gethex+0x3c0>
 8017582:	9a04      	ldr	r2, [sp, #16]
 8017584:	189b      	adds	r3, r3, r2
 8017586:	3b04      	subs	r3, #4
 8017588:	6818      	ldr	r0, [r3, #0]
 801758a:	f000 f9a1 	bl	80178d0 <__hi0bits>
 801758e:	2120      	movs	r1, #32
 8017590:	1b0c      	subs	r4, r1, r4
 8017592:	42a0      	cmp	r0, r4
 8017594:	dbe4      	blt.n	8017560 <__gethex+0x41a>
 8017596:	e7b6      	b.n	8017506 <__gethex+0x3c0>
 8017598:	0006      	movs	r6, r0
 801759a:	e7b4      	b.n	8017506 <__gethex+0x3c0>

0801759c <L_shift>:
 801759c:	2308      	movs	r3, #8
 801759e:	b570      	push	{r4, r5, r6, lr}
 80175a0:	2520      	movs	r5, #32
 80175a2:	1a9a      	subs	r2, r3, r2
 80175a4:	0092      	lsls	r2, r2, #2
 80175a6:	1aad      	subs	r5, r5, r2
 80175a8:	6843      	ldr	r3, [r0, #4]
 80175aa:	6806      	ldr	r6, [r0, #0]
 80175ac:	001c      	movs	r4, r3
 80175ae:	40ac      	lsls	r4, r5
 80175b0:	40d3      	lsrs	r3, r2
 80175b2:	4334      	orrs	r4, r6
 80175b4:	6004      	str	r4, [r0, #0]
 80175b6:	6043      	str	r3, [r0, #4]
 80175b8:	3004      	adds	r0, #4
 80175ba:	4288      	cmp	r0, r1
 80175bc:	d3f4      	bcc.n	80175a8 <L_shift+0xc>
 80175be:	bd70      	pop	{r4, r5, r6, pc}

080175c0 <__match>:
 80175c0:	b530      	push	{r4, r5, lr}
 80175c2:	6803      	ldr	r3, [r0, #0]
 80175c4:	780c      	ldrb	r4, [r1, #0]
 80175c6:	3301      	adds	r3, #1
 80175c8:	2c00      	cmp	r4, #0
 80175ca:	d102      	bne.n	80175d2 <__match+0x12>
 80175cc:	6003      	str	r3, [r0, #0]
 80175ce:	2001      	movs	r0, #1
 80175d0:	bd30      	pop	{r4, r5, pc}
 80175d2:	781a      	ldrb	r2, [r3, #0]
 80175d4:	0015      	movs	r5, r2
 80175d6:	3d41      	subs	r5, #65	; 0x41
 80175d8:	2d19      	cmp	r5, #25
 80175da:	d800      	bhi.n	80175de <__match+0x1e>
 80175dc:	3220      	adds	r2, #32
 80175de:	3101      	adds	r1, #1
 80175e0:	42a2      	cmp	r2, r4
 80175e2:	d0ef      	beq.n	80175c4 <__match+0x4>
 80175e4:	2000      	movs	r0, #0
 80175e6:	e7f3      	b.n	80175d0 <__match+0x10>

080175e8 <__hexnan>:
 80175e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175ea:	b08b      	sub	sp, #44	; 0x2c
 80175ec:	9201      	str	r2, [sp, #4]
 80175ee:	680a      	ldr	r2, [r1, #0]
 80175f0:	9901      	ldr	r1, [sp, #4]
 80175f2:	1153      	asrs	r3, r2, #5
 80175f4:	009b      	lsls	r3, r3, #2
 80175f6:	18cb      	adds	r3, r1, r3
 80175f8:	9304      	str	r3, [sp, #16]
 80175fa:	231f      	movs	r3, #31
 80175fc:	401a      	ands	r2, r3
 80175fe:	9008      	str	r0, [sp, #32]
 8017600:	9206      	str	r2, [sp, #24]
 8017602:	d002      	beq.n	801760a <__hexnan+0x22>
 8017604:	9b04      	ldr	r3, [sp, #16]
 8017606:	3304      	adds	r3, #4
 8017608:	9304      	str	r3, [sp, #16]
 801760a:	9b04      	ldr	r3, [sp, #16]
 801760c:	2500      	movs	r5, #0
 801760e:	1f1e      	subs	r6, r3, #4
 8017610:	0037      	movs	r7, r6
 8017612:	0034      	movs	r4, r6
 8017614:	9b08      	ldr	r3, [sp, #32]
 8017616:	6035      	str	r5, [r6, #0]
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	9507      	str	r5, [sp, #28]
 801761c:	9305      	str	r3, [sp, #20]
 801761e:	9502      	str	r5, [sp, #8]
 8017620:	9b05      	ldr	r3, [sp, #20]
 8017622:	3301      	adds	r3, #1
 8017624:	9309      	str	r3, [sp, #36]	; 0x24
 8017626:	9b05      	ldr	r3, [sp, #20]
 8017628:	785b      	ldrb	r3, [r3, #1]
 801762a:	9303      	str	r3, [sp, #12]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d028      	beq.n	8017682 <__hexnan+0x9a>
 8017630:	9803      	ldr	r0, [sp, #12]
 8017632:	f7ff fd73 	bl	801711c <__hexdig_fun>
 8017636:	2800      	cmp	r0, #0
 8017638:	d145      	bne.n	80176c6 <__hexnan+0xde>
 801763a:	9b03      	ldr	r3, [sp, #12]
 801763c:	2b20      	cmp	r3, #32
 801763e:	d819      	bhi.n	8017674 <__hexnan+0x8c>
 8017640:	9b02      	ldr	r3, [sp, #8]
 8017642:	9a07      	ldr	r2, [sp, #28]
 8017644:	4293      	cmp	r3, r2
 8017646:	dd12      	ble.n	801766e <__hexnan+0x86>
 8017648:	42bc      	cmp	r4, r7
 801764a:	d206      	bcs.n	801765a <__hexnan+0x72>
 801764c:	2d07      	cmp	r5, #7
 801764e:	dc04      	bgt.n	801765a <__hexnan+0x72>
 8017650:	002a      	movs	r2, r5
 8017652:	0039      	movs	r1, r7
 8017654:	0020      	movs	r0, r4
 8017656:	f7ff ffa1 	bl	801759c <L_shift>
 801765a:	9b01      	ldr	r3, [sp, #4]
 801765c:	2508      	movs	r5, #8
 801765e:	429c      	cmp	r4, r3
 8017660:	d905      	bls.n	801766e <__hexnan+0x86>
 8017662:	1f27      	subs	r7, r4, #4
 8017664:	2500      	movs	r5, #0
 8017666:	003c      	movs	r4, r7
 8017668:	9b02      	ldr	r3, [sp, #8]
 801766a:	603d      	str	r5, [r7, #0]
 801766c:	9307      	str	r3, [sp, #28]
 801766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017670:	9305      	str	r3, [sp, #20]
 8017672:	e7d5      	b.n	8017620 <__hexnan+0x38>
 8017674:	9b03      	ldr	r3, [sp, #12]
 8017676:	2b29      	cmp	r3, #41	; 0x29
 8017678:	d14a      	bne.n	8017710 <__hexnan+0x128>
 801767a:	9b05      	ldr	r3, [sp, #20]
 801767c:	9a08      	ldr	r2, [sp, #32]
 801767e:	3302      	adds	r3, #2
 8017680:	6013      	str	r3, [r2, #0]
 8017682:	9b02      	ldr	r3, [sp, #8]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d043      	beq.n	8017710 <__hexnan+0x128>
 8017688:	42bc      	cmp	r4, r7
 801768a:	d206      	bcs.n	801769a <__hexnan+0xb2>
 801768c:	2d07      	cmp	r5, #7
 801768e:	dc04      	bgt.n	801769a <__hexnan+0xb2>
 8017690:	002a      	movs	r2, r5
 8017692:	0039      	movs	r1, r7
 8017694:	0020      	movs	r0, r4
 8017696:	f7ff ff81 	bl	801759c <L_shift>
 801769a:	9b01      	ldr	r3, [sp, #4]
 801769c:	429c      	cmp	r4, r3
 801769e:	d926      	bls.n	80176ee <__hexnan+0x106>
 80176a0:	cc04      	ldmia	r4!, {r2}
 80176a2:	601a      	str	r2, [r3, #0]
 80176a4:	3304      	adds	r3, #4
 80176a6:	42a6      	cmp	r6, r4
 80176a8:	d2fa      	bcs.n	80176a0 <__hexnan+0xb8>
 80176aa:	2200      	movs	r2, #0
 80176ac:	c304      	stmia	r3!, {r2}
 80176ae:	429e      	cmp	r6, r3
 80176b0:	d2fc      	bcs.n	80176ac <__hexnan+0xc4>
 80176b2:	6833      	ldr	r3, [r6, #0]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d104      	bne.n	80176c2 <__hexnan+0xda>
 80176b8:	9b01      	ldr	r3, [sp, #4]
 80176ba:	429e      	cmp	r6, r3
 80176bc:	d126      	bne.n	801770c <__hexnan+0x124>
 80176be:	2301      	movs	r3, #1
 80176c0:	6033      	str	r3, [r6, #0]
 80176c2:	2005      	movs	r0, #5
 80176c4:	e025      	b.n	8017712 <__hexnan+0x12a>
 80176c6:	9b02      	ldr	r3, [sp, #8]
 80176c8:	3501      	adds	r5, #1
 80176ca:	3301      	adds	r3, #1
 80176cc:	9302      	str	r3, [sp, #8]
 80176ce:	2d08      	cmp	r5, #8
 80176d0:	dd06      	ble.n	80176e0 <__hexnan+0xf8>
 80176d2:	9b01      	ldr	r3, [sp, #4]
 80176d4:	429c      	cmp	r4, r3
 80176d6:	d9ca      	bls.n	801766e <__hexnan+0x86>
 80176d8:	2300      	movs	r3, #0
 80176da:	2501      	movs	r5, #1
 80176dc:	3c04      	subs	r4, #4
 80176de:	6023      	str	r3, [r4, #0]
 80176e0:	220f      	movs	r2, #15
 80176e2:	6823      	ldr	r3, [r4, #0]
 80176e4:	4010      	ands	r0, r2
 80176e6:	011b      	lsls	r3, r3, #4
 80176e8:	4318      	orrs	r0, r3
 80176ea:	6020      	str	r0, [r4, #0]
 80176ec:	e7bf      	b.n	801766e <__hexnan+0x86>
 80176ee:	9b06      	ldr	r3, [sp, #24]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d0de      	beq.n	80176b2 <__hexnan+0xca>
 80176f4:	2120      	movs	r1, #32
 80176f6:	9a06      	ldr	r2, [sp, #24]
 80176f8:	9b04      	ldr	r3, [sp, #16]
 80176fa:	1a89      	subs	r1, r1, r2
 80176fc:	2201      	movs	r2, #1
 80176fe:	4252      	negs	r2, r2
 8017700:	40ca      	lsrs	r2, r1
 8017702:	3b04      	subs	r3, #4
 8017704:	6819      	ldr	r1, [r3, #0]
 8017706:	400a      	ands	r2, r1
 8017708:	601a      	str	r2, [r3, #0]
 801770a:	e7d2      	b.n	80176b2 <__hexnan+0xca>
 801770c:	3e04      	subs	r6, #4
 801770e:	e7d0      	b.n	80176b2 <__hexnan+0xca>
 8017710:	2004      	movs	r0, #4
 8017712:	b00b      	add	sp, #44	; 0x2c
 8017714:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017716 <__localeconv_l>:
 8017716:	30f0      	adds	r0, #240	; 0xf0
 8017718:	4770      	bx	lr
	...

0801771c <_localeconv_r>:
 801771c:	4b03      	ldr	r3, [pc, #12]	; (801772c <_localeconv_r+0x10>)
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017722:	2800      	cmp	r0, #0
 8017724:	d100      	bne.n	8017728 <_localeconv_r+0xc>
 8017726:	4802      	ldr	r0, [pc, #8]	; (8017730 <_localeconv_r+0x14>)
 8017728:	30f0      	adds	r0, #240	; 0xf0
 801772a:	4770      	bx	lr
 801772c:	200000dc 	.word	0x200000dc
 8017730:	20000508 	.word	0x20000508

08017734 <__retarget_lock_acquire_recursive>:
 8017734:	4770      	bx	lr

08017736 <__retarget_lock_release_recursive>:
 8017736:	4770      	bx	lr

08017738 <memchr>:
 8017738:	b2c9      	uxtb	r1, r1
 801773a:	1882      	adds	r2, r0, r2
 801773c:	4290      	cmp	r0, r2
 801773e:	d101      	bne.n	8017744 <memchr+0xc>
 8017740:	2000      	movs	r0, #0
 8017742:	4770      	bx	lr
 8017744:	7803      	ldrb	r3, [r0, #0]
 8017746:	428b      	cmp	r3, r1
 8017748:	d0fb      	beq.n	8017742 <memchr+0xa>
 801774a:	3001      	adds	r0, #1
 801774c:	e7f6      	b.n	801773c <memchr+0x4>

0801774e <memmove>:
 801774e:	b510      	push	{r4, lr}
 8017750:	4288      	cmp	r0, r1
 8017752:	d902      	bls.n	801775a <memmove+0xc>
 8017754:	188b      	adds	r3, r1, r2
 8017756:	4298      	cmp	r0, r3
 8017758:	d303      	bcc.n	8017762 <memmove+0x14>
 801775a:	2300      	movs	r3, #0
 801775c:	e007      	b.n	801776e <memmove+0x20>
 801775e:	5c8b      	ldrb	r3, [r1, r2]
 8017760:	5483      	strb	r3, [r0, r2]
 8017762:	3a01      	subs	r2, #1
 8017764:	d2fb      	bcs.n	801775e <memmove+0x10>
 8017766:	bd10      	pop	{r4, pc}
 8017768:	5ccc      	ldrb	r4, [r1, r3]
 801776a:	54c4      	strb	r4, [r0, r3]
 801776c:	3301      	adds	r3, #1
 801776e:	429a      	cmp	r2, r3
 8017770:	d1fa      	bne.n	8017768 <memmove+0x1a>
 8017772:	e7f8      	b.n	8017766 <memmove+0x18>

08017774 <_Balloc>:
 8017774:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017776:	b570      	push	{r4, r5, r6, lr}
 8017778:	0004      	movs	r4, r0
 801777a:	000d      	movs	r5, r1
 801777c:	2b00      	cmp	r3, #0
 801777e:	d012      	beq.n	80177a6 <_Balloc+0x32>
 8017780:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8017782:	00ab      	lsls	r3, r5, #2
 8017784:	18d3      	adds	r3, r2, r3
 8017786:	6818      	ldr	r0, [r3, #0]
 8017788:	2800      	cmp	r0, #0
 801778a:	d115      	bne.n	80177b8 <_Balloc+0x44>
 801778c:	2101      	movs	r1, #1
 801778e:	000e      	movs	r6, r1
 8017790:	40ae      	lsls	r6, r5
 8017792:	1d72      	adds	r2, r6, #5
 8017794:	0092      	lsls	r2, r2, #2
 8017796:	0020      	movs	r0, r4
 8017798:	f7fb fe56 	bl	8013448 <_calloc_r>
 801779c:	2800      	cmp	r0, #0
 801779e:	d009      	beq.n	80177b4 <_Balloc+0x40>
 80177a0:	6045      	str	r5, [r0, #4]
 80177a2:	6086      	str	r6, [r0, #8]
 80177a4:	e00a      	b.n	80177bc <_Balloc+0x48>
 80177a6:	2221      	movs	r2, #33	; 0x21
 80177a8:	2104      	movs	r1, #4
 80177aa:	f7fb fe4d 	bl	8013448 <_calloc_r>
 80177ae:	64e0      	str	r0, [r4, #76]	; 0x4c
 80177b0:	2800      	cmp	r0, #0
 80177b2:	d1e5      	bne.n	8017780 <_Balloc+0xc>
 80177b4:	2000      	movs	r0, #0
 80177b6:	bd70      	pop	{r4, r5, r6, pc}
 80177b8:	6802      	ldr	r2, [r0, #0]
 80177ba:	601a      	str	r2, [r3, #0]
 80177bc:	2300      	movs	r3, #0
 80177be:	6103      	str	r3, [r0, #16]
 80177c0:	60c3      	str	r3, [r0, #12]
 80177c2:	e7f8      	b.n	80177b6 <_Balloc+0x42>

080177c4 <_Bfree>:
 80177c4:	2900      	cmp	r1, #0
 80177c6:	d006      	beq.n	80177d6 <_Bfree+0x12>
 80177c8:	684b      	ldr	r3, [r1, #4]
 80177ca:	009a      	lsls	r2, r3, #2
 80177cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80177ce:	189b      	adds	r3, r3, r2
 80177d0:	681a      	ldr	r2, [r3, #0]
 80177d2:	600a      	str	r2, [r1, #0]
 80177d4:	6019      	str	r1, [r3, #0]
 80177d6:	4770      	bx	lr

080177d8 <__multadd>:
 80177d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80177da:	001e      	movs	r6, r3
 80177dc:	2314      	movs	r3, #20
 80177de:	469c      	mov	ip, r3
 80177e0:	0007      	movs	r7, r0
 80177e2:	000c      	movs	r4, r1
 80177e4:	2000      	movs	r0, #0
 80177e6:	690d      	ldr	r5, [r1, #16]
 80177e8:	448c      	add	ip, r1
 80177ea:	4663      	mov	r3, ip
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	3001      	adds	r0, #1
 80177f0:	b299      	uxth	r1, r3
 80177f2:	4663      	mov	r3, ip
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	4351      	muls	r1, r2
 80177f8:	0c1b      	lsrs	r3, r3, #16
 80177fa:	4353      	muls	r3, r2
 80177fc:	1989      	adds	r1, r1, r6
 80177fe:	0c0e      	lsrs	r6, r1, #16
 8017800:	199b      	adds	r3, r3, r6
 8017802:	b289      	uxth	r1, r1
 8017804:	0c1e      	lsrs	r6, r3, #16
 8017806:	041b      	lsls	r3, r3, #16
 8017808:	185b      	adds	r3, r3, r1
 801780a:	4661      	mov	r1, ip
 801780c:	c108      	stmia	r1!, {r3}
 801780e:	468c      	mov	ip, r1
 8017810:	4285      	cmp	r5, r0
 8017812:	dcea      	bgt.n	80177ea <__multadd+0x12>
 8017814:	2e00      	cmp	r6, #0
 8017816:	d01b      	beq.n	8017850 <__multadd+0x78>
 8017818:	68a3      	ldr	r3, [r4, #8]
 801781a:	42ab      	cmp	r3, r5
 801781c:	dc12      	bgt.n	8017844 <__multadd+0x6c>
 801781e:	6863      	ldr	r3, [r4, #4]
 8017820:	0038      	movs	r0, r7
 8017822:	1c59      	adds	r1, r3, #1
 8017824:	f7ff ffa6 	bl	8017774 <_Balloc>
 8017828:	0021      	movs	r1, r4
 801782a:	6923      	ldr	r3, [r4, #16]
 801782c:	9001      	str	r0, [sp, #4]
 801782e:	1c9a      	adds	r2, r3, #2
 8017830:	0092      	lsls	r2, r2, #2
 8017832:	310c      	adds	r1, #12
 8017834:	300c      	adds	r0, #12
 8017836:	f7fc f8b6 	bl	80139a6 <memcpy>
 801783a:	0021      	movs	r1, r4
 801783c:	0038      	movs	r0, r7
 801783e:	f7ff ffc1 	bl	80177c4 <_Bfree>
 8017842:	9c01      	ldr	r4, [sp, #4]
 8017844:	1d2b      	adds	r3, r5, #4
 8017846:	009b      	lsls	r3, r3, #2
 8017848:	18e3      	adds	r3, r4, r3
 801784a:	3501      	adds	r5, #1
 801784c:	605e      	str	r6, [r3, #4]
 801784e:	6125      	str	r5, [r4, #16]
 8017850:	0020      	movs	r0, r4
 8017852:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08017854 <__s2b>:
 8017854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017856:	0006      	movs	r6, r0
 8017858:	0018      	movs	r0, r3
 801785a:	000c      	movs	r4, r1
 801785c:	3008      	adds	r0, #8
 801785e:	2109      	movs	r1, #9
 8017860:	9301      	str	r3, [sp, #4]
 8017862:	0015      	movs	r5, r2
 8017864:	f7e8 fcfe 	bl	8000264 <__divsi3>
 8017868:	2301      	movs	r3, #1
 801786a:	2100      	movs	r1, #0
 801786c:	4283      	cmp	r3, r0
 801786e:	db1f      	blt.n	80178b0 <__s2b+0x5c>
 8017870:	0030      	movs	r0, r6
 8017872:	f7ff ff7f 	bl	8017774 <_Balloc>
 8017876:	9b08      	ldr	r3, [sp, #32]
 8017878:	6143      	str	r3, [r0, #20]
 801787a:	2301      	movs	r3, #1
 801787c:	6103      	str	r3, [r0, #16]
 801787e:	2d09      	cmp	r5, #9
 8017880:	dd19      	ble.n	80178b6 <__s2b+0x62>
 8017882:	0023      	movs	r3, r4
 8017884:	3309      	adds	r3, #9
 8017886:	001f      	movs	r7, r3
 8017888:	9300      	str	r3, [sp, #0]
 801788a:	1964      	adds	r4, r4, r5
 801788c:	783b      	ldrb	r3, [r7, #0]
 801788e:	0001      	movs	r1, r0
 8017890:	3b30      	subs	r3, #48	; 0x30
 8017892:	220a      	movs	r2, #10
 8017894:	0030      	movs	r0, r6
 8017896:	3701      	adds	r7, #1
 8017898:	f7ff ff9e 	bl	80177d8 <__multadd>
 801789c:	42a7      	cmp	r7, r4
 801789e:	d1f5      	bne.n	801788c <__s2b+0x38>
 80178a0:	9b00      	ldr	r3, [sp, #0]
 80178a2:	195c      	adds	r4, r3, r5
 80178a4:	3c08      	subs	r4, #8
 80178a6:	002f      	movs	r7, r5
 80178a8:	9b01      	ldr	r3, [sp, #4]
 80178aa:	429f      	cmp	r7, r3
 80178ac:	db06      	blt.n	80178bc <__s2b+0x68>
 80178ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80178b0:	005b      	lsls	r3, r3, #1
 80178b2:	3101      	adds	r1, #1
 80178b4:	e7da      	b.n	801786c <__s2b+0x18>
 80178b6:	340a      	adds	r4, #10
 80178b8:	2509      	movs	r5, #9
 80178ba:	e7f4      	b.n	80178a6 <__s2b+0x52>
 80178bc:	1b63      	subs	r3, r4, r5
 80178be:	5ddb      	ldrb	r3, [r3, r7]
 80178c0:	0001      	movs	r1, r0
 80178c2:	3b30      	subs	r3, #48	; 0x30
 80178c4:	220a      	movs	r2, #10
 80178c6:	0030      	movs	r0, r6
 80178c8:	f7ff ff86 	bl	80177d8 <__multadd>
 80178cc:	3701      	adds	r7, #1
 80178ce:	e7eb      	b.n	80178a8 <__s2b+0x54>

080178d0 <__hi0bits>:
 80178d0:	0003      	movs	r3, r0
 80178d2:	0c02      	lsrs	r2, r0, #16
 80178d4:	2000      	movs	r0, #0
 80178d6:	4282      	cmp	r2, r0
 80178d8:	d101      	bne.n	80178de <__hi0bits+0xe>
 80178da:	041b      	lsls	r3, r3, #16
 80178dc:	3010      	adds	r0, #16
 80178de:	0e1a      	lsrs	r2, r3, #24
 80178e0:	d101      	bne.n	80178e6 <__hi0bits+0x16>
 80178e2:	3008      	adds	r0, #8
 80178e4:	021b      	lsls	r3, r3, #8
 80178e6:	0f1a      	lsrs	r2, r3, #28
 80178e8:	d101      	bne.n	80178ee <__hi0bits+0x1e>
 80178ea:	3004      	adds	r0, #4
 80178ec:	011b      	lsls	r3, r3, #4
 80178ee:	0f9a      	lsrs	r2, r3, #30
 80178f0:	d101      	bne.n	80178f6 <__hi0bits+0x26>
 80178f2:	3002      	adds	r0, #2
 80178f4:	009b      	lsls	r3, r3, #2
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	db03      	blt.n	8017902 <__hi0bits+0x32>
 80178fa:	3001      	adds	r0, #1
 80178fc:	005b      	lsls	r3, r3, #1
 80178fe:	d400      	bmi.n	8017902 <__hi0bits+0x32>
 8017900:	2020      	movs	r0, #32
 8017902:	4770      	bx	lr

08017904 <__lo0bits>:
 8017904:	2207      	movs	r2, #7
 8017906:	6803      	ldr	r3, [r0, #0]
 8017908:	b510      	push	{r4, lr}
 801790a:	0001      	movs	r1, r0
 801790c:	401a      	ands	r2, r3
 801790e:	d00d      	beq.n	801792c <__lo0bits+0x28>
 8017910:	2401      	movs	r4, #1
 8017912:	2000      	movs	r0, #0
 8017914:	4223      	tst	r3, r4
 8017916:	d105      	bne.n	8017924 <__lo0bits+0x20>
 8017918:	3002      	adds	r0, #2
 801791a:	4203      	tst	r3, r0
 801791c:	d003      	beq.n	8017926 <__lo0bits+0x22>
 801791e:	40e3      	lsrs	r3, r4
 8017920:	0020      	movs	r0, r4
 8017922:	600b      	str	r3, [r1, #0]
 8017924:	bd10      	pop	{r4, pc}
 8017926:	089b      	lsrs	r3, r3, #2
 8017928:	600b      	str	r3, [r1, #0]
 801792a:	e7fb      	b.n	8017924 <__lo0bits+0x20>
 801792c:	b29c      	uxth	r4, r3
 801792e:	0010      	movs	r0, r2
 8017930:	2c00      	cmp	r4, #0
 8017932:	d101      	bne.n	8017938 <__lo0bits+0x34>
 8017934:	2010      	movs	r0, #16
 8017936:	0c1b      	lsrs	r3, r3, #16
 8017938:	b2da      	uxtb	r2, r3
 801793a:	2a00      	cmp	r2, #0
 801793c:	d101      	bne.n	8017942 <__lo0bits+0x3e>
 801793e:	3008      	adds	r0, #8
 8017940:	0a1b      	lsrs	r3, r3, #8
 8017942:	071a      	lsls	r2, r3, #28
 8017944:	d101      	bne.n	801794a <__lo0bits+0x46>
 8017946:	3004      	adds	r0, #4
 8017948:	091b      	lsrs	r3, r3, #4
 801794a:	079a      	lsls	r2, r3, #30
 801794c:	d101      	bne.n	8017952 <__lo0bits+0x4e>
 801794e:	3002      	adds	r0, #2
 8017950:	089b      	lsrs	r3, r3, #2
 8017952:	07da      	lsls	r2, r3, #31
 8017954:	d4e8      	bmi.n	8017928 <__lo0bits+0x24>
 8017956:	085b      	lsrs	r3, r3, #1
 8017958:	d001      	beq.n	801795e <__lo0bits+0x5a>
 801795a:	3001      	adds	r0, #1
 801795c:	e7e4      	b.n	8017928 <__lo0bits+0x24>
 801795e:	2020      	movs	r0, #32
 8017960:	e7e0      	b.n	8017924 <__lo0bits+0x20>

08017962 <__i2b>:
 8017962:	b510      	push	{r4, lr}
 8017964:	000c      	movs	r4, r1
 8017966:	2101      	movs	r1, #1
 8017968:	f7ff ff04 	bl	8017774 <_Balloc>
 801796c:	2301      	movs	r3, #1
 801796e:	6144      	str	r4, [r0, #20]
 8017970:	6103      	str	r3, [r0, #16]
 8017972:	bd10      	pop	{r4, pc}

08017974 <__multiply>:
 8017974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017976:	690b      	ldr	r3, [r1, #16]
 8017978:	0014      	movs	r4, r2
 801797a:	6912      	ldr	r2, [r2, #16]
 801797c:	b089      	sub	sp, #36	; 0x24
 801797e:	000d      	movs	r5, r1
 8017980:	4293      	cmp	r3, r2
 8017982:	da01      	bge.n	8017988 <__multiply+0x14>
 8017984:	0025      	movs	r5, r4
 8017986:	000c      	movs	r4, r1
 8017988:	692f      	ldr	r7, [r5, #16]
 801798a:	6926      	ldr	r6, [r4, #16]
 801798c:	6869      	ldr	r1, [r5, #4]
 801798e:	19bb      	adds	r3, r7, r6
 8017990:	9302      	str	r3, [sp, #8]
 8017992:	68ab      	ldr	r3, [r5, #8]
 8017994:	19ba      	adds	r2, r7, r6
 8017996:	4293      	cmp	r3, r2
 8017998:	da00      	bge.n	801799c <__multiply+0x28>
 801799a:	3101      	adds	r1, #1
 801799c:	f7ff feea 	bl	8017774 <_Balloc>
 80179a0:	0002      	movs	r2, r0
 80179a2:	19bb      	adds	r3, r7, r6
 80179a4:	3214      	adds	r2, #20
 80179a6:	009b      	lsls	r3, r3, #2
 80179a8:	18d3      	adds	r3, r2, r3
 80179aa:	469c      	mov	ip, r3
 80179ac:	2100      	movs	r1, #0
 80179ae:	0013      	movs	r3, r2
 80179b0:	9004      	str	r0, [sp, #16]
 80179b2:	4563      	cmp	r3, ip
 80179b4:	d31d      	bcc.n	80179f2 <__multiply+0x7e>
 80179b6:	3514      	adds	r5, #20
 80179b8:	00bf      	lsls	r7, r7, #2
 80179ba:	19eb      	adds	r3, r5, r7
 80179bc:	3414      	adds	r4, #20
 80179be:	00b6      	lsls	r6, r6, #2
 80179c0:	9305      	str	r3, [sp, #20]
 80179c2:	19a3      	adds	r3, r4, r6
 80179c4:	9503      	str	r5, [sp, #12]
 80179c6:	9401      	str	r4, [sp, #4]
 80179c8:	9307      	str	r3, [sp, #28]
 80179ca:	9b07      	ldr	r3, [sp, #28]
 80179cc:	9901      	ldr	r1, [sp, #4]
 80179ce:	4299      	cmp	r1, r3
 80179d0:	d311      	bcc.n	80179f6 <__multiply+0x82>
 80179d2:	9b02      	ldr	r3, [sp, #8]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	dd06      	ble.n	80179e6 <__multiply+0x72>
 80179d8:	2304      	movs	r3, #4
 80179da:	425b      	negs	r3, r3
 80179dc:	449c      	add	ip, r3
 80179de:	4663      	mov	r3, ip
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d051      	beq.n	8017a8a <__multiply+0x116>
 80179e6:	9b04      	ldr	r3, [sp, #16]
 80179e8:	9a02      	ldr	r2, [sp, #8]
 80179ea:	0018      	movs	r0, r3
 80179ec:	611a      	str	r2, [r3, #16]
 80179ee:	b009      	add	sp, #36	; 0x24
 80179f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179f2:	c302      	stmia	r3!, {r1}
 80179f4:	e7dd      	b.n	80179b2 <__multiply+0x3e>
 80179f6:	9b01      	ldr	r3, [sp, #4]
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	b298      	uxth	r0, r3
 80179fc:	2800      	cmp	r0, #0
 80179fe:	d01c      	beq.n	8017a3a <__multiply+0xc6>
 8017a00:	0015      	movs	r5, r2
 8017a02:	2600      	movs	r6, #0
 8017a04:	9f03      	ldr	r7, [sp, #12]
 8017a06:	cf02      	ldmia	r7!, {r1}
 8017a08:	682c      	ldr	r4, [r5, #0]
 8017a0a:	b28b      	uxth	r3, r1
 8017a0c:	4343      	muls	r3, r0
 8017a0e:	0c09      	lsrs	r1, r1, #16
 8017a10:	4341      	muls	r1, r0
 8017a12:	b2a4      	uxth	r4, r4
 8017a14:	191b      	adds	r3, r3, r4
 8017a16:	199b      	adds	r3, r3, r6
 8017a18:	000e      	movs	r6, r1
 8017a1a:	6829      	ldr	r1, [r5, #0]
 8017a1c:	9506      	str	r5, [sp, #24]
 8017a1e:	0c09      	lsrs	r1, r1, #16
 8017a20:	1871      	adds	r1, r6, r1
 8017a22:	0c1e      	lsrs	r6, r3, #16
 8017a24:	1989      	adds	r1, r1, r6
 8017a26:	0c0e      	lsrs	r6, r1, #16
 8017a28:	b29b      	uxth	r3, r3
 8017a2a:	0409      	lsls	r1, r1, #16
 8017a2c:	430b      	orrs	r3, r1
 8017a2e:	c508      	stmia	r5!, {r3}
 8017a30:	9b05      	ldr	r3, [sp, #20]
 8017a32:	42bb      	cmp	r3, r7
 8017a34:	d8e7      	bhi.n	8017a06 <__multiply+0x92>
 8017a36:	9b06      	ldr	r3, [sp, #24]
 8017a38:	605e      	str	r6, [r3, #4]
 8017a3a:	9b01      	ldr	r3, [sp, #4]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	0c1d      	lsrs	r5, r3, #16
 8017a40:	d01e      	beq.n	8017a80 <__multiply+0x10c>
 8017a42:	0010      	movs	r0, r2
 8017a44:	2700      	movs	r7, #0
 8017a46:	6813      	ldr	r3, [r2, #0]
 8017a48:	9e03      	ldr	r6, [sp, #12]
 8017a4a:	6831      	ldr	r1, [r6, #0]
 8017a4c:	6804      	ldr	r4, [r0, #0]
 8017a4e:	b289      	uxth	r1, r1
 8017a50:	4369      	muls	r1, r5
 8017a52:	0c24      	lsrs	r4, r4, #16
 8017a54:	1909      	adds	r1, r1, r4
 8017a56:	19c9      	adds	r1, r1, r7
 8017a58:	040f      	lsls	r7, r1, #16
 8017a5a:	b29b      	uxth	r3, r3
 8017a5c:	433b      	orrs	r3, r7
 8017a5e:	6003      	str	r3, [r0, #0]
 8017a60:	ce80      	ldmia	r6!, {r7}
 8017a62:	6843      	ldr	r3, [r0, #4]
 8017a64:	0c3f      	lsrs	r7, r7, #16
 8017a66:	436f      	muls	r7, r5
 8017a68:	b29b      	uxth	r3, r3
 8017a6a:	18fb      	adds	r3, r7, r3
 8017a6c:	0c09      	lsrs	r1, r1, #16
 8017a6e:	185b      	adds	r3, r3, r1
 8017a70:	9905      	ldr	r1, [sp, #20]
 8017a72:	9006      	str	r0, [sp, #24]
 8017a74:	0c1f      	lsrs	r7, r3, #16
 8017a76:	3004      	adds	r0, #4
 8017a78:	42b1      	cmp	r1, r6
 8017a7a:	d8e6      	bhi.n	8017a4a <__multiply+0xd6>
 8017a7c:	9906      	ldr	r1, [sp, #24]
 8017a7e:	604b      	str	r3, [r1, #4]
 8017a80:	9b01      	ldr	r3, [sp, #4]
 8017a82:	3204      	adds	r2, #4
 8017a84:	3304      	adds	r3, #4
 8017a86:	9301      	str	r3, [sp, #4]
 8017a88:	e79f      	b.n	80179ca <__multiply+0x56>
 8017a8a:	9b02      	ldr	r3, [sp, #8]
 8017a8c:	3b01      	subs	r3, #1
 8017a8e:	9302      	str	r3, [sp, #8]
 8017a90:	e79f      	b.n	80179d2 <__multiply+0x5e>
	...

08017a94 <__pow5mult>:
 8017a94:	2303      	movs	r3, #3
 8017a96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a98:	4013      	ands	r3, r2
 8017a9a:	0006      	movs	r6, r0
 8017a9c:	000f      	movs	r7, r1
 8017a9e:	0015      	movs	r5, r2
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d008      	beq.n	8017ab6 <__pow5mult+0x22>
 8017aa4:	491a      	ldr	r1, [pc, #104]	; (8017b10 <__pow5mult+0x7c>)
 8017aa6:	3b01      	subs	r3, #1
 8017aa8:	009a      	lsls	r2, r3, #2
 8017aaa:	5852      	ldr	r2, [r2, r1]
 8017aac:	2300      	movs	r3, #0
 8017aae:	0039      	movs	r1, r7
 8017ab0:	f7ff fe92 	bl	80177d8 <__multadd>
 8017ab4:	0007      	movs	r7, r0
 8017ab6:	10ad      	asrs	r5, r5, #2
 8017ab8:	d027      	beq.n	8017b0a <__pow5mult+0x76>
 8017aba:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8017abc:	2c00      	cmp	r4, #0
 8017abe:	d107      	bne.n	8017ad0 <__pow5mult+0x3c>
 8017ac0:	4914      	ldr	r1, [pc, #80]	; (8017b14 <__pow5mult+0x80>)
 8017ac2:	0030      	movs	r0, r6
 8017ac4:	f7ff ff4d 	bl	8017962 <__i2b>
 8017ac8:	2300      	movs	r3, #0
 8017aca:	0004      	movs	r4, r0
 8017acc:	64b0      	str	r0, [r6, #72]	; 0x48
 8017ace:	6003      	str	r3, [r0, #0]
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	421d      	tst	r5, r3
 8017ad4:	d00a      	beq.n	8017aec <__pow5mult+0x58>
 8017ad6:	0039      	movs	r1, r7
 8017ad8:	0022      	movs	r2, r4
 8017ada:	0030      	movs	r0, r6
 8017adc:	f7ff ff4a 	bl	8017974 <__multiply>
 8017ae0:	0039      	movs	r1, r7
 8017ae2:	9001      	str	r0, [sp, #4]
 8017ae4:	0030      	movs	r0, r6
 8017ae6:	f7ff fe6d 	bl	80177c4 <_Bfree>
 8017aea:	9f01      	ldr	r7, [sp, #4]
 8017aec:	106d      	asrs	r5, r5, #1
 8017aee:	d00c      	beq.n	8017b0a <__pow5mult+0x76>
 8017af0:	6820      	ldr	r0, [r4, #0]
 8017af2:	2800      	cmp	r0, #0
 8017af4:	d107      	bne.n	8017b06 <__pow5mult+0x72>
 8017af6:	0022      	movs	r2, r4
 8017af8:	0021      	movs	r1, r4
 8017afa:	0030      	movs	r0, r6
 8017afc:	f7ff ff3a 	bl	8017974 <__multiply>
 8017b00:	2300      	movs	r3, #0
 8017b02:	6020      	str	r0, [r4, #0]
 8017b04:	6003      	str	r3, [r0, #0]
 8017b06:	0004      	movs	r4, r0
 8017b08:	e7e2      	b.n	8017ad0 <__pow5mult+0x3c>
 8017b0a:	0038      	movs	r0, r7
 8017b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017b0e:	46c0      	nop			; (mov r8, r8)
 8017b10:	0801bb58 	.word	0x0801bb58
 8017b14:	00000271 	.word	0x00000271

08017b18 <__lshift>:
 8017b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b1a:	000d      	movs	r5, r1
 8017b1c:	0017      	movs	r7, r2
 8017b1e:	692b      	ldr	r3, [r5, #16]
 8017b20:	1154      	asrs	r4, r2, #5
 8017b22:	b085      	sub	sp, #20
 8017b24:	18e3      	adds	r3, r4, r3
 8017b26:	9301      	str	r3, [sp, #4]
 8017b28:	3301      	adds	r3, #1
 8017b2a:	9300      	str	r3, [sp, #0]
 8017b2c:	6849      	ldr	r1, [r1, #4]
 8017b2e:	68ab      	ldr	r3, [r5, #8]
 8017b30:	9002      	str	r0, [sp, #8]
 8017b32:	9a00      	ldr	r2, [sp, #0]
 8017b34:	4293      	cmp	r3, r2
 8017b36:	db35      	blt.n	8017ba4 <__lshift+0x8c>
 8017b38:	9802      	ldr	r0, [sp, #8]
 8017b3a:	f7ff fe1b 	bl	8017774 <_Balloc>
 8017b3e:	2300      	movs	r3, #0
 8017b40:	0002      	movs	r2, r0
 8017b42:	0006      	movs	r6, r0
 8017b44:	0019      	movs	r1, r3
 8017b46:	3214      	adds	r2, #20
 8017b48:	42a3      	cmp	r3, r4
 8017b4a:	db2e      	blt.n	8017baa <__lshift+0x92>
 8017b4c:	43e3      	mvns	r3, r4
 8017b4e:	17db      	asrs	r3, r3, #31
 8017b50:	401c      	ands	r4, r3
 8017b52:	002b      	movs	r3, r5
 8017b54:	00a4      	lsls	r4, r4, #2
 8017b56:	1914      	adds	r4, r2, r4
 8017b58:	692a      	ldr	r2, [r5, #16]
 8017b5a:	3314      	adds	r3, #20
 8017b5c:	0092      	lsls	r2, r2, #2
 8017b5e:	189a      	adds	r2, r3, r2
 8017b60:	4694      	mov	ip, r2
 8017b62:	221f      	movs	r2, #31
 8017b64:	4017      	ands	r7, r2
 8017b66:	d024      	beq.n	8017bb2 <__lshift+0x9a>
 8017b68:	3201      	adds	r2, #1
 8017b6a:	1bd2      	subs	r2, r2, r7
 8017b6c:	9203      	str	r2, [sp, #12]
 8017b6e:	2200      	movs	r2, #0
 8017b70:	6819      	ldr	r1, [r3, #0]
 8017b72:	0020      	movs	r0, r4
 8017b74:	40b9      	lsls	r1, r7
 8017b76:	430a      	orrs	r2, r1
 8017b78:	c404      	stmia	r4!, {r2}
 8017b7a:	cb04      	ldmia	r3!, {r2}
 8017b7c:	9903      	ldr	r1, [sp, #12]
 8017b7e:	40ca      	lsrs	r2, r1
 8017b80:	459c      	cmp	ip, r3
 8017b82:	d8f5      	bhi.n	8017b70 <__lshift+0x58>
 8017b84:	6042      	str	r2, [r0, #4]
 8017b86:	2a00      	cmp	r2, #0
 8017b88:	d002      	beq.n	8017b90 <__lshift+0x78>
 8017b8a:	9b01      	ldr	r3, [sp, #4]
 8017b8c:	3302      	adds	r3, #2
 8017b8e:	9300      	str	r3, [sp, #0]
 8017b90:	9b00      	ldr	r3, [sp, #0]
 8017b92:	9802      	ldr	r0, [sp, #8]
 8017b94:	3b01      	subs	r3, #1
 8017b96:	6133      	str	r3, [r6, #16]
 8017b98:	0029      	movs	r1, r5
 8017b9a:	f7ff fe13 	bl	80177c4 <_Bfree>
 8017b9e:	0030      	movs	r0, r6
 8017ba0:	b005      	add	sp, #20
 8017ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ba4:	3101      	adds	r1, #1
 8017ba6:	005b      	lsls	r3, r3, #1
 8017ba8:	e7c3      	b.n	8017b32 <__lshift+0x1a>
 8017baa:	0098      	lsls	r0, r3, #2
 8017bac:	5011      	str	r1, [r2, r0]
 8017bae:	3301      	adds	r3, #1
 8017bb0:	e7ca      	b.n	8017b48 <__lshift+0x30>
 8017bb2:	cb04      	ldmia	r3!, {r2}
 8017bb4:	c404      	stmia	r4!, {r2}
 8017bb6:	459c      	cmp	ip, r3
 8017bb8:	d8fb      	bhi.n	8017bb2 <__lshift+0x9a>
 8017bba:	e7e9      	b.n	8017b90 <__lshift+0x78>

08017bbc <__mcmp>:
 8017bbc:	690a      	ldr	r2, [r1, #16]
 8017bbe:	6903      	ldr	r3, [r0, #16]
 8017bc0:	b530      	push	{r4, r5, lr}
 8017bc2:	1a9b      	subs	r3, r3, r2
 8017bc4:	d10d      	bne.n	8017be2 <__mcmp+0x26>
 8017bc6:	0092      	lsls	r2, r2, #2
 8017bc8:	3014      	adds	r0, #20
 8017bca:	3114      	adds	r1, #20
 8017bcc:	1884      	adds	r4, r0, r2
 8017bce:	1889      	adds	r1, r1, r2
 8017bd0:	3c04      	subs	r4, #4
 8017bd2:	3904      	subs	r1, #4
 8017bd4:	6825      	ldr	r5, [r4, #0]
 8017bd6:	680a      	ldr	r2, [r1, #0]
 8017bd8:	4295      	cmp	r5, r2
 8017bda:	d004      	beq.n	8017be6 <__mcmp+0x2a>
 8017bdc:	2301      	movs	r3, #1
 8017bde:	4295      	cmp	r5, r2
 8017be0:	d304      	bcc.n	8017bec <__mcmp+0x30>
 8017be2:	0018      	movs	r0, r3
 8017be4:	bd30      	pop	{r4, r5, pc}
 8017be6:	42a0      	cmp	r0, r4
 8017be8:	d3f2      	bcc.n	8017bd0 <__mcmp+0x14>
 8017bea:	e7fa      	b.n	8017be2 <__mcmp+0x26>
 8017bec:	425b      	negs	r3, r3
 8017bee:	e7f8      	b.n	8017be2 <__mcmp+0x26>

08017bf0 <__mdiff>:
 8017bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bf2:	000d      	movs	r5, r1
 8017bf4:	b085      	sub	sp, #20
 8017bf6:	0007      	movs	r7, r0
 8017bf8:	0011      	movs	r1, r2
 8017bfa:	0028      	movs	r0, r5
 8017bfc:	0014      	movs	r4, r2
 8017bfe:	f7ff ffdd 	bl	8017bbc <__mcmp>
 8017c02:	1e06      	subs	r6, r0, #0
 8017c04:	d108      	bne.n	8017c18 <__mdiff+0x28>
 8017c06:	0001      	movs	r1, r0
 8017c08:	0038      	movs	r0, r7
 8017c0a:	f7ff fdb3 	bl	8017774 <_Balloc>
 8017c0e:	2301      	movs	r3, #1
 8017c10:	6146      	str	r6, [r0, #20]
 8017c12:	6103      	str	r3, [r0, #16]
 8017c14:	b005      	add	sp, #20
 8017c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c18:	2301      	movs	r3, #1
 8017c1a:	9301      	str	r3, [sp, #4]
 8017c1c:	2800      	cmp	r0, #0
 8017c1e:	db04      	blt.n	8017c2a <__mdiff+0x3a>
 8017c20:	0023      	movs	r3, r4
 8017c22:	002c      	movs	r4, r5
 8017c24:	001d      	movs	r5, r3
 8017c26:	2300      	movs	r3, #0
 8017c28:	9301      	str	r3, [sp, #4]
 8017c2a:	6861      	ldr	r1, [r4, #4]
 8017c2c:	0038      	movs	r0, r7
 8017c2e:	f7ff fda1 	bl	8017774 <_Balloc>
 8017c32:	002f      	movs	r7, r5
 8017c34:	2200      	movs	r2, #0
 8017c36:	9b01      	ldr	r3, [sp, #4]
 8017c38:	6926      	ldr	r6, [r4, #16]
 8017c3a:	60c3      	str	r3, [r0, #12]
 8017c3c:	3414      	adds	r4, #20
 8017c3e:	00b3      	lsls	r3, r6, #2
 8017c40:	18e3      	adds	r3, r4, r3
 8017c42:	9302      	str	r3, [sp, #8]
 8017c44:	692b      	ldr	r3, [r5, #16]
 8017c46:	3714      	adds	r7, #20
 8017c48:	009b      	lsls	r3, r3, #2
 8017c4a:	18fb      	adds	r3, r7, r3
 8017c4c:	9303      	str	r3, [sp, #12]
 8017c4e:	0003      	movs	r3, r0
 8017c50:	4694      	mov	ip, r2
 8017c52:	3314      	adds	r3, #20
 8017c54:	cc20      	ldmia	r4!, {r5}
 8017c56:	cf04      	ldmia	r7!, {r2}
 8017c58:	9201      	str	r2, [sp, #4]
 8017c5a:	b2aa      	uxth	r2, r5
 8017c5c:	4494      	add	ip, r2
 8017c5e:	466a      	mov	r2, sp
 8017c60:	4661      	mov	r1, ip
 8017c62:	8892      	ldrh	r2, [r2, #4]
 8017c64:	0c2d      	lsrs	r5, r5, #16
 8017c66:	1a8a      	subs	r2, r1, r2
 8017c68:	9901      	ldr	r1, [sp, #4]
 8017c6a:	0c09      	lsrs	r1, r1, #16
 8017c6c:	1a69      	subs	r1, r5, r1
 8017c6e:	1415      	asrs	r5, r2, #16
 8017c70:	1949      	adds	r1, r1, r5
 8017c72:	140d      	asrs	r5, r1, #16
 8017c74:	b292      	uxth	r2, r2
 8017c76:	0409      	lsls	r1, r1, #16
 8017c78:	430a      	orrs	r2, r1
 8017c7a:	601a      	str	r2, [r3, #0]
 8017c7c:	9a03      	ldr	r2, [sp, #12]
 8017c7e:	46ac      	mov	ip, r5
 8017c80:	3304      	adds	r3, #4
 8017c82:	42ba      	cmp	r2, r7
 8017c84:	d8e6      	bhi.n	8017c54 <__mdiff+0x64>
 8017c86:	9902      	ldr	r1, [sp, #8]
 8017c88:	001a      	movs	r2, r3
 8017c8a:	428c      	cmp	r4, r1
 8017c8c:	d305      	bcc.n	8017c9a <__mdiff+0xaa>
 8017c8e:	3a04      	subs	r2, #4
 8017c90:	6813      	ldr	r3, [r2, #0]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d00e      	beq.n	8017cb4 <__mdiff+0xc4>
 8017c96:	6106      	str	r6, [r0, #16]
 8017c98:	e7bc      	b.n	8017c14 <__mdiff+0x24>
 8017c9a:	cc04      	ldmia	r4!, {r2}
 8017c9c:	b291      	uxth	r1, r2
 8017c9e:	4461      	add	r1, ip
 8017ca0:	140d      	asrs	r5, r1, #16
 8017ca2:	0c12      	lsrs	r2, r2, #16
 8017ca4:	1952      	adds	r2, r2, r5
 8017ca6:	1415      	asrs	r5, r2, #16
 8017ca8:	b289      	uxth	r1, r1
 8017caa:	0412      	lsls	r2, r2, #16
 8017cac:	430a      	orrs	r2, r1
 8017cae:	46ac      	mov	ip, r5
 8017cb0:	c304      	stmia	r3!, {r2}
 8017cb2:	e7e8      	b.n	8017c86 <__mdiff+0x96>
 8017cb4:	3e01      	subs	r6, #1
 8017cb6:	e7ea      	b.n	8017c8e <__mdiff+0x9e>

08017cb8 <__ulp>:
 8017cb8:	000b      	movs	r3, r1
 8017cba:	4910      	ldr	r1, [pc, #64]	; (8017cfc <__ulp+0x44>)
 8017cbc:	b510      	push	{r4, lr}
 8017cbe:	4019      	ands	r1, r3
 8017cc0:	4b0f      	ldr	r3, [pc, #60]	; (8017d00 <__ulp+0x48>)
 8017cc2:	18c9      	adds	r1, r1, r3
 8017cc4:	2900      	cmp	r1, #0
 8017cc6:	dd04      	ble.n	8017cd2 <__ulp+0x1a>
 8017cc8:	2200      	movs	r2, #0
 8017cca:	000b      	movs	r3, r1
 8017ccc:	0010      	movs	r0, r2
 8017cce:	0019      	movs	r1, r3
 8017cd0:	bd10      	pop	{r4, pc}
 8017cd2:	4249      	negs	r1, r1
 8017cd4:	1509      	asrs	r1, r1, #20
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	2300      	movs	r3, #0
 8017cda:	2913      	cmp	r1, #19
 8017cdc:	dc04      	bgt.n	8017ce8 <__ulp+0x30>
 8017cde:	2080      	movs	r0, #128	; 0x80
 8017ce0:	0300      	lsls	r0, r0, #12
 8017ce2:	4108      	asrs	r0, r1
 8017ce4:	0003      	movs	r3, r0
 8017ce6:	e7f1      	b.n	8017ccc <__ulp+0x14>
 8017ce8:	3914      	subs	r1, #20
 8017cea:	2001      	movs	r0, #1
 8017cec:	291e      	cmp	r1, #30
 8017cee:	dc02      	bgt.n	8017cf6 <__ulp+0x3e>
 8017cf0:	241f      	movs	r4, #31
 8017cf2:	1a61      	subs	r1, r4, r1
 8017cf4:	4088      	lsls	r0, r1
 8017cf6:	0002      	movs	r2, r0
 8017cf8:	e7e8      	b.n	8017ccc <__ulp+0x14>
 8017cfa:	46c0      	nop			; (mov r8, r8)
 8017cfc:	7ff00000 	.word	0x7ff00000
 8017d00:	fcc00000 	.word	0xfcc00000

08017d04 <__b2d>:
 8017d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d06:	0006      	movs	r6, r0
 8017d08:	6903      	ldr	r3, [r0, #16]
 8017d0a:	3614      	adds	r6, #20
 8017d0c:	009b      	lsls	r3, r3, #2
 8017d0e:	18f3      	adds	r3, r6, r3
 8017d10:	1f1d      	subs	r5, r3, #4
 8017d12:	682c      	ldr	r4, [r5, #0]
 8017d14:	000f      	movs	r7, r1
 8017d16:	0020      	movs	r0, r4
 8017d18:	9301      	str	r3, [sp, #4]
 8017d1a:	f7ff fdd9 	bl	80178d0 <__hi0bits>
 8017d1e:	2320      	movs	r3, #32
 8017d20:	1a1b      	subs	r3, r3, r0
 8017d22:	603b      	str	r3, [r7, #0]
 8017d24:	491c      	ldr	r1, [pc, #112]	; (8017d98 <__b2d+0x94>)
 8017d26:	280a      	cmp	r0, #10
 8017d28:	dc16      	bgt.n	8017d58 <__b2d+0x54>
 8017d2a:	230b      	movs	r3, #11
 8017d2c:	0027      	movs	r7, r4
 8017d2e:	1a1b      	subs	r3, r3, r0
 8017d30:	40df      	lsrs	r7, r3
 8017d32:	4339      	orrs	r1, r7
 8017d34:	469c      	mov	ip, r3
 8017d36:	000b      	movs	r3, r1
 8017d38:	2100      	movs	r1, #0
 8017d3a:	42ae      	cmp	r6, r5
 8017d3c:	d202      	bcs.n	8017d44 <__b2d+0x40>
 8017d3e:	9901      	ldr	r1, [sp, #4]
 8017d40:	3908      	subs	r1, #8
 8017d42:	6809      	ldr	r1, [r1, #0]
 8017d44:	3015      	adds	r0, #21
 8017d46:	4084      	lsls	r4, r0
 8017d48:	4660      	mov	r0, ip
 8017d4a:	40c1      	lsrs	r1, r0
 8017d4c:	430c      	orrs	r4, r1
 8017d4e:	0022      	movs	r2, r4
 8017d50:	0010      	movs	r0, r2
 8017d52:	0019      	movs	r1, r3
 8017d54:	b003      	add	sp, #12
 8017d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d58:	2700      	movs	r7, #0
 8017d5a:	42ae      	cmp	r6, r5
 8017d5c:	d202      	bcs.n	8017d64 <__b2d+0x60>
 8017d5e:	9d01      	ldr	r5, [sp, #4]
 8017d60:	3d08      	subs	r5, #8
 8017d62:	682f      	ldr	r7, [r5, #0]
 8017d64:	380b      	subs	r0, #11
 8017d66:	4684      	mov	ip, r0
 8017d68:	1e03      	subs	r3, r0, #0
 8017d6a:	d012      	beq.n	8017d92 <__b2d+0x8e>
 8017d6c:	409c      	lsls	r4, r3
 8017d6e:	2020      	movs	r0, #32
 8017d70:	4321      	orrs	r1, r4
 8017d72:	003c      	movs	r4, r7
 8017d74:	1ac0      	subs	r0, r0, r3
 8017d76:	40c4      	lsrs	r4, r0
 8017d78:	4321      	orrs	r1, r4
 8017d7a:	000b      	movs	r3, r1
 8017d7c:	2100      	movs	r1, #0
 8017d7e:	42b5      	cmp	r5, r6
 8017d80:	d901      	bls.n	8017d86 <__b2d+0x82>
 8017d82:	3d04      	subs	r5, #4
 8017d84:	6829      	ldr	r1, [r5, #0]
 8017d86:	4664      	mov	r4, ip
 8017d88:	40c1      	lsrs	r1, r0
 8017d8a:	40a7      	lsls	r7, r4
 8017d8c:	430f      	orrs	r7, r1
 8017d8e:	003a      	movs	r2, r7
 8017d90:	e7de      	b.n	8017d50 <__b2d+0x4c>
 8017d92:	4321      	orrs	r1, r4
 8017d94:	000b      	movs	r3, r1
 8017d96:	e7fa      	b.n	8017d8e <__b2d+0x8a>
 8017d98:	3ff00000 	.word	0x3ff00000

08017d9c <__d2b>:
 8017d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d9e:	001d      	movs	r5, r3
 8017da0:	2101      	movs	r1, #1
 8017da2:	0014      	movs	r4, r2
 8017da4:	9f08      	ldr	r7, [sp, #32]
 8017da6:	f7ff fce5 	bl	8017774 <_Balloc>
 8017daa:	032b      	lsls	r3, r5, #12
 8017dac:	006d      	lsls	r5, r5, #1
 8017dae:	0006      	movs	r6, r0
 8017db0:	0b1b      	lsrs	r3, r3, #12
 8017db2:	0d6d      	lsrs	r5, r5, #21
 8017db4:	d124      	bne.n	8017e00 <__d2b+0x64>
 8017db6:	9301      	str	r3, [sp, #4]
 8017db8:	2c00      	cmp	r4, #0
 8017dba:	d027      	beq.n	8017e0c <__d2b+0x70>
 8017dbc:	4668      	mov	r0, sp
 8017dbe:	9400      	str	r4, [sp, #0]
 8017dc0:	f7ff fda0 	bl	8017904 <__lo0bits>
 8017dc4:	9c00      	ldr	r4, [sp, #0]
 8017dc6:	2800      	cmp	r0, #0
 8017dc8:	d01e      	beq.n	8017e08 <__d2b+0x6c>
 8017dca:	9b01      	ldr	r3, [sp, #4]
 8017dcc:	2120      	movs	r1, #32
 8017dce:	001a      	movs	r2, r3
 8017dd0:	1a09      	subs	r1, r1, r0
 8017dd2:	408a      	lsls	r2, r1
 8017dd4:	40c3      	lsrs	r3, r0
 8017dd6:	4322      	orrs	r2, r4
 8017dd8:	6172      	str	r2, [r6, #20]
 8017dda:	9301      	str	r3, [sp, #4]
 8017ddc:	9c01      	ldr	r4, [sp, #4]
 8017dde:	61b4      	str	r4, [r6, #24]
 8017de0:	1e63      	subs	r3, r4, #1
 8017de2:	419c      	sbcs	r4, r3
 8017de4:	3401      	adds	r4, #1
 8017de6:	6134      	str	r4, [r6, #16]
 8017de8:	2d00      	cmp	r5, #0
 8017dea:	d018      	beq.n	8017e1e <__d2b+0x82>
 8017dec:	4b12      	ldr	r3, [pc, #72]	; (8017e38 <__d2b+0x9c>)
 8017dee:	18ed      	adds	r5, r5, r3
 8017df0:	2335      	movs	r3, #53	; 0x35
 8017df2:	182d      	adds	r5, r5, r0
 8017df4:	603d      	str	r5, [r7, #0]
 8017df6:	1a18      	subs	r0, r3, r0
 8017df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dfa:	6018      	str	r0, [r3, #0]
 8017dfc:	0030      	movs	r0, r6
 8017dfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017e00:	2280      	movs	r2, #128	; 0x80
 8017e02:	0352      	lsls	r2, r2, #13
 8017e04:	4313      	orrs	r3, r2
 8017e06:	e7d6      	b.n	8017db6 <__d2b+0x1a>
 8017e08:	6174      	str	r4, [r6, #20]
 8017e0a:	e7e7      	b.n	8017ddc <__d2b+0x40>
 8017e0c:	a801      	add	r0, sp, #4
 8017e0e:	f7ff fd79 	bl	8017904 <__lo0bits>
 8017e12:	2401      	movs	r4, #1
 8017e14:	9b01      	ldr	r3, [sp, #4]
 8017e16:	6134      	str	r4, [r6, #16]
 8017e18:	6173      	str	r3, [r6, #20]
 8017e1a:	3020      	adds	r0, #32
 8017e1c:	e7e4      	b.n	8017de8 <__d2b+0x4c>
 8017e1e:	4b07      	ldr	r3, [pc, #28]	; (8017e3c <__d2b+0xa0>)
 8017e20:	18c0      	adds	r0, r0, r3
 8017e22:	4b07      	ldr	r3, [pc, #28]	; (8017e40 <__d2b+0xa4>)
 8017e24:	6038      	str	r0, [r7, #0]
 8017e26:	18e3      	adds	r3, r4, r3
 8017e28:	009b      	lsls	r3, r3, #2
 8017e2a:	18f3      	adds	r3, r6, r3
 8017e2c:	6958      	ldr	r0, [r3, #20]
 8017e2e:	f7ff fd4f 	bl	80178d0 <__hi0bits>
 8017e32:	0164      	lsls	r4, r4, #5
 8017e34:	1a20      	subs	r0, r4, r0
 8017e36:	e7df      	b.n	8017df8 <__d2b+0x5c>
 8017e38:	fffffbcd 	.word	0xfffffbcd
 8017e3c:	fffffbce 	.word	0xfffffbce
 8017e40:	3fffffff 	.word	0x3fffffff

08017e44 <__ratio>:
 8017e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e46:	b085      	sub	sp, #20
 8017e48:	000f      	movs	r7, r1
 8017e4a:	a902      	add	r1, sp, #8
 8017e4c:	0006      	movs	r6, r0
 8017e4e:	f7ff ff59 	bl	8017d04 <__b2d>
 8017e52:	0004      	movs	r4, r0
 8017e54:	000d      	movs	r5, r1
 8017e56:	0038      	movs	r0, r7
 8017e58:	a903      	add	r1, sp, #12
 8017e5a:	9400      	str	r4, [sp, #0]
 8017e5c:	9501      	str	r5, [sp, #4]
 8017e5e:	f7ff ff51 	bl	8017d04 <__b2d>
 8017e62:	6936      	ldr	r6, [r6, #16]
 8017e64:	693f      	ldr	r7, [r7, #16]
 8017e66:	0002      	movs	r2, r0
 8017e68:	1bf7      	subs	r7, r6, r7
 8017e6a:	017e      	lsls	r6, r7, #5
 8017e6c:	46b4      	mov	ip, r6
 8017e6e:	9f03      	ldr	r7, [sp, #12]
 8017e70:	9e02      	ldr	r6, [sp, #8]
 8017e72:	000b      	movs	r3, r1
 8017e74:	1bf6      	subs	r6, r6, r7
 8017e76:	4466      	add	r6, ip
 8017e78:	0537      	lsls	r7, r6, #20
 8017e7a:	2e00      	cmp	r6, #0
 8017e7c:	dd07      	ble.n	8017e8e <__ratio+0x4a>
 8017e7e:	1979      	adds	r1, r7, r5
 8017e80:	9101      	str	r1, [sp, #4]
 8017e82:	9800      	ldr	r0, [sp, #0]
 8017e84:	9901      	ldr	r1, [sp, #4]
 8017e86:	f7e9 fcdd 	bl	8001844 <__aeabi_ddiv>
 8017e8a:	b005      	add	sp, #20
 8017e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e8e:	1bcb      	subs	r3, r1, r7
 8017e90:	e7f7      	b.n	8017e82 <__ratio+0x3e>

08017e92 <__copybits>:
 8017e92:	0013      	movs	r3, r2
 8017e94:	3901      	subs	r1, #1
 8017e96:	b510      	push	{r4, lr}
 8017e98:	1149      	asrs	r1, r1, #5
 8017e9a:	6912      	ldr	r2, [r2, #16]
 8017e9c:	3101      	adds	r1, #1
 8017e9e:	0089      	lsls	r1, r1, #2
 8017ea0:	3314      	adds	r3, #20
 8017ea2:	0092      	lsls	r2, r2, #2
 8017ea4:	1841      	adds	r1, r0, r1
 8017ea6:	189a      	adds	r2, r3, r2
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	d803      	bhi.n	8017eb4 <__copybits+0x22>
 8017eac:	2300      	movs	r3, #0
 8017eae:	4281      	cmp	r1, r0
 8017eb0:	d803      	bhi.n	8017eba <__copybits+0x28>
 8017eb2:	bd10      	pop	{r4, pc}
 8017eb4:	cb10      	ldmia	r3!, {r4}
 8017eb6:	c010      	stmia	r0!, {r4}
 8017eb8:	e7f6      	b.n	8017ea8 <__copybits+0x16>
 8017eba:	c008      	stmia	r0!, {r3}
 8017ebc:	e7f7      	b.n	8017eae <__copybits+0x1c>

08017ebe <__any_on>:
 8017ebe:	0002      	movs	r2, r0
 8017ec0:	6900      	ldr	r0, [r0, #16]
 8017ec2:	b510      	push	{r4, lr}
 8017ec4:	3214      	adds	r2, #20
 8017ec6:	114b      	asrs	r3, r1, #5
 8017ec8:	4298      	cmp	r0, r3
 8017eca:	db12      	blt.n	8017ef2 <__any_on+0x34>
 8017ecc:	dd0b      	ble.n	8017ee6 <__any_on+0x28>
 8017ece:	201f      	movs	r0, #31
 8017ed0:	4001      	ands	r1, r0
 8017ed2:	d008      	beq.n	8017ee6 <__any_on+0x28>
 8017ed4:	0098      	lsls	r0, r3, #2
 8017ed6:	5884      	ldr	r4, [r0, r2]
 8017ed8:	0020      	movs	r0, r4
 8017eda:	40c8      	lsrs	r0, r1
 8017edc:	4088      	lsls	r0, r1
 8017ede:	0001      	movs	r1, r0
 8017ee0:	2001      	movs	r0, #1
 8017ee2:	428c      	cmp	r4, r1
 8017ee4:	d104      	bne.n	8017ef0 <__any_on+0x32>
 8017ee6:	009b      	lsls	r3, r3, #2
 8017ee8:	18d3      	adds	r3, r2, r3
 8017eea:	4293      	cmp	r3, r2
 8017eec:	d803      	bhi.n	8017ef6 <__any_on+0x38>
 8017eee:	2000      	movs	r0, #0
 8017ef0:	bd10      	pop	{r4, pc}
 8017ef2:	0003      	movs	r3, r0
 8017ef4:	e7f7      	b.n	8017ee6 <__any_on+0x28>
 8017ef6:	3b04      	subs	r3, #4
 8017ef8:	6819      	ldr	r1, [r3, #0]
 8017efa:	2900      	cmp	r1, #0
 8017efc:	d0f5      	beq.n	8017eea <__any_on+0x2c>
 8017efe:	2001      	movs	r0, #1
 8017f00:	e7f6      	b.n	8017ef0 <__any_on+0x32>
	...

08017f04 <frexp>:
 8017f04:	b570      	push	{r4, r5, r6, lr}
 8017f06:	0014      	movs	r4, r2
 8017f08:	2500      	movs	r5, #0
 8017f0a:	6025      	str	r5, [r4, #0]
 8017f0c:	4d10      	ldr	r5, [pc, #64]	; (8017f50 <frexp+0x4c>)
 8017f0e:	004b      	lsls	r3, r1, #1
 8017f10:	000a      	movs	r2, r1
 8017f12:	085b      	lsrs	r3, r3, #1
 8017f14:	42ab      	cmp	r3, r5
 8017f16:	dc1a      	bgt.n	8017f4e <frexp+0x4a>
 8017f18:	001d      	movs	r5, r3
 8017f1a:	4305      	orrs	r5, r0
 8017f1c:	d017      	beq.n	8017f4e <frexp+0x4a>
 8017f1e:	4d0d      	ldr	r5, [pc, #52]	; (8017f54 <frexp+0x50>)
 8017f20:	42ab      	cmp	r3, r5
 8017f22:	dc09      	bgt.n	8017f38 <frexp+0x34>
 8017f24:	2200      	movs	r2, #0
 8017f26:	4b0c      	ldr	r3, [pc, #48]	; (8017f58 <frexp+0x54>)
 8017f28:	f7ea f896 	bl	8002058 <__aeabi_dmul>
 8017f2c:	2536      	movs	r5, #54	; 0x36
 8017f2e:	000a      	movs	r2, r1
 8017f30:	004b      	lsls	r3, r1, #1
 8017f32:	426d      	negs	r5, r5
 8017f34:	085b      	lsrs	r3, r3, #1
 8017f36:	6025      	str	r5, [r4, #0]
 8017f38:	4d08      	ldr	r5, [pc, #32]	; (8017f5c <frexp+0x58>)
 8017f3a:	151b      	asrs	r3, r3, #20
 8017f3c:	195b      	adds	r3, r3, r5
 8017f3e:	6825      	ldr	r5, [r4, #0]
 8017f40:	18eb      	adds	r3, r5, r3
 8017f42:	6023      	str	r3, [r4, #0]
 8017f44:	4b06      	ldr	r3, [pc, #24]	; (8017f60 <frexp+0x5c>)
 8017f46:	401a      	ands	r2, r3
 8017f48:	4b06      	ldr	r3, [pc, #24]	; (8017f64 <frexp+0x60>)
 8017f4a:	4313      	orrs	r3, r2
 8017f4c:	0019      	movs	r1, r3
 8017f4e:	bd70      	pop	{r4, r5, r6, pc}
 8017f50:	7fefffff 	.word	0x7fefffff
 8017f54:	000fffff 	.word	0x000fffff
 8017f58:	43500000 	.word	0x43500000
 8017f5c:	fffffc02 	.word	0xfffffc02
 8017f60:	800fffff 	.word	0x800fffff
 8017f64:	3fe00000 	.word	0x3fe00000

08017f68 <__ssprint_r>:
 8017f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f6a:	6893      	ldr	r3, [r2, #8]
 8017f6c:	b087      	sub	sp, #28
 8017f6e:	9002      	str	r0, [sp, #8]
 8017f70:	000c      	movs	r4, r1
 8017f72:	0016      	movs	r6, r2
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d063      	beq.n	8018040 <__ssprint_r+0xd8>
 8017f78:	6813      	ldr	r3, [r2, #0]
 8017f7a:	9303      	str	r3, [sp, #12]
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	001f      	movs	r7, r3
 8017f80:	9305      	str	r3, [sp, #20]
 8017f82:	2f00      	cmp	r7, #0
 8017f84:	d02e      	beq.n	8017fe4 <__ssprint_r+0x7c>
 8017f86:	68a5      	ldr	r5, [r4, #8]
 8017f88:	42af      	cmp	r7, r5
 8017f8a:	d347      	bcc.n	801801c <__ssprint_r+0xb4>
 8017f8c:	2390      	movs	r3, #144	; 0x90
 8017f8e:	89a2      	ldrh	r2, [r4, #12]
 8017f90:	00db      	lsls	r3, r3, #3
 8017f92:	421a      	tst	r2, r3
 8017f94:	d042      	beq.n	801801c <__ssprint_r+0xb4>
 8017f96:	2003      	movs	r0, #3
 8017f98:	6921      	ldr	r1, [r4, #16]
 8017f9a:	6823      	ldr	r3, [r4, #0]
 8017f9c:	1a5b      	subs	r3, r3, r1
 8017f9e:	9304      	str	r3, [sp, #16]
 8017fa0:	6963      	ldr	r3, [r4, #20]
 8017fa2:	4343      	muls	r3, r0
 8017fa4:	0fd8      	lsrs	r0, r3, #31
 8017fa6:	18c3      	adds	r3, r0, r3
 8017fa8:	105b      	asrs	r3, r3, #1
 8017faa:	9301      	str	r3, [sp, #4]
 8017fac:	9b04      	ldr	r3, [sp, #16]
 8017fae:	9801      	ldr	r0, [sp, #4]
 8017fb0:	3301      	adds	r3, #1
 8017fb2:	19db      	adds	r3, r3, r7
 8017fb4:	4283      	cmp	r3, r0
 8017fb6:	d900      	bls.n	8017fba <__ssprint_r+0x52>
 8017fb8:	9301      	str	r3, [sp, #4]
 8017fba:	0553      	lsls	r3, r2, #21
 8017fbc:	d544      	bpl.n	8018048 <__ssprint_r+0xe0>
 8017fbe:	9901      	ldr	r1, [sp, #4]
 8017fc0:	9802      	ldr	r0, [sp, #8]
 8017fc2:	f7fb fab7 	bl	8013534 <_malloc_r>
 8017fc6:	1e05      	subs	r5, r0, #0
 8017fc8:	d114      	bne.n	8017ff4 <__ssprint_r+0x8c>
 8017fca:	230c      	movs	r3, #12
 8017fcc:	9a02      	ldr	r2, [sp, #8]
 8017fce:	2001      	movs	r0, #1
 8017fd0:	6013      	str	r3, [r2, #0]
 8017fd2:	2340      	movs	r3, #64	; 0x40
 8017fd4:	89a2      	ldrh	r2, [r4, #12]
 8017fd6:	4240      	negs	r0, r0
 8017fd8:	4313      	orrs	r3, r2
 8017fda:	81a3      	strh	r3, [r4, #12]
 8017fdc:	2300      	movs	r3, #0
 8017fde:	60b3      	str	r3, [r6, #8]
 8017fe0:	6073      	str	r3, [r6, #4]
 8017fe2:	e02f      	b.n	8018044 <__ssprint_r+0xdc>
 8017fe4:	9b03      	ldr	r3, [sp, #12]
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	9305      	str	r3, [sp, #20]
 8017fea:	9b03      	ldr	r3, [sp, #12]
 8017fec:	685f      	ldr	r7, [r3, #4]
 8017fee:	3308      	adds	r3, #8
 8017ff0:	9303      	str	r3, [sp, #12]
 8017ff2:	e7c6      	b.n	8017f82 <__ssprint_r+0x1a>
 8017ff4:	9a04      	ldr	r2, [sp, #16]
 8017ff6:	6921      	ldr	r1, [r4, #16]
 8017ff8:	f7fb fcd5 	bl	80139a6 <memcpy>
 8017ffc:	89a3      	ldrh	r3, [r4, #12]
 8017ffe:	4a18      	ldr	r2, [pc, #96]	; (8018060 <__ssprint_r+0xf8>)
 8018000:	401a      	ands	r2, r3
 8018002:	2380      	movs	r3, #128	; 0x80
 8018004:	4313      	orrs	r3, r2
 8018006:	81a3      	strh	r3, [r4, #12]
 8018008:	9b04      	ldr	r3, [sp, #16]
 801800a:	6125      	str	r5, [r4, #16]
 801800c:	18ed      	adds	r5, r5, r3
 801800e:	6025      	str	r5, [r4, #0]
 8018010:	003d      	movs	r5, r7
 8018012:	9b01      	ldr	r3, [sp, #4]
 8018014:	9a04      	ldr	r2, [sp, #16]
 8018016:	6163      	str	r3, [r4, #20]
 8018018:	1a9b      	subs	r3, r3, r2
 801801a:	60a3      	str	r3, [r4, #8]
 801801c:	42bd      	cmp	r5, r7
 801801e:	d900      	bls.n	8018022 <__ssprint_r+0xba>
 8018020:	003d      	movs	r5, r7
 8018022:	002a      	movs	r2, r5
 8018024:	9905      	ldr	r1, [sp, #20]
 8018026:	6820      	ldr	r0, [r4, #0]
 8018028:	f7ff fb91 	bl	801774e <memmove>
 801802c:	68a3      	ldr	r3, [r4, #8]
 801802e:	1b5b      	subs	r3, r3, r5
 8018030:	60a3      	str	r3, [r4, #8]
 8018032:	6823      	ldr	r3, [r4, #0]
 8018034:	195d      	adds	r5, r3, r5
 8018036:	68b3      	ldr	r3, [r6, #8]
 8018038:	6025      	str	r5, [r4, #0]
 801803a:	1bdb      	subs	r3, r3, r7
 801803c:	60b3      	str	r3, [r6, #8]
 801803e:	d1d1      	bne.n	8017fe4 <__ssprint_r+0x7c>
 8018040:	2000      	movs	r0, #0
 8018042:	6070      	str	r0, [r6, #4]
 8018044:	b007      	add	sp, #28
 8018046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018048:	9a01      	ldr	r2, [sp, #4]
 801804a:	9802      	ldr	r0, [sp, #8]
 801804c:	f7fb fcf0 	bl	8013a30 <_realloc_r>
 8018050:	1e05      	subs	r5, r0, #0
 8018052:	d1d9      	bne.n	8018008 <__ssprint_r+0xa0>
 8018054:	6921      	ldr	r1, [r4, #16]
 8018056:	9802      	ldr	r0, [sp, #8]
 8018058:	f7fe ff78 	bl	8016f4c <_free_r>
 801805c:	e7b5      	b.n	8017fca <__ssprint_r+0x62>
 801805e:	46c0      	nop			; (mov r8, r8)
 8018060:	fffffb7f 	.word	0xfffffb7f

08018064 <__register_exitproc>:
 8018064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018066:	4d29      	ldr	r5, [pc, #164]	; (801810c <__register_exitproc+0xa8>)
 8018068:	0006      	movs	r6, r0
 801806a:	6828      	ldr	r0, [r5, #0]
 801806c:	9301      	str	r3, [sp, #4]
 801806e:	9100      	str	r1, [sp, #0]
 8018070:	0017      	movs	r7, r2
 8018072:	f7ff fb5f 	bl	8017734 <__retarget_lock_acquire_recursive>
 8018076:	4b26      	ldr	r3, [pc, #152]	; (8018110 <__register_exitproc+0xac>)
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	001c      	movs	r4, r3
 801807c:	34fc      	adds	r4, #252	; 0xfc
 801807e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018080:	2800      	cmp	r0, #0
 8018082:	d103      	bne.n	801808c <__register_exitproc+0x28>
 8018084:	334d      	adds	r3, #77	; 0x4d
 8018086:	33ff      	adds	r3, #255	; 0xff
 8018088:	0018      	movs	r0, r3
 801808a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801808c:	6843      	ldr	r3, [r0, #4]
 801808e:	2b1f      	cmp	r3, #31
 8018090:	dd18      	ble.n	80180c4 <__register_exitproc+0x60>
 8018092:	4b20      	ldr	r3, [pc, #128]	; (8018114 <__register_exitproc+0xb0>)
 8018094:	2b00      	cmp	r3, #0
 8018096:	d105      	bne.n	80180a4 <__register_exitproc+0x40>
 8018098:	6828      	ldr	r0, [r5, #0]
 801809a:	f7ff fb4c 	bl	8017736 <__retarget_lock_release_recursive>
 801809e:	2001      	movs	r0, #1
 80180a0:	4240      	negs	r0, r0
 80180a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80180a4:	20c8      	movs	r0, #200	; 0xc8
 80180a6:	0040      	lsls	r0, r0, #1
 80180a8:	f7fb fa30 	bl	801350c <malloc>
 80180ac:	2800      	cmp	r0, #0
 80180ae:	d0f3      	beq.n	8018098 <__register_exitproc+0x34>
 80180b0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80180b2:	2300      	movs	r3, #0
 80180b4:	6002      	str	r2, [r0, #0]
 80180b6:	22c4      	movs	r2, #196	; 0xc4
 80180b8:	0052      	lsls	r2, r2, #1
 80180ba:	6043      	str	r3, [r0, #4]
 80180bc:	64e0      	str	r0, [r4, #76]	; 0x4c
 80180be:	5083      	str	r3, [r0, r2]
 80180c0:	3204      	adds	r2, #4
 80180c2:	5083      	str	r3, [r0, r2]
 80180c4:	6843      	ldr	r3, [r0, #4]
 80180c6:	2e00      	cmp	r6, #0
 80180c8:	d014      	beq.n	80180f4 <__register_exitproc+0x90>
 80180ca:	009a      	lsls	r2, r3, #2
 80180cc:	1882      	adds	r2, r0, r2
 80180ce:	0011      	movs	r1, r2
 80180d0:	3188      	adds	r1, #136	; 0x88
 80180d2:	600f      	str	r7, [r1, #0]
 80180d4:	2101      	movs	r1, #1
 80180d6:	0004      	movs	r4, r0
 80180d8:	4099      	lsls	r1, r3
 80180da:	3485      	adds	r4, #133	; 0x85
 80180dc:	34ff      	adds	r4, #255	; 0xff
 80180de:	6865      	ldr	r5, [r4, #4]
 80180e0:	32fc      	adds	r2, #252	; 0xfc
 80180e2:	430d      	orrs	r5, r1
 80180e4:	6065      	str	r5, [r4, #4]
 80180e6:	9d01      	ldr	r5, [sp, #4]
 80180e8:	60d5      	str	r5, [r2, #12]
 80180ea:	2e02      	cmp	r6, #2
 80180ec:	d102      	bne.n	80180f4 <__register_exitproc+0x90>
 80180ee:	68a2      	ldr	r2, [r4, #8]
 80180f0:	4311      	orrs	r1, r2
 80180f2:	60a1      	str	r1, [r4, #8]
 80180f4:	1c5a      	adds	r2, r3, #1
 80180f6:	6042      	str	r2, [r0, #4]
 80180f8:	3302      	adds	r3, #2
 80180fa:	9a00      	ldr	r2, [sp, #0]
 80180fc:	009b      	lsls	r3, r3, #2
 80180fe:	501a      	str	r2, [r3, r0]
 8018100:	4b02      	ldr	r3, [pc, #8]	; (801810c <__register_exitproc+0xa8>)
 8018102:	6818      	ldr	r0, [r3, #0]
 8018104:	f7ff fb17 	bl	8017736 <__retarget_lock_release_recursive>
 8018108:	2000      	movs	r0, #0
 801810a:	e7ca      	b.n	80180a2 <__register_exitproc+0x3e>
 801810c:	20000a84 	.word	0x20000a84
 8018110:	0801b8a0 	.word	0x0801b8a0
 8018114:	0801350d 	.word	0x0801350d

08018118 <_sbrk>:
 8018118:	4b05      	ldr	r3, [pc, #20]	; (8018130 <_sbrk+0x18>)
 801811a:	0002      	movs	r2, r0
 801811c:	6819      	ldr	r1, [r3, #0]
 801811e:	2900      	cmp	r1, #0
 8018120:	d101      	bne.n	8018126 <_sbrk+0xe>
 8018122:	4904      	ldr	r1, [pc, #16]	; (8018134 <_sbrk+0x1c>)
 8018124:	6019      	str	r1, [r3, #0]
 8018126:	6818      	ldr	r0, [r3, #0]
 8018128:	1882      	adds	r2, r0, r2
 801812a:	601a      	str	r2, [r3, #0]
 801812c:	4770      	bx	lr
 801812e:	46c0      	nop			; (mov r8, r8)
 8018130:	200067f4 	.word	0x200067f4
 8018134:	20006de0 	.word	0x20006de0

08018138 <_init>:
 8018138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801813a:	46c0      	nop			; (mov r8, r8)
 801813c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801813e:	bc08      	pop	{r3}
 8018140:	469e      	mov	lr, r3
 8018142:	4770      	bx	lr

08018144 <_fini>:
 8018144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018146:	46c0      	nop			; (mov r8, r8)
 8018148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801814a:	bc08      	pop	{r3}
 801814c:	469e      	mov	lr, r3
 801814e:	4770      	bx	lr
